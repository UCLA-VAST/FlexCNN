/**
 *  This file is automatically generated by PolySA CodeGen.
 *  Version: 1.0
 *  Authos: Jie Wang
 */

#include "common_header_U1.h"

void U1_PE_MAC(
  U1_Data0SIMDType op0,
  U1_Data1SIMDType op1,
  U1_data_t2* op2,
  bool init
){
#pragma HLS INLINE
#pragma HLS DATA_PACK variable=op0
#pragma HLS DATA_PACK variable=op1
  ap_uint<256> op0_data = op0;
  ap_uint<256> op1_data = op1;

  float op0_u[U1_SIMD_FACTOR];
#pragma HLS ARRAY_PARTITION variable=op0_u complete
  float op1_u[U1_SIMD_FACTOR];
#pragma HLS ARRAY_PARTITION variable=op1_u complete

  for (int i = 0; i < U1_SIMD_FACTOR; i++){
#pragma HLS UNROLL
    ap_uint<U1_DATA0_WIDTH> sel0 = op0_data(U1_DATA0_WIDTH-1, 0);
    op0_u[i] = Reinterpret<U1_data_t0>(sel0);
    op0_data = op0_data >> U1_DATA0_WIDTH;
    ap_uint<U1_DATA1_WIDTH> sel1 = op1_data(U1_DATA1_WIDTH-1, 0);
    op1_u[i] = Reinterpret<U1_data_t1>(sel1);
    op1_data = op1_data >> U1_DATA1_WIDTH;
  }

  U1_data_t2 sum = (init == 1)? (U1_data_t2) 0: *op2;

  U1_data_t2 mult0 = op0_u[0] * op1_u[0];
  U1_data_t2 mult1 = op0_u[1] * op1_u[1];
  U1_data_t2 mult2 = op0_u[2] * op1_u[2];
  U1_data_t2 mult3 = op0_u[3] * op1_u[3];
  U1_data_t2 mult4 = op0_u[4] * op1_u[4];
  U1_data_t2 mult5 = op0_u[5] * op1_u[5];
  U1_data_t2 mult6 = op0_u[6] * op1_u[6];
  U1_data_t2 mult7 = op0_u[7] * op1_u[7];

  U1_data_t2 sum2_0 = mult0 + mult1;
  U1_data_t2 sum2_1 = mult2 + mult3;
  U1_data_t2 sum2_2 = mult4 + mult5;
  U1_data_t2 sum2_3 = mult6 + mult7;

  U1_data_t2 sum1_0 = sum2_0 + sum2_1;
  U1_data_t2 sum1_1 = sum2_2 + sum2_3;

  U1_data_t2 sum0_0 = sum1_0 + sum1_1;

  sum += sum0_0;

  *op2 = sum;
}

void U1_op0_transfer(
  tapa::istream<U1_Data0PEChannelType> &fifo0_in,
  tapa::ostream<U1_Data0PEChannelType> &fifo0_out,
  tapa::ostream<U1_Data0PEChannelType> &fifo0_local,
  tapa::istream<uint> &fifo_config_in,
  tapa::ostream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo0_in
#pragma HLS DATA_PACK variable=fifo0_out
#pragma HLS DATA_PACK variable=fifo0_local
#pragma HLS INLINE off
  bool inst_done = 0;
  uint inst = 0;
  int inst_count = fifo_config_in.read();
  fifo_config_out.write(inst_count);
  while(!inst_done){
  uint CONV_EN = fifo_config_in.read();
  fifo_config_out.write(CONV_EN);
  if(CONV_EN){
  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S_H);
  fifo_config_out.write(LAYER_FILTER_S_W);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);

  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0_H);
  fifo_config_out.write(FILTER_D0_W);
  fifo_config_out.write(FILTER_D1_H);	
  fifo_config_out.write(FILTER_D1_W);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH);
  fifo_config_out.write(KW);
  ap_uint<3> layer_iter = 0;
  bool done1 = 0;
  while(!done1){
    if (layer_iter > 0){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S_H);
      fifo_config_out.write(LAYER_FILTER_S_W);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);
      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0_H);
      fifo_config_out.write(FILTER_D0_W);
      fifo_config_out.write(FILTER_D1_H);	
      fifo_config_out.write(FILTER_D1_W);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH);
      fifo_config_out.write(KW);
      }

    ap_uint<37> task_num = 0;
    ap_uint<13> la_counter = 0;
    ap_uint<13> local_reg_id = 0;
    bool done2 = 0;
    while(!done2){
#pragma HLS PIPELINE II=1
      U1_Data0PEChannelType fifo0_in_data;
      fifo0_in_data = fifo0_in.read();
      fifo0_out.write(fifo0_in_data);
      fifo0_local.write(fifo0_in_data);
      local_reg_id++;
      if (local_reg_id == LAYER_LOCAL_REG_NUM){
        local_reg_id = 0;
        la_counter++;
        if (la_counter == LAYER_LOCAL_ACCUM_NUM){
          la_counter = 0;
          task_num++;
          if (task_num == LAYER_TASK_NUM1){
            task_num = 0;
            done2 = 1;
          }
        }
      }
    }
    layer_iter++;
    if (layer_iter == LAYER_BATCH){
      layer_iter = 0;
      done1 = 1;
    }
  }
  }
    inst++;
    if(inst == inst_count){
      inst_done = 1;
    }
  }
}

void U1_op0_transfer_wrapper(
  tapa::istream<U1_Data0PEChannelType> &fifo0_in,
  tapa::ostream<U1_Data0PEChannelType> &fifo0_out,
  tapa::ostream<U1_Data0PEChannelType> &fifo0_local,
  tapa::istream<uint> &fifo_config_in,
  tapa::ostream<uint> &fifo_config_out
){
  U1_op0_transfer(
    fifo0_in,
    fifo0_out,
    fifo0_local,
    fifo_config_in,
    fifo_config_out
  );
}

void U1_op0_transfer_last(
  tapa::istream<U1_Data0PEChannelType> &fifo0_in,
  tapa::ostream<U1_Data0PEChannelType> &fifo0_local,
  tapa::istream<uint> &fifo_config_in,
  tapa::ostream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo0_in
#pragma HLS DATA_PACK variable=fifo0_local
#pragma HLS INLINE off

  bool inst_done = 0;
  uint inst = 0;
  int inst_count = fifo_config_in.read();
  fifo_config_out.write(inst_count);
  while(!inst_done){
  uint CONV_EN = fifo_config_in.read();
  fifo_config_out.write(CONV_EN);
  if(CONV_EN){
  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S_H);
  fifo_config_out.write(LAYER_FILTER_S_W);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);

  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0_H);
  fifo_config_out.write(FILTER_D0_W);
  fifo_config_out.write(FILTER_D1_H);	
  fifo_config_out.write(FILTER_D1_W);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH);
  fifo_config_out.write(KW);
  ap_uint<3> layer_iter = 0;
  bool done1 = 0;
  while(!done1){
    if (layer_iter > 0){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S_H);
      fifo_config_out.write(LAYER_FILTER_S_W);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);
      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0_H);
      fifo_config_out.write(FILTER_D0_W);
      fifo_config_out.write(FILTER_D1_H);	
      fifo_config_out.write(FILTER_D1_W);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH);
      fifo_config_out.write(KW);
    }

    ap_uint<37> task_num = 0;
    ap_uint<13> la_counter = 0;
    ap_uint<13> local_reg_id = 0;
    bool done2 = 0;
    while(!done2){
#pragma HLS PIPELINE II=1
      U1_Data0PEChannelType fifo0_in_data;
      fifo0_in_data = fifo0_in.read();
      fifo0_local.write(fifo0_in_data);
      local_reg_id++;
      if (local_reg_id == LAYER_LOCAL_REG_NUM){
        local_reg_id = 0;
        la_counter++;
        if (la_counter == LAYER_LOCAL_ACCUM_NUM){
          la_counter = 0;
          task_num++;
          if (task_num == LAYER_TASK_NUM1){
            task_num = 0;
            done2 = 1;
          }
        }
      }
    }
    layer_iter++;
    if (layer_iter == LAYER_BATCH){
      layer_iter = 0;
      done1 = 1;
    }
  }
  }
    inst++;
    if(inst == inst_count){
      inst_done = 1;
    }
  }
}

void U1_op0_transfer_last_wrapper(
  tapa::istream<U1_Data0PEChannelType> &fifo0_in,
  tapa::ostream<U1_Data0PEChannelType> &fifo0_local,
  tapa::istream<uint> &fifo_config_in,
  tapa::ostream<uint> &fifo_config_out
){
  U1_op0_transfer_last(
    fifo0_in,
    fifo0_local,
    fifo_config_in,
    fifo_config_out
  );
}

void U1_op1_transfer(
  tapa::istream<U1_Data1PEChannelType> &fifo1_in,
  tapa::ostream<U1_Data1PEChannelType> &fifo1_out,
  tapa::ostream<U1_Data1PEChannelType> &fifo1_local,
  tapa::istream<uint> &fifo_config_in,
  tapa::ostream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo1_in
#pragma HLS DATA_PACK variable=fifo1_out
#pragma HLS DATA_PACK variable=fifo1_local
#pragma HLS INLINE off
  bool inst_done = 0;
  uint inst = 0;
  int inst_count = fifo_config_in.read();
  fifo_config_out.write(inst_count);
  while(!inst_done){
  uint CONV_EN = fifo_config_in.read();
  fifo_config_out.write(CONV_EN);
  if(CONV_EN){
  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S_H);
  fifo_config_out.write(LAYER_FILTER_S_W);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);

  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0_H);
  fifo_config_out.write(FILTER_D0_W);
  fifo_config_out.write(FILTER_D1_H);	
  fifo_config_out.write(FILTER_D1_W);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH);
  fifo_config_out.write(KW);
  ap_uint<3> layer_iter = 0;
  bool done1 = 0;
  while(!done1){
    if (layer_iter > 0){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S_H);
      fifo_config_out.write(LAYER_FILTER_S_W);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);
      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0_H);
      fifo_config_out.write(FILTER_D0_W);
      fifo_config_out.write(FILTER_D1_H);	
      fifo_config_out.write(FILTER_D1_W);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH);
      fifo_config_out.write(KW);
      }

    ap_uint<37> task_num = 0;
    ap_uint<13> la_counter = 0;
    ap_uint<13> local_reg_id = 0;
    bool done2 = 0;
    while(!done2){
#pragma HLS PIPELINE II=1
      U1_Data1PEChannelType fifo1_in_data;
      fifo1_in_data = fifo1_in.read();
      fifo1_out.write(fifo1_in_data);
      fifo1_local.write(fifo1_in_data);
      local_reg_id++;
      if (local_reg_id == LAYER_LOCAL_REG_NUM){
        local_reg_id = 0;
        la_counter++;
        if (la_counter == LAYER_LOCAL_ACCUM_NUM){
          la_counter = 0;
          task_num++;
          if (task_num == LAYER_TASK_NUM1){
            task_num = 0;
            done2 = 1;
          }
        }
      }
    }
    layer_iter++;
    if (layer_iter == LAYER_BATCH){
      layer_iter = 0;
      done1 = 1;
    }
  }
  }
    inst++;
    if(inst == inst_count){
      inst_done = 1;
    }
  }
}

void U1_op1_transfer_wrapper(
  tapa::istream<U1_Data1PEChannelType> &fifo1_in,
  tapa::ostream<U1_Data1PEChannelType> &fifo1_out,
  tapa::ostream<U1_Data1PEChannelType> &fifo1_local,
  tapa::istream<uint> &fifo_config_in,
  tapa::ostream<uint> &fifo_config_out
){
  U1_op1_transfer(
    fifo1_in,
    fifo1_out,
    fifo1_local,
    fifo_config_in,
    fifo_config_out
  );
}

void U1_op1_transfer_last(
  tapa::istream<U1_Data1PEChannelType> &fifo1_in,
  tapa::ostream<U1_Data1PEChannelType> &fifo1_local,
  tapa::istream<uint> &fifo_config_in,
  tapa::ostream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo1_in
#pragma HLS DATA_PACK variable=fifo1_local
#pragma HLS INLINE off

  bool inst_done = 0;
  uint inst = 0;
  int inst_count = fifo_config_in.read();
  fifo_config_out.write(inst_count);
  while(!inst_done){
  uint CONV_EN = fifo_config_in.read();
  fifo_config_out.write(CONV_EN);
  if(CONV_EN){
  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S_H);
  fifo_config_out.write(LAYER_FILTER_S_W);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);

  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0_H);
  fifo_config_out.write(FILTER_D0_W);
  fifo_config_out.write(FILTER_D1_H);	
  fifo_config_out.write(FILTER_D1_W);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH);
  fifo_config_out.write(KW);
  ap_uint<3> layer_iter = 0;
  bool done1 = 0;
  while(!done1){
    if (layer_iter > 0){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S_H);
      fifo_config_out.write(LAYER_FILTER_S_W);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);
      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0_H);
      fifo_config_out.write(FILTER_D0_W);
      fifo_config_out.write(FILTER_D1_H);	
      fifo_config_out.write(FILTER_D1_W);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH);
      fifo_config_out.write(KW);
    }

    ap_uint<37> task_num = 0;
    ap_uint<13> la_counter = 0;
    ap_uint<13> local_reg_id = 0;
    bool done2 = 0;
    while(!done2){
#pragma HLS PIPELINE II=1
      U1_Data1PEChannelType fifo1_in_data;
      fifo1_in_data = fifo1_in.read();
      fifo1_local.write(fifo1_in_data);
      local_reg_id++;
      if (local_reg_id == LAYER_LOCAL_REG_NUM){
        local_reg_id = 0;
        la_counter++;
        if (la_counter == LAYER_LOCAL_ACCUM_NUM){
          la_counter = 0;
          task_num++;
          if (task_num == LAYER_TASK_NUM1){
            task_num = 0;
            done2 = 1;
          }
        }
      }
    }
    layer_iter++;
    if (layer_iter == LAYER_BATCH){
      layer_iter = 0;
      done1 = 1;
    }
  }
  }
    inst++;
    if(inst == inst_count){
      inst_done = 1;
    }
  }
}

void U1_op1_transfer_last_wrapper(
  tapa::istream<U1_Data1PEChannelType> &fifo1_in,
  tapa::ostream<U1_Data1PEChannelType> &fifo1_local,
  tapa::istream<uint> &fifo_config_in,
  tapa::ostream<uint> &fifo_config_out
){
  U1_op1_transfer_last(
    fifo1_in,
    fifo1_local,
    fifo_config_in,
    fifo_config_out
  );
}

void U1_compute(
  tapa::istream<U1_Data0PEChannelType> &fifo0_local,
  tapa::istream<U1_Data1PEChannelType> &fifo1_local,
  tapa::ostream<U1_Data2PEChannelType> &fifo2_local,
  tapa::istream<uint> &fifo_config_in,
  tapa::ostream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo0_local
#pragma HLS DATA_PACK variable=fifo1_local
#pragma HLS INLINE off

  bool inst_done = 0;
  uint inst = 0;
  int inst_count = fifo_config_in.read();
  fifo_config_out.write(inst_count);
  while(!inst_done){
  uint CONV_EN = fifo_config_in.read();
  fifo_config_out.write(CONV_EN);
  if(CONV_EN){
  U1_data_t2 local_buffer[U1_LOCAL_REG_NUM];

  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  ap_uint<8> in_ch_factor = LAYER_IN_NUM_T/U1_SIMD_FACTOR;

  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S_H);
  fifo_config_out.write(LAYER_FILTER_S_W);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);

  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0_H);
  fifo_config_out.write(FILTER_D0_W);
  fifo_config_out.write(FILTER_D1_H);	
  fifo_config_out.write(FILTER_D1_W);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH);
  fifo_config_out.write(KW);
  ap_uint<3> layer_iter = 0;
  bool done1 = 0;
  int i = 0;
  ap_uint<10> LAYER_LOCAL_ACCUM_NUM_ARR[4] = {
    in_ch_factor*unpack(KH,0)*unpack(KW,0),
    in_ch_factor*unpack(KH,1)*unpack(KW,1),
    in_ch_factor*unpack(KH,2)*unpack(KW,2),
    in_ch_factor*unpack(KH,3)*unpack(KW,3)
  };
  #pragma HLS ARRAY_PARTITION variable=LAYER_LOCAL_ACCUM_NUM_ARR complete
  while(!done1){
    if (layer_iter > 0){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S_H);
      fifo_config_out.write(LAYER_FILTER_S_W);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);
      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0_H);
      fifo_config_out.write(FILTER_D0_W);
      fifo_config_out.write(FILTER_D1_H);	
      fifo_config_out.write(FILTER_D1_W);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH);
      fifo_config_out.write(KW);
    }

    ap_uint<37> task_num = 0;
    ap_uint<13> la_counter = 0;
    ap_uint<13> local_reg_id = 0;
    bool done2 = 0;
    while(!done2){
#pragma HLS PIPELINE II=1
#pragma HLS DEPENDENCE inter false variable=local_buffer
      U1_Data0PEChannelType fifo0_in_data;
      fifo0_in_data = fifo0_local.read();
      U1_Data1PEChannelType fifo1_in_data;
      fifo1_in_data = fifo1_local.read();
      bool init = fifo0_in_data.new_pair;
      bool last = fifo0_in_data.last_pair;
      U1_PE_MAC(fifo0_in_data.data, fifo1_in_data.data, &local_buffer[local_reg_id], (init == 1 && la_counter == 0 && i<K_NUM)? 1:0);
      if (la_counter == LAYER_LOCAL_ACCUM_NUM_ARR[i] - 1 && last){
        fifo2_local.write(U1_Data2PEChannelType(local_buffer[local_reg_id]));
      }
      local_reg_id++;
      if (local_reg_id == LAYER_LOCAL_REG_NUM){
        local_reg_id = 0;
        la_counter++;
        if (la_counter == LAYER_LOCAL_ACCUM_NUM_ARR[i]){
          la_counter = 0;
          i++;
          if (i == K_NUM){
            i = 0;
            local_reg_id = 0;
            task_num++;
            if (task_num == LAYER_TASK_NUM1){
              task_num = 0;
              done2 = 1;
            }
          }
        }
      }
    }
    layer_iter++;
    if (layer_iter == LAYER_BATCH){
      layer_iter = 0;
      done1 = 1;
    }
  }
  }
    inst++;
    if(inst == inst_count){
      inst_done = 1;
    }
  }
}

void U1_compute_wrapper(
  tapa::istream<U1_Data0PEChannelType> &fifo0_local,
  tapa::istream<U1_Data1PEChannelType> &fifo1_local,
  tapa::ostream<U1_Data2PEChannelType> &fifo2_local,
  tapa::istream<uint> &fifo_config_in,
  tapa::ostream<uint> &fifo_config_out
){
  U1_compute(
    fifo0_local,
    fifo1_local,
    fifo2_local,
    fifo_config_in,
    fifo_config_out
  );
}

void U1_res_transfer(
  tapa::istream<U1_Data2PEChannelType> &fifo2_local,
  tapa::istream<U1_Data2PEChannelType> &fifo2_in,
  tapa::ostream<U1_Data2PEChannelType> &fifo2_out,
  ap_uint<6> pe_row_id,
  ap_uint<7> pe_col_id,
  tapa::istream<uint> &fifo_config_in,
  tapa::ostream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo2_in
#pragma HLS DATA_PACK variable=fifo2_out
#pragma HLS INLINE off

  bool inst_done = 0;
  uint inst = 0;
  int inst_count = fifo_config_in.read();
  fifo_config_out.write(inst_count);
  while(!inst_done){
  uint CONV_EN = fifo_config_in.read();
  fifo_config_out.write(CONV_EN);
  if(CONV_EN){
  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S_H);
  fifo_config_out.write(LAYER_FILTER_S_W);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);

  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0_H);
  fifo_config_out.write(FILTER_D0_W);
  fifo_config_out.write(FILTER_D1_H);	
  fifo_config_out.write(FILTER_D1_W);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH);
  fifo_config_out.write(KW);
  U1_data_t2 local_buffer[U1_TRANSFER_REG_NUM];

  for (ap_uint<3> layer_iter = 0; layer_iter < LAYER_BATCH; layer_iter++){
    if (layer_iter > 0){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S_H);
      fifo_config_out.write(LAYER_FILTER_S_W);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);
      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0_H);
      fifo_config_out.write(FILTER_D0_W);
      fifo_config_out.write(FILTER_D1_H);	
      fifo_config_out.write(FILTER_D1_W);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH);
      fifo_config_out.write(KW);
    }

    LAYER_LOCAL_REG_NUM = K_NUM*LAYER_LOCAL_REG_NUM;
    for (ap_uint<28> task_num = 0; task_num < LAYER_TASK_NUM2; task_num++)
    {
      for (ap_uint<13> local_reg_id = 0; local_reg_id < U1_TRANSFER_REG_NUM; local_reg_id++){
#pragma HLS PIPELINE II=1
        if (local_reg_id < LAYER_LOCAL_REG_NUM){
          U1_Data2PEChannelType fifo2_local_data = fifo2_local.read();
          local_buffer[local_reg_id] = fifo2_local_data.data;
        } else {
          break;
        }
      }

      for (int transfer_iter = pe_row_id + 1 - 1; transfer_iter >= 0; transfer_iter--){
        for (ap_uint<13> local_reg_id = 0; local_reg_id < U1_TRANSFER_REG_NUM; local_reg_id++){
#pragma HLS PIPELINE II=1
          if (local_reg_id < LAYER_LOCAL_REG_NUM){
            fifo2_out.write(U1_Data2PEChannelType(local_buffer[local_reg_id]));
            if (transfer_iter > 0){
              U1_Data2PEChannelType fifo2_in_data = fifo2_in.read();
              local_buffer[local_reg_id] = fifo2_in_data.data;
            }
          } else {
            break;
          }
        }
      }
    }
  }
  }
    inst++;
    if(inst == inst_count){
      inst_done = 1;
    }
  }
}

void U1_res_transfer_wrapper(
  tapa::istream<U1_Data2PEChannelType> &fifo2_local,
  tapa::istream<U1_Data2PEChannelType> &fifo2_in,
  tapa::ostream<U1_Data2PEChannelType> &fifo2_out,
  ap_uint<6> pe_row_id,
  ap_uint<7> pe_col_id,
  tapa::istream<uint> &fifo_config_in,
  tapa::ostream<uint> &fifo_config_out
){
  U1_res_transfer(
    fifo2_local,
    fifo2_in,
    fifo2_out,
    pe_row_id,
    pe_col_id,
    fifo_config_in,
    fifo_config_out
  );
}

void U1_res_transfer_last(
  tapa::istream<U1_Data2PEChannelType> &fifo2_local,
  tapa::istream<U1_Data2PEChannelType> &fifo2_in,
  tapa::ostream<U1_Data2PEChannelType> &fifo2_out,
  ap_uint<6> pe_row_id,
  ap_uint<7> pe_col_id,
  tapa::istream<uint> &fifo_config_in
){
#pragma HLS DATA_PACK variable=fifo2_in
#pragma HLS DATA_PACK variable=fifo2_out
#pragma HLS INLINE off

  bool inst_done = 0;
  uint inst = 0;
  int inst_count = fifo_config_in.read();
  while(!inst_done){
  uint CONV_EN = fifo_config_in.read();
  if(CONV_EN){
  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  U1_data_t2 local_buffer[U1_TRANSFER_REG_NUM];

  for (ap_uint<3> layer_iter = 0; layer_iter < LAYER_BATCH; layer_iter++){
    if (layer_iter > 0){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
    }

    LAYER_LOCAL_REG_NUM = K_NUM*LAYER_LOCAL_REG_NUM;
    for (ap_uint<28> task_num = 0; task_num < LAYER_TASK_NUM2; task_num++)
    {
      for (ap_uint<13> local_reg_id = 0; local_reg_id < U1_TRANSFER_REG_NUM; local_reg_id++){
#pragma HLS PIPELINE II=1
        if (local_reg_id < LAYER_LOCAL_REG_NUM){
          U1_Data2PEChannelType fifo2_local_data = fifo2_local.read();
          local_buffer[local_reg_id] = fifo2_local_data.data;
        } else {
          break;
        }
      }

      for (int transfer_iter = pe_row_id + 1 - 1; transfer_iter >= 0; transfer_iter--){
        for (ap_uint<13> local_reg_id = 0; local_reg_id < U1_TRANSFER_REG_NUM; local_reg_id++){
#pragma HLS PIPELINE II=1
          if (local_reg_id < LAYER_LOCAL_REG_NUM){
            fifo2_out.write(U1_Data2PEChannelType(local_buffer[local_reg_id]));
            if (transfer_iter > 0){
              U1_Data2PEChannelType fifo2_in_data = fifo2_in.read();
              local_buffer[local_reg_id] = fifo2_in_data.data;
            }
          } else {
            break;
          }
        }
      }
    }
  }
  }
    inst++;
    if(inst == inst_count){
      inst_done = 1;
    }
  }
}

void U1_res_transfer_first(
  tapa::istream<U1_Data2PEChannelType> &fifo2_local,
  tapa::ostream<U1_Data2PEChannelType> &fifo2_out,
  ap_uint<6> pe_row_id,
  ap_uint<7> pe_col_id,
  tapa::istream<uint> &fifo_config_in,
  tapa::ostream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo2_out
#pragma HLS INLINE off

  bool inst_done = 0;
  uint inst = 0;
  int inst_count = fifo_config_in.read();
  fifo_config_out.write(inst_count);
  while(!inst_done){
  uint CONV_EN = fifo_config_in.read();
  fifo_config_out.write(CONV_EN);
  if(CONV_EN){
  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S_H);
  fifo_config_out.write(LAYER_FILTER_S_W);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);

  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0_H);
  fifo_config_out.write(FILTER_D0_W);
  fifo_config_out.write(FILTER_D1_H);	
  fifo_config_out.write(FILTER_D1_W);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH);
  fifo_config_out.write(KW);
  U1_data_t2 local_buffer[U1_TRANSFER_REG_NUM];

  for (ap_uint<3> layer_iter = 0; layer_iter < LAYER_BATCH; layer_iter++){
    if (layer_iter > 0){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S_H);
      fifo_config_out.write(LAYER_FILTER_S_W);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);
      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0_H);
      fifo_config_out.write(FILTER_D0_W);
      fifo_config_out.write(FILTER_D1_H);	
      fifo_config_out.write(FILTER_D1_W);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH);
      fifo_config_out.write(KW);
    }

    LAYER_LOCAL_REG_NUM = K_NUM*LAYER_LOCAL_REG_NUM;
    for (ap_uint<28> task_num = 0; task_num < LAYER_TASK_NUM2; task_num++)
    {
      for (ap_uint<13> local_reg_id = 0; local_reg_id < U1_TRANSFER_REG_NUM; local_reg_id++){
#pragma HLS PIPELINE II=1
        if (local_reg_id < LAYER_LOCAL_REG_NUM){
          U1_Data2PEChannelType fifo2_local_data = fifo2_local.read();
          local_buffer[local_reg_id] = fifo2_local_data.data;
        } else {
          break;
        }
      }

      for (int transfer_iter = pe_row_id + 1 - 1; transfer_iter >= 0; transfer_iter--){
        for (ap_uint<13> local_reg_id = 0; local_reg_id < U1_TRANSFER_REG_NUM; local_reg_id++){
#pragma HLS PIPELINE II=1
          if (local_reg_id < LAYER_LOCAL_REG_NUM){
            fifo2_out.write(U1_Data2PEChannelType(local_buffer[local_reg_id]));
          } else {
            break;
          }
        }
      }
    }
  }
  }
    inst++;
    if(inst == inst_count){
      inst_done = 1;
    }
  }
}

void U1_res_transfer_first_wrapper(
  tapa::istream<U1_Data2PEChannelType> &fifo2_local,
  tapa::ostream<U1_Data2PEChannelType> &fifo2_out,
  ap_uint<6> pe_row_id,
  ap_uint<7> pe_col_id,
  tapa::istream<uint> &fifo_config_in,
  tapa::ostream<uint> &fifo_config_out
){
  U1_res_transfer_first(
    fifo2_local,
    fifo2_out,
    pe_row_id,
    pe_col_id,
    fifo_config_in,
    fifo_config_out
  );
}

