import warnings
from xml.etree.ElementPath import prepare_descendant
warnings.filterwarnings('ignore')
import numpy as np
import sys
import json
import networkx as nx
from networkx.drawing.nx_pydot import write_dot
##########	#Templates #############
	#1. header
	#2. top
	#3. tb
	#4. PE_MAC
	#5. op_transfer
	#6. compute
	#7. res_transfer
	#8. kernel
	#9. df_read
	#10. df_feed
	#11. df
	#12. dc_read
	#13. dc_write
	#14. dc
	#15. loader
###################################

def cal_aligned_size(s, factor):
	size_aligned = int((s + factor - 1) / factor) * factor
	return int(size_aligned)

def cal_width(range):
	if range > 0:
		width = np.ceil(np.log2(range)) + 3
	else:
		width = 1
	return int(width)

def indent(level):
	return ' ' * 2 * level

def generate_tile_loops(desp):
	var_prefix = 'U%s' %(desp['KERNEL_ID']) + '_'
	loop_level = 0
	code = []
	for loop_iter in desp['ITERATORS']:
		if loop_iter['TILE']['ENABLE'] == 1:
			width = cal_width(loop_iter['BOUND'][1])
			tile_iterator = loop_iter['VARIABLE'] + '_t'
			bound_lower = loop_iter['BOUND'][0]
			bound_upper = loop_iter['BOUND'][1]
			codeline = indent(loop_level) + 'for (ap_uint<' + str(width) + '> ' + tile_iterator + ' = ' + \
					str(bound_lower) + '; ' + tile_iterator + ' < ' + str(bound_upper) + '; ' + \
					tile_iterator + ' += ' + str(loop_iter['TILE']['TILE_FACTOR']) + ')\n'
			code.append(codeline)
			loop_level += 1
	return code

def generate_df_counter_loops(desp, config):
	var_prefix = 'U%s' %(desp['KERNEL_ID']) + '_'
	indent_level = 0
	code = []
	for counter in desp['DF_FEED_COUNTER']:
		var = counter['VARIABLE']
		bound_lower = counter['BOUND'][0]
		bound_upper = counter['BOUND'][1]
		code.append(indent(indent_level) + var + '++;\n')
		code.append(indent(indent_level) + 'if (' + var + ' == ' + str(bound_upper) + '){\n')
		indent_level += 1
		code.append(indent(indent_level) + var + ' = ' + str(bound_lower) + ';\n')

	code.append(indent(indent_level) + 'more_to_feed_to_sys_arr = false;\n')
	for counter in desp['DF_FEED_COUNTER']:
		indent_level -= 1
		code.append(indent(indent_level) + '}\n')

	return code

def generate_dc_counter_loops(desp, config):
	var_prefix = 'U%s' %(desp['KERNEL_ID']) + '_'
	indent_level = 0
	code = []
	for counter in desp['DC_COLLECT_COUNTER']:
		var = counter['VARIABLE']
		bound_lower = counter['BOUND'][0]
		bound_upper = counter['BOUND'][1]
		code.append(indent(indent_level) + var + '++;\n')
		code.append(indent(indent_level) + 'if (' + var + ' == ' + str(bound_upper) + '){\n')
		indent_level += 1
		code.append(indent(indent_level) + var + ' = ' + str(bound_lower) + ';\n')

	code.append(indent(indent_level) + 'more_to_collect_from_sys_arr = false;\n')
	for counter in desp['DC_COLLECT_COUNTER']:
		indent_level -= 1
		code.append(indent(indent_level) + '}\n')

	return code

def header_include(desp, config):
	code = []
	code.append('#include "common_header_U%s.h"\n\n' %(desp['KERNEL_ID']))

	return code

def disclaimer(desp, config):
	code = []
	code.append('/**\n')
	code.append(' *  This file is automatically generated by PolySA CodeGen.\n')
	code.append(' *  Version: 1.0\n')
	code.append(' *  Authos: Jie Wang\n')
	code.append(' */\n')
	code.append('\n')

	return code

#	#Header
def header(desp, config):
	code = []
	var_prefix = 'U%s' %(desp['KERNEL_ID']) + '_'

	# code.extend(print_disclaimer())
		#headers
	code.append('// vendor headers\n')
	# code.append('#include "hls_stream.h"\n')
	code.append('#include <tapa.h>\n')
	code.append('#include "ap_int.h"\n')
	code.append('#include "ap_fixed.h"\n\n')
	code.append('// common headers\n')
	code.append('#include <stdio.h>\n')
	code.append('#include <string.h>\n')
		#code.append('#include "debug.h"\n\n')

	code.append('using namespace hls;\n\n')

	code.append('#define cal_aligned_size(x,y) ((x+y-1)/y*y)\n')
	code.append('#define unpack(num, i) num(((4-i)*8)-1, ((4-i)*8)-8)\n\n')

	code.append('typedef ap_uint<192> %sConfigInst;\n\n' % (var_prefix))

	code.append('// Data types\n')
	idx = 0
	for data_type in desp['DATA_TYPE']:
		code.append('typedef ' + data_type + ' U%s' %(desp['KERNEL_ID']) + '_data_t' + str(idx) + ';\n')
		code.append('typedef ap_uint<' + str(desp['BUS_WIDTH'][idx]) + '> U%s' %(desp['KERNEL_ID']) + '_bus_t' + str(idx) + ';\n')
		code.append('#define U%s' %(desp['KERNEL_ID']) + '_DATA' + str(idx) + '_WIDTH ' + str(desp['DATA_WIDTH'][idx]) + '\n')
		code.append('#define U%s' %(desp['KERNEL_ID']) + '_DATA' + str(idx) + '_PACK_FACTOR (' + str(desp['BUS_WIDTH'][idx]) + '/U%s'%(desp['KERNEL_ID']) + '_DATA' + str(idx) + '_WIDTH)\n')
		idx += 1
	code.append('typedef unsigned int uint;\n')
	code.append('union ufloat{\n')
	code.append(' ' * 2 + 'float f;\n')
	code.append(' ' * 2 + 'unsigned int u;\n')
	code.append('};\n\n')

		#code.append('// Macros\n')
		#for param in desp['PARAMETERS']:
		#  code.append('#define U%s' %(desp['KERNEL_ID']) + '_' + param + ' ' + str(desp['PARAMETERS'][param]) + '\n')
		#idx = 0
		#for op_name in desp['OP_NAME']:
		#  code.append('#define U%s' %(desp['KERNEL_ID']) + '_DATA' + str(idx) + '_SIZE ' + str(desp['ARRAY_SIZE'][idx]) + '\n')
		#  code.append('#define U%s' %(desp['KERNEL_ID']) + '_DATA' + str(idx) + '_SIZE_ALIGNED (cal_aligned_size(' + str(desp['ARRAY_SIZE'][idx]) + ', U%s' %(desp['KERNEL_ID']) + '_DATA' + str(idx) + '_PACK_FACTOR))\n')
		#  idx += 1
		#for res_name in desp['RES_NAME']:
		#  code.append('#define U%s' %(desp['KERNEL_ID']) + '_DATA' + str(idx) + '_SIZE ' + str(desp['ARRAY_SIZE'][idx]) + '\n')
		#  code.append('#define U%s' %(desp['KERNEL_ID']) + '_DATA' + str(idx) + '_SIZE_ALIGNED (cal_aligned_size(' + str(desp['ARRAY_SIZE'][idx]) + ', U%s' %(desp['KERNEL_ID']) + '_DATA' + str(idx) + '_PACK_FACTOR))\n')
		#  idx += 1

		#code.append('\n')

		#code.append('#define U%s' %(desp['KERNEL_ID']) + '_ROW_IL_FACTOR ' + str(desp['ROW_IL_FACTOR']) + '\n')
		#code.append('#define U%s' %(desp['KERNEL_ID']) + '_COL_IL_FACTOR ' + str(desp['COL_IL_FACTOR']) + '\n')
		#code.append('#define U%s' %(desp['KERNEL_ID']) + '_SA_ROWS ' + str(desp['SA_ROWS']) + '\n')
		#code.append('#define U%s' %(desp['KERNEL_ID']) + '_SA_COLS ' + str(desp['SA_COLS']) + '\n')
		#code.append('#define U%s' %(desp['KERNEL_ID']) + '_LOCAL_REG_NUM ' + str(desp['LOCAL_REG_NUM']) + '\n')
		#code.append('#define U%s' %(desp['KERNEL_ID']) + '_LOCAL_ACCUM_NUM ' + str(desp['LOCAL_ACCUM_NUM']) + '\n')

		#code.append('#define U%s' %(desp['KERNEL_ID']) + '_SIMD_FACTOR ' + str(desp['SIMD_FACTOR']) + '\n')
		#idx = 0
		#for op_name in desp['OP_NAME']:
		#  code.append('#define U%s' %(desp['KERNEL_ID']) + '_DATA' + str(idx) + '_FC_SIMD_FACTOR ' + str(desp['FC_SIMD_FACTOR'][idx]) + '\n')
		#  code.append('#define U%s' %(desp['KERNEL_ID']) + '_DATA' + str(idx) + '_FC_GROUP_FACTOR ' + str(desp['FC_GROUP_FACTOR'][idx]) + '\n')
		#  code.append('#define U%s' %(desp['KERNEL_ID']) + '_DATA' + str(idx) + '_FC_SPLIT_FACTOR ' + str(desp['FC_SPLIT_FACTOR'][idx]) + '\n')
		#  idx += 1
		#for res_name in desp['RES_NAME']:
		#  code.append('#define U%s' %(desp['KERNEL_ID']) + '_DATA' + str(idx) + '_FC_SIMD_FACTOR ' + str(desp['FC_SIMD_FACTOR'][idx]) + '\n')
		#  code.append('#define U%s' %(desp['KERNEL_ID']) + '_DATA' + str(idx) + '_FC_GROUP_FACTOR ' + str(desp['FC_GROUP_FACTOR'][idx]) + '\n')
		#  code.append('#define U%s' %(desp['KERNEL_ID']) + '_DATA' + str(idx) + '_FC_SPLIT_FACTOR ' + str(desp['FC_SPLIT_FACTOR'][idx]) + '\n')
		#  idx += 1

		#code.append('\n')
		#idx = 0
		#for op_name in desp['OP_NAME']:
		#  code.append('#define U%s' %(desp['KERNEL_ID']) + '_DATA' + str(idx) + '_BUF_SIZE ' + str(desp['DFC_BUF_SIZE'][idx]) + '\n')
		#  code.append('#define ' + var_prefix + 'DATA' + str(idx) + '_HEAD_BUF_SIZE ' + str(desp['DFC_HEAD_BUF_SIZE'][idx]) + '\n')
		#  idx += 1
		#for res_name in desp['RES_NAME']:
		#  code.append('#define U%s' %(desp['KERNEL_ID']) + '_DATA' + str(idx) + '_BUF_SIZE ' + str(desp['DFC_BUF_SIZE'][idx]) + '\n')
		#  code.append('#define ' + var_prefix + 'DATA' + str(idx) + '_HEAD_BUF_SIZE ' + str(desp['DFC_HEAD_BUF_SIZE'][idx]) + '\n')
		#  idx += 1
	code.append('// Macros\n')
		#code.append('#define U1_IN_IMG_W_T (IN_W_T+K_T_S-1)\n')
		#code.append('#define U1_IN_IMG_H_T (IN_H_T+K_T_S-1)\n')
		#code.append('#define U1_K K_T\n')
		#code.append('#define U1_OUT_NUM_T OUT_NUM_T\n')
		#code.append('#define U1_IN_NUM_T IN_NUM_T\n')
		#code.append('#define U1_OUT_IMG_H_T OUT_H_T\n')
		#code.append('#define U1_OUT_IMG_W_T OUT_W_T\n')
		#code.append('\n')
	code.append('#define U1_SA_ROWS %s\n'%(desp['SA_ROWS']))
	code.append('#define U1_SA_COLS %s\n'%(desp['SA_COLS']))
	code.append('#define U1_SIMD_FACTOR %s\n'%(desp['SIMD_FACTOR']))
		#code.append('#define U1_ROW_IL_FACTOR int(OUT_NUM_T/U1_SA_ROWS)\n')
		#code.append('#define U1_COL_IL_FACTOR int(OUT_W_T/U1_SA_COLS)\n')
		#code.append('\n')
		#code.append('#define U1_LOCAL_REG_NUM (IN_H_T*U1_ROW_IL_FACTOR*U1_COL_IL_FACTOR)   	//largest local_reg_num * K_NUM\n')
		#code.append('\n')
	code.append('#define U1_DATA0_FC_SIMD_FACTOR %s\n'%(desp['FC_SIMD_FACTOR'][0]))
	code.append('#define U1_DATA0_FC_GROUP_FACTOR %s\n'%(desp['FC_GROUP_FACTOR'][0]))
	code.append('#define U1_DATA0_FC_SPLIT_FACTOR %s\n'%(desp['FC_SPLIT_FACTOR'][0]))
	code.append('#define U1_DATA1_FC_SIMD_FACTOR %s\n'%(desp['FC_SIMD_FACTOR'][1]))
	code.append('#define U1_DATA1_FC_GROUP_FACTOR %s\n'%(desp['FC_GROUP_FACTOR'][1]))
	code.append('#define U1_DATA1_FC_SPLIT_FACTOR %s\n'%(desp['FC_SPLIT_FACTOR'][1]))
	code.append('#define U1_DATA2_FC_SIMD_FACTOR %s\n'%(desp['FC_SIMD_FACTOR'][2]))
	code.append('#define U1_DATA2_FC_GROUP_FACTOR %s\n'%(desp['FC_GROUP_FACTOR'][2]))
	code.append('#define U1_DATA2_FC_SPLIT_FACTOR %s\n'%(desp['FC_SPLIT_FACTOR'][2]))
	code.append('\n')
		#code.append('#define U1_DATA0_BUF_SIZE (U1_IN_NUM_T * U1_IN_IMG_H_T * (U1_COL_IL_FACTOR+K_T_S-1))\n')
		#code.append('#define U1_DATA1_BUF_SIZE (U1_IN_NUM_T * U1_ROW_IL_FACTOR * U1_K * U1_K)       \n')
		#code.append('#define U1_DATA2_BUF_SIZE (U1_OUT_NUM_T * U1_OUT_IMG_H_T * U1_COL_IL_FACTOR)		\n')
		#code.append('\n')
	code.append('// Functions and structs\n')
	idx = 0
	for op_name in desp['OP_NAME']:
		code.append('struct U%s' %(desp['KERNEL_ID']) + '_Data' + str(idx) + 'TransferChannelType{\n')
		code.append(' '*2 + var_prefix + 'Data' + str(idx) + 'TransferChannelType(){}\n')
		code.append(' '*2 + var_prefix + 'Data' + str(idx) + 'TransferChannelType(\n')
		code.append(' '*4 + 'ap_uint<' + var_prefix + 'DATA' + str(idx) + '_WIDTH*' + var_prefix + \
				'DATA' + str(idx) + '_FC_SIMD_FACTOR> data_t,\n')
		code.append(' '*4 + 'unsigned int feeder_id_t,\n')
		code.append(' '*4 + 'bool new_pair_t,\n')
		code.append(' '*4 + 'bool last_pair_t,\n')
		code.append(' '*4 + 'unsigned int filter_s_t\n')
		code.append(' '*2 + '){\n')
		code.append(' '*4 + 'data = data_t;\n')
		code.append(' '*4 + 'feeder_id = feeder_id_t;\n')
		code.append(' '*4 + 'new_pair = new_pair_t;\n')
		code.append(' '*4 + 'last_pair = last_pair_t;\n')
		code.append(' '*4 + 'FILTER_S = filter_s_t;\n')
		code.append(' '*2 + '}\n')

		code.append(' '*2 + 'ap_uint<' + var_prefix + 'DATA' + str(idx) + '_WIDTH*' + var_prefix + 'DATA' + str(idx) \
				+ '_FC_SIMD_FACTOR> data;\n')
		code.append(' '*2 + 'unsigned int feeder_id;\n')
		code.append(' '*2 + 'bool new_pair;\n')
		code.append(' '*2 + 'bool last_pair;\n')
		code.append(' '*2 + 'unsigned int FILTER_S;\n')
		code.append('};\n\n')

		idx += 1

	for res_name in desp['RES_NAME']:
		code.append('struct U%s' %(desp['KERNEL_ID']) + '_Data' + str(idx) + 'TransferChannelType{\n')
		code.append(' '*2 + var_prefix + 'Data' + str(idx) + 'TransferChannelType(){}\n')
		code.append(' '*2 + var_prefix + 'Data' + str(idx) + 'TransferChannelType(\n')
		code.append(' '*4 + 'ap_uint<' + var_prefix + 'DATA' + str(idx) + '_WIDTH*' + var_prefix + \
				'DATA' + str(idx) + '_FC_SIMD_FACTOR> data_t){\n')
		code.append(' '*4 + 'data = data_t;\n')
		code.append(' '*2 + '}\n')

		code.append(' '*2 + 'ap_uint<' + var_prefix + 'DATA' + str(idx) + '_WIDTH*' + var_prefix + 'DATA' + str(idx) \
				+ '_FC_SIMD_FACTOR> data;\n')
		code.append('};\n\n')

		idx += 1

	idx = 0
	for op_name in desp['OP_NAME']:
		code.append('struct U%s' %(desp['KERNEL_ID']) + '_Data' + str(idx) + 'PEChannelType{\n')
		code.append(' '*2 + var_prefix + 'Data' + str(idx) + 'PEChannelType(){}\n')

		code.append(' '*2 + var_prefix + 'Data' + str(idx) + 'PEChannelType(\n')
		code.append(' '*4 + 'ap_uint<' + str(desp['OP_PE_SIMD_WIDTH'][idx]) + '> data_t\n')
		code.append(' '*2 + '){\n')
		code.append(' '*4 + 'data = data_t;\n')
		code.append(' '*2 + '}\n')

		code.append(' '*2 + var_prefix + 'Data' + str(idx) + 'PEChannelType(\n')
		code.append(' '*4 + 'ap_uint<' + str(desp['OP_PE_SIMD_WIDTH'][idx]) + '> data_t,\n')
		code.append(' '*4 + 'bool new_pair_t,\n')
		code.append(' '*4 + 'unsigned int filter_s_t\n')
		code.append(' '*2 + '){\n')
		code.append(' '*4 + 'data = data_t;\n')
		code.append(' '*4 + 'new_pair = new_pair_t;\n')
		code.append(' '*4 + 'FILTER_S = filter_s_t;\n')
		code.append(' '*2 + '}\n')

		code.append(' '*2 + var_prefix + 'Data' + str(idx) + 'PEChannelType(\n')
		code.append(' '*4 + 'ap_uint<' + str(desp['OP_PE_SIMD_WIDTH'][idx]) + '> data_t,\n')
		code.append(' '*4 + 'bool new_pair_t,\n')
		code.append(' '*4 + 'bool last_pair_t,\n')
		code.append(' '*4 + 'unsigned int filter_s_t\n')
		code.append(' '*2 + '){\n')
		code.append(' '*4 + 'data = data_t;\n')
		code.append(' '*4 + 'new_pair = new_pair_t;\n')
		code.append(' '*4 + 'last_pair = last_pair_t;\n')
		code.append(' '*4 + 'FILTER_S = filter_s_t;\n')
		code.append(' '*2 + '}\n')

		code.append(' '*2 + 'ap_uint<' + str(desp['OP_PE_SIMD_WIDTH'][idx]) + '> data;\n')
		code.append(' '*2 + 'bool new_pair;\n')
		code.append(' '*2 + 'bool last_pair;\n')
		code.append(' '*2 + 'unsigned int FILTER_S;\n')
		code.append('};\n\n')

		code.append('typedef ap_uint<' + str(desp['OP_PE_SIMD_WIDTH'][idx]) + '> ' + var_prefix + 'Data' + str(idx) + 'SIMDType;\n\n')
		idx += 1

	for res_name in desp['RES_NAME']:
		code.append('struct U%s' %(desp['KERNEL_ID']) + '_Data' + str(idx) + 'PEChannelType{\n')
		code.append(' '*2 + var_prefix + 'Data' + str(idx) + 'PEChannelType(){}\n')
		code.append(' '*2 + var_prefix + 'Data' + str(idx) + 'PEChannelType(\n')
		code.append(' '*4 + var_prefix + 'data_t' + str(idx) + ' data_t){\n')
		code.append(' '*4 + 'data = data_t;\n')
		code.append(' '*2 + '}\n')

		code.append(' '*2 + var_prefix + 'data_t' + str(idx) + ' data;\n');
		code.append('};\n\n')

		idx += 1

		#function declarations
	#  idx = 0
	#  for op_name in desp['OP_NAME']:
	#    	#code.append('void ' + var_prefix + 'DataFeed' + str(idx) + 'Head_Shim(\n')
	#    	#code.append(indent(1) + '%sbus_t%d* %s,\n' % (var_prefix, idx, op_name))
	#    	#code.append(indent(1) + 'stream<ap_uint<%sDATA%d_WIDTH * %sDATA%d_FC_SIMD_FACTOR> > &fifo_transfer_%s,\n' % (var_prefix, idx, var_prefix, idx, op_name))
	#    	#code.append(indent(1) + 'uint LAYER_IN_NUM,\n')
	#    	#code.append(indent(1) + 'uint LAYER_OUT_NUM,\n')
	#    	#code.append(indent(1) + 'uint LAYER_IN_NUM_T,\n')
	#    	#code.append(indent(1) + 'uint LAYER_OUT_NUM_T,\n')
	#    	#code.append(indent(1) + 'uint LAYER_IN_IMG_H,\n')
	#    	#code.append(indent(1) + 'uint LAYER_IN_IMG_W,\n')
	#    	#code.append(indent(1) + 'uint LAYER_OUT_IMG_H,\n')
	#    	#code.append(indent(1) + 'uint LAYER_OUT_IMG_W,\n')
	#    	#code.append(indent(1) + 'uint LAYER_IN_IMG_H_T,\n')
	#    	#code.append(indent(1) + 'uint LAYER_IN_IMG_W_T,\n')
	#    	#if idx == 0:
	#    	#  code.append(indent(1) + 'ap_uint<8> LAYER_FILTER_S_H,\n')
	#    	#  code.append(indent(1) + 'ap_uint<8> LAYER_FILTER_S_W,\n')
	#    	#  code.append(indent(1) + 'uint LAYER_BATCH,\n')
	#    	#  code.append(indent(1) + 'uint LAYER_STRIDE,\n')
	#    	#  code.append(indent(1) + 'tapa::ostream<%sConfigInst> &fifo_kernel_config_out\n' % (var_prefix))
	#    	#else:
	#    	#  code.append(indent(1) + 'ap_uint<8> LAYER_FILTER_S_H,\n')
	#    	#  code.append(indent(1) + 'ap_uint<8> LAYER_FILTER_S_W,\n')
	#    	#  code.append(indent(1) + 'uint LAYER_BATCH,\n')
	#    	#  code.append(indent(1) + 'uint LAYER_STRIDE\n')

	#    	#code.append(');\n\n')

	#    code.append('void ' + var_prefix + 'DataFeed' + str(idx) + 'Head(\n')
	#	#   code.append(' '*2 + var_prefix + 'bus_t' + str(idx) + '* ' + desp['OP_NAME'][idx] + ',\n')
	#    code.append(indent(1) + 'tapa::istream<ap_uint<%sDATA%d_WIDTH * %sDATA%d_FC_SIMD_FACTOR> > &fifo_transfer_in,\n' % (var_prefix, idx, var_prefix, idx))
	#	#   code.append(' '*2 + 'bool init,\n')
	#	#   code.append(' '*2 + 'unsigned int FILTER_S_H,\n')
	#	#   code.append(' '*2 + 'unsigned int FILTER_S_W,\n')
	#    for feed_id in range(desp['FC_SPLIT_FACTOR'][idx]):
	#      if feed_id < desp['FC_SPLIT_FACTOR'][idx] - 1:
	#        code.append(' '*2 + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_out' + str(feed_id) + ',\n')
	#      else:
	#        code.append(' '*2 + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_out' + str(feed_id) + ',\n')
	#    if idx == 0:
	#      code.append(indent(1) + 'tapa::istream<%sConfigInst> &fifo_kernel_config_in,\n' % (var_prefix))
	#      code.append(indent(1) + 'tapa::ostream<%sConfigInst> &fifo_kernel_config_out,\n' % (var_prefix))
	#      code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out0,\n')
	#      code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out1\n')
	#      code.append(');\n\n')
	#    elif idx == 1:
	#      code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in,\n')
	#      code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out\n')
	#      code.append(');\n\n')
	#    idx += 1

	#  for res_name in desp['RES_NAME']:
	#    	#code.append('void %sDataCollect%dHead_Shim(\n' % (var_prefix, idx))
	#    	#code.append(indent(1) + '%sbus_t%d* %s,\n' % (var_prefix, idx, res_name))
	#    	#code.append(indent(1) + 'stream<ap_uint<%sDATA%d_WIDTH * %sDATA%d_FC_SIMD_FACTOR> > &fifo_transfer_%s,\n' % (var_prefix, idx, var_prefix, idx, res_name))
	#    	#code.append(indent(1) + 'tapa::istream<%sConfigInst> &fifo_kernel_config_in,\n' % (var_prefix))
	#    	#code.append(indent(1) + 'uint LAYER_IN_NUM,\n')
	#    	#code.append(indent(1) + 'uint LAYER_OUT_NUM,\n')
	#    	#code.append(indent(1) + 'uint LAYER_IN_NUM_T,\n')
	#    	#code.append(indent(1) + 'uint LAYER_OUT_NUM_T,\n')
	#    	#code.append(indent(1) + 'uint LAYER_IN_IMG_H,\n')
	#    	#code.append(indent(1) + 'uint LAYER_IN_IMG_W,\n')
	#    	#code.append(indent(1) + 'uint LAYER_OUT_IMG_H,\n')
	#    	#code.append(indent(1) + 'uint LAYER_OUT_IMG_W,\n')
	#    	#code.append(indent(1) + 'uint LAYER_IN_IMG_H_T,\n')
	#    	#code.append(indent(1) + 'uint LAYER_IN_IMG_W_T,\n')
	#    	#code.append(indent(1) + 'uint LAYER_FILTER_S,\n')
	#    	#code.append(indent(1) + 'uint LAYER_STRIDE\n')
	#    	#code.append(');\n\n')

	#    code.append('void ' + var_prefix + 'DataCollect' + str(idx) + 'Head(\n')
	#	#   code.append(' '*2 + var_prefix + 'bus_t' + str(idx) + '* ' + desp['RES_NAME'][idx - len(desp['OP_NAME'])] + ',\n')
	#    code.append(indent(1) + 'tapa::ostream<ap_uint<%sDATA%d_WIDTH * %sDATA%d_FC_SIMD_FACTOR> > &fifo_transfer_out,\n' % (var_prefix, idx, var_prefix, idx))
	#    for feed_id in range(desp['FC_SPLIT_FACTOR'][idx]):
	#      if feed_id < desp['FC_SPLIT_FACTOR'][idx] - 1:
	#        code.append(' '*2 + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_in' + str(feed_id) + ',\n')
	#      else:
	#        code.append(' '*2 + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_in' + str(feed_id) + ',\n')
	#    code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in\n')
	#    code.append(');\n\n')
	#    idx += 1

	#  idx = 0
	#  for op_name in desp['OP_NAME']:
	#    code.append('void ' + var_prefix + 'DataFeed' + str(idx) + 'Engine0_wrapper(\n')
	#    code.append(' '*2 + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_in,\n')
	#    code.append(' '*2 + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_out,\n')
	#    for gs in range(desp['FC_GROUP_FACTOR'][idx]):
	#      code.append(' '*2 + 'stream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo_feed_' + str(gs) + ',\n')
	#    code.append(' '*2 + 'unsigned int engine_id,\n')
	#    if idx == 0:
	#      code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in,\n')
	#      code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out0,\n')
	#      code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out1\n')
	#    elif idx == 1:
	#      code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in,\n')
	#      code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out0\n')
	#    code.append(');\n\n')

	#    code.append('void ' + var_prefix + 'DataFeed' + str(idx) + 'EngineLast(\n')
	#    code.append(' '*2 + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_in,\n')
	#    for gs in range(desp['FC_GROUP_FACTOR'][idx]):
	#      code.append(' '*2 + 'stream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo_feed_' + str(gs) + ',\n')
	#    code.append(' '*2 + 'unsigned int engine_id,\n')
	#    if idx == 0:
	#      code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in,\n')
	#      code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out1\n')
	#    else:
	#      code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in\n')
	#    code.append(');\n\n')

	#    idx += 1

	#  for res_name in desp['RES_NAME']:
	#    code.append('void ' + var_prefix + 'DataCollect' + str(idx) + 'Engine0_wrapper(\n')
	#    code.append(' '*2 + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_in,\n')
	#    code.append(' '*2 + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_out,\n')
	#    for gs in range(desp['FC_GROUP_FACTOR'][idx]):
	#      code.append(' '*2 + 'stream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo_collect_' + str(gs) + ',\n')
	#    code.append(' '*2 + 'unsigned int engine_id,\n')
	#    code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in0,\n')
	#    code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in1,\n')
	#    code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out\n')
	#    code.append(');\n\n')

	#    code.append('void ' + var_prefix + 'DataCollect' + str(idx) + 'EngineLast(\n')
	#    code.append(' '*2 + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_out,\n')
	#    for gs in range(desp['FC_GROUP_FACTOR'][idx]):
	#      code.append(' '*2 + 'stream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo_collect_' + str(gs) + ',\n')
	#    code.append(' '*2 + 'unsigned int engine_id,\n')
	#    code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in0,\n')
	#    code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out\n')
	#    code.append(');\n\n')

	#    idx += 1

	#  idx = 0
	#  code.append('void ' + var_prefix + 'kernel(\n')
	#  for name in desp['OP_NAME']:
	#    code.append(' '*2 + var_prefix + 'bus_t' + str(idx) + '* ' + name + ',\n')
	#    idx += 1
	#  for name in desp['RES_NAME']:
	#    code.append(' '*2 + var_prefix + 'bus_t' + str(idx) + '* ' + name + ',\n')
	#    idx += 1
	#  code.append(' '*2 + 'bool init,\n')
	#  code.append(' '*2 + 'unsigned int FILTER_S\n')
	#  code.append(');\n\n')

	#  code.append('template<typename To, typename From>\n')
	#  code.append('inline To Reinterpret(const From& val){\n')
	#  code.append(' '*2 + 'return reinterpret_cast<const To&>(val);\n')
	#  code.append('}\n\n')

	#  code.append('template<class data_t, class bus_t, int WIDTH>\n')
	#  code.append('data_t data_select(\n')
	#  code.append(' '*2 + 'bus_t bus_data,\n')
	#  code.append(' '*2 + 'uint offset\n')
	#  code.append('){\n')
	#  code.append(' '*2 + 'data_t ret;\n')
	#  code.append(' '*2 + 'ret = Reinterpret<data_t>((ap_uint<WIDTH>)bus_data(WIDTH-1 + offset*WIDTH, offset*WIDTH));\n')
	#  code.append(' '*2 + 'return ret;\n')
	#  code.append('}\n')

	return code

def flexcnn_functions(arch_connectivity):
	cnn_name = arch_connectivity['name']
	arch_graph_nodes = arch_connectivity['nodes']
	code = []
	for module in arch_graph_nodes:
		if module != 'SA':
			if module == 'pool' or module == 'act_and_bn' or module == 'bias_load' or module == 'cin_load' or module == 'cin_load_prev' or module == 'cout_write':
				with open('../modules/' + module + '_' + cnn_name + '.cpp', 'r') as f:
					code.extend(f.readlines())
			else:
				with open('../modules/' + module + '.cpp', 'r') as f:
					code.extend(f.readlines())
	
	return code
		

#	#Top
def top_function(desp, config):
	code = []
	code.append('void top_kernel(\n')
	code.append(indent(1) + '  bus_mem_0 dram_b0,\n')
	code.append(indent(1) + '  bus_mem_1 dram_weights,\n')
	code.append(indent(1) + '  bus_mem_2 dram_biases,\n')
	code.append(indent(1) + '  bus_mem_3 layer_config,\n')
	code.append(indent(1) + '  uint start_inst,\n')
	code.append(indent(1) + '  uint end_inst\n')
	code.append('){\n')
	return code

def flexcnn_modules(desp, config):
	code = []
	with open('../FlexCNN.cpp', 'r') as file:
		for line in file:
			code.append(line)
	return code

def flexcnn_fifos(desp, config, arch_connectivity):
	code = []
	arch_graph_nodes = arch_connectivity['nodes']
	arch_graph_edges = arch_connectivity['edges']
	arch_graph = nx.MultiDiGraph()
	arch_graph.add_nodes_from(arch_graph_nodes)
	arch_graph.add_edges_from(arch_graph_edges)
	sorted_graph = list(nx.topological_sort(arch_graph))
	
	code.append(indent(1)+'//data fifos\n')
	for node in sorted_graph:
		out_edges = arch_graph.out_edges(node)
		for idx, edge in enumerate(out_edges):
			code.append(indent(1)+'tapa::stream<CinLoadData0Type, 128> %s_to_%s_%d("%s_to_%s_%d");\n'%(edge[0], edge[1], idx, edge[0], edge[1], idx))

	# for edge in arch_graph_edges:
	# 	if 'bias' in edge[0]:
	# 		code.append(indent(1)+'tapa::stream<CinLoadData0Type, 128> %s_to_%s_beta("%s_to_%s_beta");\n'%(edge[0], edge[1], edge[0], edge[1]))
	# 		code.append(indent(1)+'tapa::stream<CinLoadData0Type, 128> %s_to_%s_gamma("%s_to_%s_gamma");\n'%(edge[0], edge[1], edge[0], edge[1]))
	# 	else:
	# 		code.append(indent(1)+'tapa::stream<CinLoadData0Type, 128> %s_to_%s("%s_to_%s");\n'%(edge[0], edge[1], edge[0], edge[1]))
		
	code.append(indent(1)+'//instruction fifos\n')
	for idx in range(len(sorted_graph)-1):
		curr_node = sorted_graph[idx]
		next_node = sorted_graph[idx+1]
		code.append(indent(1)+'tapa::stream<ConfigInst,16> config_%s_to_%s("config_%s_to_%s");\n'%(curr_node, next_node, curr_node, next_node))
	
	code.append(indent(1)+'//synchronization fifos\n')
	code.append(indent(1)+'tapa::stream<int> cin_to_cout_sync("cin_to_cout_sync");\n')
	code.append(indent(1)+'tapa::stream<int> cout_to_cin_sync("cout_to_cin_sync");\n')
	return code

def flexcnn_tasks(desp, config, arch_connectivity):
	code = []
	arch_graph_nodes = arch_connectivity['nodes']
	arch_graph_edges = arch_connectivity['edges']
	arch_graph = nx.MultiDiGraph()
	arch_graph.add_nodes_from(arch_graph_nodes)
	arch_graph.add_edges_from(arch_graph_edges)
	# save graph to image
	write_dot(arch_graph, 'arch.dot')
	sorted_graph = list(nx.topological_sort(arch_graph))
	code.append(indent(1)+'tapa::task()\n')
	for idx, node in enumerate(sorted_graph):
		if idx > 0:
			prev_module = sorted_graph[idx-1]
		else:
			prev_module = 'start'
		if idx+1 < len(sorted_graph):
			next_module = sorted_graph[idx+1]
		else:
			next_module = 'end'
			
		if node=='SA':
			SA_input = list(filter(lambda predecessor : 'weight' not in predecessor, arch_graph.predecessors(node)))[0]
			SA_weight = list(filter(lambda predecessor : 'weight' in predecessor, arch_graph.predecessors(node)))[0]
			SA_output = [successor for successor in arch_graph.successors(node)][0]
			code.extend(kernel_tasks(desp, config, node, SA_input, SA_weight, SA_output, prev_module, next_module))
		else:
			# header
			code.append(indent(1)+'.invoke(%s, \n'%node)
			code.append(indent(1)+'		start_inst, end_inst,\n')
			
			# dram ports
			if node == 'cin_load':
				code.append(indent(1)+'		dram_b0, \n')
				code.append(indent(1)+'		layer_config,\n')
			elif node == 'cin_load_prev':
				code.append(indent(1)+'		dram_b0, \n')
				code.append(indent(1)+'		config_%s_to_%s,\n'%(prev_module, node))
			elif node == 'weight_load':
				code.append(indent(1)+'		dram_weights, \n')
				code.append(indent(1)+'		config_%s_to_%s,\n'%(prev_module, node))
			elif node == 'bias_load':
				code.append(indent(1)+'		dram_biases, \n')
				code.append(indent(1)+'		config_%s_to_%s,\n'%(prev_module, node))
			else:
				# inputs
				in_edges = arch_graph.in_edges(node)
				prev_edge = None
				cnt = 0
				for idx, edge in enumerate(in_edges):
					if idx > 0:
						prev_edge = list(in_edges)[idx-1]
					if edge != prev_edge:
						cnt = 0
					code.append(indent(1)+'		%s_to_%s_%d, \n'%(edge[0], edge[1], cnt))
					cnt += 1
						
				# for predecessor in arch_graph.predecessors(node):
				# 	if 'bias' in predecessor:
				# 		code.append(indent(1)+'		%s_to_%s_beta, \n'%(predecessor, node))
				# 		code.append(indent(1)+'		%s_to_%s_gamma, \n'%(predecessor, node))
				# 	else:
				# 		code.append(indent(1)+'		%s_to_%s, \n'%(predecessor, node))

				code.append(indent(1)+'		config_%s_to_%s,\n'%(prev_module, node))

			# outputs
			if node == 'cout_write':
				code.append(indent(1)+'		dram_b0, \n')
			else:
				out_edges = arch_graph.out_edges(node)
				for idx, edge in enumerate(out_edges):
					code.append(indent(1)+'		%s_to_%s_%d, \n'%(edge[0], edge[1], idx))

				# for successor in arch_graph.successors(node):
				# 	if 'bias' in node:
				# 		code.append(indent(1)+'		%s_to_%s_beta, \n'%(node, successor))
				# 		code.append(indent(1)+'		%s_to_%s_gamma, \n'%(node, successor))
				# 	else:
				# 		code.append(indent(1)+'		%s_to_%s, \n'%(node, successor))
				
				code.append(indent(1)+'		config_%s_to_%s\n'%(node, next_module))
			
			# sync
			if node == 'cin_load':
				code.append(indent(1)+', cout_to_cin_sync, cin_to_cout_sync\n')
			elif node == 'cout_write':
				code.append(indent(1)+'		cin_to_cout_sync, cout_to_cin_sync\n')
			if node == 'cout_write':
				code.append(indent(1)+');\n')
			else:
				code.append(indent(1)+')\n')
	code.append('}\n')
	return code

def flexcnn_tasks_after_SA(desp, config):
	code = []
	# code.append(indent(1) + '.invoke(upsample,\n')
	# code.append(indent(1) + '    start_inst, end_inst,\n')
	# code.append(indent(1) + '    fifo_SA,\n')
	# code.append(indent(1) + '    config_upsample,\n')
	# code.append(indent(1) + '    fifo_upsample_0,\n')
	# code.append(indent(1) + '    config_pool\n')
	# code.append(indent(1) + ')\n')
	code.append(indent(1) + '.invoke(relu,\n')
	code.append(indent(1) + '  start_inst, end_inst,\n')
	code.append(indent(1) + '  fifo_SA, \n')
	code.append(indent(1) + '  config_relu,\n')
	code.append(indent(1) + '  fifo_relu_0,\n')
	code.append(indent(1) + '  config_pool,\n')
	code.append(indent(1) + '  fifo_beta_conv, fifo_gamma_conv\n')
	code.append(indent(1) + ')\n')
	code.append(indent(1) + '.invoke(pool,\n')
	code.append(indent(1) + '    start_inst, end_inst,\n')
	code.append(indent(1) + '    fifo_relu_0,\n')
	code.append(indent(1) + '    config_pool,\n')
	code.append(indent(1) + '    fifo_pool_0,\n')
	code.append(indent(1) + '    config_data_write\n')
	code.append(indent(1) + ')\n')
	# code.append(indent(1) + '.invoke(concat,\n')
	# code.append(indent(1) + '  start_inst, end_inst,\n')
	# code.append(indent(1) + '  fifo_pool_0,\n')
	# code.append(indent(1) + '  fifo_upsample_0,\n')
	# code.append(indent(1) + '  config_concat,\n')
	# code.append(indent(1) + '  fifo_concat_0, //pool\n')
	# code.append(indent(1) + '  fifo_concat_1, //conv and concat\n')
	# code.append(indent(1) + '  config_add\n')
	# code.append(indent(1) + ')\n')
	# code.append(indent(1) + '.invoke(add,\n')
	# code.append(indent(1) + '  start_inst, end_inst,\n')
	# code.append(indent(1) + '  fifo_concat_0,\n')
	# code.append(indent(1) + '  fifo_concat_1,\n')
	# code.append(indent(1) + '  config_add,\n')
	# code.append(indent(1) + '  fifo_add_0,\n')
	# code.append(indent(1) + '  config_relu\n')
	# code.append(indent(1) + ')\n')
	code.append(indent(1) + '.invoke(cout_write, \n')
	code.append(indent(1) + '    start_inst, end_inst,\n')
	code.append(indent(1) + '		fifo_pool_0,\n')
	code.append(indent(1) + '		config_data_write,\n')
	code.append(indent(1) + '		dram_b0,\n')
	code.append(indent(1) + '    cin_to_cout_sync, cout_to_cin_sync\n')
	code.append(indent(1) + ');\n')
	code.append('}')
	return code

#	#Testbench
def tb(desp, config):

	code = []
	var_prefix = 'U%s' %(desp['KERNEL_ID']) + '_'
	# code.extend(print_disclaimer())

	code.append('extern void top_kernel(\n')
	idx = 0
	for op_name in desp['OP_NAME']:
		code.append(' '*2 + var_prefix + 'bus_t' + str(idx) + '* global_' + op_name + ',\n')
		idx += 1
	for res_name in desp['RES_NAME']:
		code.append(' '*2 + var_prefix + 'bus_t' + str(idx) + '* global_' + res_name + ',\n')
		idx += 1
	code.append(' '*2 + 'bool init,\n')
	code.append(' '*2 + 'unsigned int FILTER_S\n')
	code.append(');\n\n')

	code.append('void top_kernel_sw(\n')
	idx = 0
	for op_name in desp['OP_NAME']:
		code.append(' '*2 + var_prefix + 'data_t' + str(idx) + '* global_' + op_name + ',\n')
		idx += 1
	for res_name in desp['RES_NAME']:
		code.append(' '*2 + var_prefix + 'data_t' + str(idx) + '* global_' + res_name + ',\n')
		idx += 1
	code.append(' '*2 + 'bool init,\n')
	code.append(' '*2 + 'unsigned int FILTER_S\n')
	code.append('){\n')
	for codeline in desp['SW_KERNEL_CODE']:
		code.append(' '*2 + codeline)
	code.append('}\n\n')

		#init_random
	code.append('template<class data_t>\n')
	code.append('void init_random(\n')
	code.append(' '*2 + 'data_t* buf,\n')
	code.append(' '*2 + 'int buf_size\n')
	code.append('){\n')
	code.append(' '*2 + 'srand(0);\n')
	code.append(' '*2 + 'for (int i = 0; i < buf_size; i++)\n')
	code.append(' '*4 + 'buf[i] = (double)rand() / (RAND_MAX) * 1.0;\n')
	code.append('}\n\n')

		#init_uniform
	code.append('template<class data_t>\n')
	code.append('void init_uniform(\n')
	code.append(' '*2 + 'data_t* buf,\n')
	code.append(' '*2 + 'int buf_size,\n')
	code.append(' '*2 + 'data_t val\n')
	code.append('){\n')
	code.append(' '*2 + 'for (int i = 0; i < buf_size; i++)\n')
	code.append(' '*4 + 'buf[i] = val;\n')
	code.append('}\n\n')

		#buf_compare
	code.append('template<class data_t>\n')
	code.append('int buf_compare(\n')
	code.append(indent(1) + 'data_t* buf1,\n')
	code.append(indent(1) + 'data_t* buf2,\n')
	code.append(indent(1) + 'int buf_size,\n')
	code.append(indent(1) + 'data_t thres,\n')
	code.append(indent(1) + 'bool verbose\n')
	code.append('){')
	code.append(indent(1) + 'int err = 0;\n')
	code.append(indent(1) + 'for (int i = 0; i < buf_size; i++){\n')
	code.append(indent(2) + '// use L1 norm\n')
	code.append(indent(2) + 'data_t diff = fabs((float)buf1[i] - (float)buf2[i]);\n')
	code.append(indent(2) + 'if (diff > thres){\n')
	code.append(indent(3) + 'err++;\n')
	code.append(indent(3) + 'printf("Index %d sw - %f hw - %f\\n", i, (float)buf1[i], (float)buf2[i]);\n')
	code.append(indent(2) + '} else {\n')
	code.append(indent(3) + 'if (verbose){\n')
	code.append(indent(4) + 'printf("Index %d sw - %f hw - %f\\n", i, (float)buf1[i], (float)buf2[i]);\n')
	code.append(indent(3) + '}\n')
	code.append(indent(2) + '}\n')
	code.append(indent(1) + '}\n')
	code.append(indent(1) + 'return err;\n')
	code.append('}\n\n')

		#reorder_results (for MM)
		#TODO: to be deprecated in the future
	if desp['APP_NAME'] == 'mm':
		code.append('void reorder_results(\n')
		code.append(indent(1) + '%sdata_t2* m_in,\n' % (var_prefix))
		code.append(indent(1) + '%sdata_t2* m_out\n' % (var_prefix))
		code.append('){\n')
		code.append(indent(1) + 'for (int i_t = 0; i_t < %sI; i_t += %sI_T)\n' % (var_prefix, var_prefix))
		code.append(indent(1) + '  for (int j_t = 0; j_t < %sJ; j_t += %sJ_T)\n' % (var_prefix, var_prefix))
		code.append(indent(1) + '    for (int i = 0; i < %sI_T; i++)\n' % (var_prefix))
		code.append(indent(1) + '      for(int j = 0; j < %sJ_T; j++){\n' % (var_prefix))
		code.append(indent(1) + '        unsigned int i_ind = i_t + i;\n')
		code.append(indent(1) + '        unsigned int j_ind = j_t + j;\n')
		code.append(indent(1) + '        unsigned int chunk_offset = ((i_t / %sI_T) * (%sJ / %sJ_T) + (j_t / %sJ_T)) * %sI_T * %sJ_T;\n' % (var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix))
		code.append(indent(1) + '        m_out[i_ind * %sJ + j_ind] = m_in[chunk_offset + i * %sJ_T + j];\n' % (var_prefix, var_prefix))
		code.append(indent(1) + '      }\n')
		code.append('}\n\n')

		#main
	code.append('int main(){\n')
	code.append(indent(1) + '// app buffers\n')
	idx = 0
	for op_name in desp['OP_NAME']:
		code.append(indent(1) + var_prefix + 'data_t' + str(idx) + '* ' + op_name + \
				' = (' + var_prefix + 'data_t' + str(idx) + '*)malloc(' + var_prefix + \
				'DATA' + str(idx) + '_SIZE_ALIGNED*sizeof(' + var_prefix + 'data_t' + str(idx) + '));\n')
		idx += 1
	for res_name in desp['RES_NAME']:
		code.append(indent(1) + var_prefix + 'data_t' + str(idx) + '* ' + res_name + '_hw' + \
				' = (' + var_prefix + 'data_t' + str(idx) + '*)malloc(' + var_prefix + \
				'DATA' + str(idx) + '_SIZE_ALIGNED*sizeof(' + var_prefix + 'data_t' + str(idx) + '));\n')
		if desp['APP_NAME'] == 'mm':
			code.append(indent(1) + var_prefix + 'data_t' + str(idx) + '* ' + res_name + '_hw_ordered' + \
					' = (' + var_prefix + 'data_t' + str(idx) + '*)malloc(' + var_prefix + \
					'DATA' + str(idx) + '_SIZE_ALIGNED*sizeof(' + var_prefix + 'data_t' + str(idx) + '));\n')
		code.append(indent(1) + var_prefix + 'data_t' + str(idx) + '* ' + res_name + '_sw' + \
				' = (' + var_prefix + 'data_t' + str(idx) + '*)malloc(' + var_prefix + \
				'DATA' + str(idx) + '_SIZE_ALIGNED*sizeof(' + var_prefix + 'data_t' + str(idx) + '));\n')
		idx += 1

	idx = 0
	for op_name in desp['OP_NAME']:
		code.append(indent(1) + var_prefix + 'bus_t' + str(idx) + '* ' + op_name + '_bus' + \
				' = (' + var_prefix + 'bus_t' + str(idx) + '*)malloc(' + var_prefix + \
				'DATA' + str(idx) + '_SIZE_ALIGNED*sizeof(' + var_prefix + 'data_t' + str(idx) + '));\n')
		idx += 1
	for res_name in desp['RES_NAME']:
		code.append(indent(1) + var_prefix + 'bus_t' + str(idx) + '* ' + res_name + '_hw_bus' + \
				' = (' + var_prefix + 'bus_t' + str(idx) + '*)malloc(' + var_prefix + \
				'DATA' + str(idx) + '_SIZE_ALIGNED*sizeof(' + var_prefix + 'data_t' + str(idx) + '));\n')
		idx += 1

	code.append(indent(1) + '\n')
	code.append(indent(1) + '// data initialization\n')
	code.append(indent(1) + 'printf("INIT_BUFFERS...\\n");\n')
	idx = 0
	for op_name in desp['OP_NAME']:
		code.append(indent(1) + 'init_random<' + var_prefix + 'data_t' + str(idx) + '>(' + op_name + \
				', ' + var_prefix + 'DATA' + str(idx) + '_SIZE_ALIGNED);\n')
		code.append(indent(1) + 'memcpy((void*)' + op_name + '_bus, (void*)' + op_name + ', sizeof(' + \
				var_prefix + 'data_t' + str(idx) + ')*' + var_prefix + 'DATA' + str(idx) + '_SIZE_ALIGNED);\n')
		idx += 1

	code.append(indent(1) + '\n')
	code.append(indent(1) + '// hw solution\n')

		#TODO: temporary solution
	if desp['APP_NAME'] == 'cnn':
		code.append(indent(1) + 'unsigned int FILTER_S_H = %sK;\n' % (var_prefix))
		code.append(indent(1) + 'unsigned int FILTER_S_W = %sK;\n' % (var_prefix))
	else:
		code.append(indent(1) + 'unsigned int FILTER_S_H = 1;\n')
		code.append(indent(1) + 'unsigned int FILTER_S_W = 1;\n')
	code.append(indent(1) + 'printf("CALLING HW ROUTINE...\\n");\n')
	code.append(indent(1) + 'for (int b = 0; b < 1; b++)\n')
	str_tmp = ''
	for op_name in desp['OP_NAME']:
		str_tmp += op_name + '_bus, '
	for res_name in desp['RES_NAME']:
		str_tmp += res_name + '_hw_bus, '
	code.append(indent(2) + 'top_kernel(' + str_tmp + '1, FILTER_S_H);\n\n')
	code.append(indent(2) + 'top_kernel(' + str_tmp + '1, FILTER_S_W);\n\n')

	code.append(indent(1) + '// sw solution\n')
	code.append(indent(1) + 'printf("CALLING SW ROUTINE...\\n");\n')
	str_tmp = ''
	for op_name in desp['OP_NAME']:
		str_tmp += op_name + ', '
	for res_name in desp['RES_NAME']:
		str_tmp += res_name + '_sw, '
	code.append(indent(2) + 'top_kernel_sw(' + str_tmp + '1, FILTER_S_H);\n\n')
	code.append(indent(2) + 'top_kernel_sw(' + str_tmp + '1, FILTER_S_W);\n\n')

	code.append(indent(1) + '// comparison\n')
	idx = len(desp['OP_NAME'])
	for res_name in desp['RES_NAME']:
		code.append(indent(1) + 'memcpy((void*)' + res_name + '_hw, (void*)' + res_name + \
				'_hw_bus, sizeof(' + var_prefix + 'data_t' + str(idx) + ')*' + var_prefix + \
				'DATA' + str(idx) + '_SIZE_ALIGNED);\n')
		idx += 1
	code.append('\n')

	if desp['APP_NAME'] == 'mm':
		code.append(indent(1) + 'reorder_results(C_hw, C_hw_ordered);\n')
		code.append(indent(1) + 'free(C_hw);\n')
		code.append(indent(1) + 'C_hw = C_hw_ordered;\n\n')

	code.append(indent(1) + 'int err_cnt = 0;\n')
	idx = len(desp['OP_NAME'])
	for res_name in desp['RES_NAME']:
		code.append(indent(1) + 'err_cnt += buf_compare<' + var_prefix + 'data_t' + str(idx) + \
				'>((' + var_prefix + 'data_t' + str(idx) + \
				'*)' + res_name + '_sw, (' + var_prefix + 'data_t' + str(idx) + '*)' + res_name + \
				'_hw, ' + var_prefix + 'DATA' + str(idx) + '_SIZE, 0.001, 0);\n')
		idx += 1

		#free memory
	code.append('\n')
	for op_name in desp['OP_NAME']:
		code.append(indent(1) + 'free(' + op_name + ');\n')
		code.append(indent(1) + 'free(' + op_name + '_bus);\n')
	for res_name in desp['RES_NAME']:
		code.append(indent(1) + 'free(' + res_name + '_sw);\n')
		code.append(indent(1) + 'free(' + res_name + '_hw);\n')
		code.append(indent(1) + 'free(' + res_name + '_hw_bus);\n')

	code.append('\n')
	code.append(indent(1) + 'if (err_cnt){\n')
	code.append(indent(2) + 'printf("TEST FAILED! %d ERRORS!\\n", err_cnt);\n')
	code.append(indent(1) + '} else {\n')
	code.append(indent(2) + 'printf("TEST PASSED!\\n");\n')
	code.append(indent(1) + '}\n')

	code.append('}\n')

	return code

def PE_MAC(desp, config):

	var_prefix = 'U%s' %(desp['KERNEL_ID']) + '_'
	code = []
	code.append('void ' + var_prefix + 'PE_MAC(\n')
	idx = 0
	for op_name in desp['OP_NAME']:
		code.append(indent(1) + var_prefix + 'Data' + str(idx) + 'SIMDType op' + str(idx) + ',\n')
		idx += 1
	for res_name in desp['RES_NAME']:
		code.append(indent(1) + var_prefix + 'data_t' + str(idx) + '* op' + str(idx) + ',\n')
		idx += 1
	code.append(indent(1) + 'bool init\n')
	code.append('){\n')
	code.append('#pragma HLS INLINE\n')

	idx = 0
	for op_name in desp['OP_NAME']:
		code.append('#pragma HLS DATA_PACK variable=op' + str(idx)+ '\n')
		idx += 1
	idx = 0
	for op_name in desp['OP_NAME']:
		code.append(indent(1) + 'ap_uint<' + str(desp['OP_PE_SIMD_WIDTH'][idx]) + '> op' + str(idx) + '_data = op' + str(idx) + ';\n')
		idx += 1
	code.append('\n')
	idx = 0
	for op_name in desp['OP_NAME']:
		code.append(indent(1) + desp['DATA_TYPE'][idx] + ' op' + str(idx) + '_u[' + var_prefix + 'SIMD_FACTOR];\n')
		code.append('#pragma HLS ARRAY_PARTITION variable=op' + str(idx) + '_u complete\n')
		idx += 1
	code.append('\n')

	code.append(indent(1) + 'for (int i = 0; i < ' + var_prefix + 'SIMD_FACTOR; i++){\n')
	code.append('#pragma HLS UNROLL\n')
	idx = 0
	for op_name in desp['OP_NAME']:
		code.append(indent(2) + 'ap_uint<' + var_prefix + 'DATA' + str(idx) + '_WIDTH> sel' + str(idx) + \
				' = op' + str(idx) + '_data(' + var_prefix + 'DATA' + str(idx) + '_WIDTH-1, 0);\n')
		code.append(indent(2) + 'op' + str(idx) + '_u[i] = Reinterpret<' + var_prefix + 'data_t' + str(idx) + \
				'>(sel' + str(idx) + ');\n')
		code.append(indent(2) + 'op' + str(idx) + '_data = op' + str(idx) + '_data >> ' + var_prefix + 'DATA' + \
				str(idx) + '_WIDTH;\n')
		idx += 1
	code.append(indent(1) + '}\n\n')
	code.append(indent(1) + var_prefix + 'data_t' + str(idx) + ' sum = (init == 1)? (' + var_prefix + 'data_t' + \
			str(idx) + ') ' + str(desp['INIT_VALUE']) + ': *op' + str(idx) + ';\n\n')

	# code.append(indent(1) + 'for (int i = 0; i < ' + var_prefix + 'SIMD_FACTOR; i++){\n')
	# code.append('#pragma HLS UNROLL\n')
	# code.append(indent(2) + desp['MAC_STAT'])
	# code.append(indent(1) + '}\n\n')

	SIMD_LANE = int(desp['SIMD_FACTOR'])
	for lane in range(SIMD_LANE):
		code.append(indent(1) + '%sdata_t2 mult%d = op0_u[%d] * op1_u[%d];\n' % (var_prefix, lane, lane, lane))
	code.append('\n')
	for level in range(int(np.log2(SIMD_LANE)) - 1, -1, -1):
		local_lane = int(np.exp2(level))
		if level == int(np.log2(SIMD_LANE)) - 1:
			for lane in range(local_lane):
				code.append(indent(1) + '%sdata_t2 sum%d_%d = mult%d + mult%d;\n' %(var_prefix, level, lane, lane*2, lane*2+1))
		else:
			for lane in range(local_lane):
				code.append(indent(1) + '%sdata_t2 sum%d_%d = sum%d_%d + sum%d_%d;\n' % (var_prefix, level, lane, level+1, lane*2, level+1, lane*2+1))
		code.append('\n')

	code.append(indent(1) + 'sum += sum0_0;\n\n')

	code.append(indent(1) + '*op' + str(idx) + ' = sum;\n')
	code.append('}\n\n')

	return code

def op_transfer(desp, config):

	var_prefix = 'U%s' %(desp['KERNEL_ID']) + '_'
	code = []
		#op_transfer
	idx = 0
	for op_name in desp['OP_NAME']:
			#op_transfer_normal
		code.append('void ' + var_prefix + 'op' + str(idx) + '_transfer(\n')
		code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_in,\n')
		code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_out,\n')
		code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_local,\n')
		code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in,\n')
		code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out\n')
		code.append('){\n')
		code.append('#pragma HLS DATA_PACK variable=fifo' + str(idx) + '_in\n')
		code.append('#pragma HLS DATA_PACK variable=fifo' + str(idx) + '_out\n')
		code.append('#pragma HLS DATA_PACK variable=fifo' + str(idx) + '_local\n')
		code.append('#pragma HLS INLINE off\n')
		code.append(indent(1) + 'bool inst_done = 0;\n')
		code.append(indent(1) + 'uint inst = 0;\n')
		code.append(indent(1) + 'int inst_count = fifo_config_in.read();\n')
		code.append(indent(1) + 'fifo_config_out.write(inst_count);\n')
		code.append(indent(1) + 'while(!inst_done){\n') 
		code.append(indent(1) + 'uint CONV_EN = fifo_config_in.read();\n')
		code.append(indent(1) + 'fifo_config_out.write(CONV_EN);\n')
		code.append(indent(1) + 'if(CONV_EN){\n')
		code.append(indent(1) + '// read in configurations\n')
		code.append(indent(1) + 'uint LAYER_IN_NUM_T = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_OUT_NUM_T = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_IN_IMG_H_T = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_IN_IMG_W_T = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_FILTER_S_H = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_FILTER_S_W = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_TASK_NUM1 = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_TASK_NUM2 = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_COL_IL_FACTOR = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_STRIDE = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_BATCH = fifo_config_in.read();\n\n')

		code.append(indent(1) + 'uint LAYER_CONV_TYPE = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint FILTER_D0_H = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint FILTER_D0_W = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint FILTER_D1_H = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint FILTER_D1_W = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_DILATION_RATE = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_TCONV_STRIDE = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint K_NUM = fifo_config_in.read();\n')
		code.append(indent(1) + 'ap_uint<32> KH = fifo_config_in.read();\n')
		code.append(indent(1) + 'ap_uint<32> KW = fifo_config_in.read();\n')


		code.append(indent(1) + '// write out configurations\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_IN_NUM_T);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_OUT_NUM_T);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_IN_IMG_H_T);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_IN_IMG_W_T);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_FILTER_S_H);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_FILTER_S_W);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_TASK_NUM1);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_TASK_NUM2);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_LOCAL_REG_NUM);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_ROW_IL_FACTOR);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_COL_IL_FACTOR);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_STRIDE);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_BATCH);\n\n')

		code.append(indent(1) + 'fifo_config_out.write(LAYER_CONV_TYPE);\n')
		code.append(indent(1) + 'fifo_config_out.write(FILTER_D0_H);\n')
		code.append(indent(1) + 'fifo_config_out.write(FILTER_D0_W);\n')
		code.append(indent(1) + 'fifo_config_out.write(FILTER_D1_H);	\n')
		code.append(indent(1) + 'fifo_config_out.write(FILTER_D1_W);	\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_DILATION_RATE);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_TCONV_STRIDE);\n')
		code.append(indent(1) + 'fifo_config_out.write(K_NUM);\n')
		code.append(indent(1) + 'fifo_config_out.write(KH);\n')
		code.append(indent(1) + 'fifo_config_out.write(KW);\n')


		w = cal_width(desp['PARAMETERS']['LAYER_BATCH'])
		code.append(indent(1) + 'ap_uint<%d> layer_iter = 0;\n' % (w))
		code.append(indent(1) + 'bool done1 = 0;\n')
		code.append(indent(1) + 'while(!done1){\n')
		code.append(indent(2) + 'if (layer_iter > 0){\n')
		code.append(indent(3) + '// read in configurations\n')
		code.append(indent(3) + 'LAYER_IN_NUM_T = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_OUT_NUM_T = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_IN_IMG_H_T = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_IN_IMG_W_T = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_FILTER_S_H = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_FILTER_S_W = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_TASK_NUM1 = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_TASK_NUM2 = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_LOCAL_REG_NUM = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_ROW_IL_FACTOR = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_COL_IL_FACTOR = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_STRIDE = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_BATCH = fifo_config_in.read();\n\n')

		code.append(indent(3) + 'LAYER_CONV_TYPE = fifo_config_in.read();\n')
		code.append(indent(3) + 'FILTER_D0_H = fifo_config_in.read();\n')
		code.append(indent(3) + 'FILTER_D0_W = fifo_config_in.read();\n')
		code.append(indent(3) + 'FILTER_D1_H = fifo_config_in.read();\n')
		code.append(indent(3) + 'FILTER_D1_W = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_DILATION_RATE = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_TCONV_STRIDE = fifo_config_in.read();\n')
		code.append(indent(3) + 'K_NUM = fifo_config_in.read();\n')
		code.append(indent(3) + 'KH = fifo_config_in.read();\n')
		code.append(indent(3) + 'KW = fifo_config_in.read();\n')


		code.append(indent(3) + '// write out configurations\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_IN_NUM_T);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_OUT_NUM_T);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_IN_IMG_H_T);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_IN_IMG_W_T);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_FILTER_S_H);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_FILTER_S_W);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_TASK_NUM1);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_TASK_NUM2);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_LOCAL_REG_NUM);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_ROW_IL_FACTOR);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_COL_IL_FACTOR);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_STRIDE);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_BATCH);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_CONV_TYPE);\n')
		code.append(indent(3) + 'fifo_config_out.write(FILTER_D0_H);\n')
		code.append(indent(3) + 'fifo_config_out.write(FILTER_D0_W);\n')
		code.append(indent(3) + 'fifo_config_out.write(FILTER_D1_H);	\n')
		code.append(indent(3) + 'fifo_config_out.write(FILTER_D1_W);	\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_DILATION_RATE);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_TCONV_STRIDE);\n')
		code.append(indent(3) + 'fifo_config_out.write(K_NUM);\n')
		code.append(indent(3) + 'fifo_config_out.write(KH);\n')
		code.append(indent(3) + 'fifo_config_out.write(KW);\n')

		code.append(indent(3) + '}\n\n')

		val = desp['PARAMETERS']['OUT_NUM'] * desp['PARAMETERS']['IN_NUM'] * desp['PARAMETERS']['OUT_IMG_H'] * desp['PARAMETERS']['OUT_IMG_W']
		w = cal_width(val)
		code.append(indent(2) + 'ap_uint<%d> task_num = 0;\n' % (w))
		val = desp['PARAMETERS']['IN_NUM'] * desp['PARAMETERS']['K'] * desp['PARAMETERS']['K'] / desp['SIMD_FACTOR']
		w = cal_width(val)
		code.append(indent(2) + 'ap_uint<%d> la_counter = 0;\n' % (w))
		val = desp['PARAMETERS']['OUT_IMG_H_T'] * desp['COL_IL_FACTOR'] * desp['ROW_IL_FACTOR']
		w = cal_width(val)
		code.append(indent(2) + 'ap_uint<%d> local_reg_id = 0;\n' % (w))

		code.append(indent(2) + 'bool done2 = 0;\n')
		code.append(indent(2) + 'while(!done2){\n')
		code.append('#pragma HLS PIPELINE II=1\n')
		code.append(indent(3) + var_prefix + 'Data' + str(idx) + 'PEChannelType fifo' + str(idx) + '_in_data;\n')
		code.append(indent(3) + 'fifo' + str(idx) + '_in_data = fifo' + str(idx) + '_in.read();\n')
		code.append(indent(3) + 'fifo' + str(idx) + '_out.write(fifo' + str(idx) + '_in_data);\n')
		code.append(indent(3) + 'fifo' + str(idx) + '_local.write(fifo' + str(idx) + '_in_data);\n')

		code.append(indent(3) + 'local_reg_id++;\n')
		code.append(indent(3) + 'if (local_reg_id == LAYER_LOCAL_REG_NUM){\n')
		code.append(indent(4) + 'local_reg_id = 0;\n')
		code.append(indent(4) + 'la_counter++;\n')
		code.append(indent(4) + 'if (la_counter == LAYER_LOCAL_ACCUM_NUM){\n')
		code.append(indent(5) + 'la_counter = 0;\n')
		code.append(indent(5) + 'task_num++;\n')
		code.append(indent(5) + 'if (task_num == LAYER_TASK_NUM1){\n')
		code.append(indent(6) + 'task_num = 0;\n')
		code.append(indent(6) + 'done2 = 1;\n')

		code.append(indent(5) + '}\n')
		code.append(indent(4) + '}\n')
		code.append(indent(3) + '}\n')
		code.append(indent(2) + '}\n')

		code.append(indent(2) + 'layer_iter++;\n')
		code.append(indent(2) + 'if (layer_iter == LAYER_BATCH){\n')
		code.append(indent(3) + 'layer_iter = 0;\n')
		code.append(indent(3) + 'done1 = 1;\n')
		code.append(indent(2) + '}\n')
		code.append(indent(1) + '}\n')
		code.append(indent(1) + '}\n')
		code.append(indent(1) + '  inst++;\n')
		code.append(indent(1) + '  if(inst == inst_count){\n')
		code.append(indent(1) + '    inst_done = 1;\n')
		code.append(indent(1) + '  }\n')
		code.append('  }\n')
		code.append('}\n\n')

			#op_transfer_normal_wrapper
		code.append('void ' + var_prefix + 'op' + str(idx) + '_transfer_wrapper(\n')
		code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_in,\n')
		code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_out,\n')
		code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_local,\n')
		code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in,\n')
		code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out\n')
		code.append('){\n')
		code.append(indent(1) + var_prefix + 'op' + str(idx) + '_transfer(\n')
		code.append(indent(2) + 'fifo' + str(idx) + '_in,\n')
		code.append(indent(2) + 'fifo' + str(idx) + '_out,\n')
		code.append(indent(2) + 'fifo' + str(idx) + '_local,\n')
		code.append(indent(2) + 'fifo_config_in,\n')
		code.append(indent(2) + 'fifo_config_out\n')
		code.append(indent(1) + ');\n')
		code.append('}\n\n')

			#op_transfer_last
		code.append('void ' + var_prefix + 'op' + str(idx) + '_transfer_last(\n')
		code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_in,\n')
		code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_local,\n')
		code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in,\n')
		code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out\n')
		code.append('){\n')
		code.append('#pragma HLS DATA_PACK variable=fifo' + str(idx) + '_in\n')
		code.append('#pragma HLS DATA_PACK variable=fifo' + str(idx) + '_local\n')
		code.append('#pragma HLS INLINE off\n\n')
		code.append(indent(1) + 'bool inst_done = 0;\n')
		code.append(indent(1) + 'uint inst = 0;\n')
		code.append(indent(1) + 'int inst_count = fifo_config_in.read();\n')
		code.append(indent(1) + 'fifo_config_out.write(inst_count);\n')
		code.append(indent(1) + 'while(!inst_done){\n') 
		code.append(indent(1) + 'uint CONV_EN = fifo_config_in.read();\n')
		code.append(indent(1) + 'fifo_config_out.write(CONV_EN);\n')
		code.append(indent(1) + 'if(CONV_EN){\n')
		code.append(indent(1) + '// read in configurations\n')
		code.append(indent(1) + 'uint LAYER_IN_NUM_T = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_OUT_NUM_T = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_IN_IMG_H_T = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_IN_IMG_W_T = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_FILTER_S_H = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_FILTER_S_W = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_TASK_NUM1 = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_TASK_NUM2 = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_COL_IL_FACTOR = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_STRIDE = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_BATCH = fifo_config_in.read();\n\n')

		code.append(indent(1) + 'uint LAYER_CONV_TYPE = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint FILTER_D0_H = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint FILTER_D0_W = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint FILTER_D1_H = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint FILTER_D1_W = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_DILATION_RATE = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_TCONV_STRIDE = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint K_NUM = fifo_config_in.read();\n')
		code.append(indent(1) + 'ap_uint<32> KH = fifo_config_in.read();\n')
		code.append(indent(1) + 'ap_uint<32> KW = fifo_config_in.read();\n')


		code.append(indent(1) + '// write out configurations\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_IN_NUM_T);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_OUT_NUM_T);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_IN_IMG_H_T);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_IN_IMG_W_T);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_FILTER_S_H);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_FILTER_S_W);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_TASK_NUM1);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_TASK_NUM2);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_LOCAL_REG_NUM);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_ROW_IL_FACTOR);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_COL_IL_FACTOR);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_STRIDE);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_BATCH);\n\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_CONV_TYPE);\n')
		code.append(indent(1) + 'fifo_config_out.write(FILTER_D0_H);\n')
		code.append(indent(1) + 'fifo_config_out.write(FILTER_D0_W);\n')
		code.append(indent(1) + 'fifo_config_out.write(FILTER_D1_H);	\n')
		code.append(indent(1) + 'fifo_config_out.write(FILTER_D1_W);	\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_DILATION_RATE);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_TCONV_STRIDE);\n')
		code.append(indent(1) + 'fifo_config_out.write(K_NUM);\n')
		code.append(indent(1) + 'fifo_config_out.write(KH);\n')
		code.append(indent(1) + 'fifo_config_out.write(KW);\n')


		w = cal_width(desp['PARAMETERS']['LAYER_BATCH'])
		code.append(indent(1) + 'ap_uint<%d> layer_iter = 0;\n' % (w))
		code.append(indent(1) + 'bool done1 = 0;\n')
		code.append(indent(1) + 'while(!done1){\n')
		code.append(indent(2) + 'if (layer_iter > 0){\n')
		code.append(indent(3) + '// read in configurations\n')
		code.append(indent(3) + 'LAYER_IN_NUM_T = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_OUT_NUM_T = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_IN_IMG_H_T = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_IN_IMG_W_T = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_FILTER_S_H = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_FILTER_S_W = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_TASK_NUM1 = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_TASK_NUM2 = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_LOCAL_REG_NUM = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_ROW_IL_FACTOR = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_COL_IL_FACTOR = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_STRIDE = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_BATCH = fifo_config_in.read();\n\n')

		code.append(indent(3) + 'LAYER_CONV_TYPE = fifo_config_in.read();\n')
		code.append(indent(3) + 'FILTER_D0_H = fifo_config_in.read();\n')
		code.append(indent(3) + 'FILTER_D0_W = fifo_config_in.read();\n')
		code.append(indent(3) + 'FILTER_D1_H = fifo_config_in.read();\n')
		code.append(indent(3) + 'FILTER_D1_W = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_DILATION_RATE = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_TCONV_STRIDE = fifo_config_in.read();\n')
		code.append(indent(3) + 'K_NUM = fifo_config_in.read();\n')
		code.append(indent(3) + 'KH = fifo_config_in.read();\n')
		code.append(indent(3) + 'KW = fifo_config_in.read();\n')


		code.append(indent(3) + '// write out configurations\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_IN_NUM_T);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_OUT_NUM_T);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_IN_IMG_H_T);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_IN_IMG_W_T);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_FILTER_S_H);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_FILTER_S_W);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_TASK_NUM1);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_TASK_NUM2);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_LOCAL_REG_NUM);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_ROW_IL_FACTOR);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_COL_IL_FACTOR);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_STRIDE);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_BATCH);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_CONV_TYPE);\n')
		code.append(indent(3) + 'fifo_config_out.write(FILTER_D0_H);\n')
		code.append(indent(3) + 'fifo_config_out.write(FILTER_D0_W);\n')
		code.append(indent(3) + 'fifo_config_out.write(FILTER_D1_H);	\n')
		code.append(indent(3) + 'fifo_config_out.write(FILTER_D1_W);	\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_DILATION_RATE);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_TCONV_STRIDE);\n')
		code.append(indent(3) + 'fifo_config_out.write(K_NUM);\n')
		code.append(indent(3) + 'fifo_config_out.write(KH);\n')
		code.append(indent(3) + 'fifo_config_out.write(KW);\n')

		code.append(indent(2) + '}\n\n')

		val = desp['PARAMETERS']['OUT_NUM'] * desp['PARAMETERS']['IN_NUM'] * desp['PARAMETERS']['OUT_IMG_H'] * desp['PARAMETERS']['OUT_IMG_W']
		w = cal_width(val)
		code.append(indent(2) + 'ap_uint<%d> task_num = 0;\n' % (w))
		val = desp['PARAMETERS']['IN_NUM'] * desp['PARAMETERS']['K'] * desp['PARAMETERS']['K'] / desp['SIMD_FACTOR']
		w = cal_width(val)
		code.append(indent(2) + 'ap_uint<%d> la_counter = 0;\n' % (w))
		val = desp['PARAMETERS']['OUT_IMG_H_T'] * desp['COL_IL_FACTOR'] * desp['ROW_IL_FACTOR']
		w = cal_width(val)
		code.append(indent(2) + 'ap_uint<%d> local_reg_id = 0;\n' % (w))

		code.append(indent(2) + 'bool done2 = 0;\n')
		code.append(indent(2) + 'while(!done2){\n')
		code.append('#pragma HLS PIPELINE II=1\n')
		code.append(indent(3) + var_prefix + 'Data' + str(idx) + 'PEChannelType fifo' + str(idx) + '_in_data;\n')
		code.append(indent(3) + 'fifo' + str(idx) + '_in_data = fifo' + str(idx) + '_in.read();\n')
		code.append(indent(3) + 'fifo' + str(idx) + '_local.write(fifo' + str(idx) + '_in_data);\n')

		code.append(indent(3) + 'local_reg_id++;\n')
		code.append(indent(3) + 'if (local_reg_id == LAYER_LOCAL_REG_NUM){\n')
		code.append(indent(4) + 'local_reg_id = 0;\n')
		code.append(indent(4) + 'la_counter++;\n')
		code.append(indent(4) + 'if (la_counter == LAYER_LOCAL_ACCUM_NUM){\n')
		code.append(indent(5) + 'la_counter = 0;\n')
		code.append(indent(5) + 'task_num++;\n')
		code.append(indent(5) + 'if (task_num == LAYER_TASK_NUM1){\n')
		code.append(indent(6) + 'task_num = 0;\n')
		code.append(indent(6) + 'done2 = 1;\n')

		code.append(indent(5) + '}\n')
		code.append(indent(4) + '}\n')
		code.append(indent(3) + '}\n')
		code.append(indent(2) + '}\n')

		code.append(indent(2) + 'layer_iter++;\n')
		code.append(indent(2) + 'if (layer_iter == LAYER_BATCH){\n')
		code.append(indent(3) + 'layer_iter = 0;\n')
		code.append(indent(3) + 'done1 = 1;\n')
		code.append(indent(2) + '}\n')
		code.append(indent(1) + '}\n')
		code.append(indent(1) + '}\n')
		code.append(indent(1) + '  inst++;\n')
		code.append(indent(1) + '  if(inst == inst_count){\n')
		code.append(indent(1) + '    inst_done = 1;\n')
		code.append(indent(1) + '  }\n')
		code.append('  }\n')
		code.append('}\n\n')

			#op_transfer_last_wrapper
		code.append('void ' + var_prefix + 'op' + str(idx) + '_transfer_last_wrapper(\n')
		code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_in,\n')
		code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_local,\n')
		code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in,\n')
		code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out\n')
		code.append('){\n')
		code.append(indent(1) + var_prefix + 'op' + str(idx) + '_transfer_last(\n')
		code.append(indent(2) + 'fifo' + str(idx) + '_in,\n')
		code.append(indent(2) + 'fifo' + str(idx) + '_local,\n')
		code.append(indent(2) + 'fifo_config_in,\n')
		code.append(indent(2) + 'fifo_config_out\n')
		code.append(indent(1) + ');\n')
		code.append('}\n\n')

		idx += 1

	return code

def compute(desp, config):

	if desp['APP_NAME'] == 'nw':
		var_prefix = 'U%s_' % (desp['KERNEL_ID'])
			#compute_first
		code = []
		code.append('void %scompute_first(\n' % (var_prefix))
		idx = 0
		for op_name in desp['OP_NAME']:
			code.append(indent(1) + 'stream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_local,\n')
			idx += 1
		for res_name in desp['RES_NAME']:
			code.append(indent(1) + 'stream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_local,\n')
			idx += 1
		inter_idx = 0
		for inter_name in desp['INTER_NAME']:
			code.append(indent(1) + 'tapa::istream<%s> &fifo_%s_local_out,\n' % (desp['INTER_DATA_TYPE'][inter_idx], inter_name))
		width = cal_width(desp['SA_ROWS'])
		code.append(indent(1) + 'ap_uint<' + str(width) + '> pe_row_id,\n')
		width = cal_width(desp['SA_COLS'])
		code.append(indent(1) + 'ap_uint<' + str(width) + '> pe_col_id\n')
		code.append('){\n')
		idx = 0
		for op_name in desp['OP_NAME']:
			code.append('#pragma HLS DATA_PACK variable=fifo' + str(idx) + '_local\n')
			idx += 1
		code.append('#pragma HLS INLINE off\n\n')
		code_block = desp['COMPUTE_CODE']['FIRST']
		for code_line in code_block:
			code.append(indent(1) + code_line)
		code.append('}\n\n')

			#compute_middle
		code.append('void %scompute(\n' % (var_prefix))
		idx = 0
		for op_name in desp['OP_NAME']:
			code.append(indent(1) + 'stream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_local,\n')
			idx += 1
		for res_name in desp['RES_NAME']:
			code.append(indent(1) + 'stream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_local,\n')
			idx += 1
		inter_idx = 0
		for inter_name in desp['INTER_NAME']:
			code.append(indent(1) + 'tapa::istream<%s> &fifo_%s_local_in,\n' % (desp['INTER_DATA_TYPE'][inter_idx], inter_name))
			code.append(indent(1) + 'tapa::stream<%s> &fifo_%s_local_out,\n' % (desp['INTER_DATA_TYPE'][inter_idx], inter_name))
			inter_idx += 1
		width = cal_width(desp['SA_ROWS'])
		code.append(indent(1) + 'ap_uint<' + str(width) + '> pe_row_id,\n')
		width = cal_width(desp['SA_COLS'])
		code.append(indent(1) + 'ap_uint<' + str(width) + '> pe_col_id\n')
		code.append('){\n')
		idx = 0
		for op_name in desp['OP_NAME']:
			code.append('#pragma HLS DATA_PACK variable=fifo' + str(idx) + '_local\n')
			idx += 1
		code.append('#pragma HLS INLINE off\n\n')
		code_block = desp['COMPUTE_CODE']['MIDDLE']
		for code_line in code_block:
			code.append(indent(1) + code_line)
		code.append('}\n\n')

			#compute_wrapper
		code.append('void ' + var_prefix + 'compute_wrapper(\n')
		idx = 0
		for op_name in desp['OP_NAME']:
			code.append(indent(1) + 'stream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_local,\n')
			idx += 1
		for res_name in desp['RES_NAME']:
			code.append(indent(1) + 'stream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_local,\n')
			idx += 1
		inter_idx = 0
		for inter_name in desp['INTER_NAME']:
			code.append(indent(1) + 'tapa::istream<%s> &fifo_%s_local_in,\n' % (desp['INTER_DATA_TYPE'][inter_idx], inter_name))
			code.append(indent(1) + 'tapa::stream<%s> &fifo_%s_local_out,\n' % (desp['INTER_DATA_TYPE'][inter_idx], inter_name))
			inter_idx += 1
		width = cal_width(desp['SA_ROWS'])
		code.append(indent(1) + 'ap_uint<' + str(width) + '> pe_row_id,\n')
		width = cal_width(desp['SA_COLS'])
		code.append(indent(1) + 'ap_uint<' + str(width) + '> pe_col_id\n')
		code.append('){\n')
		code.append(indent(1) + var_prefix + 'compute(\n')
		idx = 0
		for op_name in desp['OP_NAME']:
			code.append(indent(2) + 'fifo' + str(idx) + '_local,\n')
			idx += 1
		for res_name in desp['RES_NAME']:
			code.append(indent(2) + 'fifo' + str(idx) + '_local,\n')
			idx += 1
		inter_idx = 0
		for inter_name in desp['INTER_NAME']:
			code.append(indent(2) + 'fifo_%s_local_in,\n' % (inter_name))
			code.append(indent(2) + 'fifo_%s_local_out,\n' % (inter_name))
			inter_idx += 1
		code.append(indent(2) + 'pe_row_id,\n')
		code.append(indent(2) + 'pe_col_id\n')
		code.append(indent(1) + ');\n')
		code.append('}\n\n')

			#compute_last
		code.append('void %scompute_last(\n' % (var_prefix))
		idx = 0
		for op_name in desp['OP_NAME']:
			code.append(indent(1) + 'stream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_local,\n')
			idx += 1
		for res_name in desp['RES_NAME']:
			code.append(indent(1) + 'stream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_local,\n')
			idx += 1
		inter_idx = 0
		for inter_name in desp['INTER_NAME']:
			code.append(indent(1) + 'tapa::istream<%s> &fifo_%s_local_in,\n' % (desp['INTER_DATA_TYPE'][inter_idx], inter_name))
		#     code.append(indent(1) + 'tapa::stream<%s> &fifo_%s_local_out,\n' % (desp['INTER_DATA_TYPE'][inter_idx], inter_name))
			inter_idx += 1
		width = cal_width(desp['SA_ROWS'])
		code.append(indent(1) + 'ap_uint<' + str(width) + '> pe_row_id,\n')
		width = cal_width(desp['SA_COLS'])
		code.append(indent(1) + 'ap_uint<' + str(width) + '> pe_col_id\n')
		code.append('){\n')
		idx = 0
		for op_name in desp['OP_NAME']:
			code.append('#pragma HLS DATA_PACK variable=fifo' + str(idx) + '_local\n')
			idx += 1
		code.append('#pragma HLS INLINE off\n\n')
		code_block = desp['COMPUTE_CODE']['LAST']
		for code_line in code_block:
			code.append(indent(1) + code_line)
		code.append('}\n\n')

	else:
		var_prefix = 'U%s' %(desp['KERNEL_ID']) + '_'
		code = []
		code.append('void ' + var_prefix + 'compute(\n')
		idx = 0
		for op_name in desp['OP_NAME']:
			code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_local,\n')
			idx += 1
		for res_name in desp['RES_NAME']:
			code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_local,\n')
			idx += 1
		code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in,\n')
		code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out\n')
		code.append('){\n')
		idx = 0
		for op_name in desp['OP_NAME']:
			code.append('#pragma HLS DATA_PACK variable=fifo' + str(idx) + '_local\n')
			idx += 1
		code.append('#pragma HLS INLINE off\n\n')
		code.append(indent(1) + 'bool inst_done = 0;\n')
		code.append(indent(1) + 'uint inst = 0;\n')
		code.append(indent(1) + 'int inst_count = fifo_config_in.read();\n')
		code.append(indent(1) + 'fifo_config_out.write(inst_count);\n')
		code.append(indent(1) + 'while(!inst_done){\n') 
		code.append(indent(1) + 'uint CONV_EN = fifo_config_in.read();\n')
		code.append(indent(1) + 'fifo_config_out.write(CONV_EN);\n')
		code.append(indent(1) + 'if(CONV_EN){\n')
		code.append(indent(1) + var_prefix + 'data_t' + str(idx) + ' local_buffer[' + var_prefix + 'LOCAL_REG_NUM];\n\n')

		code.append(indent(1) + '// read in configurations\n')
		#   code.append(indent(1) + 'uint LAYER_IN_NUM = fifo_config_in.read();\n')
		#   code.append(indent(1) + 'uint LAYER_OUT_NUM = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_IN_NUM_T = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_OUT_NUM_T = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_IN_IMG_H_T = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_IN_IMG_W_T = fifo_config_in.read();\n')
		#   code.append(indent(1) + 'uint LAYER_OUT_IMG_H = fifo_config_in.read();\n')
		#   code.append(indent(1) + 'uint LAYER_OUT_IMG_W = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_FILTER_S_H = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_FILTER_S_W = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_TASK_NUM1 = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_TASK_NUM2 = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_COL_IL_FACTOR = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_STRIDE = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_BATCH = fifo_config_in.read();\n\n')

		code.append(indent(1) + 'uint LAYER_CONV_TYPE = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint FILTER_D0_H = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint FILTER_D0_W = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint FILTER_D1_H = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint FILTER_D1_W = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_DILATION_RATE = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_TCONV_STRIDE = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint K_NUM = fifo_config_in.read();\n')
		code.append(indent(1) + 'ap_uint<32> KH = fifo_config_in.read();\n')
		code.append(indent(1) + 'ap_uint<32> KW = fifo_config_in.read();\n')
		code.append(indent(1) + 'ap_uint<8> in_ch_factor = LAYER_IN_NUM_T/U1_SIMD_FACTOR;\n\n')
		code.append(indent(1) + '// write out configurations\n')
		#   code.append(indent(1) + 'fifo_config_out.write(LAYER_IN_NUM);\n')
		#   code.append(indent(1) + 'fifo_config_out.write(LAYER_OUT_NUM);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_IN_NUM_T);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_OUT_NUM_T);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_IN_IMG_H_T);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_IN_IMG_W_T);\n')
		#   code.append(indent(1) + 'fifo_config_out.write(LAYER_OUT_IMG_H);\n')
		#   code.append(indent(1) + 'fifo_config_out.write(LAYER_OUT_IMG_W);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_FILTER_S_H);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_FILTER_S_W);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_TASK_NUM1);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_TASK_NUM2);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_LOCAL_REG_NUM);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_ROW_IL_FACTOR);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_COL_IL_FACTOR);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_STRIDE);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_BATCH);\n\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_CONV_TYPE);\n')
		code.append(indent(1) + 'fifo_config_out.write(FILTER_D0_H);\n')
		code.append(indent(1) + 'fifo_config_out.write(FILTER_D0_W);\n')
		code.append(indent(1) + 'fifo_config_out.write(FILTER_D1_H);	\n')
		code.append(indent(1) + 'fifo_config_out.write(FILTER_D1_W);	\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_DILATION_RATE);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_TCONV_STRIDE);\n')
		code.append(indent(1) + 'fifo_config_out.write(K_NUM);\n')
		code.append(indent(1) + 'fifo_config_out.write(KH);\n')
		code.append(indent(1) + 'fifo_config_out.write(KW);\n')


		w = cal_width(desp['PARAMETERS']['LAYER_BATCH'])
		code.append(indent(1) + 'ap_uint<%d> layer_iter = 0;\n' % (w))
		code.append(indent(1) + 'bool done1 = 0;\n')
		code.append(indent(1) + 'int i = 0;\n')
	
		code.append(indent(1) + 'ap_uint<10> LAYER_LOCAL_ACCUM_NUM_ARR[4] = {\n')
		code.append(indent(1) + '  in_ch_factor*unpack(KH,0)*unpack(KW,0),\n')
		code.append(indent(1) + '  in_ch_factor*unpack(KH,1)*unpack(KW,1),\n')
		code.append(indent(1) + '  in_ch_factor*unpack(KH,2)*unpack(KW,2),\n')
		code.append(indent(1) + '  in_ch_factor*unpack(KH,3)*unpack(KW,3)\n')
		code.append(indent(1) + '};\n')
		code.append(indent(1) + 'ap_uint<16> LAYER_LOCAL_REG_NUM_ARR_START[4] = {\n')
		code.append(indent(1) + '	0*LAYER_LOCAL_REG_NUM,\n')
		code.append(indent(1) + '	1*LAYER_LOCAL_REG_NUM,\n')
		code.append(indent(1) + '	2*LAYER_LOCAL_REG_NUM,\n')
		code.append(indent(1) + '	3*LAYER_LOCAL_REG_NUM\n')
		code.append(indent(1) + '};\n')
		code.append(indent(1) + 'ap_uint<16> LAYER_LOCAL_REG_NUM_ARR_END[4] = {\n')
		code.append(indent(1) + '	1*LAYER_LOCAL_REG_NUM,\n')
		code.append(indent(1) + '	2*LAYER_LOCAL_REG_NUM,\n')
		code.append(indent(1) + '	3*LAYER_LOCAL_REG_NUM,\n')
		code.append(indent(1) + '	4*LAYER_LOCAL_REG_NUM\n')
		code.append(indent(1) + '};\n')
		code.append(indent(1) + '#pragma HLS ARRAY_PARTITION variable=LAYER_LOCAL_ACCUM_NUM_ARR complete\n')
		code.append(indent(1) + '#pragma HLS ARRAY_PARTITION variable=LAYER_LOCAL_REG_NUM_ARR_START complete\n')
		code.append(indent(1) + '#pragma HLS ARRAY_PARTITION variable=LAYER_LOCAL_REG_NUM_ARR_END complete  \n')
		code.append(indent(1) + 'while(!done1){\n')
		code.append(indent(2) + 'if (layer_iter > 0){\n')
		code.append(indent(3) + '// read in configurations\n')
		code.append(indent(3) + 'LAYER_IN_NUM_T = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_OUT_NUM_T = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_IN_IMG_H_T = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_IN_IMG_W_T = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_FILTER_S_H = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_FILTER_S_W = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_TASK_NUM1 = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_TASK_NUM2 = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_LOCAL_REG_NUM = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_ROW_IL_FACTOR = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_COL_IL_FACTOR = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_STRIDE = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_BATCH = fifo_config_in.read();\n\n')

		code.append(indent(3) + 'LAYER_CONV_TYPE = fifo_config_in.read();\n')
		code.append(indent(3) + 'FILTER_D0_H = fifo_config_in.read();\n')
		code.append(indent(3) + 'FILTER_D0_W = fifo_config_in.read();\n')
		code.append(indent(3) + 'FILTER_D1_H = fifo_config_in.read();\n')
		code.append(indent(3) + 'FILTER_D1_W = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_DILATION_RATE = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_TCONV_STRIDE = fifo_config_in.read();\n')
		code.append(indent(3) + 'K_NUM = fifo_config_in.read();\n')
		code.append(indent(3) + 'KH = fifo_config_in.read();\n')
		code.append(indent(3) + 'KW = fifo_config_in.read();\n')


		code.append(indent(3) + '// write out configurations\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_IN_NUM_T);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_OUT_NUM_T);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_IN_IMG_H_T);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_IN_IMG_W_T);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_FILTER_S_H);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_FILTER_S_W);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_TASK_NUM1);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_TASK_NUM2);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_LOCAL_REG_NUM);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_ROW_IL_FACTOR);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_COL_IL_FACTOR);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_STRIDE);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_BATCH);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_CONV_TYPE);\n')
		code.append(indent(3) + 'fifo_config_out.write(FILTER_D0_H);\n')
		code.append(indent(3) + 'fifo_config_out.write(FILTER_D0_W);\n')
		code.append(indent(3) + 'fifo_config_out.write(FILTER_D1_H);	\n')
		code.append(indent(3) + 'fifo_config_out.write(FILTER_D1_W);	\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_DILATION_RATE);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_TCONV_STRIDE);\n')
		code.append(indent(3) + 'fifo_config_out.write(K_NUM);\n')
		code.append(indent(3) + 'fifo_config_out.write(KH);\n')
		code.append(indent(3) + 'fifo_config_out.write(KW);\n')


		code.append(indent(2) + '}\n\n')

		val = desp['PARAMETERS']['OUT_NUM'] * desp['PARAMETERS']['IN_NUM'] * desp['PARAMETERS']['OUT_IMG_H'] * desp['PARAMETERS']['OUT_IMG_W']
		w = cal_width(val)
		code.append(indent(2) + 'ap_uint<%d> task_num = 0;\n' % (w))
		val = desp['PARAMETERS']['IN_NUM'] * desp['PARAMETERS']['K'] * desp['PARAMETERS']['K'] / desp['SIMD_FACTOR']
		w = cal_width(val)
		code.append(indent(2) + 'ap_uint<%d> la_counter = 0;\n' % (w))
		val = desp['PARAMETERS']['OUT_IMG_H_T'] * desp['COL_IL_FACTOR'] * desp['ROW_IL_FACTOR']
		w = cal_width(val)
		code.append(indent(2) + 'ap_uint<%d> local_reg_id = 0;\n' % (w))

		code.append(indent(2) + 'bool done2 = 0;\n')
		code.append(indent(2) + 'while(!done2){\n')
		code.append('#pragma HLS PIPELINE II=1\n')
		code.append('#pragma HLS DEPENDENCE inter false variable=local_buffer\n')

		idx = 0
		for op_name in desp['OP_NAME']:
			code.append(indent(3) + var_prefix + 'Data' + str(idx) + 'PEChannelType fifo' + str(idx) + '_in_data;\n')
			code.append(indent(3) + 'fifo' + str(idx) + '_in_data = fifo' + str(idx) + '_local.read();\n')
			idx += 1
		code.append(indent(3) + 'bool init = fifo0_in_data.new_pair;\n')
		code.append(indent(3) + 'bool last = fifo0_in_data.last_pair;\n')

		str_tmp = ''
		idx = 0
		for op_name in desp['OP_NAME']:
			str_tmp += 'fifo' + str(idx) + '_in_data.data, '
			idx += 1

		code.append(indent(3) + var_prefix + 'PE_MAC(' + str_tmp + '&local_buffer[local_reg_id], (init == 1 && la_counter == 0 && i<K_NUM)? 1:0);\n')
		code.append(indent(3) + 'if (la_counter == LAYER_LOCAL_ACCUM_NUM_ARR[i] - 1 && last){\n')
		code.append(indent(4) + 'fifo' + str(idx) + '_local.write(%sData%sPEChannelType(local_buffer[local_reg_id]));\n' % (var_prefix, str(idx)))
		code.append(indent(3) + '}\n')

		code.append(indent(3) + 'local_reg_id++;\n')
		code.append(indent(3) + 'if (local_reg_id == LAYER_LOCAL_REG_NUM_ARR_END[i]){\n')
		code.append(indent(4) + 'local_reg_id = LAYER_LOCAL_REG_NUM_ARR_START[i];\n')
		code.append(indent(4) + 'la_counter++;\n')
		code.append(indent(4) + 'if (la_counter == LAYER_LOCAL_ACCUM_NUM_ARR[i]){\n')
		code.append(indent(5) + 'la_counter = 0;\n')
		code.append(indent(5) + 'i++;\n')
		code.append(indent(5) + 'local_reg_id = LAYER_LOCAL_REG_NUM_ARR_START[i];\n')
		code.append(indent(5) + 'if (i == K_NUM){\n')
		code.append(indent(6) + 'i = 0;\n')
		code.append(indent(6) + 'local_reg_id = 0;\n')
		code.append(indent(6) + 'task_num++;\n')
		code.append(indent(6) + 'if (task_num == LAYER_TASK_NUM1){\n')
		code.append(indent(7) + 'task_num = 0;\n')
		code.append(indent(7) + 'done2 = 1;\n')
		code.append(indent(6) + '}\n')
		code.append(indent(5) + '}\n')
		code.append(indent(4) + '}\n')
		code.append(indent(3) + '}\n')
		code.append(indent(2) + '}\n')

		code.append(indent(2) + 'layer_iter++;\n')
		code.append(indent(2) + 'if (layer_iter == LAYER_BATCH){\n')
		code.append(indent(3) + 'layer_iter = 0;\n')
		code.append(indent(3) + 'done1 = 1;\n')
		code.append(indent(2) + '}\n')
		code.append(indent(1) + '}\n')
		code.append(indent(1) + '}\n')
		code.append(indent(1) + '  inst++;\n')
		code.append(indent(1) + '  if(inst == inst_count){\n')
		code.append(indent(1) + '    inst_done = 1;\n')
		code.append(indent(1) + '  }\n')
		code.append(indent(1) + '}\n')

		code.append('}\n\n')

			#compute_wrapper
		code.append('void ' + var_prefix + 'compute_wrapper(\n')
		idx = 0
		for op_name in desp['OP_NAME']:
			code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_local,\n')
			idx += 1
		for res_name in desp['RES_NAME']:
			code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_local,\n')
			idx += 1
		code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in,\n')
		code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out\n')
		code.append('){\n')
		code.append(indent(1) + var_prefix + 'compute(\n')
		idx = 0
		for op_name in desp['OP_NAME']:
			code.append(indent(2) + 'fifo' + str(idx) + '_local,\n')
			idx += 1
		for res_name in desp['RES_NAME']:
			code.append(indent(2) + 'fifo' + str(idx) + '_local,\n')
			idx += 1
		code.append(indent(2) + 'fifo_config_in,\n')
		code.append(indent(2) + 'fifo_config_out\n')
		code.append(indent(1) + ');\n')
		code.append('}\n\n')

	return code

def res_transfer(desp, config):

	var_prefix = 'U%s' %(desp['KERNEL_ID']) + '_'
	code = []
		#res_transfer
	code.append('void ' + var_prefix + 'res_transfer(\n')
	idx = len(desp['OP_NAME'])
	for res_name in desp['RES_NAME']:
		code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_local,\n')
		code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_in,\n')
		code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_out,\n')
		idx += 1
	width = cal_width(desp['SA_ROWS'])
	code.append(indent(1) + 'ap_uint<' + str(width) + '> pe_row_id,\n')
	width = cal_width(desp['SA_COLS'])
	code.append(indent(1) + 'ap_uint<' + str(width) + '> pe_col_id,\n')
	code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in,\n')
	code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out\n')
	code.append('){\n')
	idx = len(desp['OP_NAME'])
	for res_name in desp['RES_NAME']:
		code.append('#pragma HLS DATA_PACK variable=fifo' + str(idx) + '_in\n')
		code.append('#pragma HLS DATA_PACK variable=fifo' + str(idx) + '_out\n')
		idx += 1
	code.append('#pragma HLS INLINE off\n\n')
	code.append(indent(1) + 'bool inst_done = 0;\n')
	code.append(indent(1) + 'uint inst = 0;\n')
	code.append(indent(1) + 'int inst_count = fifo_config_in.read();\n')
	code.append(indent(1) + 'fifo_config_out.write(inst_count);\n')
	code.append(indent(1) + 'while(!inst_done){\n') 
	code.append(indent(1) + 'uint CONV_EN = fifo_config_in.read();\n')
	code.append(indent(1) + 'fifo_config_out.write(CONV_EN);\n')
	code.append(indent(1) + 'if(CONV_EN){\n')
	code.append(indent(1) + '// read in configurations\n')
	code.append(indent(1) + 'uint LAYER_IN_NUM_T = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_OUT_NUM_T = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_IN_IMG_H_T = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_IN_IMG_W_T = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_FILTER_S_H = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_FILTER_S_W = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_TASK_NUM1 = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_TASK_NUM2 = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_COL_IL_FACTOR = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_STRIDE = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_BATCH = fifo_config_in.read();\n\n')

	code.append(indent(1) + 'uint LAYER_CONV_TYPE = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint FILTER_D0_H = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint FILTER_D0_W = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint FILTER_D1_H = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint FILTER_D1_W = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_DILATION_RATE = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_TCONV_STRIDE = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint K_NUM = fifo_config_in.read();\n')
	code.append(indent(1) + 'ap_uint<32> KH = fifo_config_in.read();\n')
	code.append(indent(1) + 'ap_uint<32> KW = fifo_config_in.read();\n')


	code.append(indent(1) + '// write out configurations\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_IN_NUM_T);\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_OUT_NUM_T);\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_IN_IMG_H_T);\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_IN_IMG_W_T);\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_FILTER_S_H);\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_FILTER_S_W);\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_TASK_NUM1);\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_TASK_NUM2);\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_LOCAL_REG_NUM);\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_ROW_IL_FACTOR);\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_COL_IL_FACTOR);\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_STRIDE);\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_BATCH);\n\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_CONV_TYPE);\n')
	code.append(indent(1) + 'fifo_config_out.write(FILTER_D0_H);\n')
	code.append(indent(1) + 'fifo_config_out.write(FILTER_D0_W);\n')
	code.append(indent(1) + 'fifo_config_out.write(FILTER_D1_H);	\n')
	code.append(indent(1) + 'fifo_config_out.write(FILTER_D1_W);	\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_DILATION_RATE);\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_TCONV_STRIDE);\n')
	code.append(indent(1) + 'fifo_config_out.write(K_NUM);\n')
	code.append(indent(1) + 'fifo_config_out.write(KH);\n')
	code.append(indent(1) + 'fifo_config_out.write(KW);\n')


	idx = len(desp['OP_NAME'])
	code.append(indent(1) + var_prefix + 'data_t' + str(idx) + ' local_buffer[' + var_prefix + 'TRANSFER_REG_NUM];\n\n')

	w = cal_width(desp['PARAMETERS']['LAYER_BATCH'])
	code.append(indent(1) + 'for (ap_uint<%d> layer_iter = 0; layer_iter < LAYER_BATCH; layer_iter++){\n' % (w))
	code.append(indent(2) + 'if (layer_iter > 0){\n')
	code.append(indent(3) + '// read in configurations\n')
	code.append(indent(3) + 'LAYER_IN_NUM_T = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_OUT_NUM_T = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_IN_IMG_H_T = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_IN_IMG_W_T = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_FILTER_S_H = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_FILTER_S_W = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_TASK_NUM1 = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_TASK_NUM2 = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_LOCAL_REG_NUM = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_ROW_IL_FACTOR = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_COL_IL_FACTOR = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_STRIDE = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_BATCH = fifo_config_in.read();\n\n')

	code.append(indent(3) + 'LAYER_CONV_TYPE = fifo_config_in.read();\n')
	code.append(indent(3) + 'FILTER_D0_H = fifo_config_in.read();\n')
	code.append(indent(3) + 'FILTER_D0_W = fifo_config_in.read();\n')
	code.append(indent(3) + 'FILTER_D1_H = fifo_config_in.read();\n')
	code.append(indent(3) + 'FILTER_D1_W = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_DILATION_RATE = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_TCONV_STRIDE = fifo_config_in.read();\n')
	code.append(indent(3) + 'K_NUM = fifo_config_in.read();\n')
	code.append(indent(3) + 'KH = fifo_config_in.read();\n')
	code.append(indent(3) + 'KW = fifo_config_in.read();\n')


	code.append(indent(3) + '// write out configurations\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_IN_NUM_T);\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_OUT_NUM_T);\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_IN_IMG_H_T);\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_IN_IMG_W_T);\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_FILTER_S_H);\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_FILTER_S_W);\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_TASK_NUM1);\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_TASK_NUM2);\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_LOCAL_REG_NUM);\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_ROW_IL_FACTOR);\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_COL_IL_FACTOR);\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_STRIDE);\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_BATCH);\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_CONV_TYPE);\n')
	code.append(indent(3) + 'fifo_config_out.write(FILTER_D0_H);\n')
	code.append(indent(3) + 'fifo_config_out.write(FILTER_D0_W);\n')
	code.append(indent(3) + 'fifo_config_out.write(FILTER_D1_H);	\n')
	code.append(indent(3) + 'fifo_config_out.write(FILTER_D1_W);	\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_DILATION_RATE);\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_TCONV_STRIDE);\n')
	code.append(indent(3) + 'fifo_config_out.write(K_NUM);\n')
	code.append(indent(3) + 'fifo_config_out.write(KH);\n')
	code.append(indent(3) + 'fifo_config_out.write(KW);\n')

	code.append(indent(2) + '}\n\n')
	code.append(indent(2) + '#pragma HLS BIND_OP variable=LAYER_LOCAL_REG_NUM op=mul impl=fabric latency=1\n')
	code.append(indent(2) + 'LAYER_LOCAL_REG_NUM = K_NUM*LAYER_LOCAL_REG_NUM;\n')
	val = desp['PARAMETERS']['OUT_NUM'] * desp['PARAMETERS']['OUT_IMG_H'] * desp['PARAMETERS']['OUT_IMG_W']
	w = cal_width(val)
	code.append(indent(2) + 'for (ap_uint<%d> task_num = 0; task_num < LAYER_TASK_NUM2; task_num++)\n' % (w))
	code.append(indent(2) + '{\n')
	indent_level = 3

	val = desp['PARAMETERS']['OUT_IMG_H_T'] * desp['COL_IL_FACTOR'] * desp['ROW_IL_FACTOR']
	w = cal_width(val)
	code.append(indent(indent_level) + 'for (ap_uint<%d> local_reg_id = 0; local_reg_id < ' % (w) + var_prefix + \
		'TRANSFER_REG_NUM; local_reg_id++){\n')
	indent_level += 1
	code.append('#pragma HLS PIPELINE II=1\n')
	code.append(indent(indent_level) + 'if (local_reg_id < LAYER_LOCAL_REG_NUM){\n')
	indent_level += 1
	idx = len(desp['OP_NAME'])
	code.append(indent(indent_level) + '%sData%sPEChannelType fifo%s_local_data = fifo%s_local.read();\n' % (var_prefix, str(idx), str(idx), str(idx)))
	code.append(indent(indent_level) + 'local_buffer[local_reg_id] = fifo%s_local_data.data;\n' % (str(idx)))
	# code.append(indent(indent_level) + 'local_buffer[local_reg_id] = fifo' + str(idx) + '_local.read();\n')
	indent_level -= 1
	code.append(indent(indent_level) + '} else {\n')
	code.append(indent(indent_level+1) + 'break;\n')
	code.append(indent(indent_level) + '}\n')
	indent_level -= 1
	code.append(indent(indent_level) + '}\n\n')

	ch_dir = desp['RES_CHANNEL_DIR'][0]
	if ch_dir == 'D':
	#   code.append(indent(indent_level) + 'int transfer_num = ' + 'LAYER_LOCAL_REG_NUM * (pe_row_id + 1);\n')
		code.append(indent(indent_level) + 'for (int transfer_iter = pe_row_id + 1 - 1; transfer_iter >= 0; transfer_iter--){\n')
	elif ch_dir == 'U':
	#   code.append(indent(indent_level) + 'int transfer_num = ' + 'LAYER_LOCAL_REG_NUM * (SA_ROWS - pe_row_id);\n')
		code.append(indent(indent_level) + 'for (int transfer_iter = %sSA_ROWS - pe_row_id - 1; transfer_iter >= 0; transfer_iter--){\n' % (var_prefix))
	elif ch_dir == 'R':
	#   code.append(indent(indent_level) + 'int transfer_num = ' + 'LAYER_LOCAL_REG_NUM * (pe_col_id + 1);\n')
		code.append(indent(indent_level) + 'for (int transfer_iter = pe_col_id + 1 - 1; transfer_iter >= 0; transfer_iter--){\n')
	elif ch_dir == 'L':
	#   code.append(indent(indent_level) + 'int transfer_num = ' + 'LAYER_LOCAL_REG_NUM * (SA_COLS - pe_col_id);\n')
		code.append(indent(indent_level) + 'for (int transfer_iter = %sSA_COLS - pe_col_id - 1; transfer_iter >= 0; transfer_iter--){\n' % (var_prefix))

	indent_level += 1

	val = desp['PARAMETERS']['OUT_IMG_H_T'] * desp['COL_IL_FACTOR'] * desp['ROW_IL_FACTOR']
	w = cal_width(val)
	code.append(indent(indent_level) + 'for (ap_uint<%d> local_reg_id = 0; local_reg_id < %sTRANSFER_REG_NUM; local_reg_id++){\n' % (w, var_prefix))
	code.append('#pragma HLS PIPELINE II=1\n')
	indent_level += 1
	code.append(indent(indent_level) + 'if (local_reg_id < LAYER_LOCAL_REG_NUM){\n')
	indent_level += 1
	idx = len(desp['OP_NAME'])
	code.append(indent(indent_level) + 'fifo' + str(idx) + '_out.write(' + var_prefix + 'Data' + str(idx) + \
			'PEChannelType(local_buffer[local_reg_id]));\n')
	code.append(indent(indent_level) + 'if (transfer_iter > 0){\n')
	indent_level += 1
	code.append(indent(indent_level) + var_prefix + 'Data' + str(idx) + 'PEChannelType fifo' + str(idx) + \
			'_in_data = fifo' + str(idx) + '_in.read();\n')
	code.append(indent(indent_level) + 'local_buffer[local_reg_id] = fifo' + str(idx) + '_in_data.data;\n')
	indent_level -= 1
	code.append(indent(indent_level) + '}\n')
	indent_level -= 1
	code.append(indent(indent_level) + '} else {\n')
	code.append(indent(indent_level+1) + 'break;\n')
	code.append(indent(indent_level) + '}\n')
	indent_level -= 1
	code.append(indent(indent_level) + '}\n')
	indent_level -= 1
	code.append(indent(indent_level) + '}\n')
	indent_level -= 1
	code.append(indent(indent_level) + '}\n')
	indent_level -= 1
	code.append(indent(indent_level) + '}\n')
	code.append(indent(indent_level) + '}\n')
	code.append(indent(1) + '  inst++;\n')
	code.append(indent(1) + '  if(inst == inst_count){\n')
	code.append(indent(1) + '    inst_done = 1;\n')
	code.append(indent(1) + '  }\n')
	code.append(indent(1) + '}\n')

	code.append('}\n\n')

		#res_transfer_wrapper
	code.append('void ' + var_prefix + 'res_transfer_wrapper(\n')
	idx = len(desp['OP_NAME'])
	for res_name in desp['RES_NAME']:
		code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_local,\n')
		code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_in,\n')
		code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_out,\n')
		idx += 1
	width = cal_width(desp['SA_ROWS'])
	code.append(indent(1) + 'ap_uint<' + str(width) + '> pe_row_id,\n')
	width = cal_width(desp['SA_COLS'])
	code.append(indent(1) + 'ap_uint<' + str(width) + '> pe_col_id,\n')
	code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in,\n')
	code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out\n')
	code.append('){\n')
	code.append(indent(1) + var_prefix + 'res_transfer(\n')
	idx = len(desp['OP_NAME'])
	for res_name in desp['RES_NAME']:
		code.append(indent(2) + 'fifo' + str(idx) + '_local,\n')
		code.append(indent(2) + 'fifo' + str(idx) + '_in,\n')
		code.append(indent(2) + 'fifo' + str(idx) + '_out,\n')
		idx += 1
	width = cal_width(desp['SA_ROWS'])
	code.append(indent(2) + 'pe_row_id,\n')
	width = cal_width(desp['SA_COLS'])
	code.append(indent(2) + 'pe_col_id,\n')
	code.append(indent(2) + 'fifo_config_in,\n')
	code.append(indent(2) + 'fifo_config_out\n')
	code.append(indent(1) + ');\n')
	code.append('}\n\n')
	
	code.append('void ' + var_prefix + 'res_transfer_last(\n')
	idx = len(desp['OP_NAME'])
	for res_name in desp['RES_NAME']:
		code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_local,\n')
		code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_in,\n')
		code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_out,\n')
		idx += 1
	width = cal_width(desp['SA_ROWS'])
	code.append(indent(1) + 'ap_uint<' + str(width) + '> pe_row_id,\n')
	width = cal_width(desp['SA_COLS'])
	code.append(indent(1) + 'ap_uint<' + str(width) + '> pe_col_id,\n')
	code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in\n')
	code.append('){\n')
	idx = len(desp['OP_NAME'])
	for res_name in desp['RES_NAME']:
		code.append('#pragma HLS DATA_PACK variable=fifo' + str(idx) + '_in\n')
		code.append('#pragma HLS DATA_PACK variable=fifo' + str(idx) + '_out\n')
		idx += 1
	code.append('#pragma HLS INLINE off\n\n')
	code.append(indent(1) + 'bool inst_done = 0;\n')
	code.append(indent(1) + 'uint inst = 0;\n')
	code.append(indent(1) + 'int inst_count = fifo_config_in.read();\n')
	# code.append(indent(1) + 'fifo_config_out.write(inst_count);\n')
	code.append(indent(1) + 'while(!inst_done){\n') 
	code.append(indent(1) + 'uint CONV_EN = fifo_config_in.read();\n')
	# code.append(indent(1) + 'fifo_config_out.write(CONV_EN);\n')
	code.append(indent(1) + 'if(CONV_EN){\n')
	code.append(indent(1) + '// read in configurations\n')
	code.append(indent(1) + 'uint LAYER_IN_NUM_T = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_OUT_NUM_T = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_IN_IMG_H_T = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_IN_IMG_W_T = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_FILTER_S_H = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_FILTER_S_W = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_TASK_NUM1 = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_TASK_NUM2 = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_COL_IL_FACTOR = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_STRIDE = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_BATCH = fifo_config_in.read();\n\n')

	code.append(indent(1) + 'uint LAYER_CONV_TYPE = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint FILTER_D0_H = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint FILTER_D0_W = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint FILTER_D1_H = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint FILTER_D1_W = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_DILATION_RATE = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_TCONV_STRIDE = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint K_NUM = fifo_config_in.read();\n')
	code.append(indent(1) + 'ap_uint<32> KH = fifo_config_in.read();\n')
	code.append(indent(1) + 'ap_uint<32> KW = fifo_config_in.read();\n')


	# code.append(indent(1) + '// write out configurations\n')
	# code.append(indent(1) + 'fifo_config_out.write(LAYER_IN_NUM_T);\n')
	# code.append(indent(1) + 'fifo_config_out.write(LAYER_OUT_NUM_T);\n')
	# code.append(indent(1) + 'fifo_config_out.write(LAYER_IN_IMG_H_T);\n')
	# code.append(indent(1) + 'fifo_config_out.write(LAYER_IN_IMG_W_T);\n')
	# code.append(indent(1) + 'fifo_config_out.write(LAYER_FILTER_S_H);\n')
	# code.append(indent(1) + 'fifo_config_out.write(LAYER_FILTER_S_W);\n')
	# code.append(indent(1) + 'fifo_config_out.write(LAYER_TASK_NUM1);\n')
	# code.append(indent(1) + 'fifo_config_out.write(LAYER_TASK_NUM2);\n')
	# code.append(indent(1) + 'fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);\n')
	# code.append(indent(1) + 'fifo_config_out.write(LAYER_LOCAL_REG_NUM);\n')
	# code.append(indent(1) + 'fifo_config_out.write(LAYER_ROW_IL_FACTOR);\n')
	# code.append(indent(1) + 'fifo_config_out.write(LAYER_COL_IL_FACTOR);\n')
	# code.append(indent(1) + 'fifo_config_out.write(LAYER_STRIDE);\n')
	# code.append(indent(1) + 'fifo_config_out.write(LAYER_BATCH);\n\n')
	# code.append(indent(1) + 'fifo_config_out.write(LAYER_CONV_TYPE);\n')
	# code.append(indent(1) + 'fifo_config_out.write(FILTER_D0_H);\n')
	# code.append(indent(1) + 'fifo_config_out.write(FILTER_D0_W);\n')
	# code.append(indent(1) + 'fifo_config_out.write(FILTER_D1_H);	\n')
	# code.append(indent(1) + 'fifo_config_out.write(FILTER_D1_W);	\n')
	# code.append(indent(1) + 'fifo_config_out.write(LAYER_DILATION_RATE);\n')
	# code.append(indent(1) + 'fifo_config_out.write(LAYER_TCONV_STRIDE);\n')
	# code.append(indent(1) + 'fifo_config_out.write(K_NUM);\n')
	# code.append(indent(1) + 'fifo_config_out.write(KH);\n')
	# code.append(indent(1) + 'fifo_config_out.write(KW);\n')


	idx = len(desp['OP_NAME'])
	code.append(indent(1) + var_prefix + 'data_t' + str(idx) + ' local_buffer[' + var_prefix + 'TRANSFER_REG_NUM];\n\n')

	w = cal_width(desp['PARAMETERS']['LAYER_BATCH'])
	code.append(indent(1) + 'for (ap_uint<%d> layer_iter = 0; layer_iter < LAYER_BATCH; layer_iter++){\n' % (w))
	code.append(indent(2) + 'if (layer_iter > 0){\n')
	code.append(indent(3) + '// read in configurations\n')
	code.append(indent(3) + 'LAYER_IN_NUM_T = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_OUT_NUM_T = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_IN_IMG_H_T = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_IN_IMG_W_T = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_FILTER_S_H = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_FILTER_S_W = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_TASK_NUM1 = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_TASK_NUM2 = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_LOCAL_REG_NUM = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_ROW_IL_FACTOR = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_COL_IL_FACTOR = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_STRIDE = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_BATCH = fifo_config_in.read();\n\n')

	code.append(indent(3) + 'LAYER_CONV_TYPE = fifo_config_in.read();\n')
	code.append(indent(3) + 'FILTER_D0_H = fifo_config_in.read();\n')
	code.append(indent(3) + 'FILTER_D0_W = fifo_config_in.read();\n')
	code.append(indent(3) + 'FILTER_D1_H = fifo_config_in.read();\n')
	code.append(indent(3) + 'FILTER_D1_W = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_DILATION_RATE = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_TCONV_STRIDE = fifo_config_in.read();\n')
	code.append(indent(3) + 'K_NUM = fifo_config_in.read();\n')
	code.append(indent(3) + 'KH = fifo_config_in.read();\n')
	code.append(indent(3) + 'KW = fifo_config_in.read();\n')


	# code.append(indent(3) + '// write out configurations\n')
	# code.append(indent(3) + 'fifo_config_out.write(LAYER_IN_NUM_T);\n')
	# code.append(indent(3) + 'fifo_config_out.write(LAYER_OUT_NUM_T);\n')
	# code.append(indent(3) + 'fifo_config_out.write(LAYER_IN_IMG_H_T);\n')
	# code.append(indent(3) + 'fifo_config_out.write(LAYER_IN_IMG_W_T);\n')
	# code.append(indent(3) + 'fifo_config_out.write(LAYER_FILTER_S_H);\n')
	# code.append(indent(3) + 'fifo_config_out.write(LAYER_FILTER_S_W);\n')
	# code.append(indent(3) + 'fifo_config_out.write(LAYER_TASK_NUM1);\n')
	# code.append(indent(3) + 'fifo_config_out.write(LAYER_TASK_NUM2);\n')
	# code.append(indent(3) + 'fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);\n')
	# code.append(indent(3) + 'fifo_config_out.write(LAYER_LOCAL_REG_NUM);\n')
	# code.append(indent(3) + 'fifo_config_out.write(LAYER_ROW_IL_FACTOR);\n')
	# code.append(indent(3) + 'fifo_config_out.write(LAYER_COL_IL_FACTOR);\n')
	# code.append(indent(3) + 'fifo_config_out.write(LAYER_STRIDE);\n')
	# code.append(indent(3) + 'fifo_config_out.write(LAYER_BATCH);\n')
	# code.append(indent(3) + 'fifo_config_out.write(LAYER_CONV_TYPE);\n')
	# code.append(indent(3) + 'fifo_config_out.write(FILTER_D0_H);\n')
	# code.append(indent(3) + 'fifo_config_out.write(FILTER_D0_W);\n')
	# code.append(indent(3) + 'fifo_config_out.write(FILTER_D1_H);	\n')
	# code.append(indent(3) + 'fifo_config_out.write(FILTER_D1_W);	\n')
	# code.append(indent(3) + 'fifo_config_out.write(LAYER_DILATION_RATE);\n')
	# code.append(indent(3) + 'fifo_config_out.write(LAYER_TCONV_STRIDE);\n')
	# code.append(indent(3) + 'fifo_config_out.write(K_NUM);\n')
	# code.append(indent(3) + 'fifo_config_out.write(KH);\n')
	# code.append(indent(3) + 'fifo_config_out.write(KW);\n')

	code.append(indent(2) + '}\n\n')
	code.append(indent(2) + '#pragma HLS BIND_OP variable=LAYER_LOCAL_REG_NUM op=mul impl=fabric latency=1\n')
	code.append(indent(2) + 'LAYER_LOCAL_REG_NUM = K_NUM*LAYER_LOCAL_REG_NUM;\n')
	val = desp['PARAMETERS']['OUT_NUM'] * desp['PARAMETERS']['OUT_IMG_H'] * desp['PARAMETERS']['OUT_IMG_W']
	w = cal_width(val)
	code.append(indent(2) + 'for (ap_uint<%d> task_num = 0; task_num < LAYER_TASK_NUM2; task_num++)\n' % (w))
	code.append(indent(2) + '{\n')
	indent_level = 3

	val = desp['PARAMETERS']['OUT_IMG_H_T'] * desp['COL_IL_FACTOR'] * desp['ROW_IL_FACTOR']
	w = cal_width(val)
	code.append(indent(indent_level) + 'for (ap_uint<%d> local_reg_id = 0; local_reg_id < ' % (w) + var_prefix + \
		'TRANSFER_REG_NUM; local_reg_id++){\n')
	indent_level += 1
	code.append('#pragma HLS PIPELINE II=1\n')
	code.append(indent(indent_level) + 'if (local_reg_id < LAYER_LOCAL_REG_NUM){\n')
	indent_level += 1
	idx = len(desp['OP_NAME'])
	code.append(indent(indent_level) + '%sData%sPEChannelType fifo%s_local_data = fifo%s_local.read();\n' % (var_prefix, str(idx), str(idx), str(idx)))
	code.append(indent(indent_level) + 'local_buffer[local_reg_id] = fifo%s_local_data.data;\n' % (str(idx)))
	# code.append(indent(indent_level) + 'local_buffer[local_reg_id] = fifo' + str(idx) + '_local.read();\n')
	indent_level -= 1
	code.append(indent(indent_level) + '} else {\n')
	code.append(indent(indent_level+1) + 'break;\n')
	code.append(indent(indent_level) + '}\n')
	indent_level -= 1
	code.append(indent(indent_level) + '}\n\n')

	ch_dir = desp['RES_CHANNEL_DIR'][0]
	if ch_dir == 'D':
	#   code.append(indent(indent_level) + 'int transfer_num = ' + 'LAYER_LOCAL_REG_NUM * (pe_row_id + 1);\n')
		code.append(indent(indent_level) + 'for (int transfer_iter = pe_row_id + 1 - 1; transfer_iter >= 0; transfer_iter--){\n')
	elif ch_dir == 'U':
	#   code.append(indent(indent_level) + 'int transfer_num = ' + 'LAYER_LOCAL_REG_NUM * (SA_ROWS - pe_row_id);\n')
		code.append(indent(indent_level) + 'for (int transfer_iter = %sSA_ROWS - pe_row_id - 1; transfer_iter >= 0; transfer_iter--){\n' % (var_prefix))
	elif ch_dir == 'R':
	#   code.append(indent(indent_level) + 'int transfer_num = ' + 'LAYER_LOCAL_REG_NUM * (pe_col_id + 1);\n')
		code.append(indent(indent_level) + 'for (int transfer_iter = pe_col_id + 1 - 1; transfer_iter >= 0; transfer_iter--){\n')
	elif ch_dir == 'L':
	#   code.append(indent(indent_level) + 'int transfer_num = ' + 'LAYER_LOCAL_REG_NUM * (SA_COLS - pe_col_id);\n')
		code.append(indent(indent_level) + 'for (int transfer_iter = %sSA_COLS - pe_col_id - 1; transfer_iter >= 0; transfer_iter--){\n' % (var_prefix))

	indent_level += 1

	val = desp['PARAMETERS']['OUT_IMG_H_T'] * desp['COL_IL_FACTOR'] * desp['ROW_IL_FACTOR']
	w = cal_width(val)
	code.append(indent(indent_level) + 'for (ap_uint<%d> local_reg_id = 0; local_reg_id < %sTRANSFER_REG_NUM; local_reg_id++){\n' % (w, var_prefix))
	code.append('#pragma HLS PIPELINE II=1\n')
	indent_level += 1
	code.append(indent(indent_level) + 'if (local_reg_id < LAYER_LOCAL_REG_NUM){\n')
	indent_level += 1
	idx = len(desp['OP_NAME'])
	code.append(indent(indent_level) + 'fifo' + str(idx) + '_out.write(' + var_prefix + 'Data' + str(idx) + \
			'PEChannelType(local_buffer[local_reg_id]));\n')
	code.append(indent(indent_level) + 'if (transfer_iter > 0){\n')
	indent_level += 1
	code.append(indent(indent_level) + var_prefix + 'Data' + str(idx) + 'PEChannelType fifo' + str(idx) + \
			'_in_data = fifo' + str(idx) + '_in.read();\n')
	code.append(indent(indent_level) + 'local_buffer[local_reg_id] = fifo' + str(idx) + '_in_data.data;\n')
	indent_level -= 1
	code.append(indent(indent_level) + '}\n')
	indent_level -= 1
	code.append(indent(indent_level) + '} else {\n')
	code.append(indent(indent_level+1) + 'break;\n')
	code.append(indent(indent_level) + '}\n')
	indent_level -= 1
	code.append(indent(indent_level) + '}\n')
	indent_level -= 1
	code.append(indent(indent_level) + '}\n')
	indent_level -= 1
	code.append(indent(indent_level) + '}\n')
	indent_level -= 1
	code.append(indent(indent_level) + '}\n')
	code.append(indent(indent_level) + '}\n')
	code.append(indent(1) + '  inst++;\n')
	code.append(indent(1) + '  if(inst == inst_count){\n')
	code.append(indent(1) + '    inst_done = 1;\n')
	code.append(indent(1) + '  }\n')
	code.append(indent(1) + '}\n')

	code.append('}\n\n')


		#res_transfer_first
	code.append('void ' + var_prefix + 'res_transfer_first(\n')
	idx = len(desp['OP_NAME'])
	for res_name in desp['RES_NAME']:
		code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_local,\n')
	#   code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_in\n')
		code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_out,\n')
		idx += 1
	width = cal_width(desp['SA_ROWS'])
	code.append(indent(1) + 'ap_uint<' + str(width) + '> pe_row_id,\n')
	width = cal_width(desp['SA_COLS'])
	code.append(indent(1) + 'ap_uint<' + str(width) + '> pe_col_id,\n')
	code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in,\n')
	code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out\n')
	code.append('){\n')
	idx = len(desp['OP_NAME'])
	for res_name in desp['RES_NAME']:
	#   code.append('#pragma HLS DATA_PACK variable=fifo' + str(idx) + '_in\n')
		code.append('#pragma HLS DATA_PACK variable=fifo' + str(idx) + '_out\n')
		idx += 1
	code.append('#pragma HLS INLINE off\n\n')
	code.append(indent(1) + 'bool inst_done = 0;\n')
	code.append(indent(1) + 'uint inst = 0;\n')
	code.append(indent(1) + 'int inst_count = fifo_config_in.read();\n')
	code.append(indent(1) + 'fifo_config_out.write(inst_count);\n')
	code.append(indent(1) + 'while(!inst_done){\n') 
	code.append(indent(1) + 'uint CONV_EN = fifo_config_in.read();\n')
	code.append(indent(1) + 'fifo_config_out.write(CONV_EN);\n')
	code.append(indent(1) + 'if(CONV_EN){\n')
	code.append(indent(1) + '// read in configurations\n')
	# code.append(indent(1) + 'uint LAYER_IN_NUM = fifo_config_in.read();\n')
	# code.append(indent(1) + 'uint LAYER_OUT_NUM = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_IN_NUM_T = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_OUT_NUM_T = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_IN_IMG_H_T = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_IN_IMG_W_T = fifo_config_in.read();\n')
	# code.append(indent(1) + 'uint LAYER_OUT_IMG_H = fifo_config_in.read();\n')
	# code.append(indent(1) + 'uint LAYER_OUT_IMG_W = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_FILTER_S_H = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_FILTER_S_W = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_TASK_NUM1 = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_TASK_NUM2 = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_COL_IL_FACTOR = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_STRIDE = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_BATCH = fifo_config_in.read();\n\n')

	code.append(indent(1) + 'uint LAYER_CONV_TYPE = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint FILTER_D0_H = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint FILTER_D0_W = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint FILTER_D1_H = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint FILTER_D1_W = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_DILATION_RATE = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint LAYER_TCONV_STRIDE = fifo_config_in.read();\n')
	code.append(indent(1) + 'uint K_NUM = fifo_config_in.read();\n')
	code.append(indent(1) + 'ap_uint<32> KH = fifo_config_in.read();\n')
	code.append(indent(1) + 'ap_uint<32> KW = fifo_config_in.read();\n')


	code.append(indent(1) + '// write out configurations\n')
	# code.append(indent(1) + 'fifo_config_out.write(LAYER_IN_NUM);\n')
	# code.append(indent(1) + 'fifo_config_out.write(LAYER_OUT_NUM);\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_IN_NUM_T);\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_OUT_NUM_T);\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_IN_IMG_H_T);\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_IN_IMG_W_T);\n')
	# code.append(indent(1) + 'fifo_config_out.write(LAYER_OUT_IMG_H);\n')
	# code.append(indent(1) + 'fifo_config_out.write(LAYER_OUT_IMG_W);\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_FILTER_S_H);\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_FILTER_S_W);\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_TASK_NUM1);\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_TASK_NUM2);\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_LOCAL_REG_NUM);\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_ROW_IL_FACTOR);\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_COL_IL_FACTOR);\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_STRIDE);\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_BATCH);\n\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_CONV_TYPE);\n')
	code.append(indent(1) + 'fifo_config_out.write(FILTER_D0_H);\n')
	code.append(indent(1) + 'fifo_config_out.write(FILTER_D0_W);\n')
	code.append(indent(1) + 'fifo_config_out.write(FILTER_D1_H);	\n')
	code.append(indent(1) + 'fifo_config_out.write(FILTER_D1_W);	\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_DILATION_RATE);\n')
	code.append(indent(1) + 'fifo_config_out.write(LAYER_TCONV_STRIDE);\n')
	code.append(indent(1) + 'fifo_config_out.write(K_NUM);\n')
	code.append(indent(1) + 'fifo_config_out.write(KH);\n')
	code.append(indent(1) + 'fifo_config_out.write(KW);\n')


	idx = len(desp['OP_NAME'])
	code.append(indent(1) + var_prefix + 'data_t' + str(idx) + ' local_buffer[' + var_prefix + 'TRANSFER_REG_NUM];\n\n')

	# code.append(indent(1) + 'for (int out_img_h_t = 0; out_img_h_t < LAYER_OUT_IMG_H; out_img_h_t += %sOUT_IMG_H_T)\n' % (var_prefix))
	# code.append(indent(2) + 'for (int out_img_w_t = 0; out_img_w_t < LAYER_OUT_IMG_W; out_img_w_t += %sOUT_IMG_W_T)\n' % (var_prefix))
	# code.append(indent(3) + 'for (int out_num_t = 0; out_num_t < LAYER_OUT_NUM; out_num_t += %sOUT_NUM_T)\n' % (var_prefix))

	w = cal_width(desp['PARAMETERS']['LAYER_BATCH'])
	code.append(indent(1) + 'for (ap_uint<%d> layer_iter = 0; layer_iter < LAYER_BATCH; layer_iter++){\n' % (w))
	code.append(indent(2) + 'if (layer_iter > 0){\n')
	code.append(indent(3) + '// read in configurations\n')
	code.append(indent(3) + 'LAYER_IN_NUM_T = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_OUT_NUM_T = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_IN_IMG_H_T = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_IN_IMG_W_T = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_FILTER_S_H = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_FILTER_S_W = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_TASK_NUM1 = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_TASK_NUM2 = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_LOCAL_REG_NUM = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_ROW_IL_FACTOR = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_COL_IL_FACTOR = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_STRIDE = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_BATCH = fifo_config_in.read();\n\n')

	code.append(indent(3) + 'LAYER_CONV_TYPE = fifo_config_in.read();\n')
	code.append(indent(3) + 'FILTER_D0_H = fifo_config_in.read();\n')
	code.append(indent(3) + 'FILTER_D0_W = fifo_config_in.read();\n')
	code.append(indent(3) + 'FILTER_D1_H = fifo_config_in.read();\n')
	code.append(indent(3) + 'FILTER_D1_W = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_DILATION_RATE = fifo_config_in.read();\n')
	code.append(indent(3) + 'LAYER_TCONV_STRIDE = fifo_config_in.read();\n')
	code.append(indent(3) + 'K_NUM = fifo_config_in.read();\n')
	code.append(indent(3) + 'KH = fifo_config_in.read();\n')
	code.append(indent(3) + 'KW = fifo_config_in.read();\n')


	code.append(indent(3) + '// write out configurations\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_IN_NUM_T);\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_OUT_NUM_T);\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_IN_IMG_H_T);\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_IN_IMG_W_T);\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_FILTER_S_H);\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_FILTER_S_W);\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_TASK_NUM1);\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_TASK_NUM2);\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_LOCAL_REG_NUM);\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_ROW_IL_FACTOR);\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_COL_IL_FACTOR);\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_STRIDE);\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_BATCH);\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_CONV_TYPE);\n')
	code.append(indent(3) + 'fifo_config_out.write(FILTER_D0_H);\n')
	code.append(indent(3) + 'fifo_config_out.write(FILTER_D0_W);\n')
	code.append(indent(3) + 'fifo_config_out.write(FILTER_D1_H);	\n')
	code.append(indent(3) + 'fifo_config_out.write(FILTER_D1_W);	\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_DILATION_RATE);\n')
	code.append(indent(3) + 'fifo_config_out.write(LAYER_TCONV_STRIDE);\n')
	code.append(indent(3) + 'fifo_config_out.write(K_NUM);\n')
	code.append(indent(3) + 'fifo_config_out.write(KH);\n')
	code.append(indent(3) + 'fifo_config_out.write(KW);\n')

	code.append(indent(2) + '}\n\n')
	code.append(indent(2) + '#pragma HLS BIND_OP variable=LAYER_LOCAL_REG_NUM op=mul impl=fabric latency=1\n')
	code.append(indent(2) + 'LAYER_LOCAL_REG_NUM = K_NUM*LAYER_LOCAL_REG_NUM;\n')
	val = desp['PARAMETERS']['OUT_NUM'] * desp['PARAMETERS']['OUT_IMG_H'] * desp['PARAMETERS']['OUT_IMG_W']
	w = cal_width(val)
	code.append(indent(2) + 'for (ap_uint<%d> task_num = 0; task_num < LAYER_TASK_NUM2; task_num++)\n' % (w))
	code.append(indent(2) + '{\n')
	indent_level = 3

	val = desp['PARAMETERS']['OUT_IMG_H_T'] * desp['COL_IL_FACTOR'] * desp['ROW_IL_FACTOR']
	w = cal_width(val)
	code.append(indent(indent_level) + 'for (ap_uint<%d> local_reg_id = 0; local_reg_id < ' % (w) + var_prefix + \
		'TRANSFER_REG_NUM; local_reg_id++){\n')
	indent_level += 1
	code.append('#pragma HLS PIPELINE II=1\n')
	code.append(indent(indent_level) + 'if (local_reg_id < LAYER_LOCAL_REG_NUM){\n')
	indent_level += 1
	idx = len(desp['OP_NAME'])
	code.append(indent(indent_level) + '%sData%sPEChannelType fifo%s_local_data = fifo%s_local.read();\n' % (var_prefix, str(idx), str(idx), str(idx)))
	code.append(indent(indent_level) + 'local_buffer[local_reg_id] = fifo%s_local_data.data;\n' % (str(idx)))
	# code.append(indent(indent_level) + 'local_buffer[local_reg_id] = fifo' + str(idx) + '_local.read();\n')
	indent_level -= 1
	code.append(indent(indent_level) + '} else {\n')
	code.append(indent(indent_level+1) + 'break;\n')
	code.append(indent(indent_level) + '}\n')
	indent_level -= 1
	code.append(indent(indent_level) + '}\n\n')

	ch_dir = desp['RES_CHANNEL_DIR'][0]
	if ch_dir == 'D':
	#   code.append(indent(indent_level) + 'int transfer_num = ' + 'LAYER_LOCAL_REG_NUM * (pe_row_id + 1);\n')
		code.append(indent(indent_level) + 'for (int transfer_iter = pe_row_id + 1 - 1; transfer_iter >= 0; transfer_iter--){\n')
	elif ch_dir == 'U':
	#   code.append(indent(indent_level) + 'int transfer_num = ' + 'LAYER_LOCAL_REG_NUM * (SA_ROWS - pe_row_id);\n')
		code.append(indent(indent_level) + 'for (int transfer_iter = %sSA_ROWS - pe_row_id - 1; transfer_iter >= 0; transfer_iter--){\n' % (var_prefix))
	elif ch_dir == 'R':
	#   code.append(indent(indent_level) + 'int transfer_num = ' + 'LAYER_LOCAL_REG_NUM * (pe_col_id + 1);\n')
		code.append(indent(indent_level) + 'for (int transfer_iter = pe_col_id + 1 - 1; transfer_iter >= 0; transfer_iter--){\n')
	elif ch_dir == 'L':
	#   code.append(indent(indent_level) + 'int transfer_num = ' + 'LAYER_LOCAL_REG_NUM * (SA_COLS - pe_col_id);\n')
		code.append(indent(indent_level) + 'for (int transfer_iter = %sSA_COLS - pe_col_id - 1; transfer_iter >= 0; transfer_iter--){\n' % (var_prefix))

	indent_level += 1
	val = desp['PARAMETERS']['OUT_IMG_H_T'] * desp['COL_IL_FACTOR'] * desp['ROW_IL_FACTOR']
	w = cal_width(val)
	code.append(indent(indent_level) + 'for (ap_uint<%d> local_reg_id = 0; local_reg_id < %sTRANSFER_REG_NUM; local_reg_id++){\n' % (w, var_prefix))
	code.append('#pragma HLS PIPELINE II=1\n')
	indent_level += 1
	code.append(indent(indent_level) + 'if (local_reg_id < LAYER_LOCAL_REG_NUM){\n')
	indent_level += 1
	idx = len(desp['OP_NAME'])
	code.append(indent(indent_level) + 'fifo' + str(idx) + '_out.write(' + var_prefix + 'Data' + str(idx) + \
			'PEChannelType(local_buffer[local_reg_id]));\n')
	indent_level -= 1
	code.append(indent(indent_level) + '} else {\n')
	code.append(indent(indent_level+1) + 'break;\n')
	code.append(indent(indent_level) + '}\n')
	indent_level -= 1
	code.append(indent(indent_level) + '}\n')
	indent_level -= 1
	code.append(indent(indent_level) + '}\n')
	indent_level -= 1
	code.append(indent(indent_level) + '}\n')
	indent_level -= 1
	code.append(indent(indent_level) + '}\n')
	code.append(indent(indent_level) + '}\n')
	code.append(indent(1) + '  inst++;\n')
	code.append(indent(1) + '  if(inst == inst_count){\n')
	code.append(indent(1) + '    inst_done = 1;\n')
	code.append(indent(1) + '  }\n')
	code.append(indent(1) + '}\n')


	code.append('}\n\n')

		#res_transfer_first_wrapper
	code.append('void ' + var_prefix + 'res_transfer_first_wrapper(\n')
	idx = len(desp['OP_NAME'])
	for res_name in desp['RES_NAME']:
		code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_local,\n')
	#   code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_in\n')
		code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo' + str(idx) + '_out,\n')
		idx += 1
	width = cal_width(desp['SA_ROWS'])
	code.append(indent(1) + 'ap_uint<' + str(width) + '> pe_row_id,\n')
	width = cal_width(desp['SA_COLS'])
	code.append(indent(1) + 'ap_uint<' + str(width) + '> pe_col_id,\n')
	code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in,\n')
	code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out\n')
	code.append('){\n')
	code.append(indent(1) + var_prefix + 'res_transfer_first(\n')
	idx = len(desp['OP_NAME'])
	for res_name in desp['RES_NAME']:
		code.append(indent(2) + 'fifo' + str(idx) + '_local,\n')
	#   code.append(indent(2) + 'fifo' + str(idx) + '_in\n')
		code.append(indent(2) + 'fifo' + str(idx) + '_out,\n')
		idx += 1
	width = cal_width(desp['SA_ROWS'])
	code.append(indent(2) + 'pe_row_id,\n')
	width = cal_width(desp['SA_COLS'])
	code.append(indent(2) + 'pe_col_id,\n')
	code.append(indent(2) + 'fifo_config_in,\n')
	code.append(indent(2) + 'fifo_config_out\n')
	code.append(indent(1) + ');\n')
	code.append('}\n\n')

	return code

def kernel_fifos(desp, config):
	var_prefix = 'U%s' %(desp['KERNEL_ID']) + '_'
	code = []
	code.append(indent(1) + '// FIFOs\n')
	idx = 0
	for op_name in desp['OP_NAME']:
		for sa_rows in range(desp['SA_ROWS'] + 1):
			for sa_cols in range(desp['SA_COLS'] + 1):
				if desp['APP_NAME'] == 'nw':
					depth = max(2, desp['FC_GROUP_FACTOR'][idx] * 6 + 1)
				else:
					depth = max(2, desp['FC_GROUP_FACTOR'][idx] * 1 + 1)
				code.append(indent(1) + 'tapa::stream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType, '+str(depth)+'> fifo' + str(idx) + \
			'_feed' + str(sa_rows) + '_' + str(sa_cols) + '("fifo' + str(idx) + \
			'_feed' + str(sa_rows) + '_' + str(sa_cols)+'");\n')
	#       depth = max(2, desp['FC_GROUP_FACTOR'][idx] + 1)
				
				# code.append('#pragma HLS STREAM variable=fifo' + str(idx) + '_feed' + str(sa_rows) + '_' + str(sa_cols) + ' depth=' + str(depth) + '\n')
		idx += 1
	for res_name in desp['RES_NAME']:
		for sa_rows in range(desp['SA_ROWS'] + 1):
			for sa_cols in range(desp['SA_COLS'] + 1):
				if desp['APP_NAME'] == 'nw':
					depth = max(2, desp['FC_GROUP_FACTOR'][idx] * 6 + 1)
				else:
					depth = max(2, desp['FC_GROUP_FACTOR'][idx] * 1 + 1)
				code.append(indent(1) + 'tapa::stream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType, '+str(depth)+'> fifo' + str(idx) + \
			'_collect' + str(sa_rows) + '_' + str(sa_cols) +'("fifo' + str(idx) + \
			'_collect' + str(sa_rows) + '_' + str(sa_cols)+'");\n')

				# code.append('#pragma HLS STREAM variable=fifo' + str(idx) + '_collect' + str(sa_rows) + '_' + str(sa_cols) + \
			# ' depth=' + str(depth) + '\n')
		idx += 1

	idx = 0
	for op_name in desp['OP_NAME']:
		feed_num = desp['OP_ENGINE_NUM'][idx] + 1
		for feed_id in range(feed_num):
			code.append(indent(1) + 'tapa::stream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType, '+str(desp['CHANNEL_DEPTH'])+'> fifo' + str(idx) + \
					'_transfer' + str(feed_id) +'("fifo' + str(idx) + \
					'_transfer' + str(feed_id)+'");\n')
			# code.append('#pragma HLS STREAM variable=fifo' + str(idx) + '_transfer' + str(feed_id) + ' depth=' + str(desp['CHANNEL_DEPTH']) + '\n')
		idx += 1
	for res_name in desp['RES_NAME']:
		feed_num = desp['RES_ENGINE_NUM'][idx - len(desp['OP_NAME'])] + 1
		for feed_id in range(feed_num):
			code.append(indent(1) + 'tapa::stream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType, ' + str(desp['CHANNEL_DEPTH']) + '> fifo' + str(idx) + '_transfer' + str(feed_id) + '("fifo' + str(idx) + '_transfer' + str(feed_id)+'");\n')
			# code.append('#pragma HLS STREAM variable=fifo' + str(idx) + '_transfer' + str(feed_id) + ' depth=' + str(desp['CHANNEL_DEPTH']) + '\n')
		idx += 1

		#shim fifos
	idx = 0
	# for op_name in desp['OP_NAME']:
	#   code.append(indent(1) + 'tapa::stream<ap_uint<%sDATA%d_WIDTH * %sDATA%d_FC_SIMD_FACTOR>, 2> fifo%d_shim;\n' % (var_prefix, idx, var_prefix, idx, idx))
	#   # code.append('#pragma HLS STREAM variable=fifo%d_shim depth=2\n' % (idx))
	#   idx += 1
	# for res_name in desp['RES_NAME']:
	#   code.append(indent(1) + 'tapa::stream<ap_uint<%sDATA%d_WIDTH * %sDATA%d_FC_SIMD_FACTOR>, 2> fifo%d_shim;\n' % (var_prefix, idx, var_prefix, idx, idx))
	#   # code.append('#pragma HLS STREAM variable=fifo%d_shim depth=2\n\n' % (idx))
	#   idx += 1

		#config fifos
	code.append(indent(1) + 'tapa::stream<uint, 16> fifo_DataFeed0Head_config_out0("fifo_DataFeed0Head_config_out0");\n')
	code.append(indent(1) + 'tapa::stream<uint, 16> fifo_DataFeed0Head_config_out1("fifo_DataFeed0Head_config_out1");\n')
	code.append(indent(1) + 'tapa::stream<uint, 16> fifo_DataFeed1Head_config_out0("fifo_DataFeed1Head_config_out0");\n')

	idx = 0
	for op_name in desp['OP_NAME']:
		feed_num = desp['OP_ENGINE_NUM'][idx]
		if idx == 0:
			for feed_id in range(feed_num):
				if feed_id < feed_num - 1:
					code.append(indent(1) + 'tapa::stream<uint, 16> fifo_DataFeed%dEngine%d_config_out0("fifo_DataFeed%dEngine%d_config_out0");\n' % (idx, feed_id, idx, feed_id))
					code.append(indent(1) + 'tapa::stream<uint, 16> fifo_DataFeed%dEngine%d_config_out1("fifo_DataFeed%dEngine%d_config_out1");\n' % (idx, feed_id, idx, feed_id))
					# code.append('#pragma HLS STREAM variable=fifo_DataFeed%dEngine%d_config_out0 depth=16\n' % (idx, feed_id))
					# code.append('#pragma HLS STREAM variable=fifo_DataFeed%dEngine%d_config_out1 depth=16\n' % (idx, feed_id))
				else:
					code.append(indent(1) + 'tapa::stream<uint, 16> fifo_DataFeed%dEngine%d_config_out1("fifo_DataFeed%dEngine%d_config_out1");\n' % (idx, feed_id, idx, feed_id))
					# code.append('#pragma HLS STREAM variable=fifo_DataFeed%dEngine%d_config_out1 depth=16\n\n' % (idx, feed_id))
		elif idx == 1:
			for feed_id in range(feed_num):
				if feed_id < feed_num - 1:
					code.append(indent(1) + 'tapa::stream<uint, 16> fifo_DataFeed%dEngine%d_config_out0("fifo_DataFeed%dEngine%d_config_out0");\n' % (idx, feed_id, idx, feed_id))
					# code.append('#pragma HLS STREAM variable=fifo_DataFeed%dEngine%d_config_out0 depth=16\n' % (idx, feed_id))

		idx += 1

	code.append('\n')

	for res_name in desp['RES_NAME']:
		feed_num = desp['RES_ENGINE_NUM'][idx - len(desp['OP_NAME'])]
		for feed_id in range(feed_num):
			code.append(indent(1) + 'tapa::stream<uint, 16> fifo_DataCollect%dEngine%d_config_out("fifo_DataFeed%dEngine%d_config_out0");\n' % (idx, feed_id, idx, feed_id))
			# code.append('#pragma HLS STREAM variable=fifo_DataCollect%dEngine%d_config_out depth=16\n' % (idx, feed_id))

		idx += 1

	code.append('\n')

	for row in range(desp['SA_ROWS']):
		for col in range(desp['SA_COLS']):
			code.append(indent(1) + 'tapa::stream<uint, 2> fifo_PE%d_%d_op0_config_out("fifo_PE%d_%d_op0_config_out");\n' % (row, col, row, col))
			code.append(indent(1) + 'tapa::stream<uint, 2> fifo_PE%d_%d_op1_config_out("fifo_PE%d_%d_op1_config_out");\n' % (row, col, row, col))
			code.append(indent(1) + 'tapa::stream<uint, 2> fifo_PE%d_%d_compute_config_out("fifo_PE%d_%d_compute_config_out");\n' % (row, col, row, col))
			code.append(indent(1) + 'tapa::stream<uint, 2> fifo_PE%d_%d_res_config_out("fifo_PE%d_%d_res_config_out");\n' % (row, col, row, col))
			# code.append('#pragma HLS STREAM variable=fifo_PE%d_%d_op0_config_out depth=2\n' % (row, col))
			# code.append('#pragma HLS STREAM variable=fifo_PE%d_%d_op1_config_out depth=2\n' % (row, col))
			# code.append('#pragma HLS STREAM variable=fifo_PE%d_%d_compute_config_out depth=2\n' % (row, col))
			# code.append('#pragma HLS STREAM variable=fifo_PE%d_%d_res_config_out depth=2\n' % (row, col))

	code.append('\n')

	for row in range(desp['SA_ROWS']):
		for col in range(desp['SA_COLS']):
			idx = 0
			for op_name in desp['OP_NAME']:
				code.append(indent(1) + 'tapa::stream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType, ' + str(desp['CHANNEL_DEPTH']) + '> PE' + \
						str(row) + '_' + str(col) + '_fifo' + str(idx) + '_local("PE' + \
						str(row) + '_' + str(col) + '_fifo' + str(idx) + '_local");\n')
				# code.append('#pragma HLS STREAM variable=PE' + str(row) + '_' + str(col) + '_fifo' + str(idx) + \
				#     '_local depth=' + str(desp['CHANNEL_DEPTH']) + '\n')
				idx += 1
			for res_name in desp['RES_NAME']:
				code.append(indent(1) + 'tapa::stream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType, ' + str(desp['CHANNEL_DEPTH']) + '> PE' + \
						str(row) + '_' + str(col) + '_fifo' + str(idx) + '_local("PE' + \
						str(row) + '_' + str(col) + '_fifo' + str(idx) + '_local");\n')
				# code.append('#pragma HLS STREAM variable=PE' + str(row) + '_' + str(col) + '_fifo' + str(idx) + \
				#     '_local depth=' + str(desp['CHANNEL_DEPTH']) + '\n')
				idx += 1
			if desp['APP_NAME'] == 'nw':
				inter_idx = 0
				for inter_name in desp['INTER_NAME']:
					code.append(indent(1) + 'tapa::stream<' + desp['INTER_DATA_TYPE'][inter_idx] + ', ' + str(desp['CHANNEL_DEPTH']) + '> PE' + str(row) + '_' + \
							str(col) + '_fifo_' + inter_name + '_local;\n')
					# code.append('#pragma HLS STREAM variable=PE' + str(row) + '_' + str(col) + '_fifo_' + inter_name + \
					#     '_local depth=' + str(desp['CHANNEL_DEPTH']) + '\n')
					inter_idx += 1
	code.append('\n')

	# code.append(indent(1) + 'tapa::istream<%sConfigInst> fifo_kernel_config_in;\n' % (var_prefix))
	# code.append('#pragma HLS STREAM variable=fifo_kernel_config_in depth=2\n')
	# code.append(indent(1) + 'tapa::ostream<%sConfigInst> fifo_kernel_config_out;\n' % (var_prefix))
	# code.append('#pragma HLS STREAM variable=fifo_kernel_config_out depth=2\n\n')
	code.append('  tapa::stream<CinLoadData0Type, 128> fifo_data_bypass("fifo_data_bypass");\n')
	code.append('  tapa::stream<uint, 2> fifo_config_bypass("fifo_config_bypass");\n')

	return code

def kernel_tasks(desp, config, SA_node, SA_input, SA_weight, SA_output, prev_module, next_module):

	var_prefix = 'U%s' %(desp['KERNEL_ID']) + '_'
	code = []
		#kernel
	# code.append('void SA(\n')
	# code.append(indent(1) + 'uint start_inst, uint end_inst,\n')
	# code.append(indent(1) + 'tapa::istream<ap_uint<%sDATA0_WIDTH * %sDATA0_FC_SIMD_FACTOR> > &fifo_cin,\n' % (var_prefix, var_prefix))
	# code.append(indent(1) + 'tapa::istream<ap_uint<%sDATA1_WIDTH * %sDATA1_FC_SIMD_FACTOR> > &fifo_weight,\n' % (var_prefix, var_prefix))
	# code.append(indent(1) + 'tapa::ostream<ap_uint<%sDATA2_WIDTH * %sDATA2_FC_SIMD_FACTOR> > &fifo_cout,\n' % (var_prefix, var_prefix))
	# code.append(indent(1) + 'tapa::istream<%sConfigInst> &fifo_kernel_config_in,\n' % (var_prefix))
	# code.append(indent(1) + 'tapa::ostream<%sConfigInst> &fifo_kernel_config_out\n' % (var_prefix))
	# code.append('){\n')
	# code.append('void ' + var_prefix + 'kernel(\n')
	# idx = 0
	# for op_name in desp['OP_NAME']:
	#   code.append(indent(1) + var_prefix + 'bus_t' + str(idx) + '* ' + op_name + ',\n')
	#   idx += 1
	# for res_name in desp['RES_NAME']:
	#   code.append(indent(1) + var_prefix + 'bus_t' + str(idx) + '* ' + res_name + ',\n')
	#   idx += 1
	# code.append(indent(1) + 'bool init,\n')
	# code.append(indent(1) + 'unsigned int FILTER_S_H\n')
	# code.append(indent(1) + 'unsigned int FILTER_S_W\n')
	# code.append('){\n')
	# code.append('#pragma HLS DATAFLOW\n\n')


	
	# code.append(indent(1) + '// modules\n')
	# code.append(indent(1) + 'tapa::task()\n')
	idx = 0
	for op_name in desp['OP_NAME']:
			#feed_shim
	#   code.append(indent(1) + var_prefix + 'DataFeed' + str(idx) + 'Head_Shim(\n')
	#   code.append(indent(2) + op_name + ', fifo' + str(idx) + '_shim,\n')
	#   if idx == 0:
	#     code.append(indent(2) + '%sIN_NUM, %sOUT_NUM, %sIN_NUM_T, %sOUT_NUM_T, %sIN_IMG_H, %sIN_IMG_W, %sOUT_IMG_H, %sOUT_IMG_W, %sOUT_IMG_H_T, %sOUT_IMG_W_T, FILTER_S_H, %sSTRIDE, %sLAYER_BATCH,\n' % (var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix))
	#     code.append(indent(2) + '%sIN_NUM, %sOUT_NUM, %sIN_NUM_T, %sOUT_NUM_T, %sIN_IMG_H, %sIN_IMG_W, %sOUT_IMG_H, %sOUT_IMG_W, %sOUT_IMG_H_T, %sOUT_IMG_W_T, FILTER_S_W, %sSTRIDE, %sLAYER_BATCH,\n' % (var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix))
	#     code.append(indent(2) + 'fifo_kernel_config_in\n')
	#   else:
	#     code.append(indent(2) + '%sIN_NUM, %sOUT_NUM, %sIN_NUM_T, %sOUT_NUM_T, %sIN_IMG_H, %sIN_IMG_W, %sOUT_IMG_H, %sOUT_IMG_W, %sOUT_IMG_H_T, %sOUT_IMG_W_T, FILTER_S_H, %sSTRIDE, %sLAYER_BATCH\n' % (var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix))
	#     code.append(indent(2) + '%sIN_NUM, %sOUT_NUM, %sIN_NUM_T, %sOUT_NUM_T, %sIN_IMG_H, %sIN_IMG_W, %sOUT_IMG_H, %sOUT_IMG_W, %sOUT_IMG_H_T, %sOUT_IMG_W_T, FILTER_S_W, %sSTRIDE, %sLAYER_BATCH\n' % (var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix))
	#   code.append(indent(1) + ');\n\n')

			#feed_head
		
		feed_num = desp['OP_ENGINE_NUM'][idx]
		code.append(indent(1) + '.invoke(' + var_prefix + 'DataFeed' + str(idx) + 'Head,\n')
		# code.append(indent(1) + var_prefix + 'DataFeed' + str(idx) + 'Head(\n')
	#   code.append(indent(2) + 'fifo%d_shim,\n' % (idx))
		if idx == 0:
			code.append(indent(2) + 'start_inst, end_inst,\n')
			code.append(indent(2) + '%s_to_%s_0,\n'%(SA_input, SA_node))
		else:
			code.append(indent(2) + '%s_to_%s_0,\n'%(SA_weight, SA_node))
		for feed_group in range(desp['FC_SPLIT_FACTOR'][idx]):
			feed_id = feed_group * (desp['OP_ENGINE_NUM'][idx] / desp['FC_SPLIT_FACTOR'][idx])
			feed_id = int(feed_id)
			if feed_group < desp['FC_SPLIT_FACTOR'][idx] - 1:
				code.append(indent(2) + 'fifo' + str(idx) + '_transfer' + str(feed_id) + ',\n')
			else:
				code.append(indent(2) + 'fifo' + str(idx) + '_transfer' + str(feed_id) + ',\n')
		if idx == 0:
 	#    code.append(indent(2) + '%sIN_NUM, %sOUT_NUM, %sIN_IMG_H, %sIN_IMG_W, %sOUT_IMG_H, %sOUT_IMG_W, FILTER_S_H,\n' % (var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix))
 	#    code.append(indent(2) + '%sIN_NUM, %sOUT_NUM, %sIN_IMG_H, %sIN_IMG_W, %sOUT_IMG_H, %sOUT_IMG_W, FILTER_S_W,\n' % (var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix))
			code.append(indent(2) + 'config_%s_to_%s,\n'%(prev_module, SA_node))
			code.append(indent(2) + 'config_%s_to_%s,\n'%(SA_node, next_module))
		if idx == 0:
			code.append(indent(2) + 'fifo_DataFeed%dHead_config_out0, fifo_DataFeed%dHead_config_out1,\n' % (idx, idx))
			code.append(indent(2) + 'fifo_data_bypass,\n')
			code.append(indent(2) + 'fifo_config_bypass\n')
		else:
			code.append(indent(2) + 'fifo_DataFeed0Head_config_out1, fifo_DataFeed1Head_config_out0\n')
		code.append(indent(1) + ')\n')
		# code.append('#ifdef SA_DEBUG\n')
		# code.append('\tcout<<"Finished U1_DataFeed%dHead"<<endl;\n' % idx)
		# code.append('#endif\n')

			#feed engine
		for feed_group in range(desp['FC_SPLIT_FACTOR'][idx]):
			for local_feed_id in range(int(feed_num / desp['FC_SPLIT_FACTOR'][idx])):
				feed_id = local_feed_id + feed_group * (feed_num / desp['FC_SPLIT_FACTOR'][idx])
				feed_id_nxt = feed_id + 1
				feed_id = int(feed_id)
				feed_id_nxt = int(feed_id_nxt)
				if local_feed_id < feed_num / desp['FC_SPLIT_FACTOR'][idx] - 1:
					code.append(indent(1) + '.invoke(' + var_prefix + 'DataFeed' + str(idx) + 'Engine0_wrapper,\n')
					# code.append(indent(1) + var_prefix + 'DataFeed' + str(idx) + 'Engine0_wrapper(\n')
					code.append(indent(2) + 'fifo' + str(idx) + '_transfer' + str(feed_id) + ',\n')
					code.append(indent(2) + 'fifo' + str(idx) + '_transfer' + str(feed_id_nxt) + ',\n')
					for gs in range(desp['FC_GROUP_FACTOR'][idx]):
						feed_pe_id = feed_id * desp['FC_GROUP_FACTOR'][idx] + gs
						feed_pe_id = int(feed_pe_id)
						ch_dir = desp['OP_CHANNEL_DIR'][idx]
						if ch_dir == 'D':
							code.append(indent(2) + 'fifo' + str(idx) + '_feed0_' + str(feed_pe_id) + ',\n')
						elif ch_dir == 'U':
							row_idx = desp['SA_ROWS'] - 1
							code.append(indent(2) + 'fifo' + str(idx) + '_feed' + str(row_idx) + '_' + str(feed_pe_id) + ',\n')
						elif ch_dir == 'R':
							code.append(indent(2) + 'fifo' + str(idx) + '_feed' + str(feed_pe_id) + '_0,\n')
						elif ch_dir == 'L':
							col_idx = desp['SA_COLS'] - 1
							code.append(indent(2) + 'fifo' + str(idx) + '_feed' + str(feed_pe_id) + '_' + str(col_idx) + ',\n')
					code.append(indent(2) + str(local_feed_id) + ',\n')
					if idx == 0:
						if feed_id == 0:
							code.append(indent(2) + 'fifo_DataFeed%dHead_config_out0,\n' % (idx))
							code.append(indent(2) + 'fifo_DataFeed%dEngine%d_config_out0,\n' % (idx, feed_id))
							code.append(indent(2) + 'fifo_DataFeed%dEngine%d_config_out1\n' % (idx, feed_id))
						else:
							code.append(indent(2) + 'fifo_DataFeed%dEngine%d_config_out0,\n' % (idx, feed_id - 1))
							code.append(indent(2) + 'fifo_DataFeed%dEngine%d_config_out0,\n' % (idx, feed_id))
							code.append(indent(2) + 'fifo_DataFeed%dEngine%d_config_out1\n' % (idx, feed_id))
					elif idx == 1:
						if feed_id == 0:
							code.append(indent(2) + 'fifo_DataFeed1Head_config_out0,\n')
							code.append(indent(2) + 'fifo_DataFeed%dEngine%d_config_out0\n' % (idx, feed_id))
						else:
							code.append(indent(2) + 'fifo_DataFeed%dEngine%d_config_out0,\n' % (idx, feed_id - 1))
							code.append(indent(2) + 'fifo_DataFeed%dEngine%d_config_out0\n' % (idx, feed_id))
					code.append(indent(1) + ')\n')
					# code.append('#ifdef SA_DEBUG\n')
					# code.append('\tcout<<"Finished U1_DataFeed%dEngine0_wrapper %d"<<endl;\n' % (idx,(feed_id+1)))
					# code.append('#endif\n')
				else:
					code.append(indent(1) + '.invoke(' + var_prefix + 'DataFeed' + str(idx) + 'EngineLast,\n')
					# code.append(indent(1) + var_prefix + 'DataFeed' + str(idx) + 'EngineLast(\n')
					code.append(indent(2) + 'fifo' + str(idx) + '_transfer' + str(feed_id) + ',\n')
	#         code.append(indent(2) + 'fifo' + str(idx) + '_transfer' + str(feed_id_nxt) + ',\n')
					for gs in range(desp['FC_GROUP_FACTOR'][idx]):
						feed_pe_id = feed_id * desp['FC_GROUP_FACTOR'][idx] + gs
						feed_pe_id = int(feed_pe_id)
						ch_dir = desp['OP_CHANNEL_DIR'][idx]
						if ch_dir == 'D':
							code.append(indent(2) + 'fifo' + str(idx) + '_feed0_' + str(feed_pe_id) + ',\n')
						elif ch_dir == 'U':
							row_idx = desp['SA_ROWS'] - 1
							code.append(indent(2) + 'fifo' + str(idx) + '_feed' + str(row_idx) + '_' + str(feed_pe_id) + ',\n')
						elif ch_dir == 'R':
							code.append(indent(2) + 'fifo' + str(idx) + '_feed' + str(feed_pe_id) + '_0,\n')
						elif ch_dir == 'L':
							col_idx = desp['SA_COLS'] - 1
							code.append(indent(2) + 'fifo' + str(idx) + '_feed' + str(feed_pe_id) + '_' + str(col_idx) + ',\n')
					code.append(indent(2) + str(local_feed_id) + ',\n')
					if idx == 0:
						code.append(indent(2) + 'fifo_DataFeed%dEngine%d_config_out0,\n' % (idx, feed_id - 1))
					elif idx == 1:
						code.append(indent(2) + 'fifo_DataFeed%dEngine%d_config_out0\n' % (idx, feed_id - 1))
					if idx == 0:
						code.append(indent(2) + 'fifo_DataFeed%dEngine%d_config_out1\n' % (idx, feed_id))
					code.append(indent(1) + ')\n')
					# code.append('#ifdef SA_DEBUG\n')
					# code.append('\tcout<<"Finished U1_DataFeed%dEngineLast"<<endl;\n' % (idx))
					# code.append('#endif\n')

		idx += 1

		#PE modules
	# code.append(indent(1) + '// PE modules\n')
	for row in range(desp['SA_ROWS']):
		for col in range(desp['SA_COLS']):
				#op modules
			idx = 0
			for op_name in desp['OP_NAME']:
				ch_dir = desp['OP_CHANNEL_DIR'][idx]
				if (ch_dir == 'D' and row == desp['SA_ROWS'] - 1) or \
					 (ch_dir == 'U' and row == 0) or \
					 (ch_dir == 'R' and col == desp['SA_COLS'] - 1) or \
					 (ch_dir == 'L' and col == 0):
					code.append(indent(1) + '.invoke(' + var_prefix + 'op' + str(idx) + '_transfer_last_wrapper,\n')
					# code.append(indent(1) + var_prefix + 'op' + str(idx) + '_transfer_last_wrapper(\n')
					code.append(indent(2) + 'fifo' + str(idx) + '_feed' + str(row) + '_' + str(col) + ',\n')
					code.append(indent(2) + 'PE' + str(row) + '_' + str(col) + '_' + 'fifo' + str(idx) + '_local,\n')
					if row == 0:
						if idx == 0:
							code.append(indent(2) + 'fifo_DataFeed%dEngine%d_config_out1,\n' % (idx, col))
						else:
							code.append(indent(2) + 'fifo_PE%d_%d_op0_config_out,\n' % (row, col))
					else:
						if idx == 0:
							code.append(indent(2) + 'fifo_PE%d_%d_res_config_out,\n' % (row - 1, col))
						else:
							code.append(indent(2) + 'fifo_PE%d_%d_op0_config_out,\n' % (row, col))
					code.append(indent(2) + 'fifo_PE%d_%d_op%d_config_out\n' % (row, col, idx))
					code.append(indent(1) + ')\n')
				else:
					code.append(indent(1) + '.invoke(' + var_prefix + 'op' + str(idx) + '_transfer_wrapper,\n')
					# code.append(indent(1) + var_prefix + 'op' + str(idx) + '_transfer_wrapper(\n')
					code.append(indent(2) + 'fifo' + str(idx) + '_feed' + str(row) + '_' + str(col) + ',\n')
					if ch_dir == 'R':
						col_nxt = col + 1
						code.append(indent(2) + 'fifo' + str(idx) + '_feed' + str(row) + '_' + str(col_nxt) + ',\n')
					elif ch_dir == 'L':
						col_prv = col - 1
						code.append(indent(2) + 'fifo' + str(idx) + '_feed' + str(row) + '_' + str(col_prv) + ',\n')
					elif ch_dir == 'U':
						row_prv = row - 1
						code.append(indent(2) + 'fifo' + str(idx) + '_feed' + str(row_prv) + '_' + str(col) + ',\n')
					elif ch_dir == 'D':
						row_nxt = row + 1
						code.append(indent(2) + 'fifo' + str(idx) + '_feed' + str(row_nxt) + '_' + str(col) + ',\n')
					code.append(indent(2) + 'PE' + str(row) + '_' + str(col) + '_' + 'fifo' + str(idx) + '_local,\n')
					if row == 0:
						if idx == 0:
							code.append(indent(2) + 'fifo_DataFeed%dEngine%d_config_out1,\n' % (idx, col))
						else:
							code.append(indent(2) + 'fifo_PE%d_%d_op0_config_out,\n' % (row, col))
					else:
						if idx == 0:
							code.append(indent(2) + 'fifo_PE%d_%d_res_config_out,\n' % (row - 1, col))
						else:
							code.append(indent(2) + 'fifo_PE%d_%d_op0_config_out,\n' % (row, col))
					code.append(indent(2) + 'fifo_PE%d_%d_op%d_config_out\n' % (row, col, idx))
					code.append(indent(1) + ')\n')
					# code.append('#ifdef SA_DEBUG\n')
					# code.append('\tcout<<"Finished U1_op%d_transfer_wrapper %d %d"<<endl;\n' % (row, col, idx))
					# code.append('#endif\n')
				idx += 1

				#compute
			if desp['APP_NAME'] == 'nw':
				if col == 0:
					code.append(indent(1) + var_prefix + 'compute_first(\n')
					idx = 0
					for op_name in desp['OP_NAME']:
						code.append(indent(2) + 'PE' + str(row) + '_' + str(col) + '_fifo' + str(idx) + '_local,\n')
						idx += 1
					for res_name in desp['RES_NAME']:
						ch_dir = desp['RES_CHANNEL_DIR'][idx - len(desp['OP_NAME'])]
						if ((ch_dir == 'D' or ch_dir == 'U') and (desp['SA_ROWS'] == 1) or \
								(ch_dir == 'L' or ch_dir == 'R') and (desp['SA_COLS'] == 1)):
							code.append(indent(2) + 'fifo' + str(idx) + '_collect' + str(row) + '_' + str(col) + ',\n')
						else:
							code.append(indent(2) + 'PE' + str(row) + '_' + str(col) + '_fifo' + str(idx) + '_local,\n')
						idx += 1
					inter_idx = 0
					for inter_name in desp['INTER_NAME']:
						code.append(indent(2) + 'PE' + str(row) + '_' + str(col) + '_fifo_' + inter_name + '_local,\n')
						inter_idx += 1
					code.append(indent(2) + str(row) + ',\n')
					code.append(indent(2) + str(col) + '\n')
					code.append(indent(1) + ');\n\n')
				elif col == desp['SA_COLS'] - 1:
					code.append(indent(1) + var_prefix + 'compute_last(\n')
					idx = 0
					for op_name in desp['OP_NAME']:
						code.append(indent(2) + 'PE' + str(row) + '_' + str(col) + '_fifo' + str(idx) + '_local,\n')
						idx += 1
					for res_name in desp['RES_NAME']:
						ch_dir = desp['RES_CHANNEL_DIR'][idx - len(desp['OP_NAME'])]
						if ((ch_dir == 'D' or ch_dir == 'U') and (desp['SA_ROWS'] == 1) or \
								(ch_dir == 'L' or ch_dir == 'R') and (desp['SA_COLS'] == 1)):
							code.append(indent(2) + 'fifo' + str(idx) + '_collect' + str(row) + '_' + str(col) + ',\n')
						else:
							code.append(indent(2) + 'PE' + str(row) + '_' + str(col) + '_fifo' + str(idx) + '_local,\n')
						idx += 1
					inter_idx = 0
					for inter_name in desp['INTER_NAME']:
						col_prev = col - 1
						code.append(indent(2) + 'PE' + str(row) + '_' + str(col_prev) + '_fifo_' + inter_name + '_local,\n')
						inter_idx += 1
					code.append(indent(2) + str(row) + ',\n')
					code.append(indent(2) + str(col) + '\n')
					code.append(indent(1) + ');\n\n')
				else:
					# code.append(indent(1) + '.invoke(' + var_prefix + 'compute_wrapper,\n')
					code.append(indent(1) + var_prefix + 'compute_wrapper(\n')
					idx = 0
					for op_name in desp['OP_NAME']:
						code.append(indent(2) + 'PE' + str(row) + '_' + str(col) + '_fifo' + str(idx) + '_local,\n')
						idx += 1
					for res_name in desp['RES_NAME']:
						ch_dir = desp['RES_CHANNEL_DIR'][idx - len(desp['OP_NAME'])]
						if ((ch_dir == 'D' or ch_dir == 'U') and (desp['SA_ROWS'] == 1) or \
								(ch_dir == 'L' or ch_dir == 'R') and (desp['SA_COLS'] == 1)):
							code.append(indent(2) + 'fifo' + str(idx) + '_collect' + str(row) + '_' + str(col) + ',\n')
						else:
							code.append(indent(2) + 'PE' + str(row) + '_' + str(col) + '_fifo' + str(idx) + '_local,\n')
						idx += 1
					inter_idx = 0
					for inter_name in desp['INTER_NAME']:
						col_prev = col - 1
						code.append(indent(2) + 'PE' + str(row) + '_' + str(col_prev) + '_fifo_' + inter_name + '_local,\n')
						code.append(indent(2) + 'PE' + str(row) + '_' + str(col) + '_fifo_' + inter_name + '_local,\n')
						inter_idx += 1

					code.append(indent(2) + str(row) + ',\n')
					code.append(indent(2) + str(col) + '\n')
					code.append(indent(1) + ');\n\n')
						#code.append('#ifdef SA_DEBUG\n')
						#code.append('\tcout<<"Finished U1_DataFeed%dHead"<<endl;\n' % idx)
						#code.append('#endif\n')

			else:
				code.append(indent(1) + '.invoke(' + var_prefix + 'compute_wrapper,\n')
				# code.append(indent(1) + var_prefix + 'compute_wrapper(\n')
				idx = 0
				for op_name in desp['OP_NAME']:
					code.append(indent(2) + 'PE' + str(row) + '_' + str(col) + '_fifo' + str(idx) + '_local,\n')
					idx += 1
				for res_name in desp['RES_NAME']:
					ch_dir = desp['RES_CHANNEL_DIR'][idx - len(desp['OP_NAME'])]
					if ((ch_dir == 'D' or ch_dir == 'U') and (desp['SA_ROWS'] == 1) or \
						 (ch_dir == 'L' or ch_dir == 'R') and (desp['SA_COLS'] == 1)):
						code.append(indent(2) + 'fifo' + str(idx) + '_collect' + str(row) + '_' + str(col) + '\n')
					else:
						code.append(indent(2) + 'PE' + str(row) + '_' + str(col) + '_fifo' + str(idx) + '_local,\n')

					idx += 1
				code.append(indent(2) + 'fifo_PE%d_%d_op1_config_out,\n' % (row, col))
				code.append(indent(2) + 'fifo_PE%d_%d_compute_config_out\n' % (row, col))
				code.append(indent(1) + ')\n')
				# code.append('#ifdef SA_DEBUG\n')
				# code.append('\tcout<<"Finished U1_compute_wrapper %d %d"<<endl;\n' % (row, col))
				# code.append('#endif\n')

				#res_transfer
			idx = len(desp['OP_NAME'])
			for res_name in desp['RES_NAME']:
				ch_dir = desp['RES_CHANNEL_DIR'][idx - len(desp['OP_NAME'])]

				if ((ch_dir == 'D' or ch_dir == 'U') and (desp['SA_ROWS'] == 1) or \
						(ch_dir == 'L' or ch_dir == 'R') and (desp['SA_COLS'] == 1)) is False:
					if (ch_dir == 'D' and row == 0) or \
						 (ch_dir == 'U' and row == desp['SA_ROWS'] - 1) or \
						 (ch_dir == 'R' and col == 0) or \
						 (ch_dir == 'L' and col == desp['SA_COLS'] - 1):
						code.append(indent(1) + '.invoke(' + var_prefix + 'res_transfer_first_wrapper,\n')
						# code.append(indent(1) + var_prefix + 'res_transfer_first_wrapper(\n')
						code.append(indent(2) + 'PE' + str(row) + '_' + str(col) + '_fifo' + str(idx) + '_local,\n')
						code.append(indent(2) + 'fifo' + str(idx) + '_collect' + str(row) + '_' + str(col) + ',\n')
						code.append(indent(2) + str(row) + ',\n')
						code.append(indent(2) + str(col) + ',\n')
						code.append(indent(2) + 'fifo_PE%d_%d_compute_config_out,\n' % (row, col))
						code.append(indent(2) + 'fifo_PE%d_%d_res_config_out\n' % (row, col))
						code.append(indent(1) + ')\n')
					else:
						if (ch_dir == 'D' and row == desp['SA_ROWS'] - 1 and col < desp['SA_COLS'] - 1):
							code.append(indent(1) + '.invoke(' + var_prefix + 'res_transfer_last,\n')
							# code.append(indent(1) + var_prefix + 'res_transfer_wrapper(\n')
							code.append(indent(2) + 'PE' + str(row) + '_' + str(col) + '_fifo' + str(idx) + '_local,\n')
							if ch_dir == 'R':
								col_prv = col - 1
								code.append(indent(2) + 'fifo' + str(idx) + '_collect' + str(row) + '_' + str(col_prv) + ',\n')
							elif ch_dir == 'L':
								col_nxt = col + 1
								code.append(indent(2) + 'fifo' + str(idx) + '_collect' + str(row) + '_' + str(col_nxt) + ',\n')
							elif ch_dir == 'U':
								row_nxt = row + 1
								code.append(indent(2) + 'fifo' + str(idx) + '_collect' + str(row_nxt) + '_' + str(col) + ',\n')
							elif ch_dir == 'D':
								row_prv = row - 1
								code.append(indent(2) + 'fifo' + str(idx) + '_collect' + str(row_prv) + '_' + str(col) + ',\n')
							code.append(indent(2) + 'fifo' + str(idx) + '_collect' + str(row) + '_' + str(col) + ',\n')
							code.append(indent(2) + str(row) + ',\n')
							code.append(indent(2) + str(col) + ',\n')
							code.append(indent(2) + 'fifo_PE%d_%d_compute_config_out\n' % (row, col))
							# code.append(indent(2) + 'fifo_PE%d_%d_res_config_out\n' % (row, col))
							code.append(indent(1) + ')\n')
						else:
							code.append(indent(1) + '.invoke(' + var_prefix + 'res_transfer_wrapper,\n')
							# code.append(indent(1) + var_prefix + 'res_transfer_wrapper(\n')
							code.append(indent(2) + 'PE' + str(row) + '_' + str(col) + '_fifo' + str(idx) + '_local,\n')
							if ch_dir == 'R':
								col_prv = col - 1
								code.append(indent(2) + 'fifo' + str(idx) + '_collect' + str(row) + '_' + str(col_prv) + ',\n')
							elif ch_dir == 'L':
								col_nxt = col + 1
								code.append(indent(2) + 'fifo' + str(idx) + '_collect' + str(row) + '_' + str(col_nxt) + ',\n')
							elif ch_dir == 'U':
								row_nxt = row + 1
								code.append(indent(2) + 'fifo' + str(idx) + '_collect' + str(row_nxt) + '_' + str(col) + ',\n')
							elif ch_dir == 'D':
								row_prv = row - 1
								code.append(indent(2) + 'fifo' + str(idx) + '_collect' + str(row_prv) + '_' + str(col) + ',\n')
							code.append(indent(2) + 'fifo' + str(idx) + '_collect' + str(row) + '_' + str(col) + ',\n')
							code.append(indent(2) + str(row) + ',\n')
							code.append(indent(2) + str(col) + ',\n')
							code.append(indent(2) + 'fifo_PE%d_%d_compute_config_out,\n' % (row, col))
							code.append(indent(2) + 'fifo_PE%d_%d_res_config_out\n' % (row, col))
							code.append(indent(1) + ')\n')
				idx += 1

		#data collectors
	idx = len(desp['OP_NAME'])
	for ref_name in desp['RES_NAME']:
		feed_num = desp['RES_ENGINE_NUM'][idx - len(desp['OP_NAME'])]
		for feed_group in range(desp['FC_SPLIT_FACTOR'][idx]-1, -1, -1):
			for local_feed_id in range(int(feed_num/desp['FC_SPLIT_FACTOR'][idx])-1, -1, -1):
				feed_id = feed_group * (feed_num / desp['FC_SPLIT_FACTOR'][idx]) + local_feed_id
				feed_id = int(feed_id)
				if local_feed_id == feed_num / desp['FC_SPLIT_FACTOR'][idx] - 1:
					fifo_out_id = feed_num - 1 - feed_id
					code.append(indent(1) + '.invoke(' + var_prefix + 'DataCollect' + str(idx) + 'EngineLast,\n')
					# code.append(indent(1) + var_prefix + 'DataCollect' + str(idx) + 'EngineLast(\n')
					code.append(indent(2) + 'fifo' + str(idx) + '_transfer' + str(fifo_out_id) + ',\n')
					for gs in range(desp['FC_GROUP_FACTOR'][idx]):
						ch_dir = desp['RES_CHANNEL_DIR'][idx - len(desp['OP_NAME'])]
						if ch_dir == 'D':
							row = desp['SA_ROWS'] - 1
	#             col = (feed_num - 1 - feed_id) * desp['FC_GROUP_FACTOR'][idx] + gs
							col = feed_id * desp['FC_GROUP_FACTOR'][idx] + gs
							code.append(indent(2) + 'fifo' + str(idx) + '_collect' + str(row) + '_' + str(col) + ',\n')
						elif ch_dir == 'U':
							row = 0
	#             col = (feed_num - 1 - feed_id) * desp['FC_GROUP_FACTOR'][idx] + gs
							col = feed_id * desp['FC_GROUP_FACTOR'][idx] + gs
							code.append(indent(2) + 'fifo' + str(idx) + '_collect' + str(row) + '_' + str(col) + ',\n')
						elif ch_dir == 'R':
	#             row = (feed_num - 1 - feed_id) * desp['FC_GROUP_FACTOR'][idx] + gs
							row = feed_id * desp['FC_GROUP_FACTOR'][idx] + gs
							col = desp['SA_COLS'] - 1
							code.append(indent(2) + 'fifo' + str(idx) + '_collect' + str(row) + '_' + str(col) + ',\n')
						elif ch_dir == 'L':
	#             row = (feed_num - 1 - feed_id) * desp['FC_GROUP_FACTOR'][idx] + gs
							row = feed_id * desp['FC_GROUP_FACTOR'][idx] + gs
							col = 0
							code.append(indent(2) + 'fifo' + str(idx) + '_collect' + str(row) + '_' + str(col) + ',\n')
					code.append(indent(2) + str(local_feed_id) + ',\n')
					code.append(indent(2) + 'fifo_PE%d_%d_res_config_out,\n' % (row, col))
					code.append(indent(2) + 'fifo_DataCollect%dEngine%d_config_out\n' % (idx, feed_id))
					code.append(indent(1) + ')\n')
				else:
					fifo_out_id = feed_num - 1 - feed_id
					fifo_in_id = fifo_out_id - 1
					code.append(indent(1) + '.invoke(' + var_prefix + 'DataCollect' + str(idx) + 'Engine0_wrapper,\n')
					# code.append(indent(1) + var_prefix + 'DataCollect' + str(idx) + 'Engine0_wrapper(\n')
					code.append(indent(2) + 'fifo' + str(idx) + '_transfer' + str(fifo_in_id) + ',\n')
					code.append(indent(2) + 'fifo' + str(idx) + '_transfer' + str(fifo_out_id) + ',\n')
					for gs in range(desp['FC_GROUP_FACTOR'][idx]):
						ch_dir = desp['RES_CHANNEL_DIR'][idx - len(desp['OP_NAME'])]
						if ch_dir == 'D':
							row = desp['SA_ROWS'] - 1
	#             col = (feed_num - 1 - feed_id) * desp['FC_GROUP_FACTOR'][idx] + gs
							col = feed_id * desp['FC_GROUP_FACTOR'][idx] + gs
							code.append(indent(2) + 'fifo' + str(idx) + '_collect' + str(row) + '_' + str(col) + ',\n')
						elif ch_dir == 'U':
							row = 0
	#             col = (feed_num - 1 - feed_id) * desp['FC_GROUP_FACTOR'][idx] + gs
							col = feed_id * desp['FC_GROUP_FACTOR'][idx] + gs
							code.append(indent(2) + 'fifo' + str(idx) + '_collect' + str(row) + '_' + str(col) + ',\n')
						elif ch_dir == 'R':
	#             row = (feed_num - 1 - feed_id) * desp['FC_GROUP_FACTOR'][idx] + gs
							row = feed_id * desp['FC_GROUP_FACTOR'][idx] + gs
							col = desp['SA_COLS'] - 1
							code.append(indent(2) + 'fifo' + str(idx) + '_collect' + str(row) + '_' + str(col) + ',\n')
						elif ch_dir == 'L':
	#             row = (feed_num - 1 - feed_id) * desp['FC_GROUP_FACTOR'][idx] + gs
							row = feed_id * desp['FC_GROUP_FACTOR'][idx] + gs
							col = 0
							code.append(indent(2) + 'fifo' + str(idx) + '_collect' + str(row) + '_' + str(col) + ',\n')
					code.append(indent(2) + str(local_feed_id) + ',\n')
					# code.append(indent(2) + 'fifo_PE%d_%d_res_config_out,\n' % (row, col))
					code.append(indent(2) + 'fifo_DataCollect%dEngine%d_config_out,\n' % (idx, feed_id + 1))
					code.append(indent(2) + 'fifo_DataCollect%dEngine%d_config_out\n' % (idx, feed_id))
					code.append(indent(1) + ')\n')

			#collecthead
		idx = len(desp['OP_NAME'])
		for res_name in desp['RES_NAME']:
			fifo_in_id = feed_num - 1
			code.append(indent(1) + '.invoke(' + var_prefix + 'DataCollect' + str(idx) + 'Head,\n')
			# code.append(indent(1) + var_prefix + 'DataCollect' + str(idx) + 'Head(\n')
	#     code.append(indent(2) + 'fifo%d_shim,\n' % (idx))
			code.append(indent(2) + 'fifo_data_bypass,\n')
			code.append(indent(2) + 'fifo_config_bypass,\n')
			code.append(indent(2) + '%s_to_%s_0,\n'%(SA_node, SA_output))
			for feed_group in range(desp['FC_SPLIT_FACTOR'][idx]):
				feed_id = feed_group * (desp['RES_ENGINE_NUM'][idx - len(desp['OP_NAME'])] / desp['FC_SPLIT_FACTOR'][idx]) + desp['RES_ENGINE_NUM'][idx - len(desp['OP_NAME'])] / desp['FC_SPLIT_FACTOR'][idx] - 1
				feed_id = int(feed_id)
				if feed_group < desp['FC_SPLIT_FACTOR'][idx] - 1:
					code.append(indent(2) + 'fifo' + str(idx) + '_transfer' + str(feed_id) + ',\n')
				else:
					code.append(indent(2) + 'fifo' + str(idx) + '_transfer' + str(feed_id) + ',\n')
			code.append(indent(2) + 'fifo_DataCollect%dEngine0_config_out\n' % (idx))
			code.append(indent(1) + ')\n')

	#   	#collecthead_shim
	#     code.append(indent(1) + '%sDataCollect%dHead_Shim(\n' % (var_prefix, idx))
	#     code.append(indent(2) + res_name + ',\n')
	#     code.append(indent(2) + 'fifo%d_shim,\n' % (idx))
	#     code.append(indent(2) + 'fifo_kernel_config_out,\n')
	#     code.append(indent(2) + '%sIN_NUM, %sOUT_NUM, %sIN_NUM_T, %sOUT_NUM_T, %sIN_IMG_H, %sIN_IMG_W, %sOUT_IMG_H, %sOUT_IMG_W, %sOUT_IMG_H_T, %sOUT_IMG_W_T, FILTER_S_H, %sSTRIDE\n' % (var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix))
	#     code.append(indent(2) + '%sIN_NUM, %sOUT_NUM, %sIN_NUM_T, %sOUT_NUM_T, %sIN_IMG_H, %sIN_IMG_W, %sOUT_IMG_H, %sOUT_IMG_W, %sOUT_IMG_H_T, %sOUT_IMG_W_T, FILTER_S_W, %sSTRIDE\n' % (var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix))
	#     code.append(indent(1) + ');\n\n')
		idx += 1

	# code.append('}\n')

	return code

def df_read(desp, config):
	code = []
	var_prefix = 'U%s' %(desp['KERNEL_ID']) + '_'
	idx = 0
	for op_name in desp['OP_NAME']:
		if idx == 0:
				#read0
			code.append('void ' + var_prefix + 'Data' + str(idx) + 'ReadData0(\n')
			code.append(indent(1) + var_prefix + 'Data' + str(idx) + 'TransferChannelType buffer[' + var_prefix + 'DATA' + str(idx) + '_FC_GROUP_FACTOR][' + var_prefix + 'DATA' + str(idx) + '_BUF_SIZE / ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR],\n')
			code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_in,\n')
			code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_out,\n')
			code.append(indent(1) + 'unsigned int engine_id,\n')
	#     code.append(indent(1) + 'bool en,\n')
			code.append(indent(1) + 'uint LAYER_IN_NUM_T,\n')
			code.append(indent(1) + 'uint LAYER_IN_IMG_H_T,\n')
			code.append(indent(1) + 'ap_uint<8> LAYER_FILTER_S_H,\n')
			code.append(indent(1) + 'ap_uint<8> LAYER_FILTER_S_W,\n')
			code.append(indent(1) + 'uint LAYER_STRIDE,\n')
			code.append(indent(1) + 'uint LAYER_ROW_IL_FACTOR,\n')
			code.append(indent(1) + 'uint LAYER_COL_IL_FACTOR\n')
			code.append('){\n')

			code.append('#pragma HLS INLINE off\n')
			code.append(indent(1) + 'bool LAST_ENGINE = (engine_id == ' + str(desp['OP_ENGINE_NUM'][idx]) + ' / ' + \
					var_prefix + 'DATA' + str(idx) + '_FC_SPLIT_FACTOR - 1);\n')
		#   code.append(indent(1) + 'bool buffer_id_to_write_to_buffer = 0;\n')
		#   code.append(indent(1) + 'bool buffer_id_to_feed_to_sys_arr = 1;\n')
			buf_size = desp['DFC_BUF_SIZE'][idx] * desp['OP_ENGINE_NUM'][idx] * desp['FC_GROUP_FACTOR'][idx] / desp['FC_SIMD_FACTOR'][idx]
			cnt_width = cal_width(buf_size)
			code.append(indent(1) + 'ap_uint<' + str(cnt_width) + '> transfer_counter = 0;\n')
			code.append(indent(1) + 'ap_uint<' + str(cnt_width) + '> data' + str(idx) + '_buf_size;\n')
			code.append(indent(1) + 'ap_uint<' + str(cnt_width) + '> local_transfer_size;\n')
			code.append(indent(1) + 'bool more_to_write_to_buffer = true;\n')
			code.append(indent(1) + 'bool more_to_feed_to_sys_arr = false;\n')
			code.append(indent(1) + 'bool more_to_forward = true;\n')

			buf_size = desp['DFC_BUF_SIZE'][idx] / desp['FC_SIMD_FACTOR'][idx]
			width = cal_width(buf_size)
			code.append(indent(1) + 'ap_uint<' + str(width) + '> buffer_write_counter = 0;\n')
			width = cal_width(desp['FC_GROUP_FACTOR'][idx])
			code.append(indent(1) + 'ap_uint<' + str(width) + '> buffer_gs_id = 0;\n\n')

			code.append(indent(1) + '// the first read\n')
			code.append(indent(1) + '#pragma HLS BIND_OP variable=data0_buf_size op=mul impl=fabric latency=1\n')
			code.append(indent(1) + '#pragma HLS BIND_OP variable=local_transfer_size op=mul impl=fabric latency=1\n')
			code.append(indent(1) + 'data0_buf_size = LAYER_IN_NUM_T * (LAYER_IN_IMG_H_T + LAYER_FILTER_S_H - LAYER_STRIDE) * (LAYER_COL_IL_FACTOR * LAYER_STRIDE + LAYER_FILTER_S_W - LAYER_STRIDE) / %sDATA0_FC_SIMD_FACTOR;\n' % (var_prefix))
			code.append(indent(1) + 'local_transfer_size = data' + str(idx) + '_buf_size * (' + str(desp['OP_ENGINE_NUM'][idx]) + ' / ' + var_prefix + 'DATA' + str(idx) + '_FC_SPLIT_FACTOR - engine_id) * ' + var_prefix + 'DATA' + str(idx) + '_FC_GROUP_FACTOR;\n\n')

			code.append(indent(1) + 'while(more_to_forward){\n')
			code.append('#pragma HLS PIPELINE II=1\n')
			code.append(indent(2) + var_prefix + 'Data' + str(idx) + 'TransferChannelType data_read_from_fifo = fifo_transfer_in.read();\n')
			code.append(indent(2) + 'bool data_is_to_buffer;\n')
			code.append(indent(2) + 'bool data_is_to_forward;\n')
			code.append(indent(2) + 'unsigned int feeder_id = data_read_from_fifo.feeder_id;\n')
			code.append(indent(2) + 'data_is_to_buffer = LAST_ENGINE || (!LAST_ENGINE && feeder_id == engine_id);\n');
			code.append(indent(2) + 'data_is_to_forward = !LAST_ENGINE && (feeder_id != engine_id);\n')
			code.append(indent(2) + 'if (!LAST_ENGINE){\n')
			code.append(indent(3) + 'if (data_is_to_forward){\n')
			code.append(indent(4) + 'fifo_transfer_out.write(data_read_from_fifo);\n')
			code.append(indent(3) + '}\n')
			code.append(indent(2) + '}\n')

			buf_size = desp['DFC_BUF_SIZE'][idx] / desp['FC_SIMD_FACTOR'][idx]
			width = cal_width(buf_size)
			code.append(indent(2) + 'ap_uint<' + str(width) + '> buffer_ind_to_write_to_buffer = buffer_write_counter;\n\n')
			code.append(indent(2) + 'if (data_is_to_buffer){\n')
			code.append(indent(3) + 'buffer[buffer_gs_id][buffer_ind_to_write_to_buffer] = data_read_from_fifo;\n')
			code.append(indent(3) + 'buffer_write_counter++;\n')
			code.append(indent(3) + 'if (buffer_write_counter == data' + str(idx) + '_buf_size){\n')
			code.append(indent(4) + 'buffer_write_counter = 0;\n')
			code.append(indent(4) + 'buffer_gs_id++;\n')
			code.append(indent(4) + 'if (buffer_gs_id == ' + var_prefix + 'DATA' + str(idx) + '_FC_GROUP_FACTOR){\n')
			code.append(indent(5) + 'buffer_gs_id = 0;\n')
			code.append(indent(5) + 'more_to_write_to_buffer = false;\n')
			code.append(indent(4) + '}\n')
			code.append(indent(3) + '}\n')
			code.append(indent(2) + '}\n')

			code.append(indent(2) + 'transfer_counter++;\n')
			code.append(indent(2) + 'if (transfer_counter == local_transfer_size){\n')
			code.append(indent(3) + 'transfer_counter = 0;\n')
			code.append(indent(3) + 'more_to_forward = false;\n')
			code.append(indent(2) + '}\n')

			code.append(indent(1) + '}\n\n')

			code.append('}\n\n')

				#readlast
			code.append('void ' + var_prefix + 'Data' + str(idx) + 'ReadDataLast(\n')
			code.append(indent(1) + var_prefix + 'Data' + str(idx) + 'TransferChannelType buffer[' + var_prefix + 'DATA' + str(idx) + '_FC_GROUP_FACTOR][' + var_prefix + 'DATA' + str(idx) + '_BUF_SIZE / ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR],\n')
			code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_in,\n')
		#   code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_out,\n')
			code.append(indent(1) + 'unsigned int engine_id,\n')
	#     code.append(indent(1) + 'bool en,\n')
			code.append(indent(1) + 'uint LAYER_IN_NUM_T,\n')
			code.append(indent(1) + 'uint LAYER_IN_IMG_H_T,\n')
			code.append(indent(1) + 'ap_uint<8> LAYER_FILTER_S_H,\n')
			code.append(indent(1) + 'ap_uint<8> LAYER_FILTER_S_W,\n')
			code.append(indent(1) + 'uint LAYER_STRIDE,\n')
			code.append(indent(1) + 'uint LAYER_ROW_IL_FACTOR,\n')
			code.append(indent(1) + 'uint LAYER_COL_IL_FACTOR\n')
			code.append('){\n')

			code.append('#pragma HLS INLINE off\n')
			code.append(indent(1) + 'bool LAST_ENGINE = (engine_id == ' + str(desp['OP_ENGINE_NUM'][idx]) + ' / ' + \
					var_prefix + 'DATA' + str(idx) + '_FC_SPLIT_FACTOR - 1);\n')
			code.append(indent(1) + 'bool buffer_id_to_write_to_buffer = 0;\n')
			code.append(indent(1) + 'bool buffer_id_to_feed_to_sys_arr = 1;\n')
			buf_size = desp['DFC_BUF_SIZE'][idx] * desp['OP_ENGINE_NUM'][idx] * desp['FC_GROUP_FACTOR'][idx] / desp['FC_SIMD_FACTOR'][idx]
			cnt_width = cal_width(buf_size)
			code.append(indent(1) + 'ap_uint<' + str(cnt_width) + '> transfer_counter = 0;\n')
			code.append(indent(1) + 'ap_uint<' + str(cnt_width) + '> data' + str(idx) + '_buf_size;\n')
			code.append(indent(1) + 'ap_uint<' + str(cnt_width) + '> local_transfer_size;\n')
			code.append(indent(1) + 'bool more_to_write_to_buffer = true;\n')
			code.append(indent(1) + 'bool more_to_feed_to_sys_arr = false;\n')
			code.append(indent(1) + 'bool more_to_forward = true;\n')

			buf_size = desp['DFC_BUF_SIZE'][idx] / desp['FC_SIMD_FACTOR'][idx]
			width = cal_width(buf_size)
			code.append(indent(1) + 'ap_uint<' + str(width) + '> buffer_write_counter = 0;\n')
			width = cal_width(desp['FC_GROUP_FACTOR'][idx])
			code.append(indent(1) + 'ap_uint<' + str(width) + '> buffer_gs_id = 0;\n\n')

			code.append(indent(1) + '// the first read\n')
	#     code.append(indent(1) + 'unsigned int FILTER_S_H = 1;\n')
	#     code.append(indent(1) + 'unsigned int FILTER_S_W = 1;\n')

	#     code.append(indent(1) + 'data' + str(idx) + '_buf_size = ' + str(desp['DFC_BUF_SIZE'][idx]) + ' / ' + \
	#         var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR;\n')
			code.append(indent(1) + '#pragma HLS BIND_OP variable=data%d_buf_size op=mul impl=fabric latency=1\n'%(idx))
			code.append(indent(1) + '#pragma HLS BIND_OP variable=local_transfer_size op=mul impl=fabric latency=1\n')
			code.append(indent(1) + 'data%d_buf_size = LAYER_IN_NUM_T * (LAYER_IN_IMG_H_T + LAYER_FILTER_S_H - LAYER_STRIDE) * (LAYER_COL_IL_FACTOR * LAYER_STRIDE + LAYER_FILTER_S_W - LAYER_STRIDE) / %sDATA0_FC_SIMD_FACTOR;\n' % (idx, var_prefix))
			code.append(indent(1) + 'local_transfer_size = data' + str(idx) + '_buf_size * (' + str(desp['OP_ENGINE_NUM'][idx]) + ' / ' + var_prefix + 'DATA' + str(idx) + '_FC_SPLIT_FACTOR - engine_id) * ' + var_prefix + 'DATA' + str(idx) + '_FC_GROUP_FACTOR;\n\n')

			code.append(indent(1) + 'while(more_to_forward){\n')
			code.append('#pragma HLS PIPELINE II=1\n')
			code.append(indent(2) + var_prefix + 'Data' + str(idx) + 'TransferChannelType data_read_from_fifo = fifo_transfer_in.read();\n')
			code.append(indent(2) + 'bool data_is_to_buffer;\n')
			code.append(indent(2) + 'bool data_is_to_forward;\n')
			code.append(indent(2) + 'unsigned int feeder_id = data_read_from_fifo.feeder_id;\n')
			code.append(indent(2) + 'data_is_to_buffer = LAST_ENGINE || (!LAST_ENGINE && feeder_id == engine_id);\n');
			code.append(indent(2) + 'data_is_to_forward = !LAST_ENGINE && (feeder_id != engine_id);\n')

			buf_size = desp['DFC_BUF_SIZE'][idx] / desp['FC_SIMD_FACTOR'][idx]
			width = cal_width(buf_size)
			code.append(indent(2) + 'ap_uint<' + str(width) + '> buffer_ind_to_write_to_buffer = buffer_write_counter;\n\n')
			code.append(indent(2) + 'if (data_is_to_buffer){\n')
			code.append(indent(3) + 'buffer[buffer_gs_id][buffer_ind_to_write_to_buffer] = data_read_from_fifo;\n')
			code.append(indent(3) + 'buffer_write_counter++;\n')
			code.append(indent(3) + 'if (buffer_write_counter == data' + str(idx) + '_buf_size){\n')
			code.append(indent(4) + 'buffer_write_counter = 0;\n')
			code.append(indent(4) + 'buffer_gs_id++;\n')
			code.append(indent(4) + 'if (buffer_gs_id == ' + var_prefix + 'DATA' + str(idx) + '_FC_GROUP_FACTOR){\n')
			code.append(indent(5) + 'buffer_gs_id = 0;\n')
			code.append(indent(5) + 'more_to_write_to_buffer = false;\n')
			code.append(indent(4) + '}\n')
			code.append(indent(3) + '}\n')
			code.append(indent(2) + '}\n')

			code.append(indent(2) + 'transfer_counter++;\n')
			code.append(indent(2) + 'if (transfer_counter == local_transfer_size){\n')
			code.append(indent(3) + 'transfer_counter = 0;\n')
			code.append(indent(3) + 'more_to_forward = false;\n')
			code.append(indent(2) + '}\n')

			code.append(indent(1) + '}\n\n')

			code.append('}\n\n')
		elif idx == 1:
				#read0
			code.append('void ' + var_prefix + 'Data' + str(idx) + 'ReadData0(\n')
			code.append(indent(1) + var_prefix + 'Data' + str(idx) + 'TransferChannelType buffer[' + var_prefix + 'DATA' + str(idx) + '_FC_GROUP_FACTOR][' + var_prefix + 'DATA' + str(idx) + '_BUF_SIZE / ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR],\n')
			code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_in,\n')
			code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_out,\n')
			code.append(indent(1) + 'unsigned int engine_id,\n')
	#     code.append(indent(1) + 'bool en,\n')
			code.append(indent(1) + 'uint LAYER_IN_NUM_T,\n')
			code.append(indent(1) + 'uint LAYER_IN_IMG_H_T,\n')
			code.append(indent(1) + 'ap_uint<8> LAYER_FILTER_S_H,\n')
			code.append(indent(1) + 'ap_uint<8> LAYER_FILTER_S_W,\n')
			code.append(indent(1) + 'uint LAYER_STRIDE,\n')
			code.append(indent(1) + 'uint LAYER_ROW_IL_FACTOR,\n')
			code.append(indent(1) + 'uint LAYER_COL_IL_FACTOR\n')
			code.append('){\n')

			code.append('#pragma HLS INLINE off\n')
			code.append(indent(1) + 'bool LAST_ENGINE = (engine_id == ' + str(desp['OP_ENGINE_NUM'][idx]) + ' / ' + \
					var_prefix + 'DATA' + str(idx) + '_FC_SPLIT_FACTOR - 1);\n')
		#   code.append(indent(1) + 'bool buffer_id_to_write_to_buffer = 0;\n')
		#   code.append(indent(1) + 'bool buffer_id_to_feed_to_sys_arr = 1;\n')
			buf_size = desp['DFC_BUF_SIZE'][idx] * desp['OP_ENGINE_NUM'][idx] * desp['FC_GROUP_FACTOR'][idx] / desp['FC_SIMD_FACTOR'][idx]
			cnt_width = cal_width(buf_size)
			code.append(indent(1) + 'ap_uint<' + str(cnt_width) + '> transfer_counter = 0;\n')
			code.append(indent(1) + 'ap_uint<' + str(cnt_width) + '> data' + str(idx) + '_buf_size;\n')
			code.append(indent(1) + 'ap_uint<' + str(cnt_width) + '> local_transfer_size;\n')
			code.append(indent(1) + 'bool more_to_write_to_buffer = true;\n')
			code.append(indent(1) + 'bool more_to_feed_to_sys_arr = false;\n')
			code.append(indent(1) + 'bool more_to_forward = true;\n')

			buf_size = desp['DFC_BUF_SIZE'][idx] / desp['FC_SIMD_FACTOR'][idx]
			width = cal_width(buf_size)
			code.append(indent(1) + 'ap_uint<' + str(width) + '> buffer_write_counter = 0;\n')
			width = cal_width(desp['FC_GROUP_FACTOR'][idx])
			code.append(indent(1) + 'ap_uint<' + str(width) + '> buffer_gs_id = 0;\n\n')

			code.append(indent(1) + '// the first read\n')
	#     code.append(indent(1) + 'unsigned int FILTER_S_H = 1;\n')
	#     code.append(indent(1) + 'unsigned int FILTER_S_W = 1;\n')

	#     code.append(indent(1) + 'data' + str(idx) + '_buf_size = ' + str(desp['DFC_BUF_SIZE'][idx]) + ' / ' + \
	#         var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR;\n')
			code.append(indent(1) + '#pragma HLS BIND_OP variable=data%d_buf_size op=mul impl=fabric latency=1\n'%(idx))
			code.append(indent(1) + '#pragma HLS BIND_OP variable=local_transfer_size op=mul impl=fabric latency=1\n')
			code.append(indent(1) + 'data1_buf_size = LAYER_IN_NUM_T * LAYER_ROW_IL_FACTOR * LAYER_FILTER_S_H * LAYER_FILTER_S_W / %sDATA%d_FC_SIMD_FACTOR;\n' % (var_prefix, idx))
			code.append(indent(1) + 'local_transfer_size = data' + str(idx) + '_buf_size * (' + str(desp['OP_ENGINE_NUM'][idx]) + ' / ' + var_prefix + 'DATA' + str(idx) + '_FC_SPLIT_FACTOR - engine_id) * ' + var_prefix + 'DATA' + str(idx) + '_FC_GROUP_FACTOR;\n\n')

			code.append(indent(1) + 'while(more_to_forward){\n')
			code.append('#pragma HLS PIPELINE II=1\n')
			code.append(indent(2) + var_prefix + 'Data' + str(idx) + 'TransferChannelType data_read_from_fifo = fifo_transfer_in.read();\n')
			code.append(indent(2) + 'bool data_is_to_buffer;\n')
			code.append(indent(2) + 'bool data_is_to_forward;\n')
			code.append(indent(2) + 'unsigned int feeder_id = data_read_from_fifo.feeder_id;\n')
			code.append(indent(2) + 'data_is_to_buffer = LAST_ENGINE || (!LAST_ENGINE && feeder_id == engine_id);\n');
			code.append(indent(2) + 'data_is_to_forward = !LAST_ENGINE && (feeder_id != engine_id);\n')
			code.append(indent(2) + 'if (!LAST_ENGINE){\n')
			code.append(indent(3) + 'if (data_is_to_forward){\n')
			code.append(indent(4) + 'fifo_transfer_out.write(data_read_from_fifo);\n')
			code.append(indent(3) + '}\n')
			code.append(indent(2) + '}\n')

			buf_size = desp['DFC_BUF_SIZE'][idx] / desp['FC_SIMD_FACTOR'][idx]
			width = cal_width(buf_size)
			code.append(indent(2) + 'ap_uint<' + str(width) + '> buffer_ind_to_write_to_buffer = buffer_write_counter;\n\n')
			code.append(indent(2) + 'if (data_is_to_buffer){\n')
			code.append(indent(3) + 'buffer[buffer_gs_id][buffer_ind_to_write_to_buffer] = data_read_from_fifo;\n')
			code.append(indent(3) + 'buffer_write_counter++;\n')
			code.append(indent(3) + 'if (buffer_write_counter == data' + str(idx) + '_buf_size){\n')
			code.append(indent(4) + 'buffer_write_counter = 0;\n')
			code.append(indent(4) + 'buffer_gs_id++;\n')
			code.append(indent(4) + 'if (buffer_gs_id == ' + var_prefix + 'DATA' + str(idx) + '_FC_GROUP_FACTOR){\n')
			code.append(indent(5) + 'buffer_gs_id = 0;\n')
			code.append(indent(5) + 'more_to_write_to_buffer = false;\n')
			code.append(indent(4) + '}\n')
			code.append(indent(3) + '}\n')
			code.append(indent(2) + '}\n')

			code.append(indent(2) + 'transfer_counter++;\n')
			code.append(indent(2) + 'if (transfer_counter == local_transfer_size){\n')
			code.append(indent(3) + 'transfer_counter = 0;\n')
			code.append(indent(3) + 'more_to_forward = false;\n')
			code.append(indent(2) + '}\n')

			code.append(indent(1) + '}\n\n')

			code.append('}\n\n')

				#readlast
			code.append('void ' + var_prefix + 'Data' + str(idx) + 'ReadDataLast(\n')
			code.append(indent(1) + var_prefix + 'Data' + str(idx) + 'TransferChannelType buffer[' + var_prefix + 'DATA' + str(idx) + '_FC_GROUP_FACTOR][' + var_prefix + 'DATA' + str(idx) + '_BUF_SIZE / ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR],\n')
			code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_in,\n')
		#   code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_out,\n')
			code.append(indent(1) + 'unsigned int engine_id,\n')
			code.append(indent(1) + 'uint LAYER_IN_NUM_T,\n')
			code.append(indent(1) + 'uint LAYER_IN_IMG_H_T,\n')
	#     code.append(indent(1) + 'bool en,\n')
			code.append(indent(1) + 'ap_uint<8> LAYER_FILTER_S_H,\n')
			code.append(indent(1) + 'ap_uint<8> LAYER_FILTER_S_W,\n')
			code.append(indent(1) + 'uint LAYER_STRIDE,\n')
			code.append(indent(1) + 'uint LAYER_ROW_IL_FACTOR,\n')
			code.append(indent(1) + 'uint LAYER_COL_IL_FACTOR\n')
			code.append('){\n')

			code.append('#pragma HLS INLINE off\n')
			code.append(indent(1) + 'bool LAST_ENGINE = (engine_id == ' + str(desp['OP_ENGINE_NUM'][idx]) + ' / ' + \
					var_prefix + 'DATA' + str(idx) + '_FC_SPLIT_FACTOR - 1);\n')
			code.append(indent(1) + 'bool buffer_id_to_write_to_buffer = 0;\n')
			code.append(indent(1) + 'bool buffer_id_to_feed_to_sys_arr = 1;\n')
			buf_size = desp['DFC_BUF_SIZE'][idx] * desp['OP_ENGINE_NUM'][idx] * desp['FC_GROUP_FACTOR'][idx] / desp['FC_SIMD_FACTOR'][idx]
			cnt_width = cal_width(buf_size)
			code.append(indent(1) + 'ap_uint<' + str(cnt_width) + '> transfer_counter = 0;\n')
			code.append(indent(1) + 'ap_uint<' + str(cnt_width) + '> data' + str(idx) + '_buf_size;\n')
			code.append(indent(1) + 'ap_uint<' + str(cnt_width) + '> local_transfer_size;\n')
			code.append(indent(1) + 'bool more_to_write_to_buffer = true;\n')
			code.append(indent(1) + 'bool more_to_feed_to_sys_arr = false;\n')
			code.append(indent(1) + 'bool more_to_forward = true;\n')

			buf_size = desp['DFC_BUF_SIZE'][idx] / desp['FC_SIMD_FACTOR'][idx]
			width = cal_width(buf_size)
			code.append(indent(1) + 'ap_uint<' + str(width) + '> buffer_write_counter = 0;\n')
			width = cal_width(desp['FC_GROUP_FACTOR'][idx])
			code.append(indent(1) + 'ap_uint<' + str(width) + '> buffer_gs_id = 0;\n\n')

			code.append(indent(1) + '// the first read\n')
	#     code.append(indent(1) + 'unsigned int FILTER_S_H = 1;\n')
	#     code.append(indent(1) + 'unsigned int FILTER_S_W = 1;\n')

	#     code.append(indent(1) + 'data' + str(idx) + '_buf_size = ' + str(desp['DFC_BUF_SIZE'][idx]) + ' / ' + \
	#         var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR;\n')
			code.append(indent(1) + '#pragma HLS BIND_OP variable=data1_buf_size op=mul impl=fabric latency=1\n')
			code.append(indent(1) + '#pragma HLS BIND_OP variable=local_transfer_size op=mul impl=fabric latency=1\n')
			code.append(indent(1) + 'data1_buf_size = LAYER_IN_NUM_T * LAYER_ROW_IL_FACTOR * LAYER_FILTER_S_H * LAYER_FILTER_S_W / %sDATA%d_FC_SIMD_FACTOR;\n' % (var_prefix, idx))
			code.append(indent(1) + 'local_transfer_size = data' + str(idx) + '_buf_size * (' + str(desp['OP_ENGINE_NUM'][idx]) + ' / ' + var_prefix + 'DATA' + str(idx) + '_FC_SPLIT_FACTOR - engine_id) * ' + var_prefix + 'DATA' + str(idx) + '_FC_GROUP_FACTOR;\n\n')

			code.append(indent(1) + 'while(more_to_forward){\n')
			code.append('#pragma HLS PIPELINE II=1\n')
			code.append(indent(2) + var_prefix + 'Data' + str(idx) + 'TransferChannelType data_read_from_fifo = fifo_transfer_in.read();\n')
			code.append(indent(2) + 'bool data_is_to_buffer;\n')
			code.append(indent(2) + 'bool data_is_to_forward;\n')
			code.append(indent(2) + 'unsigned int feeder_id = data_read_from_fifo.feeder_id;\n')
			code.append(indent(2) + 'data_is_to_buffer = LAST_ENGINE || (!LAST_ENGINE && feeder_id == engine_id);\n');
			code.append(indent(2) + 'data_is_to_forward = !LAST_ENGINE && (feeder_id != engine_id);\n')
		#   code.append(indent(2) + 'if (!LAST_ENGINE){\n')
		#   code.append(indent(3) + 'if (data_is_to_forward){\n')
		#   code.append(indent(4) + 'fifo_transfer_out.write(data_read_from_fifo);\n')
		#   code.append(indent(3) + '}\n')
		#   code.append(indent(2) + '}\n')

			buf_size = desp['DFC_BUF_SIZE'][idx] / desp['FC_SIMD_FACTOR'][idx]
			width = cal_width(buf_size)
			code.append(indent(2) + 'ap_uint<' + str(width) + '> buffer_ind_to_write_to_buffer = buffer_write_counter;\n\n')
			code.append(indent(2) + 'if (data_is_to_buffer){\n')
			code.append(indent(3) + 'buffer[buffer_gs_id][buffer_ind_to_write_to_buffer] = data_read_from_fifo;\n')
			code.append(indent(3) + 'buffer_write_counter++;\n')
			code.append(indent(3) + 'if (buffer_write_counter == data' + str(idx) + '_buf_size){\n')
			code.append(indent(4) + 'buffer_write_counter = 0;\n')
			code.append(indent(4) + 'buffer_gs_id++;\n')
			code.append(indent(4) + 'if (buffer_gs_id == ' + var_prefix + 'DATA' + str(idx) + '_FC_GROUP_FACTOR){\n')
			code.append(indent(5) + 'buffer_gs_id = 0;\n')
			code.append(indent(5) + 'more_to_write_to_buffer = false;\n')
			code.append(indent(4) + '}\n')
			code.append(indent(3) + '}\n')
			code.append(indent(2) + '}\n')

			code.append(indent(2) + 'transfer_counter++;\n')
			code.append(indent(2) + 'if (transfer_counter == local_transfer_size){\n')
			code.append(indent(3) + 'transfer_counter = 0;\n')
			code.append(indent(3) + 'more_to_forward = false;\n')
			code.append(indent(2) + '}\n')

			code.append(indent(1) + '}\n\n')

			code.append('}\n\n')


		idx += 1

	return code

def df_feed(desp, config):
	code = []
	var_prefix = 'U%s' %(desp['KERNEL_ID']) + '_'
	idx = 0
	for op_name in desp['OP_NAME']:
		if idx == 0:
			code.append('void ' + var_prefix + 'Data' + str(idx) + 'FeedData0(\n')
			code.append(indent(1) + var_prefix + 'Data' + str(idx) + 'TransferChannelType buffer[' + \
					var_prefix + 'DATA' + str(idx) + '_FC_GROUP_FACTOR][' + var_prefix + 'DATA' + str(idx) + \
					'_BUF_SIZE/' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR],\n')
			for gs in range(desp['FC_GROUP_FACTOR'][idx]):
				code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo_feed_' + str(gs) + ',\n')

			#code.append(indent(1) + 'unsigned int initial_round,\n')
			code.append(indent(1) + 'uint LAYER_IN_NUM_T,\n')
			code.append(indent(1) + 'uint LAYER_IN_IMG_H_T,\n')
			code.append(indent(1) + 'ap_uint<8> LAYER_FILTER_S_H,\n')
			code.append(indent(1) + 'ap_uint<8> LAYER_FILTER_S_W,\n')
			code.append(indent(1) + 'ap_uint<8> LAYER_FILTER_D_H,\n')
			code.append(indent(1) + 'ap_uint<8> LAYER_FILTER_D_W,\n')
			
			code.append(indent(1) + 'uint LAYER_STRIDE,\n')
			code.append(indent(1) + 'uint LAYER_ROW_IL_FACTOR,\n')
			code.append(indent(1) + 'uint LAYER_COL_IL_FACTOR,\n')
			code.append(indent(1) + 'uint LAYER_DILATION_RATE,\n')
			code.append(indent(1) + 'uint K_NUM,\n')
			code.append(indent(1) + 'ap_uint<32> KH,\n')
			code.append(indent(1) + 'ap_uint<32> KW\n')
			code.append('){\n')

			code.append('#pragma HLS INLINE off\n')
			code.append(indent(1) + 'bool more_to_feed_to_sys_arr = true;\n\n')

			for i, counter in enumerate(desp['DF_FEED_COUNTER']):
				width = counter['WIDTH']
				var = counter['VARIABLE']
				bound_lower = counter['BOUND'][0]
				bound_upper = counter['BOUND'][1]
				if i<len(desp['DF_FEED_COUNTER'])-1:
					str_tmp = 'ap_uint<' + str(width) + '> ' + var + ' = ' + str(bound_lower) + ';'
					code.append(indent(1) + str_tmp + '\n')
				else:
					str_tmp = 'ap_uint<' + str(width+2) + '> ' + var + ' = ' + str(bound_lower) + ';'
					code.append(indent(1) + str_tmp + '\n')
			code.append(indent(1)+ 'ap_uint<5> i = 0;\n')
			code.append('\n')
	#     code.append(indent(1) + var_prefix + 'Data' + str(idx) + 'TransferChannelType tmp = buffer[0][0];\n')
	#     code.append(indent(1) + 'unsigned int FILTER_S = tmp.FILTER_S_H;\n\n')
	#     code.append(indent(1) + 'unsigned int FILTER_S = tmp.FILTER_S_W;\n\n')

			val = desp['PARAMETERS']['IN_IMG_H_T']
			w = cal_width(val)
			code.append(indent(1) + 'ap_uint<%d> c0_counter_bound;\n' % (w))
			code.append(indent(1) + 'if (LAYER_STRIDE == 1){\n')
			code.append(indent(2) + 'c0_counter_bound = LAYER_IN_IMG_H_T;\n')
			code.append(indent(1) + '} else if (LAYER_STRIDE == 2){\n')
			code.append(indent(2) + 'c0_counter_bound = LAYER_IN_IMG_H_T / 2;\n')
			code.append(indent(1) + '}\n\n')
			code.append(indent(1) +  'ap_uint<8> K_H[4] = {\n')
			code.append(indent(1) +  '  unpack(KH, 0),\n')
			code.append(indent(1) +  '  unpack(KH, 1),\n')
			code.append(indent(1) +  '  unpack(KH, 2),\n')
			code.append(indent(1) +  '  unpack(KH, 3)\n')
			code.append(indent(1) +  '};\n')
			code.append(indent(1) +  'ap_uint<8> K_W[4] = {\n')
			code.append(indent(1) +  '  unpack(KW, 0),\n')
			code.append(indent(1) +  '  unpack(KW, 1),\n')
			code.append(indent(1) +  '  unpack(KW, 2),\n')
			code.append(indent(1) +  '  unpack(KW, 3)\n')
			code.append(indent(1) +  '};\n')
			code.append(indent(1) +  '#pragma HLS ARRAY_PARTITION variable=K_H complete\n')
			code.append(indent(1) +  '#pragma HLS ARRAY_PARTITION variable=K_W complete\n')
			for gs in range(desp['FC_GROUP_FACTOR'][idx]):
				code.append(indent(1) + 'ap_uint<' + var_prefix + 'DATA' + str(idx) + '_WIDTH*' + var_prefix + \
						'SIMD_FACTOR> sel_tmp_' + str(gs) + '[' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR/' + \
						var_prefix + 'SIMD_FACTOR];\n')
				code.append('#pragma HLS ARRAY_PARTITION variable=sel_tmp_' + str(gs) + ' complete dim=1\n')

			code.append('\n')
			code.append(indent(1) + 'while(more_to_feed_to_sys_arr){\n')
			code.append('#pragma HLS PIPELINE II=1\n')
			buf_size = desp['DFC_BUF_SIZE'][idx]
			buf_size_width = int(cal_width(buf_size))
			code.append(indent(2) + 'ap_uint<' + str(buf_size_width) + '> buffer_ind_to_feed_to_sys_arr;\n')
			code.append(indent(2) + 'ap_uint<%d> w_idx, h_idx;\n' % (buf_size_width))
			code.append(indent(2) + 'if (LAYER_STRIDE == 1){\n')
			code.append(indent(3) + 'w_idx = c2_counter + c4_counter*LAYER_DILATION_RATE;\n')
			code.append(indent(3) + 'h_idx = c0_counter + c3_counter*LAYER_DILATION_RATE;\n')
			code.append(indent(2) + '} else if (LAYER_STRIDE == 2){\n')
			code.append(indent(3) + 'w_idx = c2_counter * 2 + c4_counter;\n')
			code.append(indent(3) + 'h_idx = c0_counter * 2 + c3_counter;\n')
			code.append(indent(2) + '}\n')
			code.append(indent(2) + 'ap_uint<%d> w_bound = LAYER_COL_IL_FACTOR * LAYER_STRIDE + LAYER_FILTER_S_W - LAYER_STRIDE;\n' % (buf_size_width))
			code.append(indent(2) + 'ap_uint<%d> h_bound = LAYER_IN_IMG_H_T + LAYER_FILTER_S_H - LAYER_STRIDE;\n' % (buf_size_width))
			code.append(indent(2) + '#pragma HLS BIND_OP variable=buffer_ind_to_feed_to_sys_arr op=mul impl=fabric latency=1\n')
			code.append(indent(2) + 'buffer_ind_to_feed_to_sys_arr = (w_idx + h_idx * w_bound + c5_counter * %sSIMD_FACTOR / %sDATA0_FC_SIMD_FACTOR * h_bound * w_bound) * %sDATA0_FC_SIMD_FACTOR + c5_counter * %sSIMD_FACTOR %% %sDATA0_FC_SIMD_FACTOR;\n' % (var_prefix, var_prefix, var_prefix, var_prefix, var_prefix))
	#     code.append(indent(2) + 'buffer_ind_to_feed_to_sys_arr = (c2_counter * LAYER_STRIDE + (LAYER_STRIDE - 1) + c4_counter) * %sDATA0_FC_SIMD_FACTOR + (c0_counter * LAYER_STRIDE + (LAYER_STRIDE - 1) + c3_counter) * (LAYER_COL_IL_FACTOR * LAYER_STRIDE + LAYER_FILTER_S - 1) * %sDATA0_FC_SIMD_FACTOR + c5_counter * %sSIMD_FACTOR / %sDATA0_FC_SIMD_FACTOR * (LAYER_IN_IMG_H_T + LAYER_FILTER_S - 1) * (LAYER_COL_IL_FACTOR * LAYER_STRIDE + LAYER_FILTER_S_H - 1) * %sDATA0_FC_SIMD_FACTOR + c5_counter * %sSIMD_FACTOR %% %sDATA0_FC_SIMD_FACTOR;\n' % (var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix))
	#     code.append(indent(2) + 'buffer_ind_to_feed_to_sys_arr = (c2_counter * LAYER_STRIDE + (LAYER_STRIDE - 1) + c4_counter) * %sDATA0_FC_SIMD_FACTOR + (c0_counter * LAYER_STRIDE + (LAYER_STRIDE - 1) + c3_counter) * (LAYER_COL_IL_FACTOR * LAYER_STRIDE + LAYER_FILTER_S - 1) * %sDATA0_FC_SIMD_FACTOR + c5_counter * %sSIMD_FACTOR / %sDATA0_FC_SIMD_FACTOR * (LAYER_IN_IMG_H_T + LAYER_FILTER_S - 1) * (LAYER_COL_IL_FACTOR * LAYER_STRIDE + LAYER_FILTER_S_W - 1) * %sDATA0_FC_SIMD_FACTOR + c5_counter * %sSIMD_FACTOR %% %sDATA0_FC_SIMD_FACTOR;\n' % (var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix, var_prefix))

			code.append('\n')

				#code.append(indent(2) + 'ap_uint<%d> wide_index = buffer_ind_to_feed_to_sys_arr / ' % (buf_size_width) + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR + (K_W[0]-K_W[i])+(K_H[0]-K_H[i])*(LAYER_COL_IL_FACTOR+LAYER_FILTER_S_H-LAYER_STRIDE);\n')
			code.append(indent(2) + 'ap_uint<%d> wide_index = buffer_ind_to_feed_to_sys_arr / ' % (buf_size_width) + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR + (K_W[0]-K_W[i]) + (K_H[0]-K_H[i]) * (LAYER_COL_IL_FACTOR+LAYER_FILTER_S_W-LAYER_STRIDE);\n')
			code.append(indent(2) + 'ap_uint<%d> wide_offset = buffer_ind_to_feed_to_sys_arr %% ' % (buf_size_width) + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR;\n\n')

			for gs in range(desp['FC_GROUP_FACTOR'][idx]):
				code.append(indent(2) + var_prefix + 'Data' + str(idx) + 'TransferChannelType buf_data_' + str(gs) + ' = buffer[' + str(gs) + '][wide_index];\n')
				code.append(indent(2) + 'ap_uint<' + var_prefix + 'DATA' + str(idx) + '_WIDTH*' + var_prefix + \
						'DATA' + str(idx) + '_FC_SIMD_FACTOR> wide_data_' + str(gs) + ' = buf_data_' + str(gs) + \
						'.data;\n')
				code.append(indent(2) + 'ap_uint<' + var_prefix + 'DATA' + str(idx) + '_WIDTH*' + var_prefix + \
						'SIMD_FACTOR> data_to_feed_' + str(gs) + ';\n')
				code.append(indent(2) + 'for (int s = 0; s < ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR / ' + var_prefix + 'SIMD_FACTOR; s++){\n')
				code.append('#pragma HLS UNROLL\n')
				code.append(indent(3) + 'sel_tmp_' + str(gs) + '[s] = wide_data_' + str(gs) + '(' + var_prefix + 'DATA' + str(idx) + '_WIDTH * ' + var_prefix + 'SIMD_FACTOR-1, 0);\n')
				code.append(indent(3) + 'wide_data_' + str(gs) + ' = wide_data_' + str(gs) + ' >> (' + var_prefix + 'DATA' + str(idx) + '_WIDTH * ' + var_prefix + 'SIMD_FACTOR);\n')
				code.append(indent(2) + '}\n')
				code.append(indent(2) + 'data_to_feed_' + str(gs) + ' = sel_tmp_' + str(gs) + '[wide_offset / ' + var_prefix + 'SIMD_FACTOR];\n')

				code.append('\n')
				code.append(indent(2) + var_prefix + 'Data' + str(idx) + 'PEChannelType fifo_data_to_feed_' + str(gs) + ';\n')
				code.append(indent(2) + 'fifo_data_to_feed_' + str(gs) + ' = ' + var_prefix + 'Data' + str(idx) + \
						'PEChannelType(data_to_feed_' + str(gs) + ', buf_data_' + str(gs) + '.new_pair, buf_data_' + str(gs) + '.last_pair, buf_data_' + str(gs) + '.FILTER_S);\n')
				code.append(indent(2) + 'fifo_feed_' + str(gs) + '.write(fifo_data_to_feed_' + str(gs) + ');\n\n')

			code.append(indent(2) + '// counter logic\n')
	#     code_block = generate_df_counter_loops(desp, config)
	#     for codeline in code_block:
	#       code.append(indent(2) + codeline)
			code.append(indent(2) + 'c0_counter++;\n')
	#     code.append(indent(2) + 'if (c0_counter == LAYER_IN_IMG_H_T / LAYER_STRIDE){\n')
			code.append(indent(2) + 'if (c0_counter == c0_counter_bound){\n')
			code.append(indent(3) + 'c0_counter = 0;\n')
			code.append(indent(3) + 'c1_counter++;\n')
			code.append(indent(3) + 'if (c1_counter == LAYER_ROW_IL_FACTOR){\n')
			code.append(indent(4) + 'c1_counter = 0;\n')
			code.append(indent(4) + 'c2_counter++;\n')
			code.append(indent(4) + 'if (c2_counter == LAYER_COL_IL_FACTOR){\n')
			code.append(indent(5) + 'c2_counter = 0;\n')
			code.append(indent(5) + 'c3_counter++;\n')
			code.append(indent(5) + 'if (c3_counter == K_H[i]){\n')
			code.append(indent(6) + 'c3_counter = 0;\n')
			code.append(indent(6) + 'c4_counter++;\n')
			code.append(indent(6) + 'if (c4_counter == K_W[i]){\n')
			code.append(indent(7) + 'c4_counter = 0;\n')
			code.append(indent(7) + 'c5_counter++;\n')
			code.append(indent(7) + 'if (c5_counter == LAYER_IN_NUM_T / %sSIMD_FACTOR){\n' % (var_prefix))
			code.append(indent(8) + 'c5_counter = 0;\n')
			code.append(indent(8) + 'i++;\n')
			code.append(indent(8) + 'if (i == K_NUM){\n')
			code.append(indent(9) + 'i = 0;\n')
			code.append(indent(9) + 'more_to_feed_to_sys_arr = false;\n')
			code.append(indent(8) + '}\n')
			code.append(indent(7) + '}\n')
			code.append(indent(6) + '}\n')
			code.append(indent(5) + '}\n')
			code.append(indent(4) + '}\n')
			code.append(indent(3) + '}\n')
			code.append(indent(2) + '}\n')

			code.append(indent(1) + '}\n')

			code.append('}\n\n')
		elif idx == 1:
			code.append('void ' + var_prefix + 'Data' + str(idx) + 'FeedData0(\n')
			code.append(indent(1) + var_prefix + 'Data' + str(idx) + 'TransferChannelType buffer[' + \
					var_prefix + 'DATA' + str(idx) + '_FC_GROUP_FACTOR][' + var_prefix + 'DATA' + str(idx) + \
					'_BUF_SIZE/' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR],\n')
			for gs in range(desp['FC_GROUP_FACTOR'][idx]):
				code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo_feed_' + str(gs) + ',\n')

	#     code.append(indent(1) + 'unsigned int initial_round,\n')
			code.append(indent(1) + 'uint LAYER_IN_NUM_T,\n')
			code.append(indent(1) + 'uint LAYER_IN_IMG_H_T,\n')
			code.append(indent(1) + 'ap_uint<8> LAYER_FILTER_S_H,\n')
			code.append(indent(1) + 'ap_uint<8> LAYER_FILTER_S_W,\n')
			code.append(indent(1) + 'uint LAYER_STRIDE,\n')
			code.append(indent(1) + 'uint LAYER_ROW_IL_FACTOR,\n')
			code.append(indent(1) + 'uint LAYER_COL_IL_FACTOR,\n')

			code.append(indent(1) + 'uint K_NUM,\n')
			code.append(indent(1) + 'ap_uint<32> KH,\n')
			code.append(indent(1) + 'ap_uint<32> KW\n')
			code.append('){\n')

			code.append('#pragma HLS INLINE off\n')
			code.append(indent(1) + 'bool more_to_feed_to_sys_arr = true;\n\n')

			for i, counter in enumerate(desp['DF_FEED_COUNTER']):
				width = counter['WIDTH']
				var = counter['VARIABLE']
				bound_lower = counter['BOUND'][0]
				bound_upper = counter['BOUND'][1]
				if i<len(desp['DF_FEED_COUNTER'])-1:
					str_tmp = 'ap_uint<' + str(width) + '> ' + var + ' = ' + str(bound_lower) + ';'
					code.append(indent(1) + str_tmp + '\n')
				else:
					str_tmp = 'ap_uint<' + str(width+2) + '> ' + var + ' = ' + str(bound_lower) + ';'
					code.append(indent(1) + str_tmp + '\n')
			code.append(indent(1)+ 'ap_uint<5> i = 0;\n')
			code.append('\n')
	#     code.append(indent(1) + var_prefix + 'Data' + str(idx) + 'TransferChannelType tmp = buffer[0][0];\n')
	#     code.append(indent(1) + 'unsigned int FILTER_S = tmp.FILTER_S_H;\n\n')
	#     code.append(indent(1) + 'unsigned int FILTER_S = tmp.FILTER_S_W;\n\n')
			val = desp['PARAMETERS']['IN_IMG_H_T']
			w = cal_width(val)
			code.append(indent(1) + 'ap_uint<%d> c0_counter_bound;\n' % (w))
			code.append(indent(1) + 'ap_uint<6> offsets[4] = {0};\n')
			code.append(indent(1) + '#pragma HLS ARRAY_PARTITION variable=offsets complete\n')
			code.append(indent(1) + 'if(K_NUM==4){\n')
			code.append(indent(1) + '  offsets[0] = 0*LAYER_FILTER_S_H + 0                                  ;\n')
			code.append(indent(1) + '  offsets[1] = 0*LAYER_FILTER_S_H + 0                   + unpack(KW,0) ;\n')
			code.append(indent(1) + '  offsets[2] = unpack(KH,0)*LAYER_FILTER_S_H + 0                       ;\n')
			code.append(indent(1) + '  offsets[3] = unpack(KH,0)*LAYER_FILTER_S_H + 0        + unpack(KW,2) ;\n')

			code.append(indent(1) + '}\n')
			code.append(indent(1) + 'ap_uint<8> K_H[4] = {\n')
			code.append(indent(1) + '  unpack(KH, 0),\n')
			code.append(indent(1) + '  unpack(KH, 1),\n')
			code.append(indent(1) + '  unpack(KH, 2),\n')
			code.append(indent(1) + '  unpack(KH, 3)\n')
			code.append(indent(1) + '};\n')
			code.append(indent(1) + 'ap_uint<8> K_W[4] = {\n')
			code.append(indent(1) + '  unpack(KW, 0),\n')
			code.append(indent(1) + '  unpack(KW, 1),\n')
			code.append(indent(1) + '  unpack(KW, 2),\n')
			code.append(indent(1) + '  unpack(KW, 3)\n')
			code.append(indent(1) + '};\n')
			code.append(indent(1) + '#pragma HLS ARRAY_PARTITION variable=K_H complete\n')
			code.append(indent(1) + '#pragma HLS ARRAY_PARTITION variable=K_W complete\n')
			
			code.append(indent(1) + '')
			code.append(indent(1) + 'if (LAYER_STRIDE == 1){\n')
			code.append(indent(2) + 'c0_counter_bound = LAYER_IN_IMG_H_T;\n')
			code.append(indent(1) + '} else if (LAYER_STRIDE == 2){\n')
			code.append(indent(2) + 'c0_counter_bound = LAYER_IN_IMG_H_T / 2;\n')
			code.append(indent(1) + '}\n\n')

			for gs in range(desp['FC_GROUP_FACTOR'][idx]):
				code.append(indent(1) + 'ap_uint<' + var_prefix + 'DATA' + str(idx) + '_WIDTH*' + var_prefix + \
						'SIMD_FACTOR> sel_tmp_' + str(gs) + '[' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR/' + \
						var_prefix + 'SIMD_FACTOR];\n')
				code.append('#pragma HLS ARRAY_PARTITION variable=sel_tmp_' + str(gs) + ' complete dim=1\n')

			code.append('\n')
			code.append(indent(1) + 'while(more_to_feed_to_sys_arr){\n')
			code.append('#pragma HLS PIPELINE II=1\n')
			buf_size = desp['DFC_BUF_SIZE'][idx]
			buf_size_width = int(cal_width(buf_size))
			code.append(indent(2) + 'ap_uint<' + str(buf_size_width) + '> buffer_ind_to_feed_to_sys_arr;\n')
	#     code.append(indent(2) + 'buffer_ind_to_feed_to_sys_arr = ' + desp['DF_FEED_ADDR_CAL_CODE'][idx] + ';\n')
			code.append(indent(2) + 'buffer_ind_to_feed_to_sys_arr = c1_counter * LAYER_FILTER_S_H * LAYER_FILTER_S_W * LAYER_IN_NUM_T + c3_counter * LAYER_FILTER_S_W * LAYER_IN_NUM_T + (c4_counter+offsets[i]) * LAYER_IN_NUM_T + c5_counter * %sSIMD_FACTOR;' % (var_prefix))

			code.append('\n')

			code.append(indent(2) + 'ap_uint<%d> wide_index = buffer_ind_to_feed_to_sys_arr / ' % (buf_size_width) + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR;\n')
			code.append(indent(2) + 'ap_uint<%d> wide_offset = buffer_ind_to_feed_to_sys_arr %% ' % (buf_size_width) + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR;\n\n')

			for gs in range(desp['FC_GROUP_FACTOR'][idx]):
				code.append(indent(2) + var_prefix + 'Data' + str(idx) + 'TransferChannelType buf_data_' + str(gs) + ' = buffer[' + str(gs) + '][wide_index];\n')
				code.append(indent(2) + 'ap_uint<' + var_prefix + 'DATA' + str(idx) + '_WIDTH*' + var_prefix + \
						'DATA' + str(idx) + '_FC_SIMD_FACTOR> wide_data_' + str(gs) + ' = buf_data_' + str(gs) + \
						'.data;\n')
				code.append(indent(2) + 'ap_uint<' + var_prefix + 'DATA' + str(idx) + '_WIDTH*' + var_prefix + \
						'SIMD_FACTOR> data_to_feed_' + str(gs) + ';\n')
				code.append(indent(2) + 'for (int s = 0; s < ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR/' + var_prefix + 'SIMD_FACTOR; s++){\n')
				code.append('#pragma HLS UNROLL\n')
				code.append(indent(3) + 'sel_tmp_' + str(gs) + '[s] = wide_data_' + str(gs) + '(' + var_prefix + 'DATA' + str(idx) + '_WIDTH * ' + var_prefix + 'SIMD_FACTOR-1, 0);\n')
				code.append(indent(3) + 'wide_data_' + str(gs) + ' = wide_data_' + str(gs) + ' >> (' + var_prefix + 'DATA' + str(idx) + '_WIDTH * ' + var_prefix + 'SIMD_FACTOR);\n')
				code.append(indent(2) + '}\n')
				code.append(indent(2) + 'data_to_feed_' + str(gs) + ' = sel_tmp_' + str(gs) + '[wide_offset / ' + var_prefix + 'SIMD_FACTOR];\n')

				code.append('\n')
				code.append(indent(2) + var_prefix + 'Data' + str(idx) + 'PEChannelType fifo_data_to_feed_' + str(gs) + ';\n')
				code.append(indent(2) + 'fifo_data_to_feed_' + str(gs) + ' = ' + var_prefix + 'Data' + str(idx) + \
						'PEChannelType(data_to_feed_' + str(gs) + ', buf_data_' + str(gs) + '.new_pair, buf_data_' + str(gs) + '.last_pair, buf_data_' + str(gs) + '.FILTER_S);\n')
				code.append(indent(2) + 'fifo_feed_' + str(gs) + '.write(fifo_data_to_feed_' + str(gs) + ');\n\n')

			code.append(indent(2) + '// counter logic\n')
	#     code_block = generate_df_counter_loops(desp, config)
	#     for codeline in code_block:
	#       code.append(indent(2) + codeline)
			code.append(indent(2) + 'c0_counter++;\n')
	#     code.append(indent(2) + 'if (c0_counter == LAYER_IN_IMG_H_T / LAYER_STRIDE){\n')
			code.append(indent(2) + 'if (c0_counter == c0_counter_bound){\n')
			code.append(indent(3) + 'c0_counter = 0;\n')
			code.append(indent(3) + 'c1_counter++;\n')
			code.append(indent(3) + 'if (c1_counter == LAYER_ROW_IL_FACTOR){\n')
			code.append(indent(4) + 'c1_counter = 0;\n')
			code.append(indent(4) + 'c2_counter++;\n')
			code.append(indent(4) + 'if (c2_counter == LAYER_COL_IL_FACTOR){\n')
			code.append(indent(5) + 'c2_counter = 0;\n')
			code.append(indent(5) + 'c3_counter++;\n')
			code.append(indent(5) + 'if (c3_counter == K_H[i]){\n')
			code.append(indent(6) + 'c3_counter = 0;\n')
			code.append(indent(6) + 'c4_counter++;\n')
			code.append(indent(6) + 'if (c4_counter == K_W[i]){\n')
			code.append(indent(7) + 'c4_counter = 0;\n')
			code.append(indent(7) + 'c5_counter++;\n')
			code.append(indent(7) + 'if (c5_counter == LAYER_IN_NUM_T / %sSIMD_FACTOR){\n' % (var_prefix))
			code.append(indent(8) + 'c5_counter = 0;\n')
			code.append(indent(8) + 'i++;\n')
			code.append(indent(8) + 'if (i == K_NUM){\n')
			code.append(indent(9) + 'i = 0;\n')
			code.append(indent(8) + 'more_to_feed_to_sys_arr = false;\n')
			code.append(indent(8) + '}\n')
			code.append(indent(7) + '}\n')
			code.append(indent(6) + '}\n')
			code.append(indent(5) + '}\n')
			code.append(indent(4) + '}\n')
			code.append(indent(3) + '}\n')
			code.append(indent(2) + '}\n')

			code.append(indent(1) + '}\n')

			code.append('}\n\n')


		idx += 1

	return code

def df(desp, config):

	code = []
	var_prefix = 'U%s' %(desp['KERNEL_ID']) + '_'

	code.extend(df_feed(desp, config))
	code.extend(df_read(desp, config))

	idx = 0
	for op_name in desp['OP_NAME']:

			#Engine0
		code.append('void ' + var_prefix + 'DataFeed' + str(idx) + 'Engine0(\n')
		code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_in,\n')
		code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_out,\n')
		for gs in range(desp['FC_GROUP_FACTOR'][idx]):
			code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo_feed_' + str(gs) + ',\n')
		code.append(indent(1) + 'unsigned int engine_id,\n')
		if idx == 0:
			code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in,\n')
			code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out0,\n')
			code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out1\n')
		elif idx == 1:
			code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in,\n')
			code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out0\n')

		code.append('){\n')
		code.append('#pragma HLS DATA_PACK variable=fifo_transfer_in\n')
		code.append('#pragma HLS DATA_PACK variable=fifo_transfer_out\n')

		for gs in range(desp['FC_GROUP_FACTOR'][idx]):
			code.append('#pragma HLS DATA_PACK variable=fifo_feed_' + str(gs) + '\n')
		code.append('#pragma HLS INLINE off\n\n')
		code.append(indent(1) + 'bool inst_done = 0;\n')
		code.append(indent(1) + 'uint inst = 0;\n')
		code.append(indent(1) + 'int inst_count = fifo_config_in.read();\n')
		code.append(indent(1) + 'fifo_config_out0.write(inst_count);\n')
		if idx == 0:
			code.append(indent(1) + 'fifo_config_out1.write(inst_count);\n') 
		code.append(indent(1) + 'while(!inst_done){\n') 
		code.append(indent(1) + 'uint CONV_EN = fifo_config_in.read();\n')
		code.append(indent(1) + 'fifo_config_out0.write(CONV_EN);\n')
		if idx == 0:
			code.append(indent(1) + 'fifo_config_out1.write(CONV_EN);\n')
		code.append(indent(1) + 'if(CONV_EN){\n')
		code.append(indent(1) + 'uint task_iter = 0;\n')
		code.append(indent(1) + 'uint LAYER_IN_NUM_T_prev;\n')
		code.append(indent(1) + 'uint LAYER_IN_IMG_H_T_prev;\n')
		if(idx==0):
			code.append(indent(1) + 'uint FILTER_D0_H_prev;\n')
			code.append(indent(1) + 'uint FILTER_D0_W_prev;\n')
		code.append(indent(1) + 'uint FILTER_D1_H_prev;\n')
		code.append(indent(1) + 'uint FILTER_D1_W_prev;\n')
		code.append(indent(1) + 'uint LAYER_STRIDE_prev;\n')
		code.append(indent(1) + 'uint LAYER_ROW_IL_FACTOR_prev;\n')
		code.append(indent(1) + 'uint LAYER_COL_IL_FACTOR_prev;\n')
		code.append(indent(1) + 'uint dummy;\n')
		if(idx==0):
			code.append(indent(1) + 'uint LAYER_DILATION_RATE_prev;\n')
		code.append(indent(1) + 'uint K_NUM_prev;\n')
		code.append(indent(1) + 'ap_uint<32> KH_prev;\n')
		code.append(indent(1) + 'ap_uint<32> KW_prev;\n\n')

		if idx == 0:
			code.append(indent(1) + '// read in configurations\n')
	#     code.append(indent(1) + 'uint LAYER_IN_NUM = fifo_config_in.read();\n')
	#     code.append(indent(1) + 'uint LAYER_OUT_NUM = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_IN_NUM_T = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_OUT_NUM_T = fifo_config_in.read();\n')
	#     code.append(indent(1) + 'uint LAYER_IN_IMG_H = fifo_config_in.read();\n')
	#     code.append(indent(1) + 'uint LAYER_IN_IMG_W = fifo_config_in.read();\n')
	#     code.append(indent(1) + 'uint LAYER_OUT_IMG_H = fifo_config_in.read();\n')
	#     code.append(indent(1) + 'uint LAYER_OUT_IMG_W = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_IN_IMG_H_T = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_IN_IMG_W_T = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_FILTER_S_H = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_FILTER_S_W = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_TASK_NUM1 = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_TASK_NUM2 = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_COL_IL_FACTOR = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_STRIDE = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_BATCH = fifo_config_in.read();\n\n')

			code.append(indent(1) + 'uint LAYER_CONV_TYPE = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint FILTER_D0_H = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint FILTER_D0_W = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint FILTER_D1_H = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint FILTER_D1_W = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_DILATION_RATE = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_TCONV_STRIDE = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint K_NUM = fifo_config_in.read();\n')
			code.append(indent(1) + 'ap_uint<32> KH = fifo_config_in.read();\n')
			code.append(indent(1) + 'ap_uint<32> KW = fifo_config_in.read();\n')


			code.append(indent(1) + '// write out configurations\n')
	#     code.append(indent(1) + 'fifo_config_out0.write(LAYER_IN_NUM);\n')
	#     code.append(indent(1) + 'fifo_config_out0.write(LAYER_OUT_NUM);\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_IN_NUM_T);\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_OUT_NUM_T);\n')
	#     code.append(indent(1) + 'fifo_config_out0.write(LAYER_IN_IMG_H);\n')
	#     code.append(indent(1) + 'fifo_config_out0.write(LAYER_IN_IMG_W);\n')
	#     code.append(indent(1) + 'fifo_config_out0.write(LAYER_OUT_IMG_H);\n')
	#     code.append(indent(1) + 'fifo_config_out0.write(LAYER_OUT_IMG_W);\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_IN_IMG_H_T);\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_IN_IMG_W_T);\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_FILTER_S_H);\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_FILTER_S_W);\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_TASK_NUM1);\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_TASK_NUM2);\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_LOCAL_ACCUM_NUM);\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_LOCAL_REG_NUM);\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_ROW_IL_FACTOR);\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_COL_IL_FACTOR);\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_STRIDE);\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_BATCH);\n\n')

			
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_CONV_TYPE);\n')
			code.append(indent(1) + 'fifo_config_out0.write(FILTER_D0_H);\n')
			code.append(indent(1) + 'fifo_config_out0.write(FILTER_D0_W);\n')
			code.append(indent(1) + 'fifo_config_out0.write(FILTER_D1_H);	\n')
			code.append(indent(1) + 'fifo_config_out0.write(FILTER_D1_W);	\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_DILATION_RATE);\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_TCONV_STRIDE);\n')
			code.append(indent(1) + 'fifo_config_out0.write(K_NUM);\n')
			code.append(indent(1) + 'fifo_config_out0.write(KH);\n')
			code.append(indent(1) + 'fifo_config_out0.write(KW);\n')



	#     code.append(indent(1) + 'fifo_config_out1.write(LAYER_IN_NUM);\n')
	#     code.append(indent(1) + 'fifo_config_out1.write(LAYER_OUT_NUM);\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_IN_NUM_T);\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_OUT_NUM_T);\n')
	#     code.append(indent(1) + 'fifo_config_out1.write(LAYER_IN_IMG_H);\n')
	#     code.append(indent(1) + 'fifo_config_out1.write(LAYER_IN_IMG_W);\n')
	#     code.append(indent(1) + 'fifo_config_out1.write(LAYER_OUT_IMG_H);\n')
	#     code.append(indent(1) + 'fifo_config_out1.write(LAYER_OUT_IMG_W);\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_IN_IMG_H_T);\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_IN_IMG_W_T);\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_FILTER_S_H);\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_FILTER_S_W);\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_TASK_NUM1);\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_TASK_NUM2);\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_LOCAL_ACCUM_NUM);\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_LOCAL_REG_NUM);\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_ROW_IL_FACTOR);\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_COL_IL_FACTOR);\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_STRIDE);\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_BATCH);\n\n')

			code.append(indent(1) + 'fifo_config_out1.write(LAYER_CONV_TYPE);\n')
			code.append(indent(1) + 'fifo_config_out1.write(FILTER_D0_H);\n')
			code.append(indent(1) + 'fifo_config_out1.write(FILTER_D0_W);\n')
			code.append(indent(1) + 'fifo_config_out1.write(FILTER_D1_H);	\n')
			code.append(indent(1) + 'fifo_config_out1.write(FILTER_D1_W);	\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_DILATION_RATE);\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_TCONV_STRIDE);\n')
			code.append(indent(1) + 'fifo_config_out1.write(K_NUM);\n')
			code.append(indent(1) + 'fifo_config_out1.write(KH);\n')
			code.append(indent(1) + 'fifo_config_out1.write(KW);\n')


		elif idx == 1:
			code.append(indent(1) + '// read in configurations\n')
	#     code.append(indent(1) + 'uint LAYER_IN_NUM = fifo_config_in.read();\n')
	#     code.append(indent(1) + 'uint LAYER_OUT_NUM = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_IN_NUM_T = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_OUT_NUM_T = fifo_config_in.read();\n')
	#     code.append(indent(1) + 'uint LAYER_IN_IMG_H = fifo_config_in.read();\n')
	#     code.append(indent(1) + 'uint LAYER_IN_IMG_W = fifo_config_in.read();\n')
	#     code.append(indent(1) + 'uint LAYER_OUT_IMG_H = fifo_config_in.read();\n')
	#     code.append(indent(1) + 'uint LAYER_OUT_IMG_W = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_IN_IMG_H_T = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_IN_IMG_W_T = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_FILTER_S_H = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_FILTER_S_W = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_TASK_NUM1 = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_TASK_NUM2 = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_COL_IL_FACTOR = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_STRIDE = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_BATCH = fifo_config_in.read();\n\n')

			code.append(indent(1) + 'uint LAYER_CONV_TYPE = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint FILTER_D0_H = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint FILTER_D0_W = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint FILTER_D1_H = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint FILTER_D1_W = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_DILATION_RATE = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_TCONV_STRIDE = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint K_NUM = fifo_config_in.read();\n')
			code.append(indent(1) + 'ap_uint<32> KH = fifo_config_in.read();\n')
			code.append(indent(1) + 'ap_uint<32> KW = fifo_config_in.read();\n')


			code.append(indent(1) + '// write out configurations\n')
	#     code.append(indent(1) + 'fifo_config_out0.write(LAYER_IN_NUM);\n')
	#     code.append(indent(1) + 'fifo_config_out0.write(LAYER_OUT_NUM);\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_IN_NUM_T);\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_OUT_NUM_T);\n')
	#     code.append(indent(1) + 'fifo_config_out0.write(LAYER_IN_IMG_H);\n')
	#     code.append(indent(1) + 'fifo_config_out0.write(LAYER_IN_IMG_W);\n')
	#     code.append(indent(1) + 'fifo_config_out0.write(LAYER_OUT_IMG_H);\n')
	#     code.append(indent(1) + 'fifo_config_out0.write(LAYER_OUT_IMG_W);\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_IN_IMG_H_T);\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_IN_IMG_W_T);\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_FILTER_S_H);\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_FILTER_S_W);\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_TASK_NUM1);\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_TASK_NUM2);\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_LOCAL_ACCUM_NUM);\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_LOCAL_REG_NUM);\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_ROW_IL_FACTOR);\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_COL_IL_FACTOR);\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_STRIDE);\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_BATCH);\n\n')

			code.append(indent(1) + 'fifo_config_out0.write(LAYER_CONV_TYPE);\n')
			code.append(indent(1) + 'fifo_config_out0.write(FILTER_D0_H);\n')
			code.append(indent(1) + 'fifo_config_out0.write(FILTER_D0_W);\n')
			code.append(indent(1) + 'fifo_config_out0.write(FILTER_D1_H);	\n')
			code.append(indent(1) + 'fifo_config_out0.write(FILTER_D1_W);	\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_DILATION_RATE);\n')
			code.append(indent(1) + 'fifo_config_out0.write(LAYER_TCONV_STRIDE);\n')
			code.append(indent(1) + 'fifo_config_out0.write(K_NUM);\n')
			code.append(indent(1) + 'fifo_config_out0.write(KH);\n')
			code.append(indent(1) + 'fifo_config_out0.write(KW);\n')


		code.append(indent(1) + var_prefix + 'Data' + str(idx) + 'TransferChannelType ping_buffer[' + \
				var_prefix + 'DATA' + str(idx) + '_FC_GROUP_FACTOR][' + var_prefix + 'DATA' + str(idx) + \
				'_BUF_SIZE / ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR];\n')
		code.append(indent(1) + var_prefix + 'Data' + str(idx) + 'TransferChannelType pong_buffer[' + \
				var_prefix + 'DATA' + str(idx) + '_FC_GROUP_FACTOR][' + var_prefix + 'DATA' + str(idx) + \
				'_BUF_SIZE / ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR];\n')
		code.append(indent(1) + '#if U1_DataFeed%sEngine0_MEM == 0\n'%str(idx))
		code.append(indent(2) + '#pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=BRAM\n')
		code.append(indent(2) + '#pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=BRAM\n')
		code.append(indent(1) + '#elif U1_DataFeed%sEngine0_MEM == 1\n'%str(idx))
		code.append(indent(2) + '#pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=URAM\n')
		code.append(indent(2) + '#pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=URAM\n')
			#code.append(indent(1) + '#elif MEM_TYPE == 2\n')
			#if idx==0:
			#  code.append(indent(2) + '#pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=URAM\n')
			#  code.append(indent(2) + '#pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=URAM\n')
			#else:
			#  code.append(indent(2) + '#pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=BRAM\n')
			#  code.append(indent(2) + '#pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=BRAM\n')
			#code.append(indent(1) + '#elif MEM_TYPE == 3\n')
			#code.append(indent(2) + '#pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=BRAM\n')
			#code.append(indent(2) + '#pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=BRAM\n')
			#code.append(indent(1) + '#elif MEM_TYPE == 4\n')
			#code.append(indent(2) + '#pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=BRAM\n')
			#code.append(indent(2) + '#pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=BRAM\n')
		code.append(indent(1) + '#endif\n')
		code.append(indent(1) + '#pragma HLS DATA_PACK variable=ping_buffer\n')
		code.append(indent(1) + '#pragma HLS DATA_PACK variable=pong_buffer\n')
		code.append(indent(1) + '#pragma HLS ARRAY_PARTITION variable=ping_buffer dim=1 complete\n')
		code.append(indent(1) + '#pragma HLS ARRAY_PARTITION variable=pong_buffer dim=1 complete\n\n')

		code.append(indent(1) + 'unsigned int initial_round = 0;\n\n')
		code.append(indent(1) + 'bool done = 0;\n')
		w = cal_width(desp['PARAMETERS']['LAYER_BATCH'])
		code.append(indent(1) + 'ap_uint<%d> layer_iter = 0;\n' % (w))
		code.append(indent(1) + 'bool layer_start = 0;\n')
		code.append(indent(1) + 'while(!done){\n')
		code.append(indent(2) + 'if (layer_start){\n')
		if idx == 0:
			code.append(indent(3) + '// read in configurations\n')
			code.append(indent(3) + 'LAYER_IN_NUM_T = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_OUT_NUM_T = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_IN_IMG_H_T = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_IN_IMG_W_T = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_FILTER_S_H = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_FILTER_S_W = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_TASK_NUM1 = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_TASK_NUM2 = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_LOCAL_REG_NUM = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_ROW_IL_FACTOR = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_COL_IL_FACTOR = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_STRIDE = fifo_config_in.read();\n')
			code.append(indent(3) + 'dummy = fifo_config_in.read();\n\n')
			code.append(indent(3) + 'LAYER_CONV_TYPE = fifo_config_in.read();\n')
			code.append(indent(3) + 'FILTER_D0_H = fifo_config_in.read();\n')
			code.append(indent(3) + 'FILTER_D0_W = fifo_config_in.read();\n')
			code.append(indent(3) + 'FILTER_D1_H = fifo_config_in.read();\n')
			code.append(indent(3) + 'FILTER_D1_W = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_DILATION_RATE = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_TCONV_STRIDE = fifo_config_in.read();\n')
			code.append(indent(3) + 'K_NUM = fifo_config_in.read();\n')
			code.append(indent(3) + 'KH = fifo_config_in.read();\n')
			code.append(indent(3) + 'KW = fifo_config_in.read();\n')

			code.append(indent(3) + '// write out configurations\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_IN_NUM_T);\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_OUT_NUM_T);\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_IN_IMG_H_T);\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_IN_IMG_W_T);\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_FILTER_S_H);\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_FILTER_S_W);\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_TASK_NUM1);\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_TASK_NUM2);\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_LOCAL_ACCUM_NUM);\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_LOCAL_REG_NUM);\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_ROW_IL_FACTOR);\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_COL_IL_FACTOR);\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_STRIDE);\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_BATCH);\n\n')

			code.append(indent(3) + 'fifo_config_out0.write(LAYER_CONV_TYPE);\n')
			code.append(indent(3) + 'fifo_config_out0.write(FILTER_D0_H);\n')
			code.append(indent(3) + 'fifo_config_out0.write(FILTER_D0_W);\n')
			code.append(indent(3) + 'fifo_config_out0.write(FILTER_D1_H);	\n')
			code.append(indent(3) + 'fifo_config_out0.write(FILTER_D1_W);	\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_DILATION_RATE);\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_TCONV_STRIDE);\n')
			code.append(indent(3) + 'fifo_config_out0.write(K_NUM);\n')
			code.append(indent(3) + 'fifo_config_out0.write(KH);\n')
			code.append(indent(3) + 'fifo_config_out0.write(KW);\n')


	#     code.append(indent(3) + 'fifo_config_out1.write(LAYER_IN_NUM);\n')
	#     code.append(indent(3) + 'fifo_config_out1.write(LAYER_OUT_NUM);\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_IN_NUM_T);\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_OUT_NUM_T);\n')
	#     code.append(indent(3) + 'fifo_config_out1.write(LAYER_IN_IMG_H);\n')
	#     code.append(indent(3) + 'fifo_config_out1.write(LAYER_IN_IMG_W);\n')
	#     code.append(indent(3) + 'fifo_config_out1.write(LAYER_OUT_IMG_H);\n')
	#     code.append(indent(3) + 'fifo_config_out1.write(LAYER_OUT_IMG_W);\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_IN_IMG_H_T);\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_IN_IMG_W_T);\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_FILTER_S_H);\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_FILTER_S_W);\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_TASK_NUM1);\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_TASK_NUM2);\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_LOCAL_ACCUM_NUM);\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_LOCAL_REG_NUM);\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_ROW_IL_FACTOR);\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_COL_IL_FACTOR);\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_STRIDE);\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_BATCH);\n\n')

			
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_CONV_TYPE);\n')
			code.append(indent(3) + 'fifo_config_out1.write(FILTER_D0_H);\n')
			code.append(indent(3) + 'fifo_config_out1.write(FILTER_D0_W);\n')
			code.append(indent(3) + 'fifo_config_out1.write(FILTER_D1_H);	\n')
			code.append(indent(3) + 'fifo_config_out1.write(FILTER_D1_W);	\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_DILATION_RATE);\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_TCONV_STRIDE);\n')
			code.append(indent(3) + 'fifo_config_out1.write(K_NUM);\n')
			code.append(indent(3) + 'fifo_config_out1.write(KH);\n')
			code.append(indent(3) + 'fifo_config_out1.write(KW);\n')


		elif idx == 1:
			code.append(indent(3) + '// read in configurations\n')
	#     code.append(indent(3) + 'LAYER_IN_NUM = fifo_config_in.read();\n')
	#     code.append(indent(3) + 'LAYER_OUT_NUM = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_IN_NUM_T = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_OUT_NUM_T = fifo_config_in.read();\n')
	#     code.append(indent(3) + 'LAYER_IN_IMG_H = fifo_config_in.read();\n')
	#     code.append(indent(3) + 'LAYER_IN_IMG_W = fifo_config_in.read();\n')
	#     code.append(indent(3) + 'LAYER_OUT_IMG_H = fifo_config_in.read();\n')
	#     code.append(indent(3) + 'LAYER_OUT_IMG_W = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_IN_IMG_H_T = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_IN_IMG_W_T = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_FILTER_S_H = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_FILTER_S_W = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_TASK_NUM1 = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_TASK_NUM2 = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_LOCAL_REG_NUM = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_ROW_IL_FACTOR = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_COL_IL_FACTOR = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_STRIDE = fifo_config_in.read();\n')
			code.append(indent(3) + 'dummy = fifo_config_in.read();\n\n')
			code.append(indent(3) + 'LAYER_CONV_TYPE = fifo_config_in.read();\n')
			code.append(indent(3) + 'FILTER_D0_H = fifo_config_in.read();\n')
			code.append(indent(3) + 'FILTER_D0_W = fifo_config_in.read();\n')
			code.append(indent(3) + 'FILTER_D1_H = fifo_config_in.read();\n')
			code.append(indent(3) + 'FILTER_D1_W = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_DILATION_RATE = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_TCONV_STRIDE = fifo_config_in.read();\n')
			code.append(indent(3) + 'K_NUM = fifo_config_in.read();\n')
			code.append(indent(3) + 'KH = fifo_config_in.read();\n')
			code.append(indent(3) + 'KW = fifo_config_in.read();\n')


			code.append(indent(3) + '// write out configurations\n')
	#     code.append(indent(3) + 'fifo_config_out0.write(LAYER_IN_NUM);\n')
	#     code.append(indent(3) + 'fifo_config_out0.write(LAYER_OUT_NUM);\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_IN_NUM_T);\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_OUT_NUM_T);\n')
	#     code.append(indent(3) + 'fifo_config_out0.write(LAYER_IN_IMG_H);\n')
	#     code.append(indent(3) + 'fifo_config_out0.write(LAYER_IN_IMG_W);\n')
	#     code.append(indent(3) + 'fifo_config_out0.write(LAYER_OUT_IMG_H);\n')
	#     code.append(indent(3) + 'fifo_config_out0.write(LAYER_OUT_IMG_W);\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_IN_IMG_H_T);\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_IN_IMG_W_T);\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_FILTER_S_H);\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_FILTER_S_W);\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_TASK_NUM1);\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_TASK_NUM2);\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_LOCAL_ACCUM_NUM);\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_LOCAL_REG_NUM);\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_ROW_IL_FACTOR);\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_COL_IL_FACTOR);\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_STRIDE);\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_BATCH);\n\n')

			code.append(indent(3) + 'fifo_config_out0.write(LAYER_CONV_TYPE);\n')
			code.append(indent(3) + 'fifo_config_out0.write(FILTER_D0_H);\n')
			code.append(indent(3) + 'fifo_config_out0.write(FILTER_D0_W);\n')
			code.append(indent(3) + 'fifo_config_out0.write(FILTER_D1_H);	\n')
			code.append(indent(3) + 'fifo_config_out0.write(FILTER_D1_W);	\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_DILATION_RATE);\n')
			code.append(indent(3) + 'fifo_config_out0.write(LAYER_TCONV_STRIDE);\n')
			code.append(indent(3) + 'fifo_config_out0.write(K_NUM);\n')
			code.append(indent(3) + 'fifo_config_out0.write(KH);\n')
			code.append(indent(3) + 'fifo_config_out0.write(KW);\n')


		code.append(indent(3) + 'layer_start = 0;\n')
		code.append(indent(2) + '}\n\n')

		code.append(indent(2) + 'if (initial_round == 0){\n')
		if(idx==0):
			code.append(indent(3) + var_prefix + 'Data' + str(idx) + 'ReadData0(ping_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D0_H, FILTER_D0_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);\n')
		elif(idx==1):
			code.append(indent(3) + var_prefix + 'Data' + str(idx) + 'ReadData0(ping_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D1_H, FILTER_D1_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);\n')

		code.append(indent(2) + '} else {\n')
	#   indent_level = 1
	#   if config['MODE'] == 'CSIM':
	#     code_block = generate_tile_loops(desp)
	#     for codeline in code_block:
	#       code.append(indent(1) + codeline)
	#       indent_level += 1
	#   elif config['MODE'] == 'SYNTH':
	#     code.append('while(1)\n')
		indent_level = 3
		code.append(indent(indent_level) + 'if (initial_round % 2 == 1){\n')
		indent_level += 1
		
		if(idx==0):
			code.append(indent(indent_level) + var_prefix + 'Data' + str(idx) + 'ReadData0(pong_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D0_H, FILTER_D0_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);\n')
		elif(idx==1):
			code.append(indent(indent_level) + var_prefix + 'Data' + str(idx) + 'ReadData0(pong_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D1_H, FILTER_D1_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);\n')
		code.append(indent(indent_level) + var_prefix + 'Data' + str(idx) + 'FeedData0(\n')
		code.append(indent(indent_level + 1) + 'ping_buffer,\n')
		for gs in range(desp['FC_GROUP_FACTOR'][idx]):
			code.append(indent(indent_level + 1) + 'fifo_feed_' + str(gs) + ',\n')
	#   code.append(indent(indent_level + 1) + 'initial_round,\n')
		code.append(indent(indent_level + 1) + 'LAYER_IN_NUM_T_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_IN_IMG_H_T_prev,\n')
		if(idx==0):
			code.append(indent(indent_level + 1) + 'FILTER_D0_H_prev,\n')
			code.append(indent(indent_level + 1) + 'FILTER_D0_W_prev,\n')
		code.append(indent(indent_level + 1) + 'FILTER_D1_H_prev,\n')
		code.append(indent(indent_level + 1) + 'FILTER_D1_W_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_STRIDE_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_ROW_IL_FACTOR_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_COL_IL_FACTOR_prev,\n')
		if(idx==0):
			code.append(indent(indent_level + 1) + 'LAYER_DILATION_RATE_prev,\n')
		code.append(indent(indent_level + 1) + 'K_NUM_prev,\n')
		code.append(indent(indent_level + 1) + 'KH_prev,\n')
		code.append(indent(indent_level + 1) + 'KW_prev);\n')
		indent_level -= 1
		code.append(indent(indent_level) + '} else {\n')
		indent_level += 1
		if(idx==0):
			code.append(indent(indent_level) + var_prefix + 'Data' + str(idx) + 'ReadData0(ping_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D0_H, FILTER_D0_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);\n')
		elif(idx==1):
			code.append(indent(indent_level) + var_prefix + 'Data' + str(idx) + 'ReadData0(ping_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D1_H, FILTER_D1_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);\n')
		code.append(indent(indent_level) + var_prefix + 'Data' + str(idx) + 'FeedData0(\n')
		code.append(indent(indent_level + 1) + 'pong_buffer,\n')
		for gs in range(desp['FC_GROUP_FACTOR'][idx]):
			code.append(indent(indent_level + 1) + 'fifo_feed_' + str(gs) + ',\n')
	#   code.append(indent(indent_level + 1) + 'initial_round,\n')
		code.append(indent(indent_level + 1) + 'LAYER_IN_NUM_T_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_IN_IMG_H_T_prev,\n')
		if(idx==0):
			code.append(indent(indent_level + 1) + 'FILTER_D0_H_prev,\n')
			code.append(indent(indent_level + 1) + 'FILTER_D0_W_prev,\n')
		code.append(indent(indent_level + 1) + 'FILTER_D1_H_prev,\n')
		code.append(indent(indent_level + 1) + 'FILTER_D1_W_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_STRIDE_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_ROW_IL_FACTOR_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_COL_IL_FACTOR_prev,\n')
		if(idx==0):
			code.append(indent(indent_level + 1) + 'LAYER_DILATION_RATE_prev,\n')
		code.append(indent(indent_level + 1) + 'K_NUM_prev,\n')
		code.append(indent(indent_level + 1) + 'KH_prev,\n')
		code.append(indent(indent_level + 1) + 'KW_prev);\n')
		indent_level -= 1
		code.append(indent(indent_level) + '}\n')
		indent_level -= 1
		code.append(indent(indent_level) + '}\n\n')

		code.append(indent(indent_level) + 'initial_round++;\n')
		code.append(indent(indent_level) + 'LAYER_IN_NUM_T_prev = LAYER_IN_NUM_T;\n')
		code.append(indent(indent_level) + 'LAYER_IN_IMG_H_T_prev = LAYER_IN_IMG_H_T;\n')
		if(idx==0):
			code.append(indent(indent_level) + 'FILTER_D0_H_prev = FILTER_D0_H;\n')
			code.append(indent(indent_level) + 'FILTER_D0_W_prev = FILTER_D0_W;\n')
		code.append(indent(indent_level) + 'FILTER_D1_H_prev = FILTER_D1_H;\n')
		code.append(indent(indent_level) + 'FILTER_D1_W_prev = FILTER_D1_W;\n')
		code.append(indent(indent_level) + 'LAYER_STRIDE_prev = LAYER_STRIDE;\n')
		code.append(indent(indent_level) + 'LAYER_ROW_IL_FACTOR_prev = LAYER_ROW_IL_FACTOR;\n')
		code.append(indent(indent_level) + 'LAYER_COL_IL_FACTOR_prev = LAYER_COL_IL_FACTOR;\n')
		if(idx==0):
			code.append(indent(indent_level) + 'LAYER_DILATION_RATE_prev = LAYER_DILATION_RATE;\n')
		code.append(indent(indent_level) + 'K_NUM_prev = K_NUM;\n')
		code.append(indent(indent_level) + 'KH_prev = KH;\n')
		code.append(indent(indent_level) + 'KW_prev = KW;\n')



		code.append(indent(indent_level) + 'task_iter++;\n')
		code.append(indent(indent_level) + 'if (task_iter == LAYER_TASK_NUM1){\n')
		code.append(indent(indent_level + 1) + 'task_iter = 0;\n')
		code.append(indent(indent_level + 1) + 'layer_iter += 1;\n')
		code.append(indent(indent_level + 1) + 'layer_start = 1;\n')
		code.append(indent(indent_level + 1) + 'if (layer_iter == LAYER_BATCH){\n')
		code.append(indent(indent_level + 2) + 'layer_iter = 0;\n')
		code.append(indent(indent_level + 2) + 'done = 1;\n')
		code.append(indent(indent_level + 1) + '}\n')
		code.append(indent(indent_level) + '}\n')

	#   code.append(indent(indent_level) + 'in_num_iter += LAYER_IN_NUM_T;\n')
	#   code.append(indent(indent_level) + 'if (in_num_iter >= LAYER_IN_NUM){\n')
	#   code.append(indent(indent_level + 1) + 'in_num_iter = 0;\n')
	#   code.append(indent(indent_level + 1) + 'out_h_iter += LAYER_IN_IMG_H_T;\n')
	#   code.append(indent(indent_level + 1) + 'if (out_h_iter >= LAYER_OUT_IMG_H){\n')
	#   code.append(indent(indent_level + 2) + 'out_h_iter = 0;\n')
	#   code.append(indent(indent_level + 2) + 'out_w_iter += %sOUT_IMG_W_T;\n' % (var_prefix))
	#   code.append(indent(indent_level + 2) + 'if (out_w_iter >= LAYER_OUT_IMG_W){\n')
	#   code.append(indent(indent_level + 3) + 'out_w_iter = 0;\n')
	#   code.append(indent(indent_level + 3) + 'out_num_iter += LAYER_OUT_NUM_T;\n')
	#   code.append(indent(indent_level + 3) + 'if (out_num_iter >= LAYER_OUT_NUM){\n')
	#   code.append(indent(indent_level + 4) + 'out_num_iter = 0;\n')
	#   code.append(indent(indent_level + 4) + 'layer_iter += 1;\n')
	#   code.append(indent(indent_level + 4) + 'layer_start = 1;\n')
	#   code.append(indent(indent_level + 4) + 'if (layer_iter == LAYER_BATCH){\n')
	#   code.append(indent(indent_level + 5) + 'layer_iter = 0;\n')
	#   code.append(indent(indent_level + 5) + 'done = 1;\n')
	#   code.append(indent(indent_level + 4) + '}\n')
	#   code.append(indent(indent_level + 3) + '}\n')
	#   code.append(indent(indent_level + 2) + '}\n')
	#   code.append(indent(indent_level + 1) + '}\n')
	#   code.append(indent(indent_level) + '}\n')
		code.append(indent(indent_level - 1) + '}\n\n')

		indent_level -= 1
		code.append(indent(indent_level) + 'if (initial_round % 2 == 1){\n')
		indent_level += 1
		code.append(indent(indent_level) + var_prefix + 'Data' + str(idx) + 'FeedData0(\n')
		code.append(indent(indent_level + 1) + 'ping_buffer,\n')
		for gs in range(desp['FC_GROUP_FACTOR'][idx]):
			code.append(indent(indent_level + 1) + 'fifo_feed_' + str(gs) + ',\n')
	#   code.append(indent(indent_level + 1) + 'initial_round,\n')
		code.append(indent(indent_level + 1) + 'LAYER_IN_NUM_T_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_IN_IMG_H_T_prev,\n')
		if(idx==0):
			code.append(indent(indent_level + 1) + 'FILTER_D0_H_prev,\n')
			code.append(indent(indent_level + 1) + 'FILTER_D0_W_prev,\n')
		code.append(indent(indent_level + 1) + 'FILTER_D1_H_prev,\n')
		code.append(indent(indent_level + 1) + 'FILTER_D1_W_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_STRIDE_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_ROW_IL_FACTOR_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_COL_IL_FACTOR_prev,\n')
		if(idx==0):
			code.append(indent(indent_level + 1) + 'LAYER_DILATION_RATE_prev,\n')
		code.append(indent(indent_level + 1) + 'K_NUM_prev,\n')
		code.append(indent(indent_level + 1) + 'KH_prev,\n')
		code.append(indent(indent_level + 1) + 'KW_prev);\n')
		indent_level -= 1
		code.append(indent(indent_level) + '} else {\n')
		indent_level += 1
		code.append(indent(indent_level) + var_prefix + 'Data' + str(idx) + 'FeedData0(\n')
		code.append(indent(indent_level + 1) + 'pong_buffer,\n')
		for gs in range(desp['FC_GROUP_FACTOR'][idx]):
			code.append(indent(indent_level + 1) + 'fifo_feed_' + str(gs) + ',\n')
	#   code.append(indent(indent_level + 1) + 'initial_round,\n')
		code.append(indent(indent_level + 1) + 'LAYER_IN_NUM_T_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_IN_IMG_H_T_prev,\n')
		if(idx==0):
			code.append(indent(indent_level + 1) + 'FILTER_D0_H_prev,\n')
			code.append(indent(indent_level + 1) + 'FILTER_D0_W_prev,\n')
		code.append(indent(indent_level + 1) + 'FILTER_D1_H_prev,\n')
		code.append(indent(indent_level + 1) + 'FILTER_D1_W_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_STRIDE_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_ROW_IL_FACTOR_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_COL_IL_FACTOR_prev,\n')
		if(idx==0):
			code.append(indent(indent_level + 1) + 'LAYER_DILATION_RATE_prev,\n')
		code.append(indent(indent_level + 1) + 'K_NUM_prev,\n')
		code.append(indent(indent_level + 1) + 'KH_prev,\n')
		code.append(indent(indent_level + 1) + 'KW_prev);\n')
		indent_level -= 1
		code.append(indent(indent_level) + '}\n')
		code.append(indent(indent_level) + '}\n')
		code.append(indent(1) + '  inst++;\n')
		code.append(indent(1) + '  if(inst == inst_count){\n')
		code.append(indent(1) + '    inst_done = 1;\n')
		code.append(indent(1) + '  }\n')
		code.append(indent(1) + '}\n')
		code.append('}\n\n')

			#Engine0_wrapper
		code.append('void ' + var_prefix + 'DataFeed' + str(idx) + 'Engine0_wrapper(\n')
		code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_in,\n')
		code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_out,\n')
		for gs in range(desp['FC_GROUP_FACTOR'][idx]):
			code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo_feed_' + str(gs) + ',\n')
		code.append(indent(1) + 'unsigned int engine_id,\n')
		if idx == 0:
			code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in,\n')
			code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out0,\n')
			code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out1\n')
		elif idx == 1:
			code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in,\n')
			code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out0\n')
		code.append('){\n')

		code.append(indent(1) + var_prefix + 'DataFeed' + str(idx) + 'Engine0(\n')
		code.append(indent(2) + 'fifo_transfer_in,\n')
		code.append(indent(2) + 'fifo_transfer_out, \n')
		for gs in range(desp['FC_GROUP_FACTOR'][idx]):
			code.append(indent(2) + 'fifo_feed_' + str(gs) + ',\n')
		code.append(indent(2) + 'engine_id,\n')
		if idx == 0:
			code.append(indent(2) + 'fifo_config_in,\n')
			code.append(indent(2) + 'fifo_config_out0,\n')
			code.append(indent(2) + 'fifo_config_out1\n')
		elif idx == 1:
			code.append(indent(2) + 'fifo_config_in,\n')
			code.append(indent(2) + 'fifo_config_out0\n')
		code.append(indent(1) + ');\n')

		code.append('}\n\n')


			#EngineLast
		code.append('void ' + var_prefix + 'DataFeed' + str(idx) + 'EngineLast(\n')
		code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_in,\n')
	#   code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_out,\n')
		for gs in range(desp['FC_GROUP_FACTOR'][idx]):
			code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo_feed_' + str(gs) + ',\n')
		code.append(indent(1) + 'unsigned int engine_id,\n')
		if idx == 0:
			code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in,\n')
	#     code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out0,\n')
			code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out1\n')
		elif idx == 1:
			code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in\n')
	#     code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out0\n')
		code.append('){\n')
		code.append('#pragma HLS DATA_PACK variable=fifo_transfer_in\n')

	#   code.append('#pragma HLS DATA_PACK variable=fifo_transfer_out\n')
		for gs in range(desp['FC_GROUP_FACTOR'][idx]):
			code.append('#pragma HLS DATA_PACK variable=fifo_feed_' + str(gs) + '\n')
		code.append('#pragma HLS INLINE off\n\n')
		code.append(indent(1) + 'bool inst_done = 0;\n')
		code.append(indent(1) + 'uint inst = 0;\n')
		code.append(indent(1) + 'int inst_count = fifo_config_in.read();\n')
		if idx == 0:
			code.append(indent(1) + 'fifo_config_out1.write(inst_count);\n')
		code.append(indent(1) + 'while(!inst_done){\n') 
		code.append(indent(1) + 'uint CONV_EN = fifo_config_in.read();\n')
		if(idx == 0):
			code.append(indent(1) + 'fifo_config_out1.write(CONV_EN);\n')
		code.append(indent(1) + 'if(CONV_EN){\n')
		code.append(indent(1) + 'uint task_iter = 0;\n')
		code.append(indent(1) + 'uint LAYER_IN_NUM_T_prev;\n')
		code.append(indent(1) + 'uint LAYER_IN_IMG_H_T_prev;\n')
		if(idx==0):
			code.append(indent(1) + 'uint FILTER_D0_H_prev;\n')
			code.append(indent(1) + 'uint FILTER_D0_W_prev;\n')
		code.append(indent(1) + 'uint FILTER_D1_H_prev;\n')
		code.append(indent(1) + 'uint FILTER_D1_W_prev;\n')
		code.append(indent(1) + 'uint LAYER_STRIDE_prev;\n')
		code.append(indent(1) + 'uint LAYER_ROW_IL_FACTOR_prev;\n')
		code.append(indent(1) + 'uint LAYER_COL_IL_FACTOR_prev;\n')
		code.append(indent(1) + 'uint dummy;\n')
		if(idx==0):
			code.append(indent(1) + 'uint LAYER_DILATION_RATE_prev;\n')
		code.append(indent(1) + 'uint K_NUM_prev;\n')
		code.append(indent(1) + 'ap_uint<32> KH_prev;\n')
		code.append(indent(1) + 'ap_uint<32> KW_prev;\n\n')
		if idx == 0:
			code.append(indent(1) + '// read in configurations\n')
			code.append(indent(1) + 'uint LAYER_IN_NUM_T = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_OUT_NUM_T = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_IN_IMG_H_T = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_IN_IMG_W_T = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_FILTER_S_H = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_FILTER_S_W = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_TASK_NUM1 = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_TASK_NUM2 = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_COL_IL_FACTOR = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_STRIDE = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_BATCH = fifo_config_in.read();\n\n')

			code.append(indent(1) + 'uint LAYER_CONV_TYPE = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint FILTER_D0_H = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint FILTER_D0_W = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint FILTER_D1_H = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint FILTER_D1_W = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_DILATION_RATE = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_TCONV_STRIDE = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint K_NUM = fifo_config_in.read();\n')
			code.append(indent(1) + 'ap_uint<32> KH = fifo_config_in.read();\n')
			code.append(indent(1) + 'ap_uint<32> KW = fifo_config_in.read();\n')


			code.append(indent(1) + '// write out configurations\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_IN_NUM_T);\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_OUT_NUM_T);\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_IN_IMG_H_T);\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_IN_IMG_W_T);\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_FILTER_S_H);\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_FILTER_S_W);\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_TASK_NUM1);\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_TASK_NUM2);\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_LOCAL_ACCUM_NUM);\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_LOCAL_REG_NUM);\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_ROW_IL_FACTOR);\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_COL_IL_FACTOR);\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_STRIDE);\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_BATCH);\n\n')

			
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_CONV_TYPE);\n')
			code.append(indent(1) + 'fifo_config_out1.write(FILTER_D0_H);\n')
			code.append(indent(1) + 'fifo_config_out1.write(FILTER_D0_W);\n')
			code.append(indent(1) + 'fifo_config_out1.write(FILTER_D1_H);	\n')
			code.append(indent(1) + 'fifo_config_out1.write(FILTER_D1_W);	\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_DILATION_RATE);\n')
			code.append(indent(1) + 'fifo_config_out1.write(LAYER_TCONV_STRIDE);\n')
			code.append(indent(1) + 'fifo_config_out1.write(K_NUM);\n')
			code.append(indent(1) + 'fifo_config_out1.write(KH);\n')
			code.append(indent(1) + 'fifo_config_out1.write(KW);\n')


		elif idx == 1:
			code.append(indent(1) + '// read in configurations\n')
	#     code.append(indent(1) + 'uint LAYER_IN_NUM = fifo_config_in.read();\n')
	#     code.append(indent(1) + 'uint LAYER_OUT_NUM = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_IN_NUM_T = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_OUT_NUM_T = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_IN_IMG_H_T = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_IN_IMG_W_T = fifo_config_in.read();\n')
	#     code.append(indent(1) + 'uint LAYER_OUT_IMG_H = fifo_config_in.read();\n')
	#     code.append(indent(1) + 'uint LAYER_OUT_IMG_W = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_FILTER_S_H = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_FILTER_S_W = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_TASK_NUM1 = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_TASK_NUM2 = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_COL_IL_FACTOR = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_STRIDE = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_BATCH = fifo_config_in.read();\n\n')

			code.append(indent(1) + 'uint LAYER_CONV_TYPE = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint FILTER_D0_H = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint FILTER_D0_W = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint FILTER_D1_H = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint FILTER_D1_W = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_DILATION_RATE = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_TCONV_STRIDE = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint K_NUM = fifo_config_in.read();\n')
			code.append(indent(1) + 'ap_uint<32> KH = fifo_config_in.read();\n')
			code.append(indent(1) + 'ap_uint<32> KW = fifo_config_in.read();\n')


		code.append(indent(1) + var_prefix + 'Data' + str(idx) + 'TransferChannelType ping_buffer[' + \
				var_prefix + 'DATA' + str(idx) + '_FC_GROUP_FACTOR][' + var_prefix + 'DATA' + str(idx) + \
				'_BUF_SIZE / ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR];\n')
		code.append(indent(1) + var_prefix + 'Data' + str(idx) + 'TransferChannelType pong_buffer[' + \
				var_prefix + 'DATA' + str(idx) + '_FC_GROUP_FACTOR][' + var_prefix + 'DATA' + str(idx) + \
				'_BUF_SIZE / ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR];\n')
		code.append(indent(1) + '#if U1_DataFeed%sEngineLast_MEM == 0\n'%str(idx))
		code.append(indent(2) + '#pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=BRAM\n')
		code.append(indent(2) + '#pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=BRAM\n')
		code.append(indent(1) + '#elif U1_DataFeed%sEngineLast_MEM == 1\n'%str(idx))
		code.append(indent(2) + '#pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=URAM\n')
		code.append(indent(2) + '#pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=URAM\n')
			#code.append(indent(1) + '#elif MEM_TYPE == 2\n')
			#if idx==0:
			#  code.append(indent(2) + '#pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=URAM\n')
			#  code.append(indent(2) + '#pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=URAM\n')
			#else:
			#  code.append(indent(2) + '#pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=BRAM\n')
			#  code.append(indent(2) + '#pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=BRAM\n')
			#code.append(indent(1) + '#elif MEM_TYPE == 3\n')
			#code.append(indent(2) + '#pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=BRAM\n')
			#code.append(indent(2) + '#pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=BRAM\n')
			#code.append(indent(1) + '#elif MEM_TYPE ==4\n')
			#code.append(indent(2) + '#pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=BRAM\n')
			#code.append(indent(2) + '#pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=BRAM\n')
		code.append(indent(1) + '#endif\n')
		code.append('#pragma HLS DATA_PACK variable=ping_buffer\n')
		code.append('#pragma HLS DATA_PACK variable=pong_buffer\n')
		code.append('#pragma HLS ARRAY_PARTITION variable=ping_buffer dim=1 complete\n')
		code.append('#pragma HLS ARRAY_PARTITION variable=pong_buffer dim=1 complete\n\n')

		code.append(indent(1) + 'unsigned int initial_round = 0;\n\n')
		code.append(indent(1) + 'bool done = 0;\n')
		w = cal_width(desp['PARAMETERS']['LAYER_BATCH'])
		code.append(indent(1) + 'ap_uint<%d> layer_iter = 0;\n' % (w))
		code.append(indent(1) + 'bool layer_start = 0;\n')
		code.append(indent(1) + 'while(!done){\n')
		code.append(indent(2) + 'if (layer_start){\n')
		if idx == 0:
			code.append(indent(3) + '// read in configurations\n')
			code.append(indent(3) + 'LAYER_IN_NUM_T = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_OUT_NUM_T = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_IN_IMG_H_T = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_IN_IMG_W_T = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_FILTER_S_H = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_FILTER_S_W = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_TASK_NUM1 = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_TASK_NUM2 = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_LOCAL_REG_NUM = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_ROW_IL_FACTOR = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_COL_IL_FACTOR = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_STRIDE = fifo_config_in.read();\n')
			code.append(indent(3) + 'dummy = fifo_config_in.read();\n\n')

			code.append(indent(3) + 'LAYER_CONV_TYPE = fifo_config_in.read();\n')
			code.append(indent(3) + 'FILTER_D0_H = fifo_config_in.read();\n')
			code.append(indent(3) + 'FILTER_D0_W = fifo_config_in.read();\n')
			code.append(indent(3) + 'FILTER_D1_H = fifo_config_in.read();\n')
			code.append(indent(3) + 'FILTER_D1_W = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_DILATION_RATE = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_TCONV_STRIDE = fifo_config_in.read();\n')
			code.append(indent(3) + 'K_NUM = fifo_config_in.read();\n')
			code.append(indent(3) + 'KH = fifo_config_in.read();\n')
			code.append(indent(3) + 'KW = fifo_config_in.read();\n')


			code.append(indent(3) + '// write out configurations\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_IN_NUM_T);\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_OUT_NUM_T);\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_IN_IMG_H_T);\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_IN_IMG_W_T);\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_FILTER_S_H);\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_FILTER_S_W);\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_TASK_NUM1);\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_TASK_NUM2);\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_LOCAL_ACCUM_NUM);\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_LOCAL_REG_NUM);\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_ROW_IL_FACTOR);\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_COL_IL_FACTOR);\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_STRIDE);\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_BATCH);\n\n')

			
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_CONV_TYPE);\n')
			code.append(indent(3) + 'fifo_config_out1.write(FILTER_D0_H);\n')
			code.append(indent(3) + 'fifo_config_out1.write(FILTER_D0_W);\n')
			code.append(indent(3) + 'fifo_config_out1.write(FILTER_D1_H);	\n')
			code.append(indent(3) + 'fifo_config_out1.write(FILTER_D1_W);	\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_DILATION_RATE);\n')
			code.append(indent(3) + 'fifo_config_out1.write(LAYER_TCONV_STRIDE);\n')
			code.append(indent(3) + 'fifo_config_out1.write(K_NUM);\n')
			code.append(indent(3) + 'fifo_config_out1.write(KH);\n')
			code.append(indent(3) + 'fifo_config_out1.write(KW);\n')


		elif idx == 1:
			code.append(indent(3) + '// read in configurations\n')
	#     code.append(indent(3) + 'LAYER_IN_NUM = fifo_config_in.read();\n')
	#     code.append(indent(3) + 'LAYER_OUT_NUM = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_IN_NUM_T = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_OUT_NUM_T = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_IN_IMG_H_T = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_IN_IMG_W_T = fifo_config_in.read();\n')
	#     code.append(indent(3) + 'LAYER_OUT_IMG_H = fifo_config_in.read();\n')
	#     code.append(indent(3) + 'LAYER_OUT_IMG_W = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_FILTER_S_H = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_FILTER_S_W = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_TASK_NUM1 = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_TASK_NUM2 = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_LOCAL_REG_NUM = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_ROW_IL_FACTOR = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_COL_IL_FACTOR = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_STRIDE = fifo_config_in.read();\n')
			code.append(indent(3) + 'dummy = fifo_config_in.read();\n\n')
			
			code.append(indent(3) + 'LAYER_CONV_TYPE = fifo_config_in.read();\n')
			code.append(indent(3) + 'FILTER_D0_H = fifo_config_in.read();\n')
			code.append(indent(3) + 'FILTER_D0_W = fifo_config_in.read();\n')
			code.append(indent(3) + 'FILTER_D1_H = fifo_config_in.read();\n')
			code.append(indent(3) + 'FILTER_D1_W = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_DILATION_RATE = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_TCONV_STRIDE = fifo_config_in.read();\n')
			code.append(indent(3) + 'K_NUM = fifo_config_in.read();\n')
			code.append(indent(3) + 'KH = fifo_config_in.read();\n')
			code.append(indent(3) + 'KW = fifo_config_in.read();\n')


		code.append(indent(3) + 'layer_start = 0;\n')
		code.append(indent(2) + '}\n\n')

		code.append(indent(2) + 'if (initial_round == 0){\n')
		if(idx==0):
			code.append(indent(3) + var_prefix + 'Data' + str(idx) + 'ReadDataLast(ping_buffer, fifo_transfer_in, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D0_H, FILTER_D0_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);\n')
		elif(idx==1):
			code.append(indent(3) + var_prefix + 'Data' + str(idx) + 'ReadDataLast(ping_buffer, fifo_transfer_in, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D1_H, FILTER_D1_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);\n')

		code.append(indent(2) + '} else {\n')
	#   indent_level = 1
	#   if config['MODE'] == 'CSIM':
	#     code_block = generate_tile_loops(desp)
	#     for codeline in code_block:
	#       code.append(indent(1) + codeline)
	#       indent_level += 1
	#   elif config['MODE'] == 'SYNTH':
	#     code.append('while(1)\n')
		indent_level = 3
		code.append(indent(indent_level) + 'if (initial_round % 2 == 1){\n')
		indent_level += 1
		if(idx==0):
			code.append(indent(indent_level) + var_prefix + 'Data' + str(idx) + 'ReadDataLast(pong_buffer, fifo_transfer_in, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D0_H, FILTER_D0_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);\n')
		elif(idx==1): 
			code.append(indent(indent_level) + var_prefix + 'Data' + str(idx) + 'ReadDataLast(pong_buffer, fifo_transfer_in, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D1_H, FILTER_D1_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);\n')

		code.append(indent(indent_level) + var_prefix + 'Data' + str(idx) + 'FeedData0(\n')
		code.append(indent(indent_level + 1) + 'ping_buffer,\n')
		for gs in range(desp['FC_GROUP_FACTOR'][idx]):
			code.append(indent(indent_level + 1) + 'fifo_feed_' + str(gs) + ',\n')
	#   code.append(indent(indent_level + 1) + 'initial_round,\n')
		code.append(indent(indent_level + 1) + 'LAYER_IN_NUM_T_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_IN_IMG_H_T_prev,\n')
		if(idx==0):
			code.append(indent(indent_level + 1) + 'FILTER_D0_H_prev,\n')
			code.append(indent(indent_level + 1) + 'FILTER_D0_W_prev,\n')
		code.append(indent(indent_level + 1) + 'FILTER_D1_H_prev,\n')
		code.append(indent(indent_level + 1) + 'FILTER_D1_W_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_STRIDE_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_ROW_IL_FACTOR_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_COL_IL_FACTOR_prev,\n')
		if(idx==0):
			code.append(indent(indent_level + 1) + 'LAYER_DILATION_RATE_prev,\n')
		code.append(indent(indent_level + 1) + 'K_NUM_prev,\n')
		code.append(indent(indent_level + 1) + 'KH_prev,\n')
		code.append(indent(indent_level + 1) + 'KW_prev);\n')

		indent_level -= 1
		code.append(indent(indent_level) + '} else {\n')
		indent_level += 1
		if(idx==0):
			code.append(indent(indent_level) + var_prefix + 'Data' + str(idx) + 'ReadDataLast(ping_buffer, fifo_transfer_in, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D0_H, FILTER_D0_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);\n')
		elif(idx==1): 
			code.append(indent(indent_level) + var_prefix + 'Data' + str(idx) + 'ReadDataLast(ping_buffer, fifo_transfer_in, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D1_H, FILTER_D1_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);\n')
		code.append(indent(indent_level) + var_prefix + 'Data' + str(idx) + 'FeedData0(\n')
		code.append(indent(indent_level + 1) + 'pong_buffer,\n')
		for gs in range(desp['FC_GROUP_FACTOR'][idx]):
			code.append(indent(indent_level + 1) + 'fifo_feed_' + str(gs) + ',\n')
	#   code.append(indent(indent_level + 1) + 'initial_round,\n')
		code.append(indent(indent_level + 1) + 'LAYER_IN_NUM_T_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_IN_IMG_H_T_prev,\n')
		if(idx==0):
			code.append(indent(indent_level + 1) + 'FILTER_D0_H_prev,\n')
			code.append(indent(indent_level + 1) + 'FILTER_D0_W_prev,\n')
		code.append(indent(indent_level + 1) + 'FILTER_D1_H_prev,\n')
		code.append(indent(indent_level + 1) + 'FILTER_D1_W_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_STRIDE_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_ROW_IL_FACTOR_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_COL_IL_FACTOR_prev,\n')
		if(idx==0):
			code.append(indent(indent_level + 1) + 'LAYER_DILATION_RATE_prev,\n')
		code.append(indent(indent_level + 1) + 'K_NUM_prev,\n')
		code.append(indent(indent_level + 1) + 'KH_prev,\n')
		code.append(indent(indent_level + 1) + 'KW_prev);\n')

		indent_level -= 1
		code.append(indent(indent_level) + '}\n')
		indent_level -= 1
		code.append(indent(indent_level) + '}\n\n')

		code.append(indent(indent_level) + 'initial_round++;\n')
		code.append(indent(indent_level) + 'LAYER_IN_NUM_T_prev = LAYER_IN_NUM_T;\n')
		code.append(indent(indent_level) + 'LAYER_IN_IMG_H_T_prev = LAYER_IN_IMG_H_T;\n')
		if(idx==0):
			code.append(indent(indent_level) + 'FILTER_D0_H_prev = FILTER_D0_H;\n')
			code.append(indent(indent_level) + 'FILTER_D0_W_prev = FILTER_D0_W;\n')
		code.append(indent(indent_level) + 'FILTER_D1_H_prev = FILTER_D1_H;\n')
		code.append(indent(indent_level) + 'FILTER_D1_W_prev = FILTER_D1_W;\n')
		code.append(indent(indent_level) + 'LAYER_STRIDE_prev = LAYER_STRIDE;\n')
		code.append(indent(indent_level) + 'LAYER_ROW_IL_FACTOR_prev = LAYER_ROW_IL_FACTOR;\n')
		code.append(indent(indent_level) + 'LAYER_COL_IL_FACTOR_prev = LAYER_COL_IL_FACTOR;\n')
		if(idx==0):
			code.append(indent(indent_level) + 'LAYER_DILATION_RATE_prev = LAYER_DILATION_RATE;\n')
		code.append(indent(indent_level) + 'K_NUM_prev = K_NUM;\n')
		code.append(indent(indent_level) + 'KH_prev = KH;\n')
		code.append(indent(indent_level) + 'KW_prev = KW;\n')


		
		code.append(indent(indent_level) + 'task_iter++;\n')
		code.append(indent(indent_level) + 'if (task_iter == LAYER_TASK_NUM1){\n')
		code.append(indent(indent_level + 1) + 'task_iter = 0;\n')
		code.append(indent(indent_level + 1) + 'layer_iter += 1;\n')
		code.append(indent(indent_level + 1) + 'layer_start = 1;\n')
		code.append(indent(indent_level + 1) + 'if (layer_iter == LAYER_BATCH){\n')
		code.append(indent(indent_level + 2) + 'layer_iter = 0;\n')
		code.append(indent(indent_level + 2) + 'done = 1;\n')
		code.append(indent(indent_level + 1) + '}\n')
		code.append(indent(indent_level) + '}\n')

	#   code.append(indent(indent_level) + 'in_num_iter += LAYER_IN_NUM_T;\n')
	#   code.append(indent(indent_level) + 'if (in_num_iter >= LAYER_IN_NUM){\n')
	#   code.append(indent(indent_level + 1) + 'in_num_iter = 0;\n')
	#   code.append(indent(indent_level + 1) + 'out_h_iter += %sOUT_IMG_H_T;\n' % (var_prefix))
	#   code.append(indent(indent_level + 1) + 'if (out_h_iter >= LAYER_OUT_IMG_H){\n')
	#   code.append(indent(indent_level + 2) + 'out_h_iter = 0;\n')
	#   code.append(indent(indent_level + 2) + 'out_w_iter += %sOUT_IMG_W_T;\n' % (var_prefix))
	#   code.append(indent(indent_level + 2) + 'if (out_w_iter >= LAYER_OUT_IMG_W){\n')
	#   code.append(indent(indent_level + 3) + 'out_w_iter = 0;\n')
	#   code.append(indent(indent_level + 3) + 'out_num_iter += LAYER_OUT_NUM_T;\n')
	#   code.append(indent(indent_level + 3) + 'if (out_num_iter >= LAYER_OUT_NUM){\n')
	#   code.append(indent(indent_level + 4) + 'out_num_iter = 0;\n')
	#   code.append(indent(indent_level + 4) + 'layer_iter += 1;\n')
	#   code.append(indent(indent_level + 4) + 'layer_start = 1;\n')
	#   code.append(indent(indent_level + 4) + 'if (layer_iter == LAYER_BATCH){\n')
	#   code.append(indent(indent_level + 5) + 'layer_iter = 0;\n')
	#   code.append(indent(indent_level + 5) + 'done = 1;\n')
	#   code.append(indent(indent_level + 4) + '}\n')
	#   code.append(indent(indent_level + 3) + '}\n')
	#   code.append(indent(indent_level + 2) + '}\n')
	#   code.append(indent(indent_level + 1) + '}\n')
	#   code.append(indent(indent_level) + '}\n')
		code.append(indent(indent_level - 1) + '}\n\n')

		indent_level -= 1
		code.append(indent(indent_level) + 'if (initial_round % 2 == 1){\n')
		indent_level += 1
		code.append(indent(indent_level) + var_prefix + 'Data' + str(idx) + 'FeedData0(\n')
		code.append(indent(indent_level + 1) + 'ping_buffer,\n')
		for gs in range(desp['FC_GROUP_FACTOR'][idx]):
			code.append(indent(indent_level + 1) + 'fifo_feed_' + str(gs) + ',\n')
	#   code.append(indent(indent_level + 1) + 'initial_round,\n')
		code.append(indent(indent_level + 1) + 'LAYER_IN_NUM_T_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_IN_IMG_H_T_prev,\n')
		if(idx==0):
			code.append(indent(indent_level + 1) + 'FILTER_D0_H_prev,\n')
			code.append(indent(indent_level + 1) + 'FILTER_D0_W_prev,\n')
		code.append(indent(indent_level + 1) + 'FILTER_D1_H_prev,\n')
		code.append(indent(indent_level + 1) + 'FILTER_D1_W_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_STRIDE_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_ROW_IL_FACTOR_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_COL_IL_FACTOR_prev,\n')
		if(idx==0):
			code.append(indent(indent_level + 1) + 'LAYER_DILATION_RATE_prev,\n')
		code.append(indent(indent_level + 1) + 'K_NUM_prev,\n')
		code.append(indent(indent_level + 1) + 'KH_prev,\n')
		code.append(indent(indent_level + 1) + 'KW_prev);\n')
		indent_level -= 1
		code.append(indent(indent_level) + '} else {\n')
		indent_level += 1
		code.append(indent(indent_level) + var_prefix + 'Data' + str(idx) + 'FeedData0(\n')
		code.append(indent(indent_level + 1) + 'pong_buffer,\n')
		for gs in range(desp['FC_GROUP_FACTOR'][idx]):
			code.append(indent(indent_level + 1) + 'fifo_feed_' + str(gs) + ',\n')
	#   code.append(indent(indent_level + 1) + 'initial_round,\n')
		code.append(indent(indent_level + 1) + 'LAYER_IN_NUM_T_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_IN_IMG_H_T_prev,\n')
		if(idx==0):
			code.append(indent(indent_level + 1) + 'FILTER_D0_H_prev,\n')
			code.append(indent(indent_level + 1) + 'FILTER_D0_W_prev,\n')
		code.append(indent(indent_level + 1) + 'FILTER_D1_H_prev,\n')
		code.append(indent(indent_level + 1) + 'FILTER_D1_W_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_STRIDE_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_ROW_IL_FACTOR_prev,\n')
		code.append(indent(indent_level + 1) + 'LAYER_COL_IL_FACTOR_prev,\n')
		if(idx==0):
			code.append(indent(indent_level + 1) + 'LAYER_DILATION_RATE_prev,\n')
		code.append(indent(indent_level + 1) + 'K_NUM_prev,\n')
		code.append(indent(indent_level + 1) + 'KH_prev,\n')
		code.append(indent(indent_level + 1) + 'KW_prev);\n')
		indent_level -= 1
		code.append(indent(indent_level) + '}\n')
		code.append(indent(indent_level) + '}\n')
		code.append(indent(1) + '  inst++;\n')
		code.append(indent(1) + '  if(inst == inst_count){\n')
		code.append(indent(1) + '    inst_done = 1;\n')
		code.append(indent(1) + '  }\n')
		code.append(indent(1) + '}\n')
		code.append('}\n\n')

		idx += 1


	return code

def dc_read(desp, config):
	code = []
	var_prefix = 'U%s' %(desp['KERNEL_ID']) + '_'

	idx = len(desp['OP_NAME'])
	for res_name in desp['RES_NAME']:
		code.append('void ' + var_prefix + 'Data' + str(idx) + 'ReadData0(\n')
		code.append(indent(1) + var_prefix + 'data_t' + str(idx) + ' buffer[' + var_prefix + 'DATA' + str(idx) + '_FC_GROUP_FACTOR][' + var_prefix + 'DATA' + str(idx) + '_BUF_SIZE / %sDATA%d_FC_SIMD_FACTOR][%sDATA%d_FC_SIMD_FACTOR],\n' % (var_prefix, idx, var_prefix, idx))
		for gs in range(desp['FC_GROUP_FACTOR'][idx]):
			if gs < desp['FC_GROUP_FACTOR'][idx] - 1:
				code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo_collect_' + str(gs) + ',\n')
			else:
				code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo_collect_' + str(gs) + ',\n')
		code.append(indent(1) + 'uint LAYER_IN_IMG_H_T,\n')
		code.append(indent(1) + 'uint LAYER_ROW_IL_FACTOR,\n')
		code.append(indent(1) + 'uint LAYER_COL_IL_FACTOR,\n')
		code.append(indent(1) + 'uint LAYER_STRIDE,\n')
		code.append(indent(1) + 'uint LAYER_TCONV_STRIDE\n')
		code.append('){\n')
		code.append('#pragma HLS INLINE off\n\n')

		code.append(indent(1) + 'bool more_to_collect_from_sys_arr = true;\n')
		gs_width = cal_width(desp['FC_SPLIT_FACTOR'][idx])
		code.append(indent(1) + 'ap_uint<' + str(gs_width) + '> buffer_gs_id = 0;\n')
		buf_size = desp['DFC_BUF_SIZE'][idx]
		width = cal_width(buf_size)
		code.append(indent(1) + 'ap_uint<' + str(width) + '> buffer_read_counter = 0;\n')

		for counter in desp['DC_COLLECT_COUNTER']:
			var = counter['VARIABLE']
			width = counter['WIDTH']
			bound_lower = counter['BOUND'][0]
			bound_upper = counter['BOUND'][1]
			code.append(indent(1) + 'ap_uint<' + str(width) + '> ' + var + ' = ' + str(bound_lower) + ';\n')

		code.append(indent(1) + 'ap_uint<10> col_counter = 0;\n')
		code.append(indent(1) + 'ap_uint<10> row_counter = 0;\n')

		val = desp['PARAMETERS']['IN_IMG_H_T']
		w = cal_width(val)
		code.append(indent(1) + 'ap_uint<%d> c0_counter_bound = LAYER_IN_IMG_H_T / LAYER_STRIDE;\n' % (w))

		code.append('\n')
		code.append(indent(1) + 'while(more_to_collect_from_sys_arr){\n')
		code.append('#pragma HLS PIPELINE II=1\n')
		code.append(indent(2) + 'ap_uint<20> offset0 = c0_counter * LAYER_COL_IL_FACTOR*LAYER_TCONV_STRIDE*LAYER_TCONV_STRIDE * U1_SA_ROWS * LAYER_ROW_IL_FACTOR;\n')
		code.append(indent(2) + 'ap_uint<20> offset1 = c2_counter*LAYER_TCONV_STRIDE * U1_SA_ROWS * LAYER_ROW_IL_FACTOR;\n')
		code.append(indent(2) + 'ap_uint<20> offset2 = ((U1_SA_ROWS - 1 - c3_counter) * LAYER_ROW_IL_FACTOR + c1_counter);\n')
		code.append(indent(2) + 'ap_uint<20> offset3 = U1_SA_ROWS*(row_counter*LAYER_COL_IL_FACTOR*LAYER_ROW_IL_FACTOR*LAYER_TCONV_STRIDE+LAYER_ROW_IL_FACTOR*col_counter);\n')
		code.append(indent(2) + '#pragma HLS BIND_OP variable=offset0 op=mul impl=fabric latency=1\n')
		code.append(indent(2) + '#pragma HLS BIND_OP variable=offset1 op=mul impl=fabric latency=1\n')
		code.append(indent(2) + '#pragma HLS BIND_OP variable=offset2 op=mul impl=fabric latency=1\n')
		code.append(indent(2) + '#pragma HLS BIND_OP variable=offset3 op=mul impl=fabric latency=1\n\n')

		buf_size = desp['DFC_BUF_SIZE'][idx]
		width = cal_width(buf_size)
			#code.append(indent(2) + 'ap_uint<%d> buffer_ind_to_collect_from_sys_arr = c0_counter * LAYER_COL_IL_FACTOR * %sSA_ROWS * LAYER_ROW_IL_FACTOR + c2_counter * %sSA_ROWS * LAYER_ROW_IL_FACTOR + ((%sSA_ROWS - 1 - c3_counter) * LAYER_ROW_IL_FACTOR + c1_counter);\n\n' % (width, var_prefix, var_prefix, var_prefix))
		code.append(indent(2) + 'ap_uint<%d> buffer_ind_to_collect_from_sys_arr = offset0 + offset1 + offset2 + offset3;\n'% width)
		for gs in range(desp['FC_GROUP_FACTOR'][idx]):
			code.append(indent(2) + var_prefix + 'Data' + str(idx) + 'PEChannelType data_to_collect_' + str(gs) + ';\n')
			code.append(indent(2) + 'data_to_collect_' + str(gs) + ' = fifo_collect_' + str(gs) + '.read();\n')
			code.append(indent(2) + 'buffer[' + str(gs) + '][buffer_ind_to_collect_from_sys_arr / %sDATA%d_FC_SIMD_FACTOR][buffer_ind_to_collect_from_sys_arr %% %sDATA%d_FC_SIMD_FACTOR] = data_to_collect_' % (var_prefix, idx, var_prefix, idx) + str(gs) + '.data;\n')

		code.append('\n')

		code.append(indent(2) + '// counter logic\n')
	#   code.append(indent(2) + 'buffer_read_counter++;\n')
	#   code.append(indent(2) + 'if (buffer_read_counter == ' + var_prefix + 'DATA' + str(idx) + '_BUF_SIZE){\n')
	#   code.append(indent(3) + 'buffer_read_counter = 0;\n')
	#   code.append(indent(3) + 'more_to_collect_from_sys_arr = false;\n')
	#   code.append(indent(2) + '}\n')

	#   code_block = generate_dc_counter_loops(desp, config)
	#   for codeline in code_block:
	#     code.append(indent(2) + codeline)
		code.append(indent(2) + 'c0_counter++;\n')
	#   code.append(indent(2) + 'if (c0_counter == LAYER_IN_IMG_H_T / LAYER_STRIDE){\n')
		code.append(indent(2) + 'if (c0_counter == c0_counter_bound){\n')
		code.append(indent(3) + 'c0_counter = 0;\n')
		code.append(indent(3) + 'c1_counter++;\n')
		code.append(indent(3) + 'if (c1_counter == LAYER_ROW_IL_FACTOR){\n')
		code.append(indent(4) + 'c1_counter = 0;\n')
		code.append(indent(4) + 'c2_counter++;\n')
		code.append(indent(4) + 'if (c2_counter == LAYER_COL_IL_FACTOR){\n')
		code.append(indent(5) + 'c2_counter = 0;\n')
		code.append(indent(5) + 'col_counter++;\n')
		code.append(indent(5) + 'if (col_counter == LAYER_TCONV_STRIDE){\n')
		code.append(indent(6) + 'col_counter = 0;\n')
		code.append(indent(6) + 'row_counter++;\n')
		code.append(indent(6) + 'if (row_counter == LAYER_TCONV_STRIDE){\n')
		code.append(indent(7) + 'row_counter = 0;\n')
		code.append(indent(7) + 'c3_counter++;\n')
		code.append(indent(7) + 'if (c3_counter == %sSA_ROWS){\n' % (var_prefix))
		code.append(indent(8) + 'c3_counter = 0;\n')
		code.append(indent(8) + 'more_to_collect_from_sys_arr = false;\n')
		code.append(indent(7) + '}\n')
		code.append(indent(6) + '}\n')
		code.append(indent(5) + '}\n')
		code.append(indent(4) + '}\n')
		code.append(indent(3) + '}\n')
		code.append(indent(2) + '}\n')
		code.append(indent(1) + '}\n')

		code.append('}\n\n')

		idx += 1

	return code

def dc_write(desp, config):
	code = []
	var_prefix = 'U%s' %(desp['KERNEL_ID']) + '_'

	idx = len(desp['OP_NAME'])
	for res_name in desp['RES_NAME']:
			#write
		code.append('void ' + var_prefix + 'Data' + str(idx) + 'WriteData0(\n')
		code.append(indent(1) + var_prefix + 'data_t' + str(idx) + ' buffer[' + var_prefix + 'DATA' + str(idx) + '_FC_GROUP_FACTOR][' + var_prefix + 'DATA' + str(idx) + '_BUF_SIZE / %sDATA%d_FC_SIMD_FACTOR][%sDATA%d_FC_SIMD_FACTOR],\n' %(var_prefix, idx, var_prefix, idx))
		code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_in,\n')
		code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_out,\n')
		code.append(indent(1) + 'unsigned int engine_id,\n')
		code.append(indent(1) + 'uint LAYER_OUT_NUM_T,\n')
		code.append(indent(1) + 'uint LAYER_IN_IMG_H_T,\n')
		code.append(indent(1) + 'uint LAYER_IN_IMG_W_T,\n')
		code.append(indent(1) + 'uint LAYER_COL_IL_FACTOR,\n')
		code.append(indent(1) + 'uint LAYER_STRIDE,\n')
		code.append(indent(1) + 'uint LAYER_TCONV_STRIDE\n')
		code.append('){\n')
		code.append('#pragma HLS INLINE off\n\n')

		code.append(indent(1) + 'bool LAST_ENGINE = (engine_id == ' + str(desp['RES_ENGINE_NUM'][idx - len(desp['OP_NAME'])]) + ' / ' + var_prefix + 'DATA' + str(idx) + '_FC_SPLIT_FACTOR - 1);\n\n')

		buf_size = desp['DFC_BUF_SIZE'][idx] * desp['RES_ENGINE_NUM'][idx - len(desp['OP_NAME'])] * desp['FC_GROUP_FACTOR'][idx]
		width = cal_width(buf_size)
		code.append(indent(1) + 'bool more_to_read_from_buffer = true;\n')
		code.append(indent(1) + 'bool more_to_collect_from_sys_arr = true;\n');
		code.append(indent(1) + 'bool data_is_from_local_buffer;\n')
		code.append(indent(1) + 'bool data_is_from_external_buffer;\n')

		val = desp['PARAMETERS']['IN_NUM'] / desp['FC_SIMD_FACTOR'][2]
		w = cal_width(val)
		code.append(indent(1) + 'ap_uint<%d> oo = 0;\n' % (w))
		val = desp['PARAMETERS']['OUT_IMG_H_T']
		w = cal_width(val)
		code.append(indent(1) + 'ap_uint<%d> h = 0;\n' %(w))
		code.append(indent(1) + 'ap_uint<%d> h_bound = LAYER_IN_IMG_H_T*LAYER_TCONV_STRIDE / LAYER_STRIDE;\n' % (w))
		val = desp['PARAMETERS']['OUT_IMG_W_T']
		w = cal_width(val)
		code.append(indent(1) + 'ap_uint<%d> w = 0;\n' % (w))
		code.append(indent(1) + 'ap_uint<%d> w_bound = LAYER_IN_IMG_W_T*LAYER_TCONV_STRIDE / LAYER_STRIDE;\n' % (w))
		code.append(indent(1) + 'LAYER_COL_IL_FACTOR *= LAYER_TCONV_STRIDE;\n')
		code.append(indent(1) + 'bool done = 0;\n\n')

	#   code.append(indent(1) + 'for (int oo = 0; oo < LAYER_OUT_NUM_T / %sDATA%d_FC_SIMD_FACTOR; oo++)\n' % (var_prefix, idx))
	#   code.append(indent(2) + 'for (int h = 0; h < %sOUT_IMG_H_T; h++)\n' % (var_prefix))
	#   code.append(indent(3) + 'for (int w = 0; w < %sOUT_IMG_W_T; w++){\n' % (var_prefix))
		code.append(indent(1) + 'while(!done){\n')
		code.append('#pragma HLS PIPELINE II=1\n')
		indent_level = 2
		buf_size = desp['PARAMETERS']['OUT_NUM'] * desp['PARAMETERS']['OUT_IMG_H_T'] * desp['COL_IL_FACTOR']
		w = cal_width(buf_size)
		code.append(indent(indent_level) + 'ap_uint<%d> local_buf_idx = h * LAYER_COL_IL_FACTOR * LAYER_OUT_NUM_T + (w %% LAYER_COL_IL_FACTOR) * LAYER_OUT_NUM_T + oo * %sDATA%d_FC_SIMD_FACTOR;\n' % (w, var_prefix, idx))
		code.append(indent(indent_level) + '#pragma HLS BIND_OP variable=local_buf_idx op=mul impl=fabric latency=1\n')
		code.append(indent(indent_level) + 'if (w >= engine_id * LAYER_COL_IL_FACTOR){\n')
		val = desp['PARAMETERS']['OUT_IMG_W_T']
		w = cal_width(val)
		code.append(indent(indent_level + 1) + 'ap_uint<%d> collector_id = w / LAYER_COL_IL_FACTOR;\n' % (w))
		code.append(indent(indent_level + 1) + 'data_is_from_local_buffer = (collector_id == engine_id);\n')
		code.append(indent(indent_level + 1) + 'data_is_from_external_buffer = !data_is_from_local_buffer;\n\n' )

		code.append(indent(indent_level + 1) + var_prefix + 'Data' + str(idx) + 'TransferChannelType data_write_to_fifo;\n\n')
		code.append(indent(indent_level + 1) + 'if (data_is_from_external_buffer){\n')
		code.append(indent(indent_level + 2) + 'data_write_to_fifo = fifo_transfer_in.read();\n')
		code.append(indent(indent_level + 1) + '} else {\n')
		for dup in range(desp['FC_SIMD_FACTOR'][idx]):
			code.append(indent(indent_level + 2) + var_prefix + 'data_t' + str(idx) + ' data' + str(dup) + ' = buffer[0][local_buf_idx / %sDATA%d_FC_SIMD_FACTOR][%d];\n' % (var_prefix, idx, dup))
			code.append(indent(indent_level + 2) + 'ap_uint<' + var_prefix + 'DATA' + str(idx) + '_WIDTH> data' + str(dup) + '_cast = Reinterpret<ap_uint<' + var_prefix + 'DATA' + str(idx) + '_WIDTH> >(data' + str(dup) + ');\n')
		code.append(indent(indent_level + 2) + 'ap_uint<' + var_prefix + 'DATA' + str(idx) + '_WIDTH * ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR> pack_data = (\n')
		for dup in range(desp['FC_SIMD_FACTOR'][idx] - 1, 0, -1):
			code.append(indent(indent_level + 3) + 'data' + str(dup) + '_cast,\n')
		code.append(indent(indent_level + 3) + 'data0' + '_cast\n')
		code.append(indent(indent_level + 2) + ');\n')
		code.append(indent(indent_level + 2) + 'data_write_to_fifo.data = pack_data;\n')
		code.append(indent(indent_level + 1) + '}\n\n')

		code.append(indent(indent_level + 1) + 'fifo_transfer_out.write(data_write_to_fifo);\n')
		code.append(indent(indent_level) + '}\n')

		code.append(indent(2) + 'w++;\n')
	#   code.append(indent(2) + 'if (w == LAYER_IN_IMG_W_T / LAYER_STRIDE){\n')
		code.append(indent(2) + 'if (w == w_bound){\n')
		code.append(indent(3) + 'w = 0;\n')
		code.append(indent(3) + 'h++;\n')
	#   code.append(indent(3) + 'if (h == LAYER_IN_IMG_H_T / LAYER_STRIDE){\n')
		code.append(indent(3) + 'if (h == h_bound){\n')
		code.append(indent(4) + 'h = 0;\n')
		code.append(indent(4) + 'oo++;\n')
		code.append(indent(4) + 'if (oo == LAYER_OUT_NUM_T / %sDATA%d_FC_SIMD_FACTOR){\n' % (var_prefix, idx))
		code.append(indent(5) + 'oo = 0;\n')
		code.append(indent(5) + 'done = 1;\n')
		code.append(indent(4) + '}\n')
		code.append(indent(3) + '}\n')
		code.append(indent(2) + '}\n')
		code.append(indent(1) + '}\n\n')

		code.append('}\n\n')

			#writelast
		code.append('void ' + var_prefix + 'Data' + str(idx) + 'WriteDataLast(\n')
		code.append(indent(1) + var_prefix + 'data_t' + str(idx) + ' buffer[' + var_prefix + 'DATA' + str(idx) + '_FC_GROUP_FACTOR][' + var_prefix + 'DATA' + str(idx) + '_BUF_SIZE / %sDATA%d_FC_SIMD_FACTOR][%sDATA%d_FC_SIMD_FACTOR],\n' % (var_prefix, idx, var_prefix, idx))
	#   code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_in,\n')
		code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_out,\n')
		code.append(indent(1) + 'unsigned int engine_id,\n')
		code.append(indent(1) + 'uint LAYER_OUT_NUM_T,\n')
		code.append(indent(1) + 'uint LAYER_IN_IMG_H_T,\n')
		code.append(indent(1) + 'uint LAYER_IN_IMG_W_T,\n')
		code.append(indent(1) + 'uint LAYER_COL_IL_FACTOR,\n')
		code.append(indent(1) + 'uint LAYER_STRIDE,\n')
		code.append(indent(1) + 'uint LAYER_TCONV_STRIDE\n')
		code.append('){\n')
		code.append('#pragma HLS INLINE off\n\n')

		code.append(indent(1) + 'bool LAST_ENGINE = (engine_id == ' + str(desp['RES_ENGINE_NUM'][idx - len(desp['OP_NAME'])]) + ' / ' + var_prefix + 'DATA' + str(idx) + '_FC_SPLIT_FACTOR - 1);\n\n')

		buf_size = desp['DFC_BUF_SIZE'][idx] * desp['RES_ENGINE_NUM'][idx - len(desp['OP_NAME'])] * desp['FC_GROUP_FACTOR'][idx]
		width = cal_width(buf_size)
		code.append(indent(1) + 'bool more_to_read_from_buffer = true;\n')
		code.append(indent(1) + 'bool more_to_collect_from_sys_arr = true;\n');
		code.append(indent(1) + 'bool data_is_from_local_buffer;\n')
		code.append(indent(1) + 'bool data_is_from_external_buffer;\n')

		val = desp['PARAMETERS']['IN_NUM'] / desp['FC_SIMD_FACTOR'][2]
		w = cal_width(val)
		code.append(indent(1) + 'ap_uint<%d> oo = 0;\n' % (w))
		val = desp['PARAMETERS']['OUT_IMG_H_T']
		w = cal_width(val)
		code.append(indent(1) + 'ap_uint<%d> h = 0;\n' %(w))
		code.append(indent(1) + 'ap_uint<%d> h_bound = LAYER_IN_IMG_H_T*LAYER_TCONV_STRIDE / LAYER_STRIDE;\n' % (w))
		val = desp['PARAMETERS']['OUT_IMG_W_T']
		w = cal_width(val)
		code.append(indent(1) + 'ap_uint<%d> w = 0;\n' % (w))
		code.append(indent(1) + 'ap_uint<%d> w_bound = LAYER_IN_IMG_W_T*LAYER_TCONV_STRIDE / LAYER_STRIDE;\n' % (w))
		code.append(indent(1) + 'LAYER_COL_IL_FACTOR *= LAYER_TCONV_STRIDE;\n')
		code.append(indent(1) + 'bool done = 0;\n\n')

		code.append(indent(1) + 'while(!done){\n')
		code.append('#pragma HLS PIPELINE II=1\n')
		indent_level = 2
		buf_size = desp['PARAMETERS']['OUT_NUM'] * desp['PARAMETERS']['OUT_IMG_H_T'] * desp['COL_IL_FACTOR']
		w = cal_width(buf_size)
		code.append(indent(indent_level) + 'ap_uint<%d> local_buf_idx = h * LAYER_COL_IL_FACTOR * LAYER_OUT_NUM_T + (w %% LAYER_COL_IL_FACTOR) * LAYER_OUT_NUM_T + oo * %sDATA%d_FC_SIMD_FACTOR;\n' % (w, var_prefix, idx))
		code.append(indent(indent_level) + '#pragma HLS BIND_OP variable=local_buf_idx op=mul impl=fabric latency=1\n')
		code.append(indent(indent_level) + 'if (w >= engine_id * LAYER_COL_IL_FACTOR){\n')
		val = desp['PARAMETERS']['OUT_IMG_W_T']
		w = cal_width(val)
		code.append(indent(indent_level + 1) + 'ap_uint<%d> collector_id = w / LAYER_COL_IL_FACTOR;\n' % (w))
		code.append(indent(indent_level + 1) + 'data_is_from_local_buffer = (collector_id == engine_id);\n')
		code.append(indent(indent_level + 1) + 'data_is_from_external_buffer = !data_is_from_local_buffer;\n\n' )

		code.append(indent(indent_level + 1) + var_prefix + 'Data' + str(idx) + 'TransferChannelType data_write_to_fifo;\n\n')
		code.append(indent(indent_level + 1) + 'if (data_is_from_external_buffer){\n')
	#   code.append(indent(indent_level + 2) + 'data_write_to_fifo = fifo_transfer_in.read();\n')
		code.append(indent(indent_level + 1) + '} else {\n')
		for dup in range(desp['FC_SIMD_FACTOR'][idx]):
			code.append(indent(indent_level + 2) + var_prefix + 'data_t' + str(idx) + ' data' + str(dup) + ' = buffer[0][local_buf_idx / %sDATA%d_FC_SIMD_FACTOR][%d];\n' % (var_prefix, idx, dup))
			code.append(indent(indent_level + 2) + 'ap_uint<' + var_prefix + 'DATA' + str(idx) + '_WIDTH> data' + str(dup) + '_cast = Reinterpret<ap_uint<' + var_prefix + 'DATA' + str(idx) + '_WIDTH> >(data' + str(dup) + ');\n')
		code.append(indent(indent_level + 2) + 'ap_uint<' + var_prefix + 'DATA' + str(idx) + '_WIDTH * ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR> pack_data = (\n')
		for dup in range(desp['FC_SIMD_FACTOR'][idx] - 1, 0, -1):
			code.append(indent(indent_level + 3) + 'data' + str(dup) + '_cast,\n')
		code.append(indent(indent_level + 3) + 'data0' + '_cast\n')
		code.append(indent(indent_level + 2) + ');\n')
		code.append(indent(indent_level + 2) + 'data_write_to_fifo.data = pack_data;\n')
		code.append(indent(indent_level + 1) + '}\n\n')

		code.append(indent(indent_level + 1) + 'fifo_transfer_out.write(data_write_to_fifo);\n')
		code.append(indent(indent_level) + '}\n')

		code.append(indent(2) + 'w++;\n')
	#   code.append(indent(2) + 'if (w == LAYER_IN_IMG_W_T / LAYER_STRIDE){\n')
		code.append(indent(2) + 'if (w == w_bound){\n')
		code.append(indent(3) + 'w = 0;\n')
		code.append(indent(3) + 'h++;\n')
	#   code.append(indent(3) + 'if (h == LAYER_IN_IMG_H_T / LAYER_STRIDE){\n')
		code.append(indent(3) + 'if (h == h_bound){\n')
		code.append(indent(4) + 'h = 0;\n')
		code.append(indent(4) + 'oo++;\n')
		code.append(indent(4) + 'if (oo == LAYER_OUT_NUM_T / %sDATA%d_FC_SIMD_FACTOR){\n' % (var_prefix, idx))
		code.append(indent(5) + 'oo = 0;\n')
		code.append(indent(5) + 'done = 1;\n')
		code.append(indent(4) + '}\n')
		code.append(indent(3) + '}\n')
		code.append(indent(2) + '}\n')
		code.append(indent(1) + '}\n\n')

		code.append('}\n\n')

		idx += 1

	return code

def dc(desp, config):

	code = []
	var_prefix = 'U%s' %(desp['KERNEL_ID']) + '_'

	code.extend(dc_write(desp, config))
	code.extend(dc_read(desp, config))

	idx = len(desp['OP_NAME'])
	for res_name in desp['RES_NAME']:
			#Engine0
		code.append('void ' + var_prefix + 'DataCollect' + str(idx) + 'Engine0(\n')
		code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_in,\n')
		code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_out,\n')
		for gs in range(desp['FC_GROUP_FACTOR'][idx]):
			code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo_collect_' + str(gs) + ',\n')
		code.append(indent(1) + 'unsigned int engine_id,\n')
		# code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in0, // from PE\n')
		code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in0, // from other engines\n')
		code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out\n')
		code.append('){\n')
		code.append('#pragma HLS DATA_PACK variable=fifo_transfer_in\n')
		code.append('#pragma HLS DATA_PACK variable=fifo_transfer_out\n')
		for gs in range(desp['FC_GROUP_FACTOR'][idx]):
			code.append('#pragma HLS DATA_PACK variable=fifo_collect_' + str(gs) + '\n')
		code.append('#pragma HLS INLINE off\n\n')
		code.append(indent(1) + 'bool inst_done = 0;\n')
		code.append(indent(1) + 'uint inst = 0;\n')
		code.append(indent(1) + 'int inst_count = fifo_config_in0.read();\n')
		# code.append(indent(1) + 'fifo_config_in1.read();\n')
		code.append(indent(1) + 'fifo_config_out.write(inst_count);\n')
		code.append(indent(1) + 'while(!inst_done){\n') 
		code.append(indent(1) + 'uint CONV_EN = fifo_config_in0.read();\n')
		# code.append(indent(1) + 'fifo_config_in1.read();\n')
		code.append(indent(1) + 'fifo_config_out.write(CONV_EN);\n')
		code.append(indent(1) + 'if(CONV_EN){\n')
		code.append(indent(1) + 'uint LAYER_OUT_NUM_T_prev;\n')
		code.append(indent(1) + 'uint LAYER_IN_IMG_H_T_prev;\n')
		code.append(indent(1) + 'uint LAYER_IN_IMG_W_T_prev;\n')
		code.append(indent(1) + 'uint LAYER_COL_IL_FACTOR_prev;\n')
		code.append(indent(1) + 'uint LAYER_STRIDE_prev;\n')
		code.append(indent(1) + 'uint LAYER_TCONV_STRIDE_prev;\n')
		code.append(indent(1) + 'uint task_iter = 0;\n')

		code.append(indent(1) + '// read in configurations\n')
		code.append(indent(1) + 'uint LAYER_IN_NUM_T = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint LAYER_OUT_NUM_T = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint LAYER_IN_IMG_H_T = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint LAYER_IN_IMG_W_T = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint LAYER_FILTER_S_H = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint LAYER_FILTER_S_W = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint LAYER_TASK_NUM1 = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint LAYER_TASK_NUM2 = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint LAYER_LOCAL_REG_NUM = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint LAYER_ROW_IL_FACTOR = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint LAYER_COL_IL_FACTOR = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint LAYER_STRIDE = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint LAYER_BATCH = fifo_config_in0.read();\n\n')

		code.append(indent(1) + 'uint LAYER_CONV_TYPE = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint FILTER_D0_H = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint FILTER_D0_W = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint FILTER_D1_H = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint FILTER_D1_W = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint LAYER_DILATION_RATE = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint LAYER_TCONV_STRIDE = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint K_NUM = fifo_config_in0.read();\n')
		code.append(indent(1) + 'ap_uint<32> KH = fifo_config_in0.read();\n')
		code.append(indent(1) + 'ap_uint<32> KW = fifo_config_in0.read();\n')



		# code.append(indent(1) + '// dummpy read\n')
		# code.append(indent(1) + 'LAYER_IN_NUM_T = fifo_config_in1.read();\n')
		# code.append(indent(1) + 'LAYER_OUT_NUM_T = fifo_config_in1.read();\n')
		# code.append(indent(1) + 'LAYER_IN_IMG_H_T = fifo_config_in1.read();\n')
		# code.append(indent(1) + 'LAYER_IN_IMG_W_T = fifo_config_in1.read();\n')
		# code.append(indent(1) + 'LAYER_FILTER_S_H = fifo_config_in1.read();\n')
		# code.append(indent(1) + 'LAYER_FILTER_S_W = fifo_config_in1.read();\n')
		# code.append(indent(1) + 'LAYER_TASK_NUM1 = fifo_config_in1.read();\n')
		# code.append(indent(1) + 'LAYER_TASK_NUM2 = fifo_config_in1.read();\n')
		# code.append(indent(1) + 'LAYER_LOCAL_ACCUM_NUM = fifo_config_in1.read();\n')
		# code.append(indent(1) + 'LAYER_LOCAL_REG_NUM = fifo_config_in1.read();\n')
		# code.append(indent(1) + 'LAYER_ROW_IL_FACTOR = fifo_config_in1.read();\n')
		# code.append(indent(1) + 'LAYER_COL_IL_FACTOR = fifo_config_in1.read();\n')
		# code.append(indent(1) + 'LAYER_STRIDE = fifo_config_in1.read();\n')
		# code.append(indent(1) + 'LAYER_BATCH = fifo_config_in1.read();\n\n')

		# code.append(indent(1) + 'LAYER_CONV_TYPE = fifo_config_in1.read();\n')
		# code.append(indent(1) + 'FILTER_D0_H = fifo_config_in1.read();\n')
		# code.append(indent(1) + 'FILTER_D0_W = fifo_config_in1.read();\n')
		# code.append(indent(1) + 'FILTER_D1_H = fifo_config_in1.read();\n')
		# code.append(indent(1) + 'FILTER_D1_W = fifo_config_in1.read();\n')
		# code.append(indent(1) + 'LAYER_DILATION_RATE = fifo_config_in1.read();\n')
		# code.append(indent(1) + 'LAYER_TCONV_STRIDE = fifo_config_in1.read();\n')
		# code.append(indent(1) + 'K_NUM = fifo_config_in1.read();\n')
		# code.append(indent(1) + 'KH = fifo_config_in1.read();\n')
		# code.append(indent(1) + 'KW = fifo_config_in1.read();\n')


		code.append(indent(1) + '// write out configurations\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_IN_NUM_T);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_OUT_NUM_T);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_IN_IMG_H_T);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_IN_IMG_W_T);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_FILTER_S_H);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_FILTER_S_W);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_TASK_NUM1);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_TASK_NUM2);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_LOCAL_REG_NUM);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_ROW_IL_FACTOR);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_COL_IL_FACTOR);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_STRIDE);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_BATCH);\n\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_CONV_TYPE);\n')
		code.append(indent(1) + 'fifo_config_out.write(FILTER_D0_H);\n')
		code.append(indent(1) + 'fifo_config_out.write(FILTER_D0_W);\n')
		code.append(indent(1) + 'fifo_config_out.write(FILTER_D1_H);	\n')
		code.append(indent(1) + 'fifo_config_out.write(FILTER_D1_W);	\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_DILATION_RATE);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_TCONV_STRIDE);\n')
		code.append(indent(1) + 'fifo_config_out.write(K_NUM);\n')
		code.append(indent(1) + 'fifo_config_out.write(KH);\n')
		code.append(indent(1) + 'fifo_config_out.write(KW);\n')


		code.append(indent(1) + var_prefix + 'data_t' + str(idx) + ' ping_buffer[' + var_prefix + 'DATA' + str(idx) + \
				'_FC_GROUP_FACTOR][' + var_prefix + 'DATA' + str(idx) + '_BUF_SIZE / %sDATA%d_FC_SIMD_FACTOR][%sDATA%d_FC_SIMD_FACTOR];\n' % (var_prefix, idx, var_prefix, idx))
		code.append(indent(1) + var_prefix + 'data_t' + str(idx) + ' pong_buffer[' + var_prefix + 'DATA' + str(idx) + \
				'_FC_GROUP_FACTOR][' + var_prefix + 'DATA' + str(idx) + '_BUF_SIZE / %sDATA%d_FC_SIMD_FACTOR][%sDATA%d_FC_SIMD_FACTOR];\n' % (var_prefix, idx, var_prefix, idx))
		code.append(indent(1) + '#if U1_DataCollect2Engine0_MEM == 0\n')
		code.append(indent(2) + '#pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=BRAM\n')
		code.append(indent(2) + '#pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=BRAM\n')
		code.append(indent(1) + '#elif U1_DataCollect2Engine0_MEM == 1\n')
		code.append(indent(2) + '#pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=URAM\n')
		code.append(indent(2) + '#pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=URAM\n')
			#code.append(indent(1) + '#elif MEM_TYPE == 2\n')
			#code.append(indent(2) + '#pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=BRAM\n')
			#code.append(indent(2) + '#pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=BRAM\n')
			#code.append(indent(1) + '#elif MEM_TYPE == 3\n')
			#code.append(indent(2) + '#pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=BRAM\n')
			#code.append(indent(2) + '#pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=BRAM\n')
		code.append(indent(1) + '#endif\n')
		code.append('#pragma HLS ARRAY_PARTITION variable=ping_buffer dim=3 complete\n')
		code.append('#pragma HLS ARRAY_PARTITION variable=pong_buffer dim=3 complete\n')
		code.append('#pragma HLS DATA_PACK variable=ping_buffer\n')
		code.append('#pragma HLS DATA_PACK variable=pong_buffer\n')
		code.append('\n')

		code.append(indent(1) + 'unsigned int initial_round = 0;\n')
		code.append(indent(1) + 'bool done = 0;\n')
		w = cal_width(desp['PARAMETERS']['LAYER_BATCH'])
		code.append(indent(1) + 'ap_uint<%d> layer_iter = 0;\n' % (w))
		code.append(indent(1) + 'bool layer_start = 0;\n')
		code.append(indent(1) + 'while(!done){\n')
		code.append(indent(2) + 'if (layer_start){\n')
		code.append(indent(3) + '// read in configurations\n')
		code.append(indent(3) + 'LAYER_IN_NUM_T = fifo_config_in0.read();\n')
		code.append(indent(3) + 'LAYER_OUT_NUM_T = fifo_config_in0.read();\n')
		code.append(indent(3) + 'LAYER_IN_IMG_H_T = fifo_config_in0.read();\n')
		code.append(indent(3) + 'LAYER_IN_IMG_W_T = fifo_config_in0.read();\n')
		code.append(indent(3) + 'LAYER_FILTER_S_H = fifo_config_in0.read();\n')
		code.append(indent(3) + 'LAYER_FILTER_S_W = fifo_config_in0.read();\n')
		code.append(indent(3) + 'LAYER_TASK_NUM1 = fifo_config_in0.read();\n')
		code.append(indent(3) + 'LAYER_TASK_NUM2 = fifo_config_in0.read();\n')
		code.append(indent(3) + 'LAYER_LOCAL_ACCUM_NUM = fifo_config_in0.read();\n')
		code.append(indent(3) + 'LAYER_LOCAL_REG_NUM = fifo_config_in0.read();\n')
		code.append(indent(3) + 'LAYER_ROW_IL_FACTOR = fifo_config_in0.read();\n')
		code.append(indent(3) + 'LAYER_COL_IL_FACTOR = fifo_config_in0.read();\n')
		code.append(indent(3) + 'LAYER_STRIDE = fifo_config_in0.read();\n')
		code.append(indent(3) + 'LAYER_BATCH = fifo_config_in0.read();\n\n')

		code.append(indent(3) + 'LAYER_CONV_TYPE = fifo_config_in0.read();\n')
		code.append(indent(3) + 'FILTER_D0_H = fifo_config_in0.read();\n')
		code.append(indent(3) + 'FILTER_D0_W = fifo_config_in0.read();\n')
		code.append(indent(3) + 'FILTER_D1_H = fifo_config_in0.read();\n')
		code.append(indent(3) + 'FILTER_D1_W = fifo_config_in0.read();\n')
		code.append(indent(3) + 'LAYER_DILATION_RATE = fifo_config_in0.read();\n')
		code.append(indent(3) + 'LAYER_TCONV_STRIDE = fifo_config_in0.read();\n')
		code.append(indent(3) + 'K_NUM = fifo_config_in0.read();\n')
		code.append(indent(3) + 'KH = fifo_config_in0.read();\n')
		code.append(indent(3) + 'KW = fifo_config_in0.read();\n')


	#   code.append(indent(3) + '// dummpy read\n')
	# #   code.append(indent(3) + 'LAYER_IN_NUM = fifo_config_in1.read();\n')
	# #   code.append(indent(3) + 'LAYER_OUT_NUM = fifo_config_in1.read();\n')
	#   code.append(indent(3) + 'LAYER_IN_NUM_T = fifo_config_in1.read();\n')
	#   code.append(indent(3) + 'LAYER_OUT_NUM_T = fifo_config_in1.read();\n')
	#   code.append(indent(3) + 'LAYER_IN_IMG_H_T = fifo_config_in1.read();\n')
	#   code.append(indent(3) + 'LAYER_IN_IMG_W_T = fifo_config_in1.read();\n')
	# #   code.append(indent(3) + 'LAYER_OUT_IMG_H = fifo_config_in1.read();\n')
	# #   code.append(indent(3) + 'LAYER_OUT_IMG_W = fifo_config_in1.read();\n')
	#   code.append(indent(3) + 'LAYER_FILTER_S_H = fifo_config_in1.read();\n')
	#   code.append(indent(3) + 'LAYER_FILTER_S_W = fifo_config_in1.read();\n')
	#   code.append(indent(3) + 'LAYER_TASK_NUM1 = fifo_config_in1.read();\n')
	#   code.append(indent(3) + 'LAYER_TASK_NUM2 = fifo_config_in1.read();\n')
	#   code.append(indent(3) + 'LAYER_LOCAL_ACCUM_NUM = fifo_config_in1.read();\n')
	#   code.append(indent(3) + 'LAYER_LOCAL_REG_NUM = fifo_config_in1.read();\n')
	#   code.append(indent(3) + 'LAYER_ROW_IL_FACTOR = fifo_config_in1.read();\n')
	#   code.append(indent(3) + 'LAYER_COL_IL_FACTOR = fifo_config_in1.read();\n')
	#   code.append(indent(3) + 'LAYER_STRIDE = fifo_config_in1.read();\n')
	#   code.append(indent(3) + 'LAYER_BATCH = fifo_config_in1.read();\n\n')

	#   code.append(indent(3) + 'LAYER_CONV_TYPE = fifo_config_in1.read();\n')
	#   code.append(indent(3) + 'FILTER_D0_H = fifo_config_in1.read();\n')
	#   code.append(indent(3) + 'FILTER_D0_W = fifo_config_in1.read();\n')
	#   code.append(indent(3) + 'FILTER_D1_H = fifo_config_in1.read();\n')
	#   code.append(indent(3) + 'FILTER_D1_W = fifo_config_in1.read();\n')
	#   code.append(indent(3) + 'LAYER_DILATION_RATE = fifo_config_in1.read();\n')
	#   code.append(indent(3) + 'LAYER_TCONV_STRIDE = fifo_config_in1.read();\n')
	#   code.append(indent(3) + 'K_NUM = fifo_config_in1.read();\n')
	#   code.append(indent(3) + 'KH = fifo_config_in1.read();\n')
	#   code.append(indent(3) + 'KW = fifo_config_in1.read();\n')


		code.append(indent(3) + '// write out configurations\n')
	#   code.append(indent(3) + 'fifo_config_out.write(LAYER_IN_NUM);\n')
	#   code.append(indent(3) + 'fifo_config_out.write(LAYER_OUT_NUM);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_IN_NUM_T);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_OUT_NUM_T);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_IN_IMG_H_T);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_IN_IMG_W_T);\n')
	#   code.append(indent(3) + 'fifo_config_out.write(LAYER_OUT_IMG_H);\n')
	#   code.append(indent(3) + 'fifo_config_out.write(LAYER_OUT_IMG_W);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_FILTER_S_H);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_FILTER_S_W);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_TASK_NUM1);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_TASK_NUM2);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_LOCAL_REG_NUM);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_ROW_IL_FACTOR);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_COL_IL_FACTOR);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_STRIDE);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_BATCH);\n\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_CONV_TYPE);\n')
		code.append(indent(3) + 'fifo_config_out.write(FILTER_D0_H);\n')
		code.append(indent(3) + 'fifo_config_out.write(FILTER_D0_W);\n')
		code.append(indent(3) + 'fifo_config_out.write(FILTER_D1_H);	\n')
		code.append(indent(3) + 'fifo_config_out.write(FILTER_D1_W);	\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_DILATION_RATE);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_TCONV_STRIDE);\n')
		code.append(indent(3) + 'fifo_config_out.write(K_NUM);\n')
		code.append(indent(3) + 'fifo_config_out.write(KH);\n')
		code.append(indent(3) + 'fifo_config_out.write(KW);\n')


		code.append(indent(3) + 'layer_start = 0;\n')
		code.append(indent(2) + '}\n\n')

		code.append(indent(2) + 'if (initial_round == 0){\n')
		code.append(indent(3) + var_prefix + 'Data' + str(idx) + 'ReadData0(\n')
		code.append(indent(3 + 1) + 'ping_buffer,\n')
		for gs in range(desp['FC_GROUP_FACTOR'][idx]):
			if gs < desp['FC_GROUP_FACTOR'][idx] - 1:
				code.append(indent(3 + 1) + 'fifo_collect_' + str(gs) + ',\n')
			else:
				code.append(indent(3 + 1) + 'fifo_collect_' + str(gs) + ',\n')
		code.append(indent(3 + 1) + 'LAYER_IN_IMG_H_T,\n')
		code.append(indent(3 + 1) + 'LAYER_ROW_IL_FACTOR,\n')
		code.append(indent(3 + 1) + 'LAYER_COL_IL_FACTOR,\n')
		code.append(indent(3 + 1) + 'LAYER_STRIDE,\n')
		code.append(indent(3 + 1) + 'LAYER_TCONV_STRIDE\n')
		code.append(indent(3) + ');\n')
		code.append(indent(2) + '} else {\n')
		code.append(indent(3) + 'if (initial_round % 2 == 1){\n')
		code.append(indent(4) + var_prefix + 'Data' + str(idx) + 'ReadData0(\n')
		code.append(indent(4 + 1) + 'pong_buffer,\n')
		for gs in range(desp['FC_GROUP_FACTOR'][idx]):
			if gs < desp['FC_GROUP_FACTOR'][idx] - 1:
				code.append(indent(4 + 1) + 'fifo_collect_' + str(gs) + ',\n')
			else:
				code.append(indent(4 + 1) + 'fifo_collect_' + str(gs) + ',\n')
		code.append(indent(4 + 1) + 'LAYER_IN_IMG_H_T,\n')
		code.append(indent(4 + 1) + 'LAYER_ROW_IL_FACTOR,\n')
		code.append(indent(4 + 1) + 'LAYER_COL_IL_FACTOR,\n')
		code.append(indent(4 + 1) + 'LAYER_STRIDE,\n')
		code.append(indent(4 + 1) + 'LAYER_TCONV_STRIDE\n')
		code.append(indent(4) + ');\n')

		code.append(indent(4) + var_prefix + 'Data' + str(idx) + 'WriteData0(ping_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_OUT_NUM_T_prev, LAYER_IN_IMG_H_T_prev, LAYER_IN_IMG_W_T_prev, LAYER_COL_IL_FACTOR_prev, LAYER_STRIDE_prev, LAYER_TCONV_STRIDE_prev);\n')
		code.append(indent(3) + '} else {\n')
		code.append(indent(4) + var_prefix + 'Data' + str(idx) + 'ReadData0(\n')
		code.append(indent(4 + 1) + 'ping_buffer,\n')
		for gs in range(desp['FC_GROUP_FACTOR'][idx]):
			if gs < desp['FC_GROUP_FACTOR'][idx] - 1:
				code.append(indent(4 + 1) + 'fifo_collect_' + str(gs) + ',\n')
			else:
				code.append(indent(4 + 1) + 'fifo_collect_' + str(gs) + ',\n')
		code.append(indent(4 + 1) + 'LAYER_IN_IMG_H_T,\n')
		code.append(indent(4 + 1) + 'LAYER_ROW_IL_FACTOR,\n')
		code.append(indent(4 + 1) + 'LAYER_COL_IL_FACTOR,\n')
		code.append(indent(4 + 1) + 'LAYER_STRIDE,\n')
		code.append(indent(4 + 1) + 'LAYER_TCONV_STRIDE\n')
		code.append(indent(4) + ');\n')

		code.append(indent(4) + var_prefix + 'Data' + str(idx) + 'WriteData0(pong_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_OUT_NUM_T_prev, LAYER_IN_IMG_H_T_prev, LAYER_IN_IMG_W_T_prev, LAYER_COL_IL_FACTOR_prev, LAYER_STRIDE_prev, LAYER_TCONV_STRIDE_prev);\n')

		code.append(indent(3) + '}\n')
		code.append(indent(2) + '}\n')
		code.append(indent(2) + 'initial_round++;\n')
		code.append(indent(2) + 'LAYER_OUT_NUM_T_prev = LAYER_OUT_NUM_T;\n')
		code.append(indent(2) + 'LAYER_IN_IMG_H_T_prev = LAYER_IN_IMG_H_T;\n')
		code.append(indent(2) + 'LAYER_IN_IMG_W_T_prev = LAYER_IN_IMG_W_T;\n')
		code.append(indent(2) + 'LAYER_COL_IL_FACTOR_prev = LAYER_COL_IL_FACTOR;\n')
		code.append(indent(2) + 'LAYER_STRIDE_prev = LAYER_STRIDE;\n')
		code.append(indent(2) + 'LAYER_TCONV_STRIDE_prev = LAYER_TCONV_STRIDE;\n\n')

		indent_level = 2
		code.append(indent(indent_level) + 'task_iter += 1;\n')
		code.append(indent(indent_level) + 'if (task_iter == LAYER_TASK_NUM2){\n')
		code.append(indent(indent_level + 1) + 'task_iter = 0;\n')
		code.append(indent(indent_level + 1) + 'layer_iter += 1;\n')
		code.append(indent(indent_level + 1) + 'layer_start = 1;\n')
		code.append(indent(indent_level + 1) + 'if (layer_iter == LAYER_BATCH){\n')
		code.append(indent(indent_level + 2) + 'layer_iter = 0;\n')
		code.append(indent(indent_level + 2) + 'done = 1;\n')
		code.append(indent(indent_level + 1) + '}\n')
		code.append(indent(indent_level) + '}\n')

	#   code.append(indent(indent_level) + 'out_h_iter += %sOUT_IMG_H_T;\n' % (var_prefix))
	#   code.append(indent(indent_level) + 'if (out_h_iter >= LAYER_OUT_IMG_H){\n')
	#   code.append(indent(indent_level + 1) + 'out_h_iter = 0;\n')
	#   code.append(indent(indent_level + 1) + 'out_w_iter += %sOUT_IMG_W_T;\n' % (var_prefix))
	#   code.append(indent(indent_level + 1) + 'if (out_w_iter >= LAYER_OUT_IMG_W){\n')
	#   code.append(indent(indent_level + 2) + 'out_w_iter = 0;\n')
	#   code.append(indent(indent_level + 2) + 'out_num_iter += LAYER_OUT_NUM_T;\n')
	#   code.append(indent(indent_level + 2) + 'if (out_num_iter >= LAYER_OUT_NUM){\n')
	#   code.append(indent(indent_level + 3) + 'out_num_iter = 0;\n')
	#   code.append(indent(indent_level + 3) + 'layer_iter += 1;\n')
	#   code.append(indent(indent_level + 3) + 'layer_start = 1;\n')
	#   code.append(indent(indent_level + 3) + 'if (layer_iter == LAYER_BATCH){\n')
	#   code.append(indent(indent_level + 4) + 'layer_iter = 0;\n')
	#   code.append(indent(indent_level + 4) + 'done = 1;\n')
	#   code.append(indent(indent_level + 3) + '}\n')
	#   code.append(indent(indent_level + 2) + '}\n')
	#   code.append(indent(indent_level + 1) + '}\n')
	#   code.append(indent(indent_level) + '}\n')

		code.append(indent(1) + '}\n\n')

		code.append(indent(1) + 'if (initial_round % 2 == 1){\n')
		code.append(indent(2) + var_prefix + 'Data' + str(idx) + 'WriteData0(ping_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_OUT_NUM_T_prev, LAYER_IN_IMG_H_T_prev, LAYER_IN_IMG_W_T_prev, LAYER_COL_IL_FACTOR_prev, LAYER_STRIDE_prev, LAYER_TCONV_STRIDE_prev);\n')
		code.append(indent(1) + '} else {\n')
		code.append(indent(2) + var_prefix + 'Data' + str(idx) + 'WriteData0(pong_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_OUT_NUM_T_prev, LAYER_IN_IMG_H_T_prev, LAYER_IN_IMG_W_T_prev, LAYER_COL_IL_FACTOR_prev, LAYER_STRIDE_prev, LAYER_TCONV_STRIDE_prev);\n')
		code.append(indent(1) + '}\n')
		code.append(indent(1) + '}\n')
		code.append(indent(1) + '  inst++;\n')
		code.append(indent(1) + '  if(inst == inst_count){\n')
		code.append(indent(1) + '    inst_done = 1;\n')
		code.append(indent(1) + '  }\n')
		code.append(indent(1) + '}\n')
		code.append('}\n\n')

		code.append('void ' + var_prefix + 'DataCollect' + str(idx) + 'Engine0_wrapper(\n')
		code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_in,\n')
		code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_out,\n')
		for gs in range(desp['FC_GROUP_FACTOR'][idx]):
			code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo_collect_' + str(gs) + ',\n')
		code.append(indent(1) + 'unsigned int engine_id,\n')
		code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in0,\n')
		# code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in1,\n')
		code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out\n')
		code.append('){\n')
		code.append(indent(1) + var_prefix + 'DataCollect' + str(idx) + 'Engine0(\n')
		code.append(indent(2) + 'fifo_transfer_in,\n')
		code.append(indent(2) + 'fifo_transfer_out,\n')
		for gs in range(desp['FC_GROUP_FACTOR'][idx]):
			code.append(indent(2) + 'fifo_collect_' + str(gs) + ',\n')
		code.append(indent(2) + 'engine_id,\n')
		code.append(indent(2) + 'fifo_config_in0,\n')
		# code.append(indent(2) + 'fifo_config_in1,\n')
		code.append(indent(2) + 'fifo_config_out\n')
		code.append(indent(1) + ');\n')

		code.append('}\n\n')

			#engine_last
		code.append('void ' + var_prefix + 'DataCollect' + str(idx) + 'EngineLast(\n')
	#   code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_in,\n')
		code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_out,\n')
		for gs in range(desp['FC_GROUP_FACTOR'][idx]):
			code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'PEChannelType> &fifo_collect_' + str(gs) + ',\n')
		code.append(indent(1) + 'unsigned int engine_id,\n')
		code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in0,\n')
	#   code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in1,\n')
		code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out\n')
		code.append('){\n')
	#   code.append('#pragma HLS DATA_PACK variable=fifo_transfer_in\n')
		code.append('#pragma HLS DATA_PACK variable=fifo_transfer_out\n')
		for gs in range(desp['FC_GROUP_FACTOR'][idx]):
			code.append('#pragma HLS DATA_PACK variable=fifo_collect_' + str(gs) + '\n')
		code.append('#pragma HLS INLINE off\n\n')
		code.append(indent(1) + 'bool inst_done = 0;\n')
		code.append(indent(1) + 'uint inst = 0;\n')
		code.append(indent(1) + 'int inst_count = fifo_config_in0.read();\n')
		code.append(indent(1) + 'fifo_config_out.write(inst_count);\n')
		code.append(indent(1) + 'while(!inst_done){\n')
		code.append(indent(1) + 'uint CONV_EN = fifo_config_in0.read();\n')
		code.append(indent(1) + 'fifo_config_out.write(CONV_EN);\n')
		code.append(indent(1) + 'if(CONV_EN){\n')
		code.append(indent(1) + 'uint LAYER_OUT_NUM_T_prev;\n')
		code.append(indent(1) + 'uint LAYER_IN_IMG_H_T_prev;\n')
		code.append(indent(1) + 'uint LAYER_IN_IMG_W_T_prev;\n')
		code.append(indent(1) + 'uint LAYER_COL_IL_FACTOR_prev;\n')
		code.append(indent(1) + 'uint LAYER_STRIDE_prev;\n')
		code.append(indent(1) + 'uint LAYER_TCONV_STRIDE_prev;\n')
		code.append(indent(1) + 'uint task_iter = 0;\n')

		code.append(indent(1) + '// read in configurations\n')
		code.append(indent(1) + 'uint LAYER_IN_NUM_T = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint LAYER_OUT_NUM_T = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint LAYER_IN_IMG_H_T = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint LAYER_IN_IMG_W_T = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint LAYER_FILTER_S_H = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint LAYER_FILTER_S_W = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint LAYER_TASK_NUM1 = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint LAYER_TASK_NUM2 = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint LAYER_LOCAL_REG_NUM = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint LAYER_ROW_IL_FACTOR = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint LAYER_COL_IL_FACTOR = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint LAYER_STRIDE = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint LAYER_BATCH = fifo_config_in0.read();\n\n')

		code.append(indent(1) + 'uint LAYER_CONV_TYPE = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint FILTER_D0_H = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint FILTER_D0_W = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint FILTER_D1_H = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint FILTER_D1_W = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint LAYER_DILATION_RATE = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint LAYER_TCONV_STRIDE = fifo_config_in0.read();\n')
		code.append(indent(1) + 'uint K_NUM = fifo_config_in0.read();\n')
		code.append(indent(1) + 'ap_uint<32> KH = fifo_config_in0.read();\n')
		code.append(indent(1) + 'ap_uint<32> KW = fifo_config_in0.read();\n')


		code.append(indent(1) + '// write out configurations\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_IN_NUM_T);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_OUT_NUM_T);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_IN_IMG_H_T);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_IN_IMG_W_T);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_FILTER_S_H);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_FILTER_S_W);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_TASK_NUM1);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_TASK_NUM2);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_LOCAL_REG_NUM);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_ROW_IL_FACTOR);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_COL_IL_FACTOR);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_STRIDE);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_BATCH);\n\n')
		
		code.append(indent(1) + 'fifo_config_out.write(LAYER_CONV_TYPE);\n')
		code.append(indent(1) + 'fifo_config_out.write(FILTER_D0_H);\n')
		code.append(indent(1) + 'fifo_config_out.write(FILTER_D0_W);\n')
		code.append(indent(1) + 'fifo_config_out.write(FILTER_D1_H);	\n')
		code.append(indent(1) + 'fifo_config_out.write(FILTER_D1_W);	\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_DILATION_RATE);\n')
		code.append(indent(1) + 'fifo_config_out.write(LAYER_TCONV_STRIDE);\n')
		code.append(indent(1) + 'fifo_config_out.write(K_NUM);\n')
		code.append(indent(1) + 'fifo_config_out.write(KH);\n')
		code.append(indent(1) + 'fifo_config_out.write(KW);\n')




		code.append(indent(1) + var_prefix + 'data_t' + str(idx) + ' ping_buffer[' + var_prefix + 'DATA' + str(idx) + \
				'_FC_GROUP_FACTOR][' + var_prefix + 'DATA' + str(idx) + '_BUF_SIZE / %sDATA%d_FC_SIMD_FACTOR][%sDATA%d_FC_SIMD_FACTOR];\n' % (var_prefix, idx, var_prefix, idx))
		code.append(indent(1) + var_prefix + 'data_t' + str(idx) + ' pong_buffer[' + var_prefix + 'DATA' + str(idx) + \
				'_FC_GROUP_FACTOR][' + var_prefix + 'DATA' + str(idx) + '_BUF_SIZE / %sDATA%d_FC_SIMD_FACTOR][%sDATA%d_FC_SIMD_FACTOR];\n' % (var_prefix, idx, var_prefix, idx))
		code.append(indent(1) + '#if U1_DataCollect2EngineLast_MEM == 0\n')
		code.append(indent(2) + '#pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=BRAM\n')
		code.append(indent(2) + '#pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=BRAM\n')
		code.append(indent(1) + '#elif U1_DataCollect2EngineLast_MEM == 1\n')
		code.append(indent(2) + '#pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=URAM\n')
		code.append(indent(2) + '#pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=URAM\n')
			#code.append(indent(1) + '#elif MEM_TYPE == 2\n')
			#code.append(indent(2) + '#pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=BRAM\n')
			#code.append(indent(2) + '#pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=BRAM\n')
			#code.append(indent(1) + '#elif MEM_TYPE == 3\n')
			#code.append(indent(2) + '#pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=BRAM\n')
			#code.append(indent(2) + '#pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=BRAM\n')
		code.append(indent(1) + '#endif\n')
		code.append('#pragma HLS ARRAY_PARTITION variable=ping_buffer dim=3 complete\n')
		code.append('#pragma HLS ARRAY_PARTITION variable=pong_buffer dim=3 complete\n')
		code.append('#pragma HLS DATA_PACK variable=ping_buffer\n')
		code.append('#pragma HLS DATA_PACK variable=pong_buffer\n')
		code.append('\n')

		code.append(indent(1) + 'unsigned int initial_round = 0;\n')
		code.append(indent(1) + 'bool done = 0;\n')
		w = cal_width(desp['PARAMETERS']['LAYER_BATCH'])
		code.append(indent(1) + 'ap_uint<%d> layer_iter = 0;\n' % (w))
		code.append(indent(1) + 'bool layer_start = 0;\n')
		code.append(indent(1) + 'while(!done){\n')
		code.append(indent(2) + 'if (layer_start){\n')
		code.append(indent(3) + '// read in configurations\n')
		code.append(indent(3) + 'LAYER_IN_NUM_T = fifo_config_in0.read();\n')
		code.append(indent(3) + 'LAYER_OUT_NUM_T = fifo_config_in0.read();\n')
		code.append(indent(3) + 'LAYER_IN_IMG_H_T = fifo_config_in0.read();\n')
		code.append(indent(3) + 'LAYER_IN_IMG_W_T = fifo_config_in0.read();\n')
		code.append(indent(3) + 'LAYER_FILTER_S_H = fifo_config_in0.read();\n')
		code.append(indent(3) + 'LAYER_FILTER_S_W = fifo_config_in0.read();\n')
		code.append(indent(3) + 'LAYER_TASK_NUM1 = fifo_config_in0.read();\n')
		code.append(indent(3) + 'LAYER_TASK_NUM2 = fifo_config_in0.read();\n')
		code.append(indent(3) + 'LAYER_LOCAL_ACCUM_NUM = fifo_config_in0.read();\n')
		code.append(indent(3) + 'LAYER_LOCAL_REG_NUM = fifo_config_in0.read();\n')
		code.append(indent(3) + 'LAYER_ROW_IL_FACTOR = fifo_config_in0.read();\n')
		code.append(indent(3) + 'LAYER_COL_IL_FACTOR = fifo_config_in0.read();\n')
		code.append(indent(3) + 'LAYER_STRIDE = fifo_config_in0.read();\n')
		code.append(indent(3) + 'LAYER_BATCH = fifo_config_in0.read();\n\n')
		code.append(indent(3) + 'LAYER_CONV_TYPE = fifo_config_in0.read();\n')
		code.append(indent(3) + 'FILTER_D0_H = fifo_config_in0.read();\n')
		code.append(indent(3) + 'FILTER_D0_W = fifo_config_in0.read();\n')
		code.append(indent(3) + 'FILTER_D1_H = fifo_config_in0.read();\n')
		code.append(indent(3) + 'FILTER_D1_W = fifo_config_in0.read();\n')
		code.append(indent(3) + 'LAYER_DILATION_RATE = fifo_config_in0.read();\n')
		code.append(indent(3) + 'LAYER_TCONV_STRIDE = fifo_config_in0.read();\n')
		code.append(indent(3) + 'K_NUM = fifo_config_in0.read();\n')
		code.append(indent(3) + 'KH = fifo_config_in0.read();\n')
		code.append(indent(3) + 'KW = fifo_config_in0.read();\n')


		code.append(indent(3) + '// write out configurations\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_IN_NUM_T);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_OUT_NUM_T);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_IN_IMG_H_T);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_IN_IMG_W_T);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_FILTER_S_H);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_FILTER_S_W);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_TASK_NUM1);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_TASK_NUM2);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_LOCAL_REG_NUM);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_ROW_IL_FACTOR);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_COL_IL_FACTOR);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_STRIDE);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_BATCH);\n\n')

		code.append(indent(3) + 'fifo_config_out.write(LAYER_CONV_TYPE);\n')
		code.append(indent(3) + 'fifo_config_out.write(FILTER_D0_H);\n')
		code.append(indent(3) + 'fifo_config_out.write(FILTER_D0_W);\n')
		code.append(indent(3) + 'fifo_config_out.write(FILTER_D1_H);	\n')
		code.append(indent(3) + 'fifo_config_out.write(FILTER_D1_W);	\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_DILATION_RATE);\n')
		code.append(indent(3) + 'fifo_config_out.write(LAYER_TCONV_STRIDE);\n')
		code.append(indent(3) + 'fifo_config_out.write(K_NUM);\n')
		code.append(indent(3) + 'fifo_config_out.write(KH);\n')
		code.append(indent(3) + 'fifo_config_out.write(KW);\n')


		code.append(indent(3) + 'layer_start = 0;\n')
		code.append(indent(2) + '}\n\n')

		code.append(indent(2) + 'if (initial_round == 0){\n')
		code.append(indent(3) + var_prefix + 'Data' + str(idx) + 'ReadData0(\n')
		code.append(indent(3 + 1) + 'ping_buffer,\n')
		for gs in range(desp['FC_GROUP_FACTOR'][idx]):
			if gs < desp['FC_GROUP_FACTOR'][idx] - 1:
				code.append(indent(3 + 1) + 'fifo_collect_' + str(gs) + ',\n')
			else:
				code.append(indent(3 + 1) + 'fifo_collect_' + str(gs) + ',\n')
		code.append(indent(3 + 1) + 'LAYER_IN_IMG_H_T,\n')
		code.append(indent(3 + 1) + 'LAYER_ROW_IL_FACTOR,\n')
		code.append(indent(3 + 1) + 'LAYER_COL_IL_FACTOR,\n')
		code.append(indent(3 + 1) + 'LAYER_STRIDE,\n')
		code.append(indent(3 + 1) + 'LAYER_TCONV_STRIDE\n')
		code.append(indent(3) + ');\n')
		code.append(indent(2) + '} else {\n')
		code.append(indent(3) + 'if (initial_round % 2 == 1){\n')
		code.append(indent(4) + var_prefix + 'Data' + str(idx) + 'ReadData0(\n')
		code.append(indent(4 + 1) + 'pong_buffer,\n')
		for gs in range(desp['FC_GROUP_FACTOR'][idx]):
			if gs < desp['FC_GROUP_FACTOR'][idx] - 1:
				code.append(indent(4 + 1) + 'fifo_collect_' + str(gs) + ',\n')
			else:
				code.append(indent(4 + 1) + 'fifo_collect_' + str(gs) + ',\n')
		code.append(indent(4 + 1) + 'LAYER_IN_IMG_H_T,\n')
		code.append(indent(4 + 1) + 'LAYER_ROW_IL_FACTOR,\n')
		code.append(indent(4 + 1) + 'LAYER_COL_IL_FACTOR,\n')
		code.append(indent(4 + 1) + 'LAYER_STRIDE,\n')
		code.append(indent(4 + 1) + 'LAYER_TCONV_STRIDE\n')
		code.append(indent(4) + ');\n')

		code.append(indent(4) + var_prefix + 'Data' + str(idx) + 'WriteDataLast(ping_buffer, fifo_transfer_out, engine_id, LAYER_OUT_NUM_T_prev, LAYER_IN_IMG_H_T_prev, LAYER_IN_IMG_W_T_prev, LAYER_COL_IL_FACTOR_prev, LAYER_STRIDE_prev, LAYER_TCONV_STRIDE_prev);\n')
		code.append(indent(3) + '} else {\n')
		code.append(indent(4) + var_prefix + 'Data' + str(idx) + 'ReadData0(\n')
		code.append(indent(4 + 1) + 'ping_buffer,\n')
		for gs in range(desp['FC_GROUP_FACTOR'][idx]):
			if gs < desp['FC_GROUP_FACTOR'][idx] - 1:
				code.append(indent(4 + 1) + 'fifo_collect_' + str(gs) + ',\n')
			else:
				code.append(indent(4 + 1) + 'fifo_collect_' + str(gs) + ',\n')
		code.append(indent(4 + 1) + 'LAYER_IN_IMG_H_T,\n')
		code.append(indent(4 + 1) + 'LAYER_ROW_IL_FACTOR,\n')
		code.append(indent(4 + 1) + 'LAYER_COL_IL_FACTOR,\n')
		code.append(indent(4 + 1) + 'LAYER_STRIDE,\n')
		code.append(indent(4 + 1) + 'LAYER_TCONV_STRIDE\n')
		code.append(indent(4) + ');\n')

		code.append(indent(4) + var_prefix + 'Data' + str(idx) + 'WriteDataLast(pong_buffer, fifo_transfer_out, engine_id, LAYER_OUT_NUM_T_prev, LAYER_IN_IMG_H_T_prev, LAYER_IN_IMG_W_T_prev, LAYER_COL_IL_FACTOR_prev, LAYER_STRIDE_prev, LAYER_TCONV_STRIDE_prev);\n')

		code.append(indent(3) + '}\n')
		code.append(indent(2) + '}\n')
		code.append(indent(2) + 'initial_round++;\n')
		code.append(indent(2) + 'LAYER_OUT_NUM_T_prev = LAYER_OUT_NUM_T;\n')
		code.append(indent(2) + 'LAYER_IN_IMG_H_T_prev = LAYER_IN_IMG_H_T;\n')
		code.append(indent(2) + 'LAYER_IN_IMG_W_T_prev = LAYER_IN_IMG_W_T;\n')
		code.append(indent(2) + 'LAYER_COL_IL_FACTOR_prev = LAYER_COL_IL_FACTOR;\n')
		code.append(indent(2) + 'LAYER_STRIDE_prev = LAYER_STRIDE;\n')
		code.append(indent(2) + 'LAYER_TCONV_STRIDE_prev = LAYER_TCONV_STRIDE;\n')

		indent_level = 2
		code.append(indent(indent_level) + 'task_iter += 1;\n')
		code.append(indent(indent_level) + 'if (task_iter == LAYER_TASK_NUM2){\n')
		code.append(indent(indent_level + 1) + 'task_iter = 0;\n')
		code.append(indent(indent_level + 1) + 'layer_iter += 1;\n')
		code.append(indent(indent_level + 1) + 'layer_start = 1;\n')
		code.append(indent(indent_level + 1) + 'if (layer_iter == LAYER_BATCH){\n')
		code.append(indent(indent_level + 2) + 'layer_iter = 0;\n')
		code.append(indent(indent_level + 2) + 'done = 1;\n')
		code.append(indent(indent_level + 1) + '}\n')
		code.append(indent(indent_level) + '}\n')

	#   code.append(indent(indent_level) + 'out_h_iter += %sOUT_IMG_H_T;\n' % (var_prefix))
	#   code.append(indent(indent_level) + 'if (out_h_iter >= LAYER_OUT_IMG_H){\n')
	#   code.append(indent(indent_level + 1) + 'out_h_iter = 0;\n')
	#   code.append(indent(indent_level + 1) + 'out_w_iter += %sOUT_IMG_W_T;\n' % (var_prefix))
	#   code.append(indent(indent_level + 1) + 'if (out_w_iter >= LAYER_OUT_IMG_W){\n')
	#   code.append(indent(indent_level + 2) + 'out_w_iter = 0;\n')
	#   code.append(indent(indent_level + 2) + 'out_num_iter += LAYER_OUT_NUM_T;\n')
	#   code.append(indent(indent_level + 2) + 'if (out_num_iter >= LAYER_OUT_NUM){\n')
	#   code.append(indent(indent_level + 3) + 'out_num_iter = 0;\n')
	#   code.append(indent(indent_level + 3) + 'layer_iter += 1;\n')
	#   code.append(indent(indent_level + 3) + 'layer_start = 1;\n')
	#   code.append(indent(indent_level + 3) + 'if (layer_iter == LAYER_BATCH){\n')
	#   code.append(indent(indent_level + 4) + 'layer_iter = 0;\n')
	#   code.append(indent(indent_level + 4) + 'done = 1;\n')
	#   code.append(indent(indent_level + 3) + '}\n')
	#   code.append(indent(indent_level + 2) + '}\n')
	#   code.append(indent(indent_level + 1) + '}\n')
	#   code.append(indent(indent_level) + '}\n')

		code.append(indent(1) + '}\n\n')

		code.append(indent(1) + 'if (initial_round % 2 == 1){\n')
		code.append(indent(2) + var_prefix + 'Data' + str(idx) + 'WriteDataLast(ping_buffer, fifo_transfer_out, engine_id, LAYER_OUT_NUM_T_prev, LAYER_IN_IMG_H_T_prev, LAYER_IN_IMG_W_T_prev, LAYER_COL_IL_FACTOR_prev, LAYER_STRIDE_prev, LAYER_TCONV_STRIDE_prev);\n')
		code.append(indent(1) + '} else {\n')
		code.append(indent(2) + var_prefix + 'Data' + str(idx) + 'WriteDataLast(pong_buffer, fifo_transfer_out, engine_id, LAYER_OUT_NUM_T_prev, LAYER_IN_IMG_H_T_prev, LAYER_IN_IMG_W_T_prev, LAYER_COL_IL_FACTOR_prev, LAYER_STRIDE_prev, LAYER_TCONV_STRIDE_prev);\n')
		code.append(indent(1) + '}\n')
		code.append(indent(1) + '}\n')
		code.append(indent(1) + '  inst++;\n')
		code.append(indent(1) + '  if(inst == inst_count){\n')
		code.append(indent(1) + '    inst_done = 1;\n')
		code.append(indent(1) + '  }\n')
		code.append('  }\n')
		code.append('}\n\n')

		idx += 1
	return code

def loader(desp, config):
	code = []
	var_prefix = 'U%s' %(desp['KERNEL_ID']) + '_'
	idx = 0
	for op_name in desp['OP_NAME']:
			#if desp['APP_NAME'] == 'cnn':
	#TODO: temporary solution
			#shim
	#      if idx == 0:
	#        code.append('void ' + var_prefix + 'DataFeed' + str(idx) + 'Head_Shim(\n')
	#        code.append(indent(1) + var_prefix + 'bus_t' + str(idx) + '* ' + op_name + ',\n')
	#        code.append(indent(1) + 'stream<ap_uint<' + var_prefix + 'DATA' + str(idx) + '_WIDTH * ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR> > &fifo_transfer_' + op_name + ',\n')
	#        code.append(indent(1) + 'uint LAYER_IN_NUM,\n')
	#        code.append(indent(1) + 'uint LAYER_OUT_NUM,\n')
	#        code.append(indent(1) + 'uint LAYER_IN_NUM_T,\n')
	#        code.append(indent(1) + 'uint LAYER_OUT_NUM_T,\n')
	#        code.append(indent(1) + 'uint LAYER_IN_IMG_H,\n')
	#        code.append(indent(1) + 'uint LAYER_IN_IMG_W,\n')
	#        code.append(indent(1) + 'uint LAYER_OUT_IMG_H,\n')
	#        code.append(indent(1) + 'uint LAYER_OUT_IMG_W,\n')
	#        code.append(indent(1) + 'uint LAYER_IN_IMG_H_T,\n')
	#        code.append(indent(1) + 'uint LAYER_IN_IMG_W_T,\n')
	#        code.append(indent(1) + 'ap_uint<8> LAYER_FILTER_S_H,\n')
	#        code.append(indent(1) + 'ap_uint<8> LAYER_FILTER_S_W,\n')
	#        code.append(indent(1) + 'uint LAYER_STRIDE,\n')
	#        code.append(indent(1) + 'uint LAYER_BATCH,\n')
	#        code.append(indent(1) + 'tapa::ostream<%sConfigInst> &fifo_kernel_config_out\n' % (var_prefix))
	#        code.append('){\n')
	#        code.append('#pragma HLS INLINE off\n\n')

	#        code.append(indent(1) + 'uint LAYER_TASK_NUM1 = (LAYER_IN_NUM / LAYER_IN_NUM_T) * (LAYER_OUT_NUM / LAYER_OUT_NUM_T) * (LAYER_OUT_IMG_H / LAYER_IN_IMG_H_T * LAYER_STRIDE) * (LAYER_OUT_IMG_W / LAYER_IN_IMG_W_T * LAYER_STRIDE);\n')
	#        code.append(indent(1) + 'uint LAYER_TASK_NUM2 = (LAYER_OUT_NUM / LAYER_OUT_NUM_T) * (LAYER_OUT_IMG_H / LAYER_IN_IMG_H_T * LAYER_STRIDE) * (LAYER_OUT_IMG_W / LAYER_IN_IMG_W_T * LAYER_STRIDE);\n')
	#        code.append(indent(1) + 'uint LAYER_LOCAL_ACCUM_NUM = LAYER_IN_NUM_T / %sSIMD_FACTOR * LAYER_FILTER_S * LAYER_FILTER_S_H;\n' %(var_prefix))
	#        code.append(indent(1) + 'uint LAYER_LOCAL_ACCUM_NUM = LAYER_IN_NUM_T / %sSIMD_FACTOR * LAYER_FILTER_S * LAYER_FILTER_S_W;\n' %(var_prefix))
	#        code.append(indent(1) + 'uint LAYER_LOCAL_REG_NUM = (LAYER_IN_IMG_H_T / LAYER_STRIDE) * (LAYER_IN_IMG_W_T / %sSA_COLS / LAYER_STRIDE) * LAYER_OUT_NUM_T / %sSA_ROWS;\n' % (var_prefix, var_prefix))
	#        code.append(indent(1) + 'uint LAYER_ROW_IL_FACTOR = LAYER_OUT_NUM_T / %sSA_ROWS;\n' % (var_prefix))
	#        code.append(indent(1) + 'uint LAYER_COL_IL_FACTOR = LAYER_IN_IMG_W_T / %sSA_COLS / LAYER_STRIDE;\n\n' % (var_prefix))

	#        code.append(indent(1) + 'ap_uint<32> CIN_OFFSET = 0;\n')
	#        code.append(indent(1) + 'ap_uint<32> WEIGHT_OFFSET = 0;\n')
	#        code.append(indent(1) + 'ap_uint<32> BIAS_OFFSET = 0;\n')
	#        code.append(indent(1) + 'ap_uint<32> COUT_OFFSET = 0;\n')
	#        code.append(indent(1) + 'ap_uint<16> FILTER_S1 = LAYER_FILTER_S_H;\n')
	#        code.append(indent(1) + 'ap_uint<16> FILTER_S1 = LAYER_FILTER_S_W;\n')
	#        code.append(indent(1) + 'ap_uint<16> FILTER_S_H = LAYER_FILTER_S_H;\n')
	#        code.append(indent(1) + 'ap_uint<16> FILTER_S_H = LAYER_FILTER_S_W;\n')
	#        code.append(indent(1) + 'ap_uint<16> FILTER_S_W = LAYER_FILTER_S_H;\n')
	#        code.append(indent(1) + 'ap_uint<16> FILTER_S_W = LAYER_FILTER_S_W;\n')
	#        code.append(indent(1) + 'ap_uint<32> STRIDE = LAYER_STRIDE;\n')
	#        code.append(indent(1) + 'ap_uint<32> LAYER_EN = 0;\n')
	#	#       code.append(indent(1) + 'ap_uint<32> LAYER_BATCH = LAYER_BATCH;\n\n')

	#        code.append(indent(1) + 'ap_uint<32> LAYER_IN_NUM_cast = LAYER_IN_NUM;\n')
	#        code.append(indent(1) + 'ap_uint<32> LAYER_OUT_NUM_cast = LAYER_OUT_NUM;\n')
	#        code.append(indent(1) + 'ap_uint<32> LAYER_IN_NUM_T_cast = LAYER_IN_NUM_T;\n')
	#        code.append(indent(1) + 'ap_uint<32> LAYER_OUT_NUM_T_cast = LAYER_OUT_NUM_T;\n')
	#        code.append(indent(1) + 'ap_uint<32> LAYER_IN_IMG_H_T_cast = LAYER_IN_IMG_H_T;\n')
	#        code.append(indent(1) + 'ap_uint<32> LAYER_IN_IMG_W_T_cast = LAYER_IN_IMG_W_T;\n')
	#        code.append(indent(1) + 'ap_uint<32> LAYER_IN_IMG_H_cast = LAYER_IN_IMG_H;\n')
	#        code.append(indent(1) + 'ap_uint<32> LAYER_IN_IMG_W_cast = LAYER_IN_IMG_W;\n')
	#        code.append(indent(1) + 'ap_uint<32> LAYER_OUT_IMG_H_cast = LAYER_OUT_IMG_H;\n')
	#        code.append(indent(1) + 'ap_uint<32> LAYER_OUT_IMG_W_cast = LAYER_OUT_IMG_W;\n')
	#        code.append(indent(1) + 'ap_uint<32> LAYER_BATCH_cast = LAYER_BATCH;\n\n')

	#        code.append(indent(1) + 'ap_uint<32> LAYER_TASK_NUM1_cast = LAYER_TASK_NUM1;\n')
	#        code.append(indent(1) + 'ap_uint<32> LAYER_TASK_NUM2_cast = LAYER_TASK_NUM2;\n')
	#        code.append(indent(1) + 'ap_uint<32> LAYER_LOCAL_ACCUM_NUM_cast = LAYER_LOCAL_ACCUM_NUM;\n')
	#        code.append(indent(1) + 'ap_uint<32> LAYER_LOCAL_REG_NUM_cast = LAYER_LOCAL_REG_NUM;\n')
	#        code.append(indent(1) + 'ap_uint<32> LAYER_ROW_IL_FACTOR_cast = LAYER_ROW_IL_FACTOR;\n')
	#        code.append(indent(1) + 'ap_uint<32> LAYER_COL_IL_FACTOR_cast = LAYER_COL_IL_FACTOR;\n\n')

	#        code.append(indent(1) + var_prefix + 'bus_t%d %s_buf[%sDATA%d_HEAD_BUF_SIZE / %sDATA%d_PACK_FACTOR];\n' % (idx, op_name, var_prefix, idx, var_prefix, idx))
	#        code.append(indent(1) + 'ap_uint<' + var_prefix + 'DATA' + str(idx) + '_WIDTH * ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR> sel_tmp[' + var_prefix + 'DATA' + str(idx) + '_PACK_FACTOR / ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR];\n')
	#        code.append('#pragma HLS ARRAY_PARTITION variable=sel_tmp complete dim=1\n\n')

	#        w = cal_width(desp['PARAMETERS']['LAYER_BATCH'])
	#        code.append(indent(1) + 'for (ap_uint<%d> layer_iter = 0; layer_iter < LAYER_BATCH; layer_iter++){\n' % (w))
	#        code.append(indent(2) + '%sConfigInst inst0 = (LAYER_OUT_IMG_W_cast, LAYER_OUT_IMG_H_cast, LAYER_IN_IMG_W_cast, LAYER_IN_IMG_H_cast, LAYER_OUT_NUM_cast, LAYER_IN_NUM_cast);\n' % (var_prefix))
	#        code.append(indent(2) + '%sConfigInst inst1 = (LAYER_OUT_IMG_W_cast, LAYER_OUT_IMG_H_cast, LAYER_IN_IMG_W_cast, LAYER_IN_IMG_H_cast, LAYER_OUT_NUM_cast, LAYER_IN_NUM_cast);\n' % (var_prefix))
	#        code.append(indent(2) + '%sConfigInst inst2 = (STRIDE, FILTER_S_H, FILTER_S_H1, COUT_OFFSET, BIAS_OFFSET, WEIGHT_OFFSET, CIN_OFFSET);\n' % (var_prefix))
	#        code.append(indent(2) + '%sConfigInst inst2 = (STRIDE, FILTER_S_H, FILTER_S_W1, COUT_OFFSET, BIAS_OFFSET, WEIGHT_OFFSET, CIN_OFFSET);\n' % (var_prefix))
	#        code.append(indent(2) + '%sConfigInst inst2 = (STRIDE, FILTER_S_W, FILTER_S_H1, COUT_OFFSET, BIAS_OFFSET, WEIGHT_OFFSET, CIN_OFFSET);\n' % (var_prefix))
	#        code.append(indent(2) + '%sConfigInst inst2 = (STRIDE, FILTER_S_W, FILTER_S_W1, COUT_OFFSET, BIAS_OFFSET, WEIGHT_OFFSET, CIN_OFFSET);\n' % (var_prefix))
	#        code.append(indent(2) + '%sConfigInst inst3 = (LAYER_BATCH_cast, LAYER_IN_IMG_W_T_cast, LAYER_IN_IMG_H_T_cast, LAYER_OUT_NUM_T_cast, LAYER_IN_NUM_T_cast, LAYER_EN);\n' % (var_prefix))
	#        code.append(indent(2) + '%sConfigInst inst4 = (LAYER_COL_IL_FACTOR_cast, LAYER_ROW_IL_FACTOR_cast, LAYER_LOCAL_REG_NUM_cast, LAYER_LOCAL_ACCUM_NUM_cast, LAYER_TASK_NUM2_cast, LAYER_TASK_NUM1_cast);\n\n' % (var_prefix))

	#        code.append(indent(2) + 'fifo_kernel_config_out.write(inst0);\n')
	#        code.append(indent(2) + 'fifo_kernel_config_out.write(inst1);\n')
	#        code.append(indent(2) + 'fifo_kernel_config_out.write(inst2);\n')
	#        code.append(indent(2) + 'fifo_kernel_config_out.write(inst3);\n')
	#        code.append(indent(2) + 'fifo_kernel_config_out.write(inst4);\n\n')

	#        code.append(indent(2) + 'for (int out_img_h_t = 0; out_img_h_t < LAYER_OUT_IMG_H; out_img_h_t += LAYER_IN_IMG_H_T / LAYER_STRIDE){\n')
	#        code.append(indent(3) + 'for (int out_img_w_t = 0; out_img_w_t < LAYER_OUT_IMG_W; out_img_w_t += LAYER_IN_IMG_W_T / LAYER_STRIDE){\n')
	#        code.append(indent(4) + 'for (int out_num_t = 0; out_num_t < LAYER_OUT_NUM; out_num_t += LAYER_OUT_NUM_T){\n')
	#        code.append(indent(5) + 'uint chunk_offset = out_img_h_t * LAYER_IN_IMG_W * LAYER_IN_NUM;\n')
	#        code.append(indent(5) + 'for (int in_img_h_t = 0; in_img_h_t < LAYER_IN_IMG_H_T + LAYER_FILTER_S_H - 1; in_img_h_t++){\n')
	#        code.append(indent(5) + 'for (int in_img_h_t = 0; in_img_h_t < LAYER_IN_IMG_H_T + LAYER_FILTER_S_W - 1; in_img_h_t++){\n')
	#        code.append(indent(6) + 'uint local_chunk_offset = chunk_offset + in_img_h_t * LAYER_IN_IMG_W * LAYER_IN_NUM + out_img_w_t * LAYER_IN_NUM;\n')
	#        code.append(indent(6) + 'memcpy((void*)(cin_buf + in_img_h_t * (LAYER_IN_IMG_W_T + LAYER_FILTER_S - 1) * LAYER_IN_NUM / %sDATA%d_PACK_FACTOR), (void*)(cin + local_chunk_offset / %sDATA%d_PACK_FACTOR), sizeof(%sdata_t%d) * (LAYER_IN_IMG_W_T + LAYER_FILTER_S_H - 1) * LAYER_IN_NUM);\n' % (var_prefix, idx, var_prefix, idx, var_prefix, idx))
	#        code.append(indent(6) + 'memcpy((void*)(cin_buf + in_img_h_t * (LAYER_IN_IMG_W_T + LAYER_FILTER_S - 1) * LAYER_IN_NUM / %sDATA%d_PACK_FACTOR), (void*)(cin + local_chunk_offset / %sDATA%d_PACK_FACTOR), sizeof(%sdata_t%d) * (LAYER_IN_IMG_W_T + LAYER_FILTER_S_W - 1) * LAYER_IN_NUM);\n' % (var_prefix, idx, var_prefix, idx, var_prefix, idx))
	#        code.append(indent(5) + '}\n')
	#        code.append(indent(5) + 'for (int in_num_t = 0; in_num_t < LAYER_IN_NUM; in_num_t += LAYER_IN_NUM_T){\n')
	#        code.append(indent(6) + 'for (int ii = 0; ii < LAYER_IN_NUM_T / %sDATA%d_FC_SIMD_FACTOR; ii++){\n' % (var_prefix, idx))
	#        code.append(indent(7) + 'for (int hh = 0; hh < LAYER_IN_IMG_H_T + LAYER_FILTER_S_H - 1; hh++){\n')
	#        code.append(indent(7) + 'for (int hh = 0; hh < LAYER_IN_IMG_H_T + LAYER_FILTER_S_W - 1; hh++){\n')
	#        code.append(indent(8) + 'for (int ww = 0; ww < LAYER_IN_IMG_W_T + LAYER_FILTER_S_H - 1; ww++){\n')
	#        code.append(indent(8) + 'for (int ww = 0; ww < LAYER_IN_IMG_W_T + LAYER_FILTER_S_W - 1; ww++){\n')
	#        code.append('#pragma HLS PIPELINE II=1\n')
	#        code.append(indent(9) + 'uint cin_local_idx = hh * (LAYER_IN_IMG_W_T + LAYER_FILTER_S_H - 1) * LAYER_IN_NUM + ww * LAYER_IN_NUM + (in_num_t + ii * %sDATA0_FC_SIMD_FACTOR);\n' % (var_prefix))
	#        code.append(indent(9) + 'uint cin_local_idx = hh * (LAYER_IN_IMG_W_T + LAYER_FILTER_S_W - 1) * LAYER_IN_NUM + ww * LAYER_IN_NUM + (in_num_t + ii * %sDATA0_FC_SIMD_FACTOR);\n' % (var_prefix))
	#        code.append(indent(9) + 'uint cin_bus_idx = cin_local_idx / %sDATA%d_PACK_FACTOR;\n' % (var_prefix, idx))
	#        code.append(indent(9) + 'uint cin_bus_offset = cin_local_idx %% %sDATA%d_PACK_FACTOR;\n' % (var_prefix, idx))
	#        code.append(indent(9) + '%sbus_t%d bus_data = cin_buf[cin_bus_idx];\n' % (var_prefix, idx))
	#        code.append(indent(9) + 'ap_uint<%sDATA%d_WIDTH * %sDATA%d_FC_SIMD_FACTOR> fifo_cin_data;\n' % (var_prefix, idx, var_prefix, idx))
	#        unroll_w = cal_width(desp['BUS_WIDTH'][idx] / desp['DATA_WIDTH'][idx] / desp['FC_SIMD_FACTOR'][idx])
	#        code.append(indent(9) + 'for (ap_uint<' + str(unroll_w) + '> s = 0; s < ' + var_prefix + 'DATA' + str(idx) + '_PACK_FACTOR / ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR; s++){\n')
	#        code.append('#pragma HLS UNROLL\n')
	#        code.append(indent(10) + 'sel_tmp[s] = bus_data(' + var_prefix + 'DATA' + str(idx) + '_WIDTH * ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR - 1, 0);\n')
	#        code.append(indent(10) + 'bus_data = bus_data >> (' + var_prefix + 'DATA' + str(idx) + '_WIDTH * ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR);\n')
	#        code.append(indent(9) + '}\n')
	#        code.append(indent(9) + 'fifo_cin_data = sel_tmp[cin_bus_offset / %sDATA%d_FC_SIMD_FACTOR];\n' % (var_prefix, idx))
	#        code.append(indent(9) + 'fifo_transfer_cin.write(fifo_cin_data);\n')
	#        code.append(indent(8) + '}\n')
	#        code.append(indent(7) + '}\n')
	#        code.append(indent(6) + '}\n')
	#        code.append(indent(5) + '}\n')
	#        code.append(indent(4) + '}\n')
	#        code.append(indent(3) + '}\n')
	#        code.append(indent(2) + '}\n')
	#        code.append(indent(1) + '}\n')
	#        code.append('}\n\n')

	#      elif idx == 1:
	#        code.append('void ' + var_prefix + 'DataFeed' + str(idx) + 'Head_Shim(\n')
	#        code.append(indent(1) + var_prefix + 'bus_t' + str(idx) + '* ' + op_name + ',\n')
	#        code.append(indent(1) + 'stream<ap_uint<' + var_prefix + 'DATA' + str(idx) + '_WIDTH * ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR> > &fifo_transfer_' + op_name + ',\n')
	#        code.append(indent(1) + 'uint LAYER_IN_NUM,\n')
	#        code.append(indent(1) + 'uint LAYER_OUT_NUM,\n')
	#        code.append(indent(1) + 'uint LAYER_IN_NUM_T,\n')
	#        code.append(indent(1) + 'uint LAYER_OUT_NUM_T,\n')
	#        code.append(indent(1) + 'uint LAYER_IN_IMG_H,\n')
	#        code.append(indent(1) + 'uint LAYER_IN_IMG_W,\n')
	#        code.append(indent(1) + 'uint LAYER_OUT_IMG_H,\n')
	#        code.append(indent(1) + 'uint LAYER_OUT_IMG_W,\n')
	#        code.append(indent(1) + 'uint LAYER_IN_IMG_H_T,\n')
	#        code.append(indent(1) + 'uint LAYER_IN_IMG_W_T,\n')
	#        code.append(indent(1) + 'uint FILTER_S_H,\n')
	#        code.append(indent(1) + 'uint FILTER_S_W,\n')
	#        code.append(indent(1) + 'uint LAYER_STRIDE,\n')
	#        code.append(indent(1) + 'uint LAYER_BATCH\n')
	#        code.append('){\n')
	#        code.append('#pragma HLS INLINE off\n')
	#        code.append(indent(1) + var_prefix + 'bus_t%d %s_buf[%sDATA%d_HEAD_BUF_SIZE / %sDATA%d_PACK_FACTOR];\n' % (idx, op_name, var_prefix, idx, var_prefix, idx))
	#        code.append(indent(1) + 'ap_uint<' + var_prefix + 'DATA' + str(idx) + '_WIDTH * ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR> sel_tmp[' + var_prefix + 'DATA' + str(idx) + '_PACK_FACTOR / ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR];\n')
	#        code.append('#pragma HLS ARRAY_PARTITION variable=sel_tmp complete dim=1\n\n')

	#        indent_level = 1

	#        w = cal_width(desp['PARAMETERS']['LAYER_BATCH'])
	#        code.append(indent(indent_level) + 'for (ap_uint<%d> layer_iter = 0; layer_iter < LAYER_BATCH; layer_iter++){\n' % (w))
	#        code.append(indent(indent_level+1) + 'for (int out_img_h_t = 0; out_img_h_t < LAYER_OUT_IMG_H; out_img_h_t += LAYER_IN_IMG_H_T / LAYER_STRIDE){\n')
	#        code.append(indent(indent_level+2) + 'for (int out_img_w_t = 0; out_img_w_t < LAYER_OUT_IMG_W; out_img_w_t += LAYER_IN_IMG_W_T / LAYER_STRIDE){\n')
	#        code.append(indent(indent_level+3) + 'for (int out_num_t = 0; out_num_t < LAYER_OUT_NUM; out_num_t += LAYER_OUT_NUM_T){\n')
	#        code.append(indent(indent_level+4) + 'uint chunk_offset = out_num_t * FILTER_S * FILTER_S_H * LAYER_IN_NUM;\n')
	#        code.append(indent(indent_level+4) + 'uint chunk_offset = out_num_t * FILTER_S * FILTER_S_W * LAYER_IN_NUM;\n')
	#        code.append(indent(indent_level+4) + 'memcpy((void*)weight_buf, (void*)(weight + chunk_offset / %sDATA1_PACK_FACTOR), sizeof(%sdata_t1) * LAYER_OUT_NUM_T * FILTER_S * FILTER_S_H * LAYER_IN_NUM);\n' % (var_prefix, var_prefix))
	#        code.append(indent(indent_level+4) + 'memcpy((void*)weight_buf, (void*)(weight + chunk_offset / %sDATA1_PACK_FACTOR), sizeof(%sdata_t1) * LAYER_OUT_NUM_T * FILTER_S * FILTER_S_W * LAYER_IN_NUM);\n' % (var_prefix, var_prefix))
	#        code.append(indent(indent_level+4) + 'for (int in_num_t = 0; in_num_t < LAYER_IN_NUM; in_num_t += LAYER_IN_NUM_T){\n')
	#        code.append(indent(indent_level+5) + 'for (int oo =0; oo < LAYER_OUT_NUM_T; oo++){\n')
	#        code.append(indent(indent_level+6) + 'for (int p = 0; p < FILTER_S_H; p++){\n')
	#        code.append(indent(indent_level+6) + 'for (int p = 0; p < FILTER_S_W; p++){\n')
	#        code.append(indent(indent_level+7) + 'for (int q = 0; q < FILTER_S_H; q++){\n')
	#        code.append(indent(indent_level+7) + 'for (int q = 0; q < FILTER_S_W; q++){\n')
	#        code.append(indent(indent_level+8) + 'for (int ii = 0; ii < LAYER_IN_NUM_T / %sDATA%d_FC_SIMD_FACTOR; ii++){\n' % (var_prefix, idx))
	#        code.append('#pragma HLS PIPELINE II=1\n')
	#        code.append(indent(indent_level+9) + 'uint weight_local_idx = oo * FILTER_S * FILTER_S * LAYER_IN_NUM + p * FILTER_S_H * LAYER_IN_NUM + q * LAYER_IN_NUM + (in_num_t + ii * %sDATA1_FC_SIMD_FACTOR);\n' % (var_prefix));
	#        code.append(indent(indent_level+9) + 'uint weight_local_idx = oo * FILTER_S * FILTER_S * LAYER_IN_NUM + p * FILTER_S_W * LAYER_IN_NUM + q * LAYER_IN_NUM + (in_num_t + ii * %sDATA1_FC_SIMD_FACTOR);\n' % (var_prefix));
	#        code.append(indent(indent_level+9) + 'uint weight_bus_idx = weight_local_idx / %sDATA%d_PACK_FACTOR;\n' % (var_prefix, idx))
	#        code.append(indent(indent_level+9) + 'uint weight_bus_offset = weight_local_idx %% %sDATA%d_PACK_FACTOR;\n' % (var_prefix, idx))
	#        code.append(indent(indent_level+9) + '%sbus_t%d bus_data = weight_buf[weight_bus_idx];\n' % (var_prefix, idx))
	#        code.append(indent(indent_level+9) + 'ap_uint<%sDATA%d_WIDTH * %sDATA%d_FC_SIMD_FACTOR> fifo_weight_data;\n' % (var_prefix, idx, var_prefix, idx))
	#        unroll_w = cal_width(desp['BUS_WIDTH'][idx] / desp['DATA_WIDTH'][idx] / desp['FC_SIMD_FACTOR'][idx])
	#        code.append(indent(indent_level+9) + 'for (ap_uint<' + str(unroll_w) + '> s = 0; s < ' + var_prefix + 'DATA' + str(idx) + '_PACK_FACTOR / ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR; s++){\n')
	#        code.append('#pragma HLS UNROLL\n')
	#        code.append(indent(indent_level+10) + 'sel_tmp[s] = bus_data(' + var_prefix + 'DATA' + str(idx) + '_WIDTH * ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR - 1, 0);\n')
	#        code.append(indent(indent_level+10) + 'bus_data = bus_data >> (' + var_prefix + 'DATA' + str(idx) + '_WIDTH * ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR);\n')
	#        code.append(indent(indent_level+9) + '}\n')
	#        code.append(indent(indent_level+9) + 'fifo_weight_data = sel_tmp[weight_bus_offset / %sDATA%d_FC_SIMD_FACTOR];\n' % (var_prefix, idx))
	#        code.append(indent(indent_level+9) + 'fifo_transfer_weight.write(fifo_weight_data);\n')
	#        code.append(indent(indent_level+8) + '}\n')
	#        code.append(indent(indent_level+7) + '}\n')
	#        code.append(indent(indent_level+6) + '}\n')
	#        code.append(indent(indent_level+5) + '}\n')
	#        code.append(indent(indent_level+4) + '}\n')
	#        code.append(indent(indent_level+3) + '}\n')
	#        code.append(indent(indent_level+2) + '}\n')
	#        code.append(indent(indent_level+1) + '}\n')
	#        code.append(indent(indent_level) + '}\n')
	#        code.append('}\n\n')

			#head
		if idx == 0:
			code.append('void ' + var_prefix + 'DataFeed' + str(idx) + 'Head(\n')
			code.append(indent(1) + 'uint start_inst, uint end_inst,\n')
	#     code.append(indent(1) + var_prefix + 'bus_t' + str(idx) + '* ' + op_name + ',\n')
			code.append(indent(1) + 'tapa::istream<ap_uint<%sDATA%d_WIDTH * %sDATA%d_FC_SIMD_FACTOR> > &fifo_transfer_in,\n' % (var_prefix, idx, var_prefix, idx))
	#     code.append(indent(1) + 'bool init,\n')
	#     code.append(indent(1) + 'unsigned int FILTER_S_H,\n')
	#     code.append(indent(1) + 'unsigned int FILTER_S_W,\n')
			for feed_group in range(desp['FC_SPLIT_FACTOR'][idx]):
				if feed_group < desp['FC_SPLIT_FACTOR'][idx] - 1:
					code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_out' + str(feed_group) + ',\n')
				else:
					code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_out' + str(feed_group) + ',\n')
	#     code.append(indent(1) + 'uint LAYER_IN_NUM,\n')
	#     code.append(indent(1) + 'uint LAYER_OUT_NUM,\n')
	#     code.append(indent(1) + 'uint LAYER_IN_IMG_H,\n')
	#     code.append(indent(1) + 'uint LAYER_IN_IMG_W,\n')
	#     code.append(indent(1) + 'uint LAYER_OUT_IMG_H,\n')
	#     code.append(indent(1) + 'uint LAYER_OUT_IMG_W,\n')
	#     code.append(indent(1) + 'ap_uint<8> LAYER_FILTER_S_H,\n')
	#     code.append(indent(1) + 'ap_uint<8> LAYER_FILTER_S_W,\n')
			code.append(indent(1) + 'tapa::istream<%sConfigInst> &fifo_kernel_config_in,\n' % (var_prefix))
			code.append(indent(1) + 'tapa::ostream<%sConfigInst> &fifo_kernel_config_out,\n' % (var_prefix))
			code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out0,\n')
			code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out1,\n')
			code.append(indent(1) + 'tapa::ostream<ap_uint<U1_DATA0_WIDTH * U1_DATA0_FC_SIMD_FACTOR> > &fifo_bypass_data,\n')
			code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_bypass\n')
			code.append('){\n')
			code.append('#pragma HLS INLINE off\n')
			for feed_group in range(desp['FC_SPLIT_FACTOR'][idx]):
				code.append('#pragma HLS DATA_PACK variable=fifo_transfer_out' + str(feed_group) + '\n')

			code.append(indent(1) + 'bool inst_done = 0;\n')
			code.append(indent(1) + 'uint inst = 0;\n')
			code.append(indent(1) + 'int inst_count = end_inst - start_inst;\n')
			code.append(indent(1) + 'fifo_config_out0.write(inst_count);\n')
			code.append(indent(1) + 'fifo_config_out1.write(inst_count);\n')
			code.append(indent(1) + 'while(!inst_done){\n')

			code.append(indent(1) + '// loader buffer\n')
			code.append(indent(1) + 'ap_uint<%sDATA%d_WIDTH * %sDATA%d_FC_SIMD_FACTOR> %s_buf[CIN_BUFF / %sDATA%d_FC_SIMD_FACTOR];\n' % (var_prefix, idx, var_prefix, idx, op_name, var_prefix, idx))
			code.append(indent(1) + '#if U1_DataFeed0Head_MEM == 0\n')
			code.append(indent(2) + '#pragma HLS bind_storage variable=%s_buf type=RAM_T2P impl=BRAM\n' % op_name)
			code.append(indent(1) + '#elif U1_DataFeed0Head_MEM == 1\n')
			code.append(indent(2) + '#pragma HLS bind_storage variable=%s_buf type=RAM_T2P impl=URAM\n' % op_name)
				#code.append(indent(1) + '#elif MEM_TYPE == 2\n')
				#code.append(indent(2) + '#pragma HLS bind_storage variable=%s_buf type=RAM_T2P impl=BRAM\n' % op_name)
				#code.append(indent(1) + '#elif MEM_TYPE == 3\n')
				#code.append(indent(2) + '#pragma HLS bind_storage variable=%s_buf type=RAM_T2P impl=BRAM\n' % op_name)
			code.append(indent(1) + '#endif\n')
			code.append(indent(1) + '#pragma HLS ARRAY_PARTITION variable=%s_buf dim=1 block factor=%s\n\n' % (op_name, str(desp['FC_SPLIT_FACTOR'][idx])))

			code.append(indent(1) + '// Read instructions\n')
			code.append(indent(1) + '%sConfigInst inst0 = fifo_kernel_config_in.read();\n' % (var_prefix))
			code.append(indent(1) + 'fifo_kernel_config_out.write(inst0);\n')
			code.append(indent(1) + '%sConfigInst inst1 = fifo_kernel_config_in.read();\n' % (var_prefix))
			code.append(indent(1) + 'fifo_kernel_config_out.write(inst1);\n')
			code.append(indent(1) + '%sConfigInst inst2 = fifo_kernel_config_in.read();\n' % (var_prefix))
			code.append(indent(1) + 'fifo_kernel_config_out.write(inst2);\n')
			code.append(indent(1) + '%sConfigInst inst3 = fifo_kernel_config_in.read();\n' % (var_prefix))
			code.append(indent(1) + 'fifo_kernel_config_out.write(inst3);\n')
			code.append(indent(1) + '%sConfigInst inst4 = fifo_kernel_config_in.read();\n' % (var_prefix))
			code.append(indent(1) + 'fifo_kernel_config_out.write(inst4);\n')
			code.append(indent(1) + '%sConfigInst inst5 = fifo_kernel_config_in.read();\n' % (var_prefix))
			code.append(indent(1) + 'fifo_kernel_config_out.write(inst5);\n')
			
			code.append('	ap_uint<32> LAYER_BATCH = inst3(32*5+31, 32*5);\n')
			code.append('		// Refer to cin_load module to understand the meaning of the instructions\n')
			code.append('		// inst0\n')
			code.append('	ap_uint<32> LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);\n')
			code.append('	ap_uint<32> LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);\n')
			code.append('	ap_uint<32> LAYER_IN_H_HW    = inst0(32*2+31, 32*2);\n')
			code.append('	ap_uint<32> LAYER_IN_W_HW    = inst0(32*3+31, 32*3);\n')
			code.append('	ap_uint<32> LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);\n')
			code.append('	ap_uint<32> LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);\n')
			code.append('		// inst1\n')
			code.append('	ap_uint<32> LAYER_IN_NUM     = inst1(32*0+31, 32*0);\n')
			code.append('	ap_uint<32> LAYER_OUT_NUM    = inst1(32*1+31, 32*1);\n')
			code.append('	ap_uint<32> LAYER_IN_H       = inst1(32*2+31, 32*2);\n')
			code.append('	ap_uint<32> LAYER_IN_W       = inst1(32*3+31, 32*3);\n')
			code.append('	ap_uint<32> LAYER_OUT_H      = inst1(32*4+31, 32*4);\n')
			code.append('	ap_uint<32> LAYER_OUT_W      = inst1(32*5+31, 32*5);\n')
			code.append('		// inst2\n')
			code.append('	ap_uint<32> CIN_OFFSET       = inst2(32*0+31, 32*0);\n')
			code.append('	ap_uint<32> WEIGHT_OFFSET    = inst2(32*1+31, 32*1);\n')
			code.append('	ap_uint<32> BIAS_OFFSET      = inst2(32*2+31, 32*2);\n')
			code.append('	ap_uint<32> COUT_OFFSET      = inst2(32*3+31, 32*3);\n')
			code.append('	ap_uint<16> FILTER_S1        = inst2(32*4+15, 32*4);\n')
			code.append('	ap_uint<8>  FILTER_S2_H      = inst2(32*4+23, 32*4+16);\n')
			code.append('	ap_uint<8>  FILTER_S2_W      = inst2(32*4+31, 32*4+24);\n')
			code.append('	ap_uint<32> STRIDE           = inst2(32*5+31, 32*5);\n')
			code.append('		// inst3\n')
			code.append('	ap_uint<32> LAYER_EN         = inst3(32*0+31, 32*0);\n')
			code.append('	ap_uint<32> PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);\n')
			code.append('	ap_uint<16> LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);\n')
			code.append('	ap_uint<16> LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);\n')
			code.append('	ap_uint<32> LAYER_IN_H_T     = inst3(32*3+31, 32*3);\n')
			code.append('	ap_uint<32> LAYER_IN_W_T     = inst3(32*4+31, 32*4);\n')
			code.append('\n')
			code.append('	ap_uint<1>  CONV_1ST_EN    = LAYER_EN[0];\n')
			code.append('	ap_uint<1>  DEPTH_CONV_EN  = LAYER_EN[1];\n')
			code.append('	ap_uint<1>  CONV_EN        = LAYER_EN[2];\n')
			code.append('	ap_uint<1>  RELU_EN        = LAYER_EN[3];\n')
			code.append('	ap_uint<1>  RELU6_EN       = LAYER_EN[4];\n')
			code.append('	ap_uint<1>  POOL_EN        = LAYER_EN[5];\n')
			code.append('	ap_uint<1>  UP_SAMPLE_EN   = LAYER_EN[6];  	// reserved\n')
			code.append('	ap_uint<1>  BIAS_EN        = LAYER_EN[7];\n')
			code.append('	ap_uint<1>  BATCH_NORM_EN  = LAYER_EN[10];\n')
			code.append('	uint FILTER_S = (CONV_EN == 1)? (uint)FILTER_S2_H: 1;\n')
			code.append('	bool separable_conv = (DEPTH_CONV_EN == 1) && (CONV_EN == 1);\n')
			code.append('	bool conv2d = (DEPTH_CONV_EN == 0) && (CONV_EN == 1);\n')
			code.append('	bool max_pool = (DEPTH_CONV_EN == 0) && (CONV_EN == 0);\n')
			code.append('  fifo_config_out0.write(CONV_EN);\n')
			code.append('  fifo_config_out1.write(CONV_EN);\n')
			code.append('\n')
			code.append('  switch(CONV_EN){\n')
			code.append('  case 0:{\n')
			code.append('    for (int layer_iter = 0; layer_iter < LAYER_BATCH; layer_iter++){\n')
			code.append('      // Read instructions\n')
			code.append('      fifo_config_bypass.write(LAYER_IN_NUM_HW);\n')
			code.append('      fifo_config_bypass.write(LAYER_OUT_NUM_HW);\n')
			code.append('      fifo_config_bypass.write(LAYER_IN_H_HW);\n')
			code.append('      fifo_config_bypass.write(LAYER_IN_W_HW);\n')
			code.append('\n')
			code.append('      fifo_config_bypass.write(LAYER_IN_NUM_T);\n')
			code.append('      fifo_config_bypass.write(LAYER_OUT_NUM_T);\n')
			code.append('      fifo_config_bypass.write(LAYER_IN_H_T);\n')
			code.append('      fifo_config_bypass.write(LAYER_IN_W_T);\n')
			code.append('\n')
			code.append('      fifo_config_bypass.write(FILTER_S2_H);\n')
			code.append('      fifo_config_bypass.write(FILTER_S2_W);\n')
			code.append('      fifo_config_bypass.write(STRIDE);\n')
			code.append('        // Refer to cin_load module to understand the meaning of the instructions\n')
			code.append('        // inst0\n')
			code.append('      LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);\n')
			code.append('      LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);\n')
			code.append('      LAYER_IN_H_HW    = inst0(32*2+31, 32*2);\n')
			code.append('      LAYER_IN_W_HW    = inst0(32*3+31, 32*3);\n')
			code.append('      LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);\n')
			code.append('      LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);\n')
			code.append('        // inst1\n')
			code.append('      LAYER_IN_NUM     = inst1(32*0+31, 32*0);\n')
			code.append('      LAYER_OUT_NUM    = inst1(32*1+31, 32*1);\n')
			code.append('      LAYER_IN_H       = inst1(32*2+31, 32*2);\n')
			code.append('      LAYER_IN_W       = inst1(32*3+31, 32*3);\n')
			code.append('      LAYER_OUT_H      = inst1(32*4+31, 32*4);\n')
			code.append('      LAYER_OUT_W      = inst1(32*5+31, 32*5);\n')
			code.append('        // inst2\n')
			code.append('      CIN_OFFSET       = inst2(32*0+31, 32*0);\n')
			code.append('      WEIGHT_OFFSET    = inst2(32*1+31, 32*1);\n')
			code.append('      BIAS_OFFSET      = inst2(32*2+31, 32*2);\n')
			code.append('      COUT_OFFSET      = inst2(32*3+31, 32*3);\n')
			code.append('      FILTER_S1        = inst2(32*4+15, 32*4);\n')
			code.append('      FILTER_S2_H      = inst2(32*4+23, 32*4+16);\n')
			code.append('      FILTER_S2_W      = inst2(32*4+31, 32*4+24);\n')
			code.append('      STRIDE           = inst2(32*5+31, 32*5);\n')
			code.append('        // inst3\n')
			code.append('      LAYER_EN         = inst3(32*0+31, 32*0);\n')
			code.append('      PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);\n')
			code.append('      LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);\n')
			code.append('      LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);\n')
			code.append('      LAYER_IN_H_T     = inst3(32*3+31, 32*3);\n')
			code.append('      LAYER_IN_W_T     = inst3(32*4+31, 32*4);\n')
			code.append('\n')
			code.append('      CONV_1ST_EN      = LAYER_EN[0];\n')
			code.append('      DEPTH_CONV_EN    = LAYER_EN[1];\n')
			code.append('      CONV_EN          = LAYER_EN[2];\n')
			code.append('      RELU_EN          = LAYER_EN[3];\n')
			code.append('      RELU6_EN         = LAYER_EN[4];\n')
			code.append('      POOL_EN          = LAYER_EN[5];\n')
			code.append('      UP_SAMPLE_EN     = LAYER_EN[6]; 	// reserved\n')
			code.append('\n')
			code.append('        // Set up some configuration signals\n')
			code.append('      FILTER_S = (CONV_EN == 1)? (uint)FILTER_S2_H: 1;\n')
			code.append('      separable_conv = (DEPTH_CONV_EN == 1) && (CONV_EN == 1);\n')
			code.append('      conv2d = (DEPTH_CONV_EN == 0) && (CONV_EN == 1);\n')
			code.append('      max_pool = (DEPTH_CONV_EN == 0) && (CONV_EN == 0);\n')
			code.append('\n')
			code.append('      int in_h_iter = 0;\n')
			code.append('      int in_w_iter = 0;\n')
			code.append('      int out_num_iter = 0;\n')
			code.append('      int in_num_iter = 0;\n')
			code.append('      bool done1 = 0;\n')
			code.append('      while(!done1){\n')
			code.append('        if ((max_pool && out_num_iter == 0) || (UP_SAMPLE_EN && out_num_iter == 0)){\n')
			code.append('          int o = 0;\n')
			code.append('          int h = 0;\n')
			code.append('          int w = 0;\n')
			code.append('          bool done2 = 0;\n')
			code.append('          while(!done2){\n')
			code.append('            #pragma HLS PIPELINE II=1\n')
			code.append('            DepthConvData0Type tmp = fifo_transfer_in.read();\n')
			code.append('            fifo_bypass_data.write(tmp);\n')
			code.append('              // Repeat until the whole tile is read\n')
			code.append('            w++;\n')
			code.append('            if (w == LAYER_IN_W_T + FILTER_S - 1){\n')
			code.append('              w = 0;\n')
			code.append('              h++;\n')
			code.append('              if (h == LAYER_IN_H_T + FILTER_S - 1){\n')
			code.append('                h = 0;\n')
			code.append('                o++;\n')
			code.append('                if (o == LAYER_IN_NUM_T / CONV_LANE){\n')
			code.append('                  o = 0;\n')
			code.append('                  done2 = 1;\n')
			code.append('                }\n')
			code.append('              }\n')
			code.append('            }\n')
			code.append('          }\n')
			code.append('        }\n')
			code.append('          // Repeat until all the tiles are read\n')
			code.append('          // Must repeat the computation until LAYER_OUT_NUM output feature maps are generated\n')
			code.append('        in_num_iter += LAYER_IN_NUM_T;\n')
			code.append('        if (in_num_iter >= LAYER_IN_NUM){\n')
			code.append('          in_num_iter = 0;\n')
			code.append('          in_w_iter += LAYER_IN_W_T;\n')
			code.append('          if (in_w_iter >= LAYER_IN_W){\n')
			code.append('            in_w_iter = 0;\n')
			code.append('            in_h_iter += LAYER_IN_H_T;\n')
			code.append('            if (in_h_iter >= LAYER_IN_H){\n')
			code.append('              in_h_iter = 0;\n')
			code.append('              done1 = 1;\n')
			code.append('            }\n')
			code.append('          }\n')
			code.append('        }\n')
			code.append('      }\n')
			code.append('    }\n')
			code.append('  }break;\n')
			code.append('  case 1:{\n')
			w = cal_width(desp['PARAMETERS']['LAYER_BATCH'])
			code.append(indent(2) + 'ap_uint<%d> layer_iter = 0;\n' % (w))
			code.append(indent(2) + 'bool done1 = 0;\n')
			code.append(indent(2) + 'while(!done1){\n')
	#     code.append(indent(1) + 'for (ap_uint<%d> layer_iter = 0; layer_iter < LAYER_BATCH; layer_iter++){\n' % (w))
			code.append(indent(3) + 'if (layer_iter > 0){\n')
			code.append(indent(4) + '// Read instructions\n')
			code.append(indent(4) + 'inst0 = fifo_kernel_config_in.read();\n')
			code.append(indent(4) + 'fifo_kernel_config_out.write(inst0);\n')
			code.append(indent(4) + 'inst1 = fifo_kernel_config_in.read();\n')
			code.append(indent(4) + 'fifo_kernel_config_out.write(inst1);\n')
			code.append(indent(4) + 'inst2 = fifo_kernel_config_in.read();\n')
			code.append(indent(4) + 'fifo_kernel_config_out.write(inst2);\n')
			code.append(indent(4) + 'inst3 = fifo_kernel_config_in.read();\n')
			code.append(indent(4) + 'fifo_kernel_config_out.write(inst3);\n')
			code.append(indent(4) + 'inst4 = fifo_kernel_config_in.read();\n')
			code.append(indent(4) + 'fifo_kernel_config_out.write(inst4);\n')
			code.append(indent(4) + 'inst5 = fifo_kernel_config_in.read();\n')
			code.append(indent(4) + 'fifo_kernel_config_out.write(inst5);\n')
			code.append(indent(3) + '}\n')

			code.append(indent(3) + 'ap_uint<32> EXT_LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);\n')
			code.append(indent(3) + 'ap_uint<32> EXT_LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);\n')
			code.append(indent(3) + 'ap_uint<32> EXT_LAYER_IN_H_HW    = inst0(32*2+31, 32*2);\n')
			code.append(indent(3) + 'ap_uint<32> EXT_LAYER_IN_W_HW    = inst0(32*3+31, 32*3);\n')
			code.append(indent(3) + 'ap_uint<32> EXT_LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);\n')
			code.append(indent(3) + 'ap_uint<32> EXT_LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);\n')
			code.append(indent(3) + '// inst1\n')
			code.append(indent(3) + 'ap_uint<32> EXT_LAYER_IN_NUM     = inst1(32*0+31, 32*0);\n')
			code.append(indent(3) + 'ap_uint<32> EXT_LAYER_OUT_NUM    = inst1(32*1+31, 32*1);\n')
			code.append(indent(3) + 'ap_uint<32> EXT_LAYER_IN_H       = inst1(32*2+31, 32*2);\n')
			code.append(indent(3) + 'ap_uint<32> EXT_LAYER_IN_W       = inst1(32*3+31, 32*3);\n')
			code.append(indent(3) + 'ap_uint<32> EXT_LAYER_OUT_H      = inst1(32*4+31, 32*4);\n')
			code.append(indent(3) + 'ap_uint<32> EXT_LAYER_OUT_W      = inst1(32*5+31, 32*5);\n')
			code.append(indent(3) + '// inst2\n')
			code.append(indent(3) + 'ap_uint<32> EXT_CIN_OFFSET       = inst2(32*0+31, 32*0);\n')
			code.append(indent(3) + 'ap_uint<32> EXT_WEIGHT_OFFSET    = inst2(32*1+31, 32*1);\n')
			code.append(indent(3) + 'ap_uint<32> EXT_BIAS_OFFSET      = inst2(32*2+31, 32*2);\n')
			code.append(indent(3) + 'ap_uint<32> EXT_COUT_OFFSET      = inst2(32*3+31, 32*3);\n')
			code.append(indent(3) + 'ap_uint<16> EXT_FILTER_S1        = inst2(32*4+15, 32*4);\n')
			code.append(indent(3) + 'ap_uint<8>  EXT_FILTER_S2_H      = inst2(32*4+23, 32*4+16);\n')
			code.append(indent(3) + 'ap_uint<8>  EXT_FILTER_S2_W      = inst2(32*4+31, 32*4+24);\n')
			code.append(indent(3) + 'ap_uint<32> EXT_STRIDE           = inst2(32*5+31, 32*5);\n')
			code.append(indent(3) + '// inst3\n')
			code.append(indent(3) + 'ap_uint<32> EXT_LAYER_EN         = inst3(32*0+31, 32*0);\n')
			code.append(indent(3) + 'ap_uint<32> EXT_PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);\n')
			code.append(indent(3) + 'ap_uint<16> EXT_LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);\n')
			code.append(indent(3) + 'ap_uint<16> EXT_LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);\n')
			code.append(indent(3) + 'ap_uint<32> EXT_LAYER_IN_IMG_H_T = inst3(32*3+31, 32*3);\n')
			code.append(indent(3) + 'ap_uint<32> EXT_LAYER_IN_IMG_W_T = inst3(32*4+31, 32*4);\n')

			code.append(indent(3) + 'ap_uint<1>  EXT_CONV_1ST_EN      = EXT_LAYER_EN[0];\n')
			code.append(indent(3) + 'ap_uint<1>  EXT_DEPTH_CONV_EN    = EXT_LAYER_EN[1];\n')
			code.append(indent(3) + 'ap_uint<1>  EXT_CONV_EN          = EXT_LAYER_EN[2];\n')
			code.append(indent(3) + 'ap_uint<1>  EXT_RELU_EN          = EXT_LAYER_EN[3];\n')
			code.append(indent(3) + 'ap_uint<1>  EXT_RELU6_EN         = EXT_LAYER_EN[4];\n')
			code.append(indent(3) + 'ap_uint<1>  EXT_POOL_EN          = EXT_LAYER_EN[5];\n\n')

			code.append(indent(3) + 'ap_uint<32> EXT_LAYER_TASK_NUM1        = inst4(32*0+31, 32*0);\n')
			code.append(indent(3) + 'ap_uint<32> EXT_LAYER_TASK_NUM2        = inst4(32*1+31, 32*1);\n')
			code.append(indent(3) + 'ap_uint<32> EXT_LAYER_LOCAL_ACCUM_NUM  = inst4(32*2+31, 32*2);\n')
			code.append(indent(3) + 'ap_uint<32> EXT_LAYER_LOCAL_REG_NUM    = inst4(32*3+31, 32*3);\n')
			code.append(indent(3) + 'ap_uint<32> EXT_LAYER_ROW_IL_FACTOR    = inst4(32*4+31, 32*4);\n')
			code.append(indent(3) + 'ap_uint<32> EXT_LAYER_COL_IL_FACTOR    = inst4(32*5+31, 32*5);\n\n')

			code.append(indent(3) + 'ap_uint<16> EXT_LAYER_CONV_TYPE     = inst5(32*0+15, 32*0);\n')
			code.append(indent(3) + 'ap_uint<8>  EXT_FILTER_D0_H         = inst5(32*0+23, 32*0+16);\n')
			code.append(indent(3) + 'ap_uint<8>  EXT_FILTER_D0_W         = inst5(32*0+31, 32*0+24);\n')
			code.append(indent(3) + 'ap_uint<8>  EXT_FILTER_D1_H         = inst5(32*1+7, 32*1);\n')
			code.append(indent(3) + 'ap_uint<8>  EXT_FILTER_D1_W         = inst5(32*1+15, 32*1+8);\n')
			code.append(indent(3) + 'ap_uint<16> EXT_LAYER_DILATION_RATE = inst5(32*1+31, 32*1+16);\n')
			code.append(indent(3) + 'ap_uint<16> EXT_LAYER_TCONV_STRIDE  = inst5(32*2+15, 32*2);\n')
			code.append(indent(3) + 'ap_uint<16> EXT_K_NUM               = inst5(32*2+31, 32*2+16);\n')
			code.append(indent(3) + 'ap_uint<32> EXT_KH                  = inst5(32*3+31, 32*3);\n')
			code.append(indent(3) + 'ap_uint<32> EXT_KW                  = inst5(32*4+31, 32*4);\n')

			code.append('\n')
				#code.append(indent(2) + 'uint EXT_FILTER_S = (EXT_CONV_EN == 1)? (uint)EXT_FILTER_S_H_H: 1;\n')
				#code.append(indent(2) + 'uint EXT_FILTER_S = (EXT_CONV_EN == 1)? (uint)EXT_FILTER_S_W_H: 1;\n')
				#code.append(indent(2) + 'uint EXT_FILTER_S = (EXT_CONV_EN == 1)? (uint)EXT_FILTER_S_H_W: 1;\n')
				#code.append(indent(2) + 'uint EXT_FILTER_S = (EXT_CONV_EN == 1)? (uint)EXT_FILTER_S_W_W: 1;\n')
			code.append(indent(3) + 'bool separable_conv = (EXT_DEPTH_CONV_EN == 1) && (EXT_CONV_EN == 1);\n')
			code.append(indent(3) + 'bool conv2d = (EXT_DEPTH_CONV_EN == 0) && (EXT_CONV_EN == 1);\n')
			code.append(indent(3) + 'bool max_pool = (EXT_DEPTH_CONV_EN == 0) && (EXT_CONV_EN == 0);\n')
			code.append(indent(3) + 'uint stride1 = (EXT_DEPTH_CONV_EN == 0)? 1 : (uint)EXT_STRIDE;\n')
			code.append(indent(3) + 'uint stride2 = (EXT_DEPTH_CONV_EN == 0)? (uint)EXT_STRIDE : 1;\n\n')

			code.append(indent(3) + 'uint LAYER_IN_IMG_H = (EXT_DEPTH_CONV_EN == 1)? (uint)EXT_LAYER_IN_H_HW - (uint)EXT_FILTER_S1 + 1: (uint)EXT_LAYER_IN_H_HW;\n')
			code.append(indent(3) + 'uint LAYER_IN_IMG_W = (EXT_DEPTH_CONV_EN == 1)? (uint)EXT_LAYER_IN_W_HW - (uint)EXT_FILTER_S1 + 1: (uint)EXT_LAYER_IN_W_HW;\n')
			code.append(indent(3) + 'uint LAYER_OUT_IMG_H = EXT_LAYER_OUT_H;\n')
			code.append(indent(3) + 'uint LAYER_OUT_IMG_W = EXT_LAYER_OUT_W;\n')
			code.append(indent(3) + 'uint LAYER_IN_NUM = EXT_LAYER_IN_NUM_HW;\n')
			code.append(indent(3) + 'uint LAYER_OUT_NUM = EXT_LAYER_OUT_NUM_HW;\n')
			code.append(indent(3) + 'uint LAYER_IN_NUM_T = EXT_LAYER_IN_NUM_T;\n')
			code.append(indent(3) + 'uint LAYER_OUT_NUM_T = EXT_LAYER_OUT_NUM_T;\n')
			code.append(indent(3) + 'uint LAYER_IN_IMG_H_T;\n')
			code.append(indent(3) + 'uint LAYER_IN_IMG_W_T;\n')
			code.append(indent(3) + 'if (stride1 == 1){\n')
			code.append(indent(4)+ 'LAYER_IN_IMG_H_T = EXT_LAYER_IN_IMG_H_T;\n')
			code.append(indent(4)+ 'LAYER_IN_IMG_W_T = EXT_LAYER_IN_IMG_W_T;\n')
			code.append(indent(3) + '} else if (stride1 == 2){\n')
			code.append(indent(4) + 'LAYER_IN_IMG_H_T = EXT_LAYER_IN_IMG_H_T / 2;\n')
			code.append(indent(4) + 'LAYER_IN_IMG_W_T = EXT_LAYER_IN_IMG_W_T / 2;\n')
			code.append(indent(3) + '}\n')
			code.append(indent(3) + 'uint LAYER_FILTER_S_H = EXT_FILTER_S2_H;\n')
			code.append(indent(3) + 'uint LAYER_FILTER_S_W = EXT_FILTER_S2_W;\n')

	#     code.append(indent(2) + 'uint LAYER_STRIDE = EXT_STRIDE;\n\n')
			code.append(indent(3) + 'uint LAYER_STRIDE = stride2;\n\n')
			code.append(indent(3) + 'uint LAYER_TASK_NUM1 = EXT_LAYER_TASK_NUM1;\n')
			code.append(indent(3) + 'uint LAYER_TASK_NUM2 = EXT_LAYER_TASK_NUM2;\n')
			code.append(indent(3) + 'uint LAYER_LOCAL_ACCUM_NUM = EXT_LAYER_LOCAL_ACCUM_NUM;\n')
			code.append(indent(3) + 'uint LAYER_LOCAL_REG_NUM = EXT_LAYER_LOCAL_REG_NUM;\n')
			code.append(indent(3) + 'uint LAYER_ROW_IL_FACTOR = EXT_LAYER_ROW_IL_FACTOR;\n')
			code.append(indent(3) + 'uint LAYER_COL_IL_FACTOR = EXT_LAYER_COL_IL_FACTOR;\n\n')

			code.append(indent(3) + 'uint LAYER_CONV_TYPE = EXT_LAYER_CONV_TYPE;\n')
			code.append(indent(3) + 'uint FILTER_D0_H = EXT_FILTER_D0_H;\n')
			code.append(indent(3) + 'uint FILTER_D0_W = EXT_FILTER_D0_W;\n')
			code.append(indent(3) + 'uint FILTER_D1_H = EXT_FILTER_D1_H;\n')
			code.append(indent(3) + 'uint FILTER_D1_W = EXT_FILTER_D1_W;\n')
			code.append(indent(3) + 'uint LAYER_DILATION_RATE = EXT_LAYER_DILATION_RATE;\n')
			code.append(indent(3) + 'uint LAYER_TCONV_STRIDE = EXT_LAYER_TCONV_STRIDE;\n')
			code.append(indent(3) + 'uint K_NUM = EXT_K_NUM;\n')
			code.append(indent(3) + 'ap_uint<32> KH = EXT_KH;\n')
			code.append(indent(3) + 'ap_uint<32> KW = EXT_KW;\n')

			

	#     code.append(indent(2) + 'uint LAYER_TASK_NUM1 = (LAYER_IN_NUM / LAYER_IN_NUM_T) * (LAYER_OUT_NUM / LAYER_OUT_NUM_T) * (LAYER_OUT_IMG_H / LAYER_IN_IMG_H_T * LAYER_STRIDE) * (LAYER_OUT_IMG_W / LAYER_IN_IMG_W_T * LAYER_STRIDE);\n')
	#     code.append(indent(2) + 'uint LAYER_TASK_NUM2 = (LAYER_OUT_NUM / LAYER_OUT_NUM_T) * (LAYER_OUT_IMG_H / LAYER_IN_IMG_H_T * LAYER_STRIDE) * (LAYER_OUT_IMG_W / LAYER_IN_IMG_W_T * LAYER_STRIDE);\n')
	#     code.append(indent(2) + 'uint LAYER_LOCAL_ACCUM_NUM = LAYER_IN_NUM_T / %sSIMD_FACTOR * LAYER_FILTER_S * LAYER_FILTER_S_H;\n' %(var_prefix))
	#     code.append(indent(2) + 'uint LAYER_LOCAL_ACCUM_NUM = LAYER_IN_NUM_T / %sSIMD_FACTOR * LAYER_FILTER_S * LAYER_FILTER_S_W;\n' %(var_prefix))
	#     code.append(indent(2) + 'uint LAYER_LOCAL_REG_NUM = (LAYER_IN_IMG_H_T / LAYER_STRIDE) * (LAYER_IN_IMG_W_T / %sSA_COLS / LAYER_STRIDE) * LAYER_OUT_NUM_T / %sSA_ROWS;\n' % (var_prefix, var_prefix))
	#     code.append(indent(2) + 'uint LAYER_ROW_IL_FACTOR = LAYER_OUT_NUM_T / %sSA_ROWS;\n' % (var_prefix))
	#     code.append(indent(2) + 'uint LAYER_COL_IL_FACTOR = LAYER_IN_IMG_W_T / %sSA_COLS / LAYER_STRIDE;\n\n' % (var_prefix))

			indent_level = 3

			code.append(indent(indent_level) + '// write out configurations\n')
	#     code.append(indent(indent_level) + 'fifo_config_out0.write(LAYER_IN_NUM);\n')
	#     code.append(indent(indent_level) + 'fifo_config_out0.write(LAYER_OUT_NUM);\n')
			code.append(indent(indent_level) + 'fifo_config_out0.write(LAYER_IN_NUM_T);\n')
			code.append(indent(indent_level) + 'fifo_config_out0.write(LAYER_OUT_NUM_T);\n')
	#     code.append(indent(indent_level) + 'fifo_config_out0.write(LAYER_IN_IMG_H);\n')
	#     code.append(indent(indent_level) + 'fifo_config_out0.write(LAYER_IN_IMG_W);\n')
	#     code.append(indent(indent_level) + 'fifo_config_out0.write(LAYER_OUT_IMG_H);\n')
	#     code.append(indent(indent_level) + 'fifo_config_out0.write(LAYER_OUT_IMG_W);\n')
			code.append(indent(indent_level) + 'fifo_config_out0.write(LAYER_IN_IMG_H_T);\n')
			code.append(indent(indent_level) + 'fifo_config_out0.write(LAYER_IN_IMG_W_T);\n')
			code.append(indent(indent_level) + 'fifo_config_out0.write(LAYER_FILTER_S_H);\n')
			code.append(indent(indent_level) + 'fifo_config_out0.write(LAYER_FILTER_S_W);\n')
			code.append(indent(indent_level) + 'fifo_config_out0.write(LAYER_TASK_NUM1);\n')
			code.append(indent(indent_level) + 'fifo_config_out0.write(LAYER_TASK_NUM2);\n')
			code.append(indent(indent_level) + 'fifo_config_out0.write(LAYER_LOCAL_ACCUM_NUM);\n')
			code.append(indent(indent_level) + 'fifo_config_out0.write(LAYER_LOCAL_REG_NUM);\n')
			code.append(indent(indent_level) + 'fifo_config_out0.write(LAYER_ROW_IL_FACTOR);\n')
			code.append(indent(indent_level) + 'fifo_config_out0.write(LAYER_COL_IL_FACTOR);\n')
			code.append(indent(indent_level) + 'fifo_config_out0.write(LAYER_STRIDE);\n')
			code.append(indent(indent_level) + 'fifo_config_out0.write(LAYER_BATCH);\n\n')

			code.append(indent(indent_level) + 'fifo_config_out0.write(LAYER_CONV_TYPE);\n')
			code.append(indent(indent_level) + 'fifo_config_out0.write(FILTER_D0_H);\n')
			code.append(indent(indent_level) + 'fifo_config_out0.write(FILTER_D0_W);\n')
			code.append(indent(indent_level) + 'fifo_config_out0.write(FILTER_D1_H);	\n')
			code.append(indent(indent_level) + 'fifo_config_out0.write(FILTER_D1_W);	\n')
			code.append(indent(indent_level) + 'fifo_config_out0.write(LAYER_DILATION_RATE);\n')
			code.append(indent(indent_level) + 'fifo_config_out0.write(LAYER_TCONV_STRIDE);\n')
			code.append(indent(indent_level) + 'fifo_config_out0.write(K_NUM);\n')
			code.append(indent(indent_level) + 'fifo_config_out0.write(KH);\n')
			code.append(indent(indent_level) + 'fifo_config_out0.write(KW);\n')


			code.append(indent(indent_level) + 'fifo_config_out1.write(LAYER_IN_NUM);\n')
	#     code.append(indent(indent_level) + 'fifo_config_out1.write(LAYER_OUT_NUM);\n')
			code.append(indent(indent_level) + 'fifo_config_out1.write(LAYER_IN_NUM_T);\n')
			code.append(indent(indent_level) + 'fifo_config_out1.write(LAYER_OUT_NUM_T);\n')
	#     code.append(indent(indent_level) + 'fifo_config_out1.write(LAYER_IN_IMG_H);\n')
	#     code.append(indent(indent_level) + 'fifo_config_out1.write(LAYER_IN_IMG_W);\n')
	#     code.append(indent(indent_level) + 'fifo_config_out1.write(LAYER_OUT_IMG_H);\n')
	#     code.append(indent(indent_level) + 'fifo_config_out1.write(LAYER_OUT_IMG_W);\n')
			code.append(indent(indent_level) + 'fifo_config_out1.write(LAYER_IN_IMG_H_T);\n')
			code.append(indent(indent_level) + 'fifo_config_out1.write(LAYER_IN_IMG_W_T);\n')
			code.append(indent(indent_level) + 'fifo_config_out1.write(LAYER_FILTER_S_H);\n')
			code.append(indent(indent_level) + 'fifo_config_out1.write(LAYER_FILTER_S_W);\n')
			code.append(indent(indent_level) + 'fifo_config_out1.write(LAYER_TASK_NUM1);\n')
			code.append(indent(indent_level) + 'fifo_config_out1.write(LAYER_TASK_NUM2);\n')
			code.append(indent(indent_level) + 'fifo_config_out1.write(LAYER_LOCAL_ACCUM_NUM);\n')
			code.append(indent(indent_level) + 'fifo_config_out1.write(LAYER_LOCAL_REG_NUM);\n')
			code.append(indent(indent_level) + 'fifo_config_out1.write(LAYER_ROW_IL_FACTOR);\n')
			code.append(indent(indent_level) + 'fifo_config_out1.write(LAYER_COL_IL_FACTOR);\n')
			code.append(indent(indent_level) + 'fifo_config_out1.write(LAYER_STRIDE);\n')
			code.append(indent(indent_level) + 'fifo_config_out1.write(LAYER_BATCH);\n\n')

			code.append(indent(indent_level) + 'fifo_config_out1.write(LAYER_CONV_TYPE);\n')
			code.append(indent(indent_level) + 'fifo_config_out1.write(FILTER_D0_H);\n')
			code.append(indent(indent_level) + 'fifo_config_out1.write(FILTER_D0_W);\n')
			code.append(indent(indent_level) + 'fifo_config_out1.write(FILTER_D1_H);	\n')
			code.append(indent(indent_level) + 'fifo_config_out1.write(FILTER_D1_W);	\n')
			code.append(indent(indent_level) + 'fifo_config_out1.write(LAYER_DILATION_RATE);\n')
			code.append(indent(indent_level) + 'fifo_config_out1.write(LAYER_TCONV_STRIDE);\n')
			code.append(indent(indent_level) + 'fifo_config_out1.write(K_NUM);\n')
			code.append(indent(indent_level) + 'fifo_config_out1.write(KH);\n')
			code.append(indent(indent_level) + 'fifo_config_out1.write(KW);\n')
			
			# 
			val = desp['PARAMETERS']['OUT_NUM'] * desp['PARAMETERS']['OUT_IMG_H'] * desp['PARAMETERS']['OUT_IMG_W']
			w = cal_width(val)
			code.append(indent(indent_level) + 'ap_uint<%d> task_iter = 0;\n' % (w))
			val = desp['PARAMETERS']['IN_NUM']
			w = cal_width(val)
			code.append(indent(indent_level) + 'ap_uint<%d> in_num_t = 0;\n' % (w))
			code.append(indent(indent_level) + 'bool done2 = 0;\n')
			code.append(indent(indent_level) + 'while(!done2){\n')
			code.append(indent(indent_level + 1) + 'if (FILTER_D0_W > 1 || FILTER_D0_H > 1){ //TODO this is to check overlapping tiles\n')
			code.append(indent(indent_level + 2) + 'bool done3 = 0;\n')
			val = desp['PARAMETERS']['IN_NUM']
			w = cal_width(val)
			code.append(indent(indent_level + 2) + 'ap_uint<%d> ii = 0;\n' % (w))
			val = desp['PARAMETERS']['IN_IMG_H']
			w = cal_width(val)
			code.append(indent(indent_level + 2) + 'ap_uint<%d> hh = 0;\n' % (w))
			val = desp['PARAMETERS']['IN_IMG_W']
			w = cal_width(val)
			code.append(indent(indent_level + 2) + 'ap_uint<%d> ww = 0;\n' % (w))
			
			code.append(indent(indent_level + 2) + 'while(!done3){\n')
			code.append('#pragma HLS PIPELINE II=1\n')
			code.append(indent(indent_level + 3) + 'uint cin_local_idx = hh *  (LAYER_IN_IMG_W_T + FILTER_D0_W - LAYER_STRIDE) * LAYER_IN_NUM_T + ww * LAYER_IN_NUM_T + ii * %sDATA0_FC_SIMD_FACTOR;\n' % (var_prefix))
			code.append(indent(indent_level + 3) + 'cin_buf[cin_local_idx / %sDATA0_FC_SIMD_FACTOR] = fifo_transfer_in.read();\n' % (var_prefix))
			code.append(indent(indent_level + 3) + 'ww++;\n')
			code.append(indent(indent_level + 3) + 'if (ww == LAYER_IN_IMG_W_T + FILTER_D0_W - LAYER_STRIDE){\n')
			code.append(indent(indent_level + 4) + 'ww = 0;\n')
			code.append(indent(indent_level + 4) + 'hh++;\n')
			code.append(indent(indent_level + 4) + 'if (hh == LAYER_IN_IMG_H_T + FILTER_D0_H - LAYER_STRIDE){\n')
			code.append(indent(indent_level + 5) + 'hh = 0;\n')
			code.append(indent(indent_level + 5) + 'ii++;\n')
			code.append(indent(indent_level + 5) + 'if (ii == LAYER_IN_NUM_T / %sDATA0_FC_SIMD_FACTOR){\n' % (var_prefix))
			code.append(indent(indent_level + 6) + 'ii = 0;\n')
			code.append(indent(indent_level + 6) + 'done3 = 1;\n')
			code.append(indent(indent_level + 5) + '}\n')
			code.append(indent(indent_level + 4) + '}\n')
			code.append(indent(indent_level + 3) + '}\n')
			code.append(indent(indent_level + 2) + '}\n')
			code.append(indent(indent_level + 1) + '}\n')

			code.append(indent(indent_level + 1) + 'bool init_final = (in_num_t == 0);\n')
			code.append(indent(indent_level + 1) + 'bool last = (in_num_t == (LAYER_IN_NUM - LAYER_IN_NUM_T));\n')

			code.append(indent(indent_level + 1) + '// write to SA\n')

			for feed_group in range(desp['FC_SPLIT_FACTOR'][idx]):
				code.append(indent(indent_level + 1) + 'ap_uint<' + var_prefix + 'DATA' + str(idx) + '_WIDTH * ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR> sel_tmp' + str(feed_group) + '[' + var_prefix + 'DATA' + str(idx) + '_PACK_FACTOR / ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR];\n')
				code.append('#pragma HLS ARRAY_PARTITION variable=sel_tmp'+ str(feed_group) + ' complete dim=1\n')
			indent_level += 1
	#     code_block = desp['HEAD_CODE'][idx]['BRAM_CODE']
	#     for code_line in code_block:
	#       code.append(indent(indent_level) + code_line)

			val = desp['PARAMETERS']['IN_NUM']
			w = cal_width(val)
			code.append(indent(indent_level) + 'ap_uint<%d> t3 = 0;\n' % (w))
			val = desp['PARAMETERS']['IN_IMG_H']
			w = cal_width(val)
			code.append(indent(indent_level) + 'ap_uint<%d> t1 = 0;\n' % (w))
			val = desp['SA_COLS']
			w = cal_width(val)
			code.append(indent(indent_level) + 'ap_uint<%d> t0 = 0;\n' % (w))
			val = desp['PARAMETERS']['IN_IMG_W'] / desp['SA_COLS'] + desp['PARAMETERS']['K'] - 1
			w = cal_width(val)
			code.append(indent(indent_level) + 'ap_uint<%d> t2 = 0;\n' % (w))
			code.append(indent(indent_level) + 'bool done4 = 0;\n')
			code.append(indent(indent_level) + 'while(!done4){\n')
			code.append('#pragma HLS PIPELINE II=1\n')
			code.append(indent(indent_level+1) + 'uint local_in_img_w = t0 * (LAYER_IN_IMG_W_T / %sSA_COLS) + t2;\n' % (var_prefix))
	#     code.append(indent(indent_level+1) + 'uint local_in_num = in_num_t * %sSIMD_FACTOR + t3 * %sDATA0_FC_SIMD_FACTOR;\n' % (var_prefix, var_prefix))
			code.append(indent(indent_level+1) + 'uint local_in_num = in_num_t + t3 * %sDATA0_FC_SIMD_FACTOR;\n' % (var_prefix))
			code.append(indent(indent_level+1) + 'uint local_in_img_h = t1;\n')
			code.append(indent(indent_level+1) + 'uint feeder_id = t0 / %sDATA0_FC_GROUP_FACTOR;\n' % (var_prefix))
			code.append(indent(indent_level+1) + 'ap_uint<%sDATA0_WIDTH * %sDATA0_FC_SIMD_FACTOR> wide_data0;\n' % (var_prefix, var_prefix))
			code.append(indent(indent_level+1) + 'if (FILTER_D0_W > 1 || FILTER_D0_H > 1){\n')
			code.append(indent(indent_level+2) + 'uint cin_local_index = local_in_img_h * (LAYER_IN_IMG_W_T + FILTER_D0_W - LAYER_STRIDE) * LAYER_IN_NUM_T + local_in_img_w * LAYER_IN_NUM_T + t3 * %sDATA0_FC_SIMD_FACTOR;\n' % (var_prefix))
			code.append(indent(indent_level+2) + 'uint cin_bus_index = cin_local_index / %sDATA0_FC_SIMD_FACTOR;\n' % (var_prefix))
			code.append(indent(indent_level+2) + 'wide_data0 = cin_buf[cin_bus_index];\n')
			code.append(indent(indent_level+1) + '} else {\n')
			code.append(indent(indent_level+2) + 'wide_data0 = fifo_transfer_in.read();\n')
			code.append(indent(indent_level+1) + '}\n')
			code.append(indent(indent_level+1) + 'fifo_transfer_out0.write(%sData0TransferChannelType(\n' % (var_prefix))
			code.append(indent(indent_level+2) + 'wide_data0,\n')
			code.append(indent(indent_level+2) + '(uint)feeder_id, init_final, last, 1));\n\n')
	#     code.append(indent(indent_level+3) + '}\n')
	#     code.append(indent(indent_level+2) + '}\n')
	#     code.append(indent(indent_level+1) + '}\n')

			code.append(indent(indent_level+1) + 't2++;\n')
			code.append(indent(indent_level+1) + 'if (t2 == LAYER_IN_IMG_W_T / %sSA_COLS + FILTER_D0_W - LAYER_STRIDE){\n' % (var_prefix))
			code.append(indent(indent_level+2) + 't2 = 0;\n')
			code.append(indent(indent_level+2) + 't0++;\n')
			code.append(indent(indent_level+2) + 'if (t0 == %sSA_COLS / %sDATA0_FC_SPLIT_FACTOR){\n' % (var_prefix, var_prefix))
			code.append(indent(indent_level+3) + 't0 = 0;\n')
			code.append(indent(indent_level+3) + 't1++;\n')
			code.append(indent(indent_level+3) + 'if (t1 == LAYER_IN_IMG_H_T + FILTER_D0_H - LAYER_STRIDE){\n')
			code.append(indent(indent_level+4) + 't1 = 0;\n')
			code.append(indent(indent_level+4) + 't3++;\n')
			code.append(indent(indent_level+4) + 'if (t3 == LAYER_IN_NUM_T / %sDATA0_FC_SIMD_FACTOR){\n' % (var_prefix))
			code.append(indent(indent_level+5) + 't3 = 0;\n')
			code.append(indent(indent_level+5) + 'done4 = 1;\n')
			code.append(indent(indent_level+4) + '}\n')
			code.append(indent(indent_level+3) + '}\n')
			code.append(indent(indent_level+2) + '}\n')
			code.append(indent(indent_level+1) + '}\n')

			code.append(indent(indent_level) + '}\n\n')
			code.append(indent(3 + 1) + 'in_num_t += LAYER_IN_NUM_T;\n')
			code.append(indent(3 + 1) + 'if (in_num_t == LAYER_IN_NUM){\n')
			code.append(indent(4 + 1) + 'in_num_t = 0;\n')
			code.append(indent(4 + 1) + 'task_iter++;\n')
			code.append(indent(4 + 1) + 'if (task_iter == LAYER_TASK_NUM2){\n')
			code.append(indent(5 + 1) + 'task_iter = 0;\n')
			code.append(indent(5 + 1) + 'done2 = 1;\n')
			code.append(indent(4 + 1) + '}\n')
			code.append(indent(3 + 1) + '}\n')

			code.append(indent(2 + 1) + '}\n')
			code.append(indent(2 + 1) + 'layer_iter++;\n')
			code.append(indent(2 + 1) + 'if (layer_iter == LAYER_BATCH){\n')
			code.append(indent(3 + 1) + 'layer_iter = 0;\n')
			code.append(indent(3 + 1) + 'done1 = 1;\n')
			code.append(indent(2 + 1) + '}\n')
			code.append(indent(1 + 1) + '}\n')
			code.append(indent(1) + '}break;\n')
			code.append(indent(1) + '}\n')
			code.append(indent(1) + '  inst++;\n')
			code.append(indent(1) + '  if(inst == inst_count){\n')
			code.append(indent(1) + '    inst_done = 1;\n')
			code.append(indent(1) + '  }\n')
			code.append(indent(1) + '}\n')
			code.append(indent(0) + '}\n')
			code.append('\n')
		elif idx == 1:
			code.append('void ' + var_prefix + 'DataFeed' + str(idx) + 'Head(\n')
	#     code.append(indent(1) + var_prefix + 'bus_t' + str(idx) + '* ' + op_name + ',\n')
			code.append(indent(1) + 'tapa::istream<ap_uint<%sDATA%d_WIDTH * %sDATA%d_FC_SIMD_FACTOR> > &fifo_transfer_in,\n' % (var_prefix, idx, var_prefix, idx))
	#     code.append(indent(1) + 'bool init,\n')
	#     code.append(indent(1) + 'unsigned int FILTER_S_H,\n')
	#     code.append(indent(1) + 'unsigned int FILTER_S_W,\n')
			for feed_group in range(desp['FC_SPLIT_FACTOR'][idx]):
				if feed_group < desp['FC_SPLIT_FACTOR'][idx] - 1:
					code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_out' + str(feed_group) + ',\n')
				else:
					code.append(indent(1) + 'tapa::ostream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_out' + str(feed_group) + ',\n')
			code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in,\n')
			code.append(indent(1) + 'tapa::ostream<uint> &fifo_config_out\n')
			code.append('){\n')
			code.append('#pragma HLS INLINE off\n')
			for feed_group in range(desp['FC_SPLIT_FACTOR'][idx]):
				code.append('#pragma HLS DATA_PACK variable=fifo_transfer_out' + str(feed_group) + '\n')
				code.append(indent(1) + 'bool inst_done = 0;\n')
			code.append(indent(1) + 'uint inst = 0;\n')
			code.append(indent(1) + 'int inst_count = fifo_config_in.read();\n')
			code.append(indent(1) + 'fifo_config_out.write(inst_count);\n')
			code.append(indent(1) + 'while(!inst_done){\n')
			code.append(indent(1) + 'uint CONV_EN = fifo_config_in.read();\n')
			code.append(indent(1) + 'fifo_config_out.write(CONV_EN);\n')
			code.append(indent(1) + 'if(CONV_EN){\n')
			code.append(indent(1) + '// read in configurations\n')
			code.append(indent(1) + 'uint LAYER_IN_NUM = fifo_config_in.read();\n')
	#     code.append(indent(1) + 'uint LAYER_OUT_NUM = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_IN_NUM_T = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_OUT_NUM_T = fifo_config_in.read();\n')
	#     code.append(indent(1) + 'uint LAYER_IN_IMG_H = fifo_config_in.read();\n')
	#     code.append(indent(1) + 'uint LAYER_IN_IMG_W = fifo_config_in.read();\n')
	#     code.append(indent(1) + 'uint LAYER_OUT_IMG_H = fifo_config_in.read();\n')
	#     code.append(indent(1) + 'uint LAYER_OUT_IMG_W = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_IN_IMG_H_T = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_IN_IMG_W_T = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_FILTER_S_H = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_FILTER_S_W = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_TASK_NUM1 = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_TASK_NUM2 = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_COL_IL_FACTOR = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_STRIDE = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_BATCH = fifo_config_in.read();\n\n')

			code.append(indent(1) + 'uint LAYER_CONV_TYPE = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint FILTER_D0_H = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint FILTER_D0_W = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint FILTER_D1_H = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint FILTER_D1_W = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_DILATION_RATE = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint LAYER_TCONV_STRIDE = fifo_config_in.read();\n')
			code.append(indent(1) + 'uint K_NUM = fifo_config_in.read();\n')
			code.append(indent(1) + 'ap_uint<32> KH = fifo_config_in.read();\n')
			code.append(indent(1) + 'ap_uint<32> KW = fifo_config_in.read();\n')


			code.append(indent(1) + '// loader buffer\n')
			code.append(indent(1) + 'ap_uint<%sDATA%d_WIDTH * %sDATA%d_FC_SIMD_FACTOR> %s_buf[WEIGHT_BUFF / %sDATA%d_FC_SIMD_FACTOR];\n' % (var_prefix, idx, var_prefix, idx, op_name, var_prefix, idx))
			code.append(indent(1) + '#if U1_DataFeed1Head_MEM == 0\n')
			code.append(indent(2) + '#pragma HLS bind_storage variable=%s_buf type=RAM_T2P impl=BRAM\n' % op_name)
			code.append(indent(1) + '#elif U1_DataFeed1Head_MEM == 1\n')
			code.append(indent(2) + '#pragma HLS bind_storage variable=%s_buf type=RAM_T2P impl=URAM\n' % op_name)
				#code.append(indent(1) + '#elif MEM_TYPE == 2\n')
				#code.append(indent(2) + '#pragma HLS bind_storage variable=%s_buf type=RAM_T2P impl=BRAM\n' % op_name)
				#code.append(indent(1) + '#elif MEM_TYPE == 3\n')
				#code.append(indent(2) + '#pragma HLS bind_storage variable=%s_buf type=RAM_T2P impl=BRAM\n' % op_name)
			code.append(indent(1) + '#endif\n')
			code.append('#pragma HLS ARRAY_PARTITION variable=%s_buf dim=1 block factor=%s\n\n' % (op_name, str(desp['FC_SPLIT_FACTOR'][idx])))

			code.append(indent(1) + 'bool done1 = 0;\n')
			w = cal_width(desp['PARAMETERS']['LAYER_BATCH'])
			code.append(indent(1) + 'ap_uint<%d> layer_iter = 0;\n' % (w))
			code.append(indent(1) + 'while(!done1){\n')
			code.append(indent(2) + 'if (layer_iter > 0){\n')
			code.append(indent(3) + 'LAYER_IN_NUM = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_IN_NUM_T = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_OUT_NUM_T = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_IN_IMG_H_T = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_IN_IMG_W_T = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_FILTER_S_H = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_FILTER_S_W = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_TASK_NUM1 = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_TASK_NUM2 = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_LOCAL_REG_NUM = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_ROW_IL_FACTOR = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_COL_IL_FACTOR = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_STRIDE = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_BATCH = fifo_config_in.read();\n\n')

			code.append(indent(3) + 'LAYER_CONV_TYPE = fifo_config_in.read();\n')
			code.append(indent(3) + 'FILTER_D0_H = fifo_config_in.read();\n')
			code.append(indent(3) + 'FILTER_D0_W = fifo_config_in.read();\n')
			code.append(indent(3) + 'FILTER_D1_H = fifo_config_in.read();\n')
			code.append(indent(3) + 'FILTER_D1_W = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_DILATION_RATE = fifo_config_in.read();\n')
			code.append(indent(3) + 'LAYER_TCONV_STRIDE = fifo_config_in.read();\n')
			code.append(indent(3) + 'K_NUM = fifo_config_in.read();\n')
			code.append(indent(3) + 'KH = fifo_config_in.read();\n')
			code.append(indent(3) + 'KW = fifo_config_in.read();\n')


			code.append(indent(2) + '}\n')

			code.append(indent(2) + '// write out configurations\n')
			code.append(indent(2) + 'fifo_config_out.write(LAYER_IN_NUM_T);\n')
			code.append(indent(2) + 'fifo_config_out.write(LAYER_OUT_NUM_T);\n')
			code.append(indent(2) + 'fifo_config_out.write(LAYER_IN_IMG_H_T);\n')
			code.append(indent(2) + 'fifo_config_out.write(LAYER_IN_IMG_W_T);\n')
			code.append(indent(2) + 'fifo_config_out.write(LAYER_FILTER_S_H);\n')
			code.append(indent(2) + 'fifo_config_out.write(LAYER_FILTER_S_W);\n')
			code.append(indent(2) + 'fifo_config_out.write(LAYER_TASK_NUM1);\n')
			code.append(indent(2) + 'fifo_config_out.write(LAYER_TASK_NUM2);\n')
			code.append(indent(2) + 'fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);\n')
			code.append(indent(2) + 'fifo_config_out.write(LAYER_LOCAL_REG_NUM);\n')
			code.append(indent(2) + 'fifo_config_out.write(LAYER_ROW_IL_FACTOR);\n')
			code.append(indent(2) + 'fifo_config_out.write(LAYER_COL_IL_FACTOR);\n')
			code.append(indent(2) + 'fifo_config_out.write(LAYER_STRIDE);\n')
			code.append(indent(2) + 'fifo_config_out.write(LAYER_BATCH);\n\n')

			code.append(indent(2) + 'fifo_config_out.write(LAYER_CONV_TYPE);\n')
			code.append(indent(2) + 'fifo_config_out.write(FILTER_D0_H);\n')
			code.append(indent(2) + 'fifo_config_out.write(FILTER_D0_W);\n')
			code.append(indent(2) + 'fifo_config_out.write(FILTER_D1_H);	\n')
			code.append(indent(2) + 'fifo_config_out.write(FILTER_D1_W);	\n')
			code.append(indent(2) + 'fifo_config_out.write(LAYER_DILATION_RATE);\n')
			code.append(indent(2) + 'fifo_config_out.write(LAYER_TCONV_STRIDE);\n')
			code.append(indent(2) + 'fifo_config_out.write(K_NUM);\n')
			code.append(indent(2) + 'fifo_config_out.write(KH);\n')
			code.append(indent(2) + 'fifo_config_out.write(KW);\n')



			code.append(indent(2) + 'bool done2 = 0;\n')
			code.append(indent(2) + 'uint task_iter = 0;\n')
			val = desp['PARAMETERS']['IN_NUM']
			w = cal_width(val)
			code.append(indent(2) + 'ap_uint<%d> in_num_t = 0;\n' % (w))
			code.append(indent(2) + 'while(!done2){\n')

			code.append(indent(3) + 'bool init_final = (in_num_t == 0);\n')
			code.append(indent(3) + 'bool last = (in_num_t == (LAYER_IN_NUM - LAYER_IN_NUM_T));\n')

			code.append(indent(3) + '// write to SA\n')

			for feed_group in range(desp['FC_SPLIT_FACTOR'][idx]):
				code.append(indent(3) + 'ap_uint<' + var_prefix + 'DATA' + str(idx) + '_WIDTH * ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR> sel_tmp' + str(feed_group) + '[' + var_prefix + 'DATA' + str(idx) + '_PACK_FACTOR / ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR];\n')
				code.append('#pragma HLS ARRAY_PARTITION variable=sel_tmp'+ str(feed_group) + ' complete dim=1\n')

	#     code_block = desp['HEAD_CODE'][idx]['BRAM_CODE']
	#     for code_line in code_block:
	#       code.append(indent(indent_level) + code_line)

			indent_level = 3
			val = desp['SA_ROWS']
			w = cal_width(val)
			code.append(indent(indent_level) + 'ap_uint<%d> t0 = 0;\n' % (w))
			val = desp['ROW_IL_FACTOR']
			w = cal_width(val)
			code.append(indent(indent_level) + 'ap_uint<%d> t1 = 0;\n' % (w))
			val = desp['PARAMETERS']['K']
			w = cal_width(val)
			code.append(indent(indent_level) + 'ap_uint<%d> t2 = 0;\n' % (w))
			code.append(indent(indent_level) + 'ap_uint<%d> t3 = 0;\n' % (w))
			val = desp['PARAMETERS']['IN_NUM']
			w = cal_width(val)
			code.append(indent(indent_level) + 'ap_uint<%d> t4 = 0;\n' % (w))
			code.append(indent(indent_level) + 'bool done3 = 0;\n')

			code.append(indent(indent_level) + 'while(!done3){\n')
			code.append('#pragma HLS PIPELINE II=1\n')
			val = desp['SA_ROWS']
			w = cal_width(val)
			code.append(indent(indent_level + 1) + 'ap_uint<%d> feeder_id = t0 / %sDATA1_FC_GROUP_FACTOR;\n' % (w, var_prefix))
			code.append(indent(indent_level + 1) + 'ap_uint<%sDATA1_WIDTH * %sDATA1_FC_SIMD_FACTOR> wide_data0;\n' % (var_prefix, var_prefix))
			code.append(indent(indent_level + 1) + 'wide_data0 = fifo_transfer_in.read();\n')
			code.append(indent(indent_level + 1) + 'fifo_transfer_out0.write(%sData1TransferChannelType(\n' % (var_prefix))
			code.append(indent(indent_level + 2) + 'wide_data0,\n')
			code.append(indent(indent_level + 2) + '(uint)feeder_id, init_final, last, 1));\n\n')

			code.append(indent(indent_level + 1) + 't4++;\n')
			code.append(indent(indent_level + 1) + 'if (t4 == LAYER_IN_NUM_T / %sDATA1_FC_SIMD_FACTOR){\n' % (var_prefix))
			code.append(indent(indent_level + 2) + 't4 = 0;\n')
			code.append(indent(indent_level + 2) + 't3++;\n')
			code.append(indent(indent_level + 2) + 'if (t3 == FILTER_D1_H){\n')
			code.append(indent(indent_level + 3) + 't3 = 0;\n')
			code.append(indent(indent_level + 3) + 't2++;\n')
			code.append(indent(indent_level + 3) + 'if (t2 == FILTER_D1_W){\n')
			code.append(indent(indent_level + 4) + 't2 = 0;\n')
			code.append(indent(indent_level + 4) + 't1++;\n')
			code.append(indent(indent_level + 4) + 'if (t1 == LAYER_ROW_IL_FACTOR){\n')
			code.append(indent(indent_level + 5) + 't1 = 0;\n')
			code.append(indent(indent_level + 5) + 't0++;\n')
			code.append(indent(indent_level + 5) + 'if (t0 == %sSA_ROWS / %sDATA1_FC_SPLIT_FACTOR){\n' % (var_prefix, var_prefix))
			code.append(indent(indent_level + 6) + 't0 = 0;\n')
			code.append(indent(indent_level + 6) + 'done3 = 1;\n')
			code.append(indent(indent_level + 5) + '}\n')
			code.append(indent(indent_level + 4) + '}\n')
			code.append(indent(indent_level + 3) + '}\n')
			code.append(indent(indent_level + 2) + '}\n')
			code.append(indent(indent_level + 1) + '}\n')
			code.append(indent(indent_level) + '}\n\n')

			code.append(indent(indent_level) + 'in_num_t += LAYER_IN_NUM_T;\n')
			code.append(indent(indent_level) + 'if (in_num_t == LAYER_IN_NUM){\n')
			code.append(indent(indent_level + 1) + 'in_num_t = 0;\n')
			code.append(indent(indent_level + 1) + 'task_iter++;\n')
			code.append(indent(indent_level + 1) + 'if (task_iter == LAYER_TASK_NUM2){\n')
			code.append(indent(indent_level + 2) + 'task_iter = 0;\n')
			code.append(indent(indent_level + 2) + 'done2 = 1;\n')
			code.append(indent(indent_level + 1) + '}\n')
			code.append(indent(indent_level) + '}\n')

			code.append(indent(2) + '}\n')
			code.append(indent(2) + 'layer_iter++;\n')
			code.append(indent(2) + 'if (layer_iter == LAYER_BATCH){\n')
			code.append(indent(3) + 'layer_iter = 0;\n')
			code.append(indent(3) + 'done1 = 1;\n')
			code.append(indent(2) + '}\n')
			code.append(indent(1) + '}\n')
			code.append(indent(1) + '}\n')
			code.append(indent(1) + '  inst++;\n')
			code.append(indent(1) + '  if(inst == inst_count){\n')
			code.append(indent(1) + '    inst_done = 1;\n')
			code.append(indent(1) + '  }\n')
			code.append('  }\n')
			code.append('}\n\n')

		idx += 1

	for res_name in desp['RES_NAME']:
			#shim
			#code.append('void ' + var_prefix + 'DataCollect' + str(idx) + 'Head_Shim(\n')
			#code.append(indent(1) + var_prefix + 'bus_t' + str(idx) + '* ' + res_name + ',\n')
			#code.append(indent(1) + 'stream<ap_uint<' + var_prefix + 'DATA' + str(idx) + '_WIDTH * ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR> > &fifo_transfer_' + res_name + ',\n')
			#code.append(indent(1) + 'tapa::istream<%sConfigInst> &fifo_kernel_config_in,\n' % (var_prefix))
			#code.append(indent(1) + 'uint LAYER_IN_NUM,\n')
			#code.append(indent(1) + 'uint LAYER_OUT_NUM,\n')
			#code.append(indent(1) + 'uint LAYER_IN_NUM_T,\n')
			#code.append(indent(1) + 'uint LAYER_OUT_NUM_T,\n')
			#code.append(indent(1) + 'uint LAYER_IN_IMG_H,\n')
			#code.append(indent(1) + 'uint LAYER_IN_IMG_W,\n')
			#code.append(indent(1) + 'uint LAYER_OUT_IMG_H,\n')
			#code.append(indent(1) + 'uint LAYER_OUT_IMG_W,\n')
			#code.append(indent(1) + 'uint LAYER_IN_IMG_H_T,\n')
			#code.append(indent(1) + 'uint LAYER_IN_IMG_W_T,\n')
			#code.append(indent(1) + 'ap_uint<8> LAYER_FILTER_S_H,\n')
			#code.append(indent(1) + 'ap_uint<8> LAYER_FILTER_S_W,\n')
			#code.append(indent(1) + 'uint LAYER_STRIDE\n')
			#code.append('){\n')
			#code.append('#pragma HLS INLINE off\n\n')

			#code.append(indent(1) + '%sConfigInst inst0 = fifo_kernel_config_in.read();\n' % (var_prefix))
			#code.append(indent(1) + '%sConfigInst inst1 = fifo_kernel_config_in.read();\n' % (var_prefix))
			#code.append(indent(1) + '%sConfigInst inst2 = fifo_kernel_config_in.read();\n' % (var_prefix))
			#code.append(indent(1) + '%sConfigInst inst3 = fifo_kernel_config_in.read();\n' % (var_prefix))
			#code.append(indent(1) + '%sConfigInst inst4 = fifo_kernel_config_in.read();\n' % (var_prefix))
			#code.append(indent(1) + '%sConfigInst inst5 = fifo_kernel_config_in.read();\n' % (var_prefix))
			#code.append(indent(1) + 'ap_uint<32> LAYER_BATCH = inst3(32*5+31, 32*5);\n\n')

			#code.append(indent(1) + var_prefix + 'bus_t%d %s_buf[%sDATA%d_HEAD_BUF_SIZE / %sDATA%d_PACK_FACTOR];\n' % (idx, res_name, var_prefix, idx, var_prefix, idx))
			#code.append(indent(1) + 'ap_uint<' + var_prefix + 'DATA' + str(idx) + '_WIDTH * ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR> sel_tmp[' + var_prefix + 'DATA' + str(idx) + '_PACK_FACTOR / ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR];\n')
			#code.append('#pragma HLS ARRAY_PARTITION variable=sel_tmp complete dim=1\n\n')

			#w = cal_width(desp['PARAMETERS']['LAYER_BATCH'])
			#code.append(indent(1) + 'for (ap_uint<%d> layer_iter = 0; layer_iter < LAYER_BATCH; layer_iter++){\n' % (w))
			#code.append(indent(2) + 'if (layer_iter > 0){\n')
			#code.append(indent(3) + '%sConfigInst inst0 = fifo_kernel_config_in.read();\n' % (var_prefix))
			#code.append(indent(3) + '%sConfigInst inst1 = fifo_kernel_config_in.read();\n' % (var_prefix))
			#code.append(indent(3) + '%sConfigInst inst2 = fifo_kernel_config_in.read();\n' % (var_prefix))
			#code.append(indent(3) + '%sConfigInst inst3 = fifo_kernel_config_in.read();\n' % (var_prefix))
			#code.append(indent(3) + '%sConfigInst inst4 = fifo_kernel_config_in.read();\n' % (var_prefix))
			#code.append(indent(3) + '%sConfigInst inst5 = fifo_kernel_config_in.read();\n' % (var_prefix))
			#code.append(indent(2) + '}\n')

			#code.append(indent(2) + 'for (int out_img_h_t = 0; out_img_h_t < LAYER_OUT_IMG_H; out_img_h_t += LAYER_IN_IMG_H_T / LAYER_STRIDE){\n')
			#code.append(indent(3) + 'for (int out_img_w_t = 0; out_img_w_t < LAYER_OUT_IMG_W; out_img_w_t += LAYER_IN_IMG_W_T / LAYER_STRIDE){\n')
			#code.append(indent(4) + 'for (int out_num_t = 0; out_num_t < LAYER_OUT_NUM; out_num_t += LAYER_OUT_NUM_T){\n')
			#code.append(indent(5) + 'for (int o = 0; o < LAYER_OUT_NUM_T / %sDATA2_PACK_FACTOR; o++){\n' % (var_prefix))
			#code.append(indent(6) + 'for (int oo = 0; oo < %sDATA2_PACK_FACTOR / %sDATA2_FC_SIMD_FACTOR; oo++){\n' % (var_prefix, var_prefix))
			#code.append(indent(7) + 'for (int h = 0; h < LAYER_IN_IMG_H_T / LAYER_STRIDE; h++){\n')
			#code.append(indent(8) + 'for (int w = 0; w < LAYER_IN_IMG_W_T / LAYER_STRIDE; w++){\n')
			#code.append('#pragma HLS PIPELINE II=1\n')
			#code.append('#pragma HLS DEPENDENCE INTER false variable=cout_buf\n')
			#code.append(indent(9) + 'uint cout_local_index = h * LAYER_IN_IMG_W_T / LAYER_STRIDE * LAYER_OUT_NUM + w * LAYER_OUT_NUM + o * %sDATA2_PACK_FACTOR + oo * %sDATA2_FC_SIMD_FACTOR + out_num_t;\n' % (var_prefix, var_prefix))
			#code.append(indent(9) + '%sbus_t2 bus_data = cout_buf[cout_local_index / %sDATA2_PACK_FACTOR];\n' % (var_prefix, var_prefix))
			#unroll_w = cal_width(desp['BUS_WIDTH'][idx] / desp['DATA_WIDTH'][idx] / desp['FC_SIMD_FACTOR'][idx])
			#code.append(indent(9) + 'for (ap_uint<' + str(unroll_w) + '> s = 0; s < ' + var_prefix + 'DATA' + str(idx) + '_PACK_FACTOR / ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR; s++){\n')
			#code.append('#pragma HLS UNROLL\n')
			#code.append(indent(10) + 'sel_tmp[s] = bus_data(' + var_prefix + 'DATA' + str(idx) + '_WIDTH * ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR - 1, 0);\n')
			#code.append(indent(10) + 'bus_data = bus_data >> (' + var_prefix + 'DATA' + str(idx) + '_WIDTH * ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR);\n')
			#code.append(indent(9) + '}\n')

			#code.append(indent(9) + 'ap_uint<%sDATA%d_WIDTH * %sDATA%d_FC_SIMD_FACTOR> fifo_cout_data = fifo_transfer_cout.read();\n' % (var_prefix, idx, var_prefix, idx))
			#code.append(indent(9) + 'sel_tmp[oo] = fifo_cout_data;\n')
			#code.append(indent(9) + '%sbus_t2 wide_pack = (\n' % (var_prefix))
			#code.append('#if %sDATA2_PACK_FACTOR / %sDATA2_FC_SIMD_FACTOR == 1\n' % (var_prefix, var_prefix))
			#code.append(indent(10) + 'sel_tmp[0]\n')
			#code.append('#elif %sDATA2_PACK_FACTOR / %sDATA2_FC_SIMD_FACTOR == 2\n' % (var_prefix, var_prefix))
			#code.append(indent(10) + 'sel_tmp[1], sel_tmp[0]\n')
			#code.append('#elif %sDATA2_PACK_FACTOR / %sDATA2_FC_SIMD_FACTOR == 4\n' % (var_prefix, var_prefix))
			#code.append(indent(10) + 'sel_tmp[3], sel_tmp[2], sel_tmp[1], sel_tmp[0]\n')
			#code.append('#elif %sDATA2_PACK_FACTOR / %sDATA2_FC_SIMD_FACTOR == 8\n' % (var_prefix, var_prefix))
			#code.append(indent(10) + 'sel_tmp[7], sel_tmp[6], sel_tmp[5], sel_tmp[4],\n')
			#code.append(indent(10) + 'sel_tmp[3], sel_tmp[2], sel_tmp[1], sel_tmp[0]\n')
			#code.append('#elif %sDATA2_PACK_FACTOR / %sDATA2_FC_SIMD_FACTOR == 16\n' % (var_prefix, var_prefix))
			#code.append(indent(10) + 'sel_tmp[15], sel_tmp[14], sel_tmp[13], sel_tmp[12],\n')
			#code.append(indent(10) + 'sel_tmp[11], sel_tmp[10], sel_tmp[9], sel_tmp[8],\n')
			#code.append(indent(10) + 'sel_tmp[7], sel_tmp[6], sel_tmp[5], sel_tmp[4],\n')
			#code.append(indent(10) + 'sel_tmp[3], sel_tmp[2], sel_tmp[1], sel_tmp[0]\n')
			#code.append('#endif\n')
			#code.append(indent(9) + ');\n')
			#code.append(indent(9) + 'cout_buf[cout_local_index / %sDATA2_PACK_FACTOR] = wide_pack;\n' % (var_prefix))

			#code.append(indent(8) + '}\n')
			#code.append(indent(7) + '}\n')
			#code.append(indent(6) + '}\n')
			#code.append(indent(5) + '}\n')
			#code.append(indent(4) + '}\n')

			#code.append(indent(4) + 'unsigned int chunk_offset = out_img_h_t * %sOUT_IMG_W * LAYER_OUT_NUM;\n' % (var_prefix))
			#code.append(indent(4) + 'for (int h = 0; h < LAYER_IN_IMG_H_T / LAYER_STRIDE; h++){\n')
			#code.append(indent(5) + 'uint local_chunk_offset = chunk_offset + h * %sOUT_IMG_W * LAYER_OUT_NUM + out_img_w_t * LAYER_OUT_NUM;\n' % (var_prefix))
			#code.append(indent(5) + 'memcpy((void*)(cout + local_chunk_offset / %sDATA2_PACK_FACTOR), (void*)(cout_buf + h * %sOUT_IMG_W_T * LAYER_OUT_NUM / %sDATA2_PACK_FACTOR), sizeof(%sdata_t2) * LAYER_IN_IMG_W_T / LAYER_STRIDE * LAYER_OUT_NUM);\n' % (var_prefix, var_prefix, var_prefix, var_prefix))
			#code.append(indent(4) + '}\n')
			#code.append(indent(3) + '}\n')
			#code.append(indent(2) + '}\n')
			#code.append(indent(1) + '}\n')
			#code.append('}\n\n')

		code.append('void ' + var_prefix + 'DataCollect' + str(idx) + 'Head(\n')
	#   code.append(indent(1) + var_prefix + 'bus_t' + str(idx) + '* ' + res_name + ',\n')
		code.append(indent(1) + 'tapa::istream<ap_uint<U1_DATA2_WIDTH * U1_DATA2_FC_SIMD_FACTOR> > &fifo_data_bypass,\n')
		code.append(indent(1) + 'tapa::istream<uint> &fifo_config_bypass,\n')
		code.append(indent(1) + 'tapa::ostream<ap_uint<' + var_prefix + 'DATA' + str(idx) + '_WIDTH * ' + var_prefix + 'DATA' + str(idx) + '_FC_SIMD_FACTOR> > &fifo_transfer_out,\n')
		for feed_id in range(desp['FC_SPLIT_FACTOR'][idx]):
			if feed_id < desp['FC_SPLIT_FACTOR'][idx] - 1:
				code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_in' + str(feed_id) + ',\n')
			else:
				code.append(indent(1) + 'tapa::istream<' + var_prefix + 'Data' + str(idx) + 'TransferChannelType> &fifo_transfer_in' + str(feed_id) + ',\n')
		code.append(indent(1) + 'tapa::istream<uint> &fifo_config_in\n')
		code.append('){\n')
		code.append('#pragma HLS INLINE off\n')

		for feed_id in range(desp['FC_SPLIT_FACTOR'][idx]):
			code.append('#pragma HLS DATA_PACK variable=fifo_transfer_in' + str(feed_id) + '\n')
		code.append(indent(1) + 'bool inst_done = 0;\n')  
		code.append(indent(1) + 'uint inst = 0;\n')  
		code.append(indent(1) + 'int inst_count = fifo_config_in.read();\n')
		code.append(indent(1) + 'while(!inst_done){\n')
		code.append(indent(1) + 'uint CONV_EN = fifo_config_in.read();\n')
		code.append(indent(1) + 'if(CONV_EN){\n')

		code.append(indent(1) + '// read in configurations\n')
	#   code.append(indent(1) + 'uint LAYER_IN_NUM = fifo_config_in.read();\n')
	#   code.append(indent(1) + 'uint LAYER_OUT_NUM = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_IN_NUM_T = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_OUT_NUM_T = fifo_config_in.read();\n')
	#   code.append(indent(1) + 'uint LAYER_IN_IMG_H = fifo_config_in.read();\n')
	#   code.append(indent(1) + 'uint LAYER_IN_IMG_W = fifo_config_in.read();\n')
	#   code.append(indent(1) + 'uint LAYER_OUT_IMG_H = fifo_config_in.read();\n')
	#   code.append(indent(1) + 'uint LAYER_OUT_IMG_W = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_IN_IMG_H_T = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_IN_IMG_W_T = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_FILTER_S_H = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_FILTER_S_W = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_TASK_NUM1 = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_TASK_NUM2 = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_COL_IL_FACTOR = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_STRIDE = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_BATCH = fifo_config_in.read();\n\n')

		code.append(indent(1) + 'uint LAYER_CONV_TYPE = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint FILTER_D0_H = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint FILTER_D0_W = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint FILTER_D1_H = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint FILTER_D1_W = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_DILATION_RATE = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint LAYER_TCONV_STRIDE = fifo_config_in.read();\n')
		code.append(indent(1) + 'uint K_NUM = fifo_config_in.read();\n')
		code.append(indent(1) + 'ap_uint<32> KH = fifo_config_in.read();\n')
		code.append(indent(1) + 'ap_uint<32> KW = fifo_config_in.read();\n')


		code.append(indent(1) + '// loader buffer\n')
		code.append(indent(1) + 'ap_uint<%sDATA2_WIDTH * %sDATA2_FC_SIMD_FACTOR> cout_buf[COUT_BUFF / %sDATA2_FC_SIMD_FACTOR];\n' % (var_prefix, var_prefix, var_prefix))
		code.append(indent(1) + '#if U1_DataCollect2Head_MEM == 0\n')
		code.append(indent(2) + '#pragma HLS bind_storage variable=cout_buf type=RAM_T2P impl=BRAM\n')
		code.append(indent(1) + '#elif U1_DataCollect2Head_MEM == 1\n')
		code.append(indent(2) + '#pragma HLS bind_storage variable=cout_buf type=RAM_T2P impl=URAM\n')
			#code.append(indent(1) + '#elif MEM_TYPE == 2\n')
			#code.append(indent(2) + '#pragma HLS bind_storage variable=cout_buf type=RAM_T2P impl=BRAM\n')
			#code.append(indent(1) + '#elif MEM_TYPE == 3\n')
			#code.append(indent(2) + '#pragma HLS bind_storage variable=cout_buf type=RAM_T2P impl=BRAM\n')
		code.append(indent(1) + '#endif\n')

		w = cal_width(desp['PARAMETERS']['LAYER_BATCH'])
		code.append(indent(1) + 'ap_uint<%d> layer_iter = 0;\n' % (w))
		code.append(indent(1) + 'bool done1 = 0;\n')
	#   code.append(indent(1) + 'for (ap_uint<%d> layer_iter = 0; layer_iter < LAYER_BATCH; layer_iter++){\n' % (w))
		code.append(indent(1) + 'while(!done1){\n')
		code.append(indent(2) + 'if (layer_iter > 0){\n')
		code.append(indent(3) + 'LAYER_IN_NUM_T = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_OUT_NUM_T = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_IN_IMG_H_T = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_IN_IMG_W_T = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_FILTER_S_H = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_FILTER_S_W = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_TASK_NUM1 = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_TASK_NUM2 = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_LOCAL_REG_NUM = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_ROW_IL_FACTOR = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_COL_IL_FACTOR = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_STRIDE = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_BATCH = fifo_config_in.read();\n\n')

		code.append(indent(3) + 'LAYER_CONV_TYPE = fifo_config_in.read();\n')
		code.append(indent(3) + 'FILTER_D0_H = fifo_config_in.read();\n')
		code.append(indent(3) + 'FILTER_D0_W = fifo_config_in.read();\n')
		code.append(indent(3) + 'FILTER_D1_H = fifo_config_in.read();\n')
		code.append(indent(3) + 'FILTER_D1_W = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_DILATION_RATE = fifo_config_in.read();\n')
		code.append(indent(3) + 'LAYER_TCONV_STRIDE = fifo_config_in.read();\n')
		code.append(indent(3) + 'K_NUM = fifo_config_in.read();\n')
		code.append(indent(3) + 'KH = fifo_config_in.read();\n')
		code.append(indent(3) + 'KW = fifo_config_in.read();\n')


		code.append(indent(2) + '}\n')

		code.append(indent(2) + 'int task_num = 0;\n')
		val = desp['PARAMETERS']['OUT_NUM']
		w = cal_width(val)
		code.append(indent(2) + 'ap_uint<%d> t3 = 0;\n' % (w))
		val = desp['PARAMETERS']['IN_IMG_H_T']
		w = cal_width(val)
		code.append(indent(2) + 'ap_uint<%d> t1 = 0;\n' % (w))
		code.append(indent(2) + 'ap_uint<%d> t1_bound = LAYER_IN_IMG_H_T*LAYER_TCONV_STRIDE / LAYER_STRIDE;\n' % (w))
		val = desp['SA_COLS']
		w = cal_width(val)
		code.append(indent(2) + 'ap_uint<%d> t0 = 0;\n' % (w))
		val = desp['PARAMETERS']['IN_IMG_W_T'] / desp['SA_COLS']
		w = cal_width(val)
		code.append(indent(2) + 'ap_uint<%d> t2 = 0;\n' % (w))
		code.append(indent(2) + 'ap_uint<%d> t2_bound = LAYER_IN_IMG_W_T*LAYER_TCONV_STRIDE / %sSA_COLS / LAYER_STRIDE;\n' % (w, var_prefix))
		code.append(indent(2) + 'bool done2 = 0;\n')

		code.append(indent(2) + 'while(!done2){\n')
		indent_level = 2
		code.append('#pragma HLS PIPELINE II=1\n')

		code.append(indent(indent_level + 1) + '%sData2TransferChannelType fifo_data0 = fifo_transfer_in0.read();\n' % (var_prefix))
		code.append(indent(indent_level + 1) + 'fifo_transfer_out.write(fifo_data0.data);\n')

		code.append(indent(indent_level + 1) + 't2++;\n')
		code.append(indent(indent_level + 1) + 'if (t2 == t2_bound){\n')
		code.append(indent(indent_level + 2) + 't2 = 0;\n')
		code.append(indent(indent_level + 2) + 't0++;\n')
		code.append(indent(indent_level + 2) + 'if (t0 == %sSA_COLS / %sDATA2_FC_SPLIT_FACTOR){\n' % (var_prefix, var_prefix))
		code.append(indent(indent_level + 3) + 't0 = 0;\n')
		code.append(indent(indent_level + 3) + 't1++;\n')
	#   code.append(indent(indent_level + 3) + 'if (t1 == LAYER_IN_IMG_H_T / LAYER_STRIDE){\n')
		code.append(indent(indent_level + 3) + 'if (t1 == t1_bound){\n')
		code.append(indent(indent_level + 4) + 't1 = 0;\n')
		code.append(indent(indent_level + 4) + 't3++;\n')
		code.append(indent(indent_level + 4) + 'if (t3 == LAYER_OUT_NUM_T / %sDATA2_FC_SIMD_FACTOR){\n' % (var_prefix))
		code.append(indent(indent_level + 5) + 't3 = 0;\n')
		code.append(indent(indent_level + 5) + 'task_num++;\n')
		code.append(indent(indent_level + 5) + 'if (task_num == LAYER_TASK_NUM2){\n')
		code.append(indent(indent_level + 6) + 'task_num = 0;\n')
		code.append(indent(indent_level + 6) + 'done2 = 1;\n')
		code.append(indent(indent_level + 5) + '}\n')
		code.append(indent(indent_level + 4) + '}\n')
		code.append(indent(indent_level + 3) + '}\n')
		code.append(indent(indent_level + 2) + '}\n')
		code.append(indent(indent_level + 1) + '}\n')
		code.append(indent(2) + '}\n')
	#   code.append(indent(6) + '}\n')
	#   code.append(indent(5) + '}\n')
	#   code.append(indent(4) + '}\n')
	#   code.append(indent(3) + '}\n')
	#   code.append(indent(2) + '}\n')

		code.append(indent(2) + 'layer_iter++;\n')
		code.append(indent(2) + 'if (layer_iter == LAYER_BATCH){\n')
		code.append(indent(3) + 'layer_iter = 0;\n')
		code.append(indent(3) + 'done1 = 1;\n')
		code.append(indent(2) + '}\n')
		code.append(indent(1) + '}\n')
		code.append('  }else{\n')
		code.append('    uint LAYER_IN_NUM_HW = fifo_config_bypass.read();\n')
		code.append('    uint LAYER_OUT_NUM_HW = fifo_config_bypass.read();\n')
		code.append('    uint LAYER_IN_H_HW = fifo_config_bypass.read();\n')
		code.append('    uint LAYER_IN_W_HW = fifo_config_bypass.read();\n')
		code.append('\n')
		code.append('    uint LAYER_IN_NUM_T = fifo_config_bypass.read();\n')
		code.append('    uint LAYER_OUT_NUM_T = fifo_config_bypass.read();\n')
		code.append('    uint LAYER_IN_H_T = fifo_config_bypass.read();\n')
		code.append('    uint LAYER_IN_W_T = fifo_config_bypass.read();\n')
		code.append('\n')
		code.append('    uint FILTER_S_H = fifo_config_bypass.read();\n')
		code.append('    uint FILTER_S_W = fifo_config_bypass.read();\n')
		code.append('    uint LAYER_STRIDE = fifo_config_bypass.read();\n')
		code.append('    int in_h_iter = 0;\n')
		code.append('    int in_w_iter = 0;\n')
		code.append('    int out_num_iter = 0;\n')
		code.append('    int in_num_iter = 0;\n')
		code.append('    bool done1 = 0;\n')
		code.append('    while(!done1){\n')
		code.append('      int o = 0;\n')
		code.append('      int h = 0;\n')
		code.append('      int w = 0;\n')
		code.append('      bool done2 = 0;\n')
		code.append('      while(!done2){\n')
		code.append('        #pragma HLS PIPELINE II=1\n')
		code.append('        DepthConvData0Type tmp = fifo_data_bypass.read();\n')
		code.append('        fifo_transfer_out.write(tmp);\n')
		code.append('          // Repeat until the whole tile is read\n')
		code.append('        w++;\n')
		code.append('        if (w == LAYER_IN_W_T + FILTER_S_W - 1){\n')
		code.append('          w = 0;\n')
		code.append('          h++;\n')
		code.append('          if (h == LAYER_IN_H_T + FILTER_S_H - 1){\n')
		code.append('            h = 0;\n')
		code.append('            o++;\n')
		code.append('            if (o == LAYER_IN_NUM_T / CONV_LANE){\n')
		code.append('              o = 0;\n')
		code.append('              done2 = 1;\n')
		code.append('            }\n')
		code.append('          }\n')
		code.append('        }\n')
		code.append('      }\n')
		code.append('        // Repeat until all the tiles are read\n')
		code.append('        // Must repeat the computation until LAYER_OUT_NUM output feature maps are generated\n')
		code.append('      in_num_iter += LAYER_IN_NUM_T;\n')
		code.append('      if (in_num_iter >= LAYER_IN_NUM_HW){\n')
		code.append('        in_num_iter = 0;\n')
		code.append('        in_w_iter += LAYER_IN_W_T;\n')
		code.append('        if (in_w_iter >= LAYER_IN_W_HW){\n')
		code.append('          in_w_iter = 0;\n')
		code.append('          in_h_iter += LAYER_IN_H_T;\n')
		code.append('          if (in_h_iter >= LAYER_IN_H_HW){\n')
		code.append('            in_h_iter = 0;\n')
		code.append('            done1 = 1;\n')
		code.append('          }\n')
		code.append('        }\n')
		code.append('      }\n')
		code.append('    }\n')
		code.append('    // while(!fifo_data_bypass.empty()){\n')
		code.append('    //   #pragma HLS PIPELINE II=1\n')
		code.append('    //   fifo_transfer_out.write(fifo_data_bypass.read());\n')
		code.append('    // }\n')
		code.append(indent(1) + '}\n')
		code.append(indent(1) + '  inst++;\n')
		code.append(indent(1) + '  if(inst == inst_count){\n')
		code.append(indent(1) + '    inst_done = 1;\n')
		code.append(indent(1) + '  }\n')
		code.append(indent(1) + '}\n')
		code.append('}\n\n')

		idx += 1

	return code
