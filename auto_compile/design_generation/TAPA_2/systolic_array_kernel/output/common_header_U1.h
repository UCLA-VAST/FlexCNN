/**
 *  This file is automatically generated by PolySA CodeGen.
 *  Version: 1.0
 *  Authos: Jie Wang
 */

// vendor headers
#include <tapa.h>
#include "ap_int.h"
#include "ap_fixed.h"

// common headers
#include <stdio.h>
#include <string.h>
using namespace hls;

#define cal_aligned_size(x,y) ((x+y-1)/y*y)
#define unpack(num, i) num(((4-i)*8)-1, ((4-i)*8)-8)

typedef ap_uint<192> U1_ConfigInst;

// Data types
typedef float U1_data_t0;
typedef ap_uint<512> U1_bus_t0;
#define U1_DATA0_WIDTH 32
#define U1_DATA0_PACK_FACTOR (512/U1_DATA0_WIDTH)
typedef float U1_data_t1;
typedef ap_uint<512> U1_bus_t1;
#define U1_DATA1_WIDTH 32
#define U1_DATA1_PACK_FACTOR (512/U1_DATA1_WIDTH)
typedef float U1_data_t2;
typedef ap_uint<512> U1_bus_t2;
#define U1_DATA2_WIDTH 32
#define U1_DATA2_PACK_FACTOR (512/U1_DATA2_WIDTH)
typedef unsigned int uint;
union ufloat{
  float f;
  unsigned int u;
};

// Macros
#define U1_SA_ROWS 4
#define U1_SA_COLS 6
#define U1_SIMD_FACTOR 4
#define U1_DATA0_FC_SIMD_FACTOR 4
#define U1_DATA0_FC_GROUP_FACTOR 1
#define U1_DATA0_FC_SPLIT_FACTOR 1
#define U1_DATA1_FC_SIMD_FACTOR 4
#define U1_DATA1_FC_GROUP_FACTOR 1
#define U1_DATA1_FC_SPLIT_FACTOR 1
#define U1_DATA2_FC_SIMD_FACTOR 4
#define U1_DATA2_FC_GROUP_FACTOR 1
#define U1_DATA2_FC_SPLIT_FACTOR 1

// Functions and structs
struct U1_Data0TransferChannelType{
  U1_Data0TransferChannelType(){}
  U1_Data0TransferChannelType(
    ap_uint<U1_DATA0_WIDTH*U1_DATA0_FC_SIMD_FACTOR> data_t,
    unsigned int feeder_id_t,
    bool new_pair_t,
    bool last_pair_t,
    unsigned int filter_s_t
  ){
    data = data_t;
    feeder_id = feeder_id_t;
    new_pair = new_pair_t;
    last_pair = last_pair_t;
    FILTER_S = filter_s_t;
  }
  ap_uint<U1_DATA0_WIDTH*U1_DATA0_FC_SIMD_FACTOR> data;
  unsigned int feeder_id;
  bool new_pair;
  bool last_pair;
  unsigned int FILTER_S;
};

struct U1_Data1TransferChannelType{
  U1_Data1TransferChannelType(){}
  U1_Data1TransferChannelType(
    ap_uint<U1_DATA1_WIDTH*U1_DATA1_FC_SIMD_FACTOR> data_t,
    unsigned int feeder_id_t,
    bool new_pair_t,
    bool last_pair_t,
    unsigned int filter_s_t
  ){
    data = data_t;
    feeder_id = feeder_id_t;
    new_pair = new_pair_t;
    last_pair = last_pair_t;
    FILTER_S = filter_s_t;
  }
  ap_uint<U1_DATA1_WIDTH*U1_DATA1_FC_SIMD_FACTOR> data;
  unsigned int feeder_id;
  bool new_pair;
  bool last_pair;
  unsigned int FILTER_S;
};

struct U1_Data2TransferChannelType{
  U1_Data2TransferChannelType(){}
  U1_Data2TransferChannelType(
    ap_uint<U1_DATA2_WIDTH*U1_DATA2_FC_SIMD_FACTOR> data_t){
    data = data_t;
  }
  ap_uint<U1_DATA2_WIDTH*U1_DATA2_FC_SIMD_FACTOR> data;
};

struct U1_Data0PEChannelType{
  U1_Data0PEChannelType(){}
  U1_Data0PEChannelType(
    ap_uint<128> data_t
  ){
    data = data_t;
  }
  U1_Data0PEChannelType(
    ap_uint<128> data_t,
    bool new_pair_t,
    unsigned int filter_s_t
  ){
    data = data_t;
    new_pair = new_pair_t;
    FILTER_S = filter_s_t;
  }
  U1_Data0PEChannelType(
    ap_uint<128> data_t,
    bool new_pair_t,
    bool last_pair_t,
    unsigned int filter_s_t
  ){
    data = data_t;
    new_pair = new_pair_t;
    last_pair = last_pair_t;
    FILTER_S = filter_s_t;
  }
  ap_uint<128> data;
  bool new_pair;
  bool last_pair;
  unsigned int FILTER_S;
};

typedef ap_uint<128> U1_Data0SIMDType;

struct U1_Data1PEChannelType{
  U1_Data1PEChannelType(){}
  U1_Data1PEChannelType(
    ap_uint<128> data_t
  ){
    data = data_t;
  }
  U1_Data1PEChannelType(
    ap_uint<128> data_t,
    bool new_pair_t,
    unsigned int filter_s_t
  ){
    data = data_t;
    new_pair = new_pair_t;
    FILTER_S = filter_s_t;
  }
  U1_Data1PEChannelType(
    ap_uint<128> data_t,
    bool new_pair_t,
    bool last_pair_t,
    unsigned int filter_s_t
  ){
    data = data_t;
    new_pair = new_pair_t;
    last_pair = last_pair_t;
    FILTER_S = filter_s_t;
  }
  ap_uint<128> data;
  bool new_pair;
  bool last_pair;
  unsigned int FILTER_S;
};

typedef ap_uint<128> U1_Data1SIMDType;

struct U1_Data2PEChannelType{
  U1_Data2PEChannelType(){}
  U1_Data2PEChannelType(
    U1_data_t2 data_t){
    data = data_t;
  }
  U1_data_t2 data;
};

