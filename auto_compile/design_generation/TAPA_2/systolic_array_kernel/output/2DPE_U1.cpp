/**
 *  This file is automatically generated by PolySA CodeGen.
 *  Version: 1.0
 *  Authos: Jie Wang
 */

#include "common_header_U1.h"

void U1_PE_MAC(
  U1_Data0SIMDType op0,
  U1_Data1SIMDType op1,
  U1_data_t2* op2,
  bool init
){
#pragma HLS INLINE
#pragma HLS DATA_PACK variable=op0
#pragma HLS DATA_PACK variable=op1
  ap_uint<128> op0_data = op0;
  ap_uint<128> op1_data = op1;

  float op0_u[U1_SIMD_FACTOR];
#pragma HLS ARRAY_PARTITION variable=op0_u complete
  float op1_u[U1_SIMD_FACTOR];
#pragma HLS ARRAY_PARTITION variable=op1_u complete

  for (int i = 0; i < U1_SIMD_FACTOR; i++){
#pragma HLS UNROLL
    ap_uint<U1_DATA0_WIDTH> sel0 = op0_data(U1_DATA0_WIDTH-1, 0);
    op0_u[i] = Reinterpret<U1_data_t0>(sel0);
    op0_data = op0_data >> U1_DATA0_WIDTH;
    ap_uint<U1_DATA1_WIDTH> sel1 = op1_data(U1_DATA1_WIDTH-1, 0);
    op1_u[i] = Reinterpret<U1_data_t1>(sel1);
    op1_data = op1_data >> U1_DATA1_WIDTH;
  }

  U1_data_t2 sum = (init == 1)? (U1_data_t2) 0: *op2;

  U1_data_t2 mult0 = op0_u[0] * op1_u[0];
  U1_data_t2 mult1 = op0_u[1] * op1_u[1];
  U1_data_t2 mult2 = op0_u[2] * op1_u[2];
  U1_data_t2 mult3 = op0_u[3] * op1_u[3];

  U1_data_t2 sum1_0 = mult0 + mult1;
  U1_data_t2 sum1_1 = mult2 + mult3;

  U1_data_t2 sum0_0 = sum1_0 + sum1_1;

  sum += sum0_0;

  *op2 = sum;
}

void U1_op0_transfer(
  tapa::istream<U1_Data0PEChannelType> &fifo0_in,
  tapa::ostream<U1_Data0PEChannelType> &fifo0_out,
  tapa::ostream<U1_Data0PEChannelType> &fifo0_local,
  tapa::istream<uint> &fifo_config_in,
  tapa::ostream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo0_in
#pragma HLS DATA_PACK variable=fifo0_out
#pragma HLS DATA_PACK variable=fifo0_local
#pragma HLS INLINE off
  bool inst_done = 0;
  uint inst = 0;
  int inst_count = fifo_config_in.read();
  fifo_config_out.write(inst_count);
  while(!inst_done){
  uint CONV_EN = fifo_config_in.read();
  fifo_config_out.write(CONV_EN);
  if(CONV_EN){
  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S_H);
  fifo_config_out.write(LAYER_FILTER_S_W);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);

  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0_H);
  fifo_config_out.write(FILTER_D0_W);
  fifo_config_out.write(FILTER_D1_H);	
  fifo_config_out.write(FILTER_D1_W);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH);
  fifo_config_out.write(KW);
  ap_uint<3> layer_iter = 0;
  bool done1 = 0;
  while(!done1){
    if (layer_iter > 0){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S_H);
      fifo_config_out.write(LAYER_FILTER_S_W);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);
      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0_H);
      fifo_config_out.write(FILTER_D0_W);
      fifo_config_out.write(FILTER_D1_H);	
      fifo_config_out.write(FILTER_D1_W);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH);
      fifo_config_out.write(KW);
      }

    ap_uint<13> task_num = 0;
    ap_uint<7> la_counter = 0;
    ap_uint<6> local_reg_id = 0;
    bool done2 = 0;
    while(!done2){
#pragma HLS PIPELINE II=1
      U1_Data0PEChannelType fifo0_in_data;
      fifo0_in_data = fifo0_in.read();
      fifo0_out.write(fifo0_in_data);
      fifo0_local.write(fifo0_in_data);
      local_reg_id++;
      if (local_reg_id == LAYER_LOCAL_REG_NUM){
        local_reg_id = 0;
        la_counter++;
        if (la_counter == LAYER_LOCAL_ACCUM_NUM){
          la_counter = 0;
          task_num++;
          if (task_num == LAYER_TASK_NUM1){
            task_num = 0;
            done2 = 1;
          }
        }
      }
    }
    layer_iter++;
    if (layer_iter == LAYER_BATCH){
      layer_iter = 0;
      done1 = 1;
    }
  }
  }
    inst++;
    if(inst == inst_count){
      inst_done = 1;
    }
  }
}

void U1_op0_transfer_wrapper(
  tapa::istream<U1_Data0PEChannelType> &fifo0_in,
  tapa::ostream<U1_Data0PEChannelType> &fifo0_out,
  tapa::ostream<U1_Data0PEChannelType> &fifo0_local,
  tapa::istream<uint> &fifo_config_in,
  tapa::ostream<uint> &fifo_config_out
){
  U1_op0_transfer(
    fifo0_in,
    fifo0_out,
    fifo0_local,
    fifo_config_in,
    fifo_config_out
  );
}

void U1_op0_transfer_last(
  tapa::istream<U1_Data0PEChannelType> &fifo0_in,
  tapa::ostream<U1_Data0PEChannelType> &fifo0_local,
  tapa::istream<uint> &fifo_config_in,
  tapa::ostream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo0_in
#pragma HLS DATA_PACK variable=fifo0_local
#pragma HLS INLINE off

  bool inst_done = 0;
  uint inst = 0;
  int inst_count = fifo_config_in.read();
  fifo_config_out.write(inst_count);
  while(!inst_done){
  uint CONV_EN = fifo_config_in.read();
  fifo_config_out.write(CONV_EN);
  if(CONV_EN){
  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S_H);
  fifo_config_out.write(LAYER_FILTER_S_W);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);

  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0_H);
  fifo_config_out.write(FILTER_D0_W);
  fifo_config_out.write(FILTER_D1_H);	
  fifo_config_out.write(FILTER_D1_W);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH);
  fifo_config_out.write(KW);
  ap_uint<3> layer_iter = 0;
  bool done1 = 0;
  while(!done1){
    if (layer_iter > 0){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S_H);
      fifo_config_out.write(LAYER_FILTER_S_W);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);
      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0_H);
      fifo_config_out.write(FILTER_D0_W);
      fifo_config_out.write(FILTER_D1_H);	
      fifo_config_out.write(FILTER_D1_W);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH);
      fifo_config_out.write(KW);
    }

    ap_uint<13> task_num = 0;
    ap_uint<7> la_counter = 0;
    ap_uint<6> local_reg_id = 0;
    bool done2 = 0;
    while(!done2){
#pragma HLS PIPELINE II=1
      U1_Data0PEChannelType fifo0_in_data;
      fifo0_in_data = fifo0_in.read();
      fifo0_local.write(fifo0_in_data);
      local_reg_id++;
      if (local_reg_id == LAYER_LOCAL_REG_NUM){
        local_reg_id = 0;
        la_counter++;
        if (la_counter == LAYER_LOCAL_ACCUM_NUM){
          la_counter = 0;
          task_num++;
          if (task_num == LAYER_TASK_NUM1){
            task_num = 0;
            done2 = 1;
          }
        }
      }
    }
    layer_iter++;
    if (layer_iter == LAYER_BATCH){
      layer_iter = 0;
      done1 = 1;
    }
  }
  }
    inst++;
    if(inst == inst_count){
      inst_done = 1;
    }
  }
}

void U1_op0_transfer_last_wrapper(
  tapa::istream<U1_Data0PEChannelType> &fifo0_in,
  tapa::ostream<U1_Data0PEChannelType> &fifo0_local,
  tapa::istream<uint> &fifo_config_in,
  tapa::ostream<uint> &fifo_config_out
){
  U1_op0_transfer_last(
    fifo0_in,
    fifo0_local,
    fifo_config_in,
    fifo_config_out
  );
}

void U1_op1_transfer(
  tapa::istream<U1_Data1PEChannelType> &fifo1_in,
  tapa::ostream<U1_Data1PEChannelType> &fifo1_out,
  tapa::ostream<U1_Data1PEChannelType> &fifo1_local,
  tapa::istream<uint> &fifo_config_in,
  tapa::ostream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo1_in
#pragma HLS DATA_PACK variable=fifo1_out
#pragma HLS DATA_PACK variable=fifo1_local
#pragma HLS INLINE off
  bool inst_done = 0;
  uint inst = 0;
  int inst_count = fifo_config_in.read();
  fifo_config_out.write(inst_count);
  while(!inst_done){
  uint CONV_EN = fifo_config_in.read();
  fifo_config_out.write(CONV_EN);
  if(CONV_EN){
  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S_H);
  fifo_config_out.write(LAYER_FILTER_S_W);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);

  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0_H);
  fifo_config_out.write(FILTER_D0_W);
  fifo_config_out.write(FILTER_D1_H);	
  fifo_config_out.write(FILTER_D1_W);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH);
  fifo_config_out.write(KW);
  ap_uint<3> layer_iter = 0;
  bool done1 = 0;
  while(!done1){
    if (layer_iter > 0){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S_H);
      fifo_config_out.write(LAYER_FILTER_S_W);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);
      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0_H);
      fifo_config_out.write(FILTER_D0_W);
      fifo_config_out.write(FILTER_D1_H);	
      fifo_config_out.write(FILTER_D1_W);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH);
      fifo_config_out.write(KW);
      }

    ap_uint<13> task_num = 0;
    ap_uint<7> la_counter = 0;
    ap_uint<6> local_reg_id = 0;
    bool done2 = 0;
    while(!done2){
#pragma HLS PIPELINE II=1
      U1_Data1PEChannelType fifo1_in_data;
      fifo1_in_data = fifo1_in.read();
      fifo1_out.write(fifo1_in_data);
      fifo1_local.write(fifo1_in_data);
      local_reg_id++;
      if (local_reg_id == LAYER_LOCAL_REG_NUM){
        local_reg_id = 0;
        la_counter++;
        if (la_counter == LAYER_LOCAL_ACCUM_NUM){
          la_counter = 0;
          task_num++;
          if (task_num == LAYER_TASK_NUM1){
            task_num = 0;
            done2 = 1;
          }
        }
      }
    }
    layer_iter++;
    if (layer_iter == LAYER_BATCH){
      layer_iter = 0;
      done1 = 1;
    }
  }
  }
    inst++;
    if(inst == inst_count){
      inst_done = 1;
    }
  }
}

void U1_op1_transfer_wrapper(
  tapa::istream<U1_Data1PEChannelType> &fifo1_in,
  tapa::ostream<U1_Data1PEChannelType> &fifo1_out,
  tapa::ostream<U1_Data1PEChannelType> &fifo1_local,
  tapa::istream<uint> &fifo_config_in,
  tapa::ostream<uint> &fifo_config_out
){
  U1_op1_transfer(
    fifo1_in,
    fifo1_out,
    fifo1_local,
    fifo_config_in,
    fifo_config_out
  );
}

void U1_op1_transfer_last(
  tapa::istream<U1_Data1PEChannelType> &fifo1_in,
  tapa::ostream<U1_Data1PEChannelType> &fifo1_local,
  tapa::istream<uint> &fifo_config_in,
  tapa::ostream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo1_in
#pragma HLS DATA_PACK variable=fifo1_local
#pragma HLS INLINE off

  bool inst_done = 0;
  uint inst = 0;
  int inst_count = fifo_config_in.read();
  fifo_config_out.write(inst_count);
  while(!inst_done){
  uint CONV_EN = fifo_config_in.read();
  fifo_config_out.write(CONV_EN);
  if(CONV_EN){
  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S_H);
  fifo_config_out.write(LAYER_FILTER_S_W);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);

  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0_H);
  fifo_config_out.write(FILTER_D0_W);
  fifo_config_out.write(FILTER_D1_H);	
  fifo_config_out.write(FILTER_D1_W);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH);
  fifo_config_out.write(KW);
  ap_uint<3> layer_iter = 0;
  bool done1 = 0;
  while(!done1){
    if (layer_iter > 0){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S_H);
      fifo_config_out.write(LAYER_FILTER_S_W);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);
      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0_H);
      fifo_config_out.write(FILTER_D0_W);
      fifo_config_out.write(FILTER_D1_H);	
      fifo_config_out.write(FILTER_D1_W);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH);
      fifo_config_out.write(KW);
    }

    ap_uint<13> task_num = 0;
    ap_uint<7> la_counter = 0;
    ap_uint<6> local_reg_id = 0;
    bool done2 = 0;
    while(!done2){
#pragma HLS PIPELINE II=1
      U1_Data1PEChannelType fifo1_in_data;
      fifo1_in_data = fifo1_in.read();
      fifo1_local.write(fifo1_in_data);
      local_reg_id++;
      if (local_reg_id == LAYER_LOCAL_REG_NUM){
        local_reg_id = 0;
        la_counter++;
        if (la_counter == LAYER_LOCAL_ACCUM_NUM){
          la_counter = 0;
          task_num++;
          if (task_num == LAYER_TASK_NUM1){
            task_num = 0;
            done2 = 1;
          }
        }
      }
    }
    layer_iter++;
    if (layer_iter == LAYER_BATCH){
      layer_iter = 0;
      done1 = 1;
    }
  }
  }
    inst++;
    if(inst == inst_count){
      inst_done = 1;
    }
  }
}

void U1_op1_transfer_last_wrapper(
  tapa::istream<U1_Data1PEChannelType> &fifo1_in,
  tapa::ostream<U1_Data1PEChannelType> &fifo1_local,
  tapa::istream<uint> &fifo_config_in,
  tapa::ostream<uint> &fifo_config_out
){
  U1_op1_transfer_last(
    fifo1_in,
    fifo1_local,
    fifo_config_in,
    fifo_config_out
  );
}

void U1_compute(
  tapa::istream<U1_Data0PEChannelType> &fifo0_local,
  tapa::istream<U1_Data1PEChannelType> &fifo1_local,
  tapa::ostream<U1_Data2PEChannelType> &fifo2_local,
  tapa::istream<uint> &fifo_config_in,
  tapa::ostream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo0_local
#pragma HLS DATA_PACK variable=fifo1_local
#pragma HLS INLINE off

  bool inst_done = 0;
  uint inst = 0;
  int inst_count = fifo_config_in.read();
  fifo_config_out.write(inst_count);
  while(!inst_done){
  uint CONV_EN = fifo_config_in.read();
  fifo_config_out.write(CONV_EN);
  if(CONV_EN){
  U1_data_t2 local_buffer[U1_LOCAL_REG_NUM];

  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  ap_uint<8> in_ch_factor = LAYER_IN_NUM_T/U1_SIMD_FACTOR;

  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S_H);
  fifo_config_out.write(LAYER_FILTER_S_W);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);

  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0_H);
  fifo_config_out.write(FILTER_D0_W);
  fifo_config_out.write(FILTER_D1_H);	
  fifo_config_out.write(FILTER_D1_W);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH);
  fifo_config_out.write(KW);
  ap_uint<3> layer_iter = 0;
  bool done1 = 0;
  int i = 0;
  ap_uint<10> LAYER_LOCAL_ACCUM_NUM_ARR[4] = {
    in_ch_factor*unpack(KH,0)*unpack(KW,0),
    in_ch_factor*unpack(KH,1)*unpack(KW,1),
    in_ch_factor*unpack(KH,2)*unpack(KW,2),
    in_ch_factor*unpack(KH,3)*unpack(KW,3)
  };
  #pragma HLS ARRAY_PARTITION variable=LAYER_LOCAL_ACCUM_NUM_ARR complete
  while(!done1){
    if (layer_iter > 0){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S_H);
      fifo_config_out.write(LAYER_FILTER_S_W);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);
      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0_H);
      fifo_config_out.write(FILTER_D0_W);
      fifo_config_out.write(FILTER_D1_H);	
      fifo_config_out.write(FILTER_D1_W);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH);
      fifo_config_out.write(KW);
    }

    ap_uint<13> task_num = 0;
    ap_uint<7> la_counter = 0;
    ap_uint<6> local_reg_id = 0;
    bool done2 = 0;
    while(!done2){
#pragma HLS PIPELINE II=1
#pragma HLS DEPENDENCE inter false variable=local_buffer
      U1_Data0PEChannelType fifo0_in_data;
      fifo0_in_data = fifo0_local.read();
      U1_Data1PEChannelType fifo1_in_data;
      fifo1_in_data = fifo1_local.read();
      bool init = fifo0_in_data.new_pair;
      bool last = fifo0_in_data.last_pair;
      U1_PE_MAC(fifo0_in_data.data, fifo1_in_data.data, &local_buffer[local_reg_id], (init == 1 && la_counter == 0 && i<K_NUM)? 1:0);
      if (la_counter == LAYER_LOCAL_ACCUM_NUM_ARR[i] - 1 && last){
        fifo2_local.write(U1_Data2PEChannelType(local_buffer[local_reg_id]));
      }
      local_reg_id++;
      if (local_reg_id == LAYER_LOCAL_REG_NUM){
        local_reg_id = 0;
        la_counter++;
        if (la_counter == LAYER_LOCAL_ACCUM_NUM_ARR[i]){
          la_counter = 0;
          i++;
          if (i == K_NUM){
            i = 0;
            local_reg_id = 0;
            task_num++;
            if (task_num == LAYER_TASK_NUM1){
              task_num = 0;
              done2 = 1;
            }
          }
        }
      }
    }
    layer_iter++;
    if (layer_iter == LAYER_BATCH){
      layer_iter = 0;
      done1 = 1;
    }
  }
  }
    inst++;
    if(inst == inst_count){
      inst_done = 1;
    }
  }
}

void U1_compute_wrapper(
  tapa::istream<U1_Data0PEChannelType> &fifo0_local,
  tapa::istream<U1_Data1PEChannelType> &fifo1_local,
  tapa::ostream<U1_Data2PEChannelType> &fifo2_local,
  tapa::istream<uint> &fifo_config_in,
  tapa::ostream<uint> &fifo_config_out
){
  U1_compute(
    fifo0_local,
    fifo1_local,
    fifo2_local,
    fifo_config_in,
    fifo_config_out
  );
}

void U1_res_transfer(
  tapa::istream<U1_Data2PEChannelType> &fifo2_local,
  tapa::istream<U1_Data2PEChannelType> &fifo2_in,
  tapa::ostream<U1_Data2PEChannelType> &fifo2_out,
  ap_uint<5> pe_row_id,
  ap_uint<6> pe_col_id,
  tapa::istream<uint> &fifo_config_in,
  tapa::ostream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo2_in
#pragma HLS DATA_PACK variable=fifo2_out
#pragma HLS INLINE off

  bool inst_done = 0;
  uint inst = 0;
  int inst_count = fifo_config_in.read();
  fifo_config_out.write(inst_count);
  while(!inst_done){
  uint CONV_EN = fifo_config_in.read();
  fifo_config_out.write(CONV_EN);
  if(CONV_EN){
  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S_H);
  fifo_config_out.write(LAYER_FILTER_S_W);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);

  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0_H);
  fifo_config_out.write(FILTER_D0_W);
  fifo_config_out.write(FILTER_D1_H);	
  fifo_config_out.write(FILTER_D1_W);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH);
  fifo_config_out.write(KW);
  U1_data_t2 local_buffer[U1_TRANSFER_REG_NUM];

  for (ap_uint<3> layer_iter = 0; layer_iter < LAYER_BATCH; layer_iter++){
    if (layer_iter > 0){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S_H);
      fifo_config_out.write(LAYER_FILTER_S_W);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);
      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0_H);
      fifo_config_out.write(FILTER_D0_W);
      fifo_config_out.write(FILTER_D1_H);	
      fifo_config_out.write(FILTER_D1_W);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH);
      fifo_config_out.write(KW);
    }

    LAYER_LOCAL_REG_NUM = K_NUM*LAYER_LOCAL_REG_NUM;
    for (ap_uint<11> task_num = 0; task_num < LAYER_TASK_NUM2; task_num++)
    {
      for (ap_uint<6> local_reg_id = 0; local_reg_id < U1_TRANSFER_REG_NUM; local_reg_id++){
#pragma HLS PIPELINE II=1
        if (local_reg_id < LAYER_LOCAL_REG_NUM){
          U1_Data2PEChannelType fifo2_local_data = fifo2_local.read();
          local_buffer[local_reg_id] = fifo2_local_data.data;
        } else {
          break;
        }
      }

      for (int transfer_iter = pe_row_id + 1 - 1; transfer_iter >= 0; transfer_iter--){
        for (ap_uint<6> local_reg_id = 0; local_reg_id < U1_TRANSFER_REG_NUM; local_reg_id++){
#pragma HLS PIPELINE II=1
          if (local_reg_id < LAYER_LOCAL_REG_NUM){
            fifo2_out.write(U1_Data2PEChannelType(local_buffer[local_reg_id]));
            if (transfer_iter > 0){
              U1_Data2PEChannelType fifo2_in_data = fifo2_in.read();
              local_buffer[local_reg_id] = fifo2_in_data.data;
            }
          } else {
            break;
          }
        }
      }
    }
  }
  }
    inst++;
    if(inst == inst_count){
      inst_done = 1;
    }
  }
}

void U1_res_transfer_wrapper(
  tapa::istream<U1_Data2PEChannelType> &fifo2_local,
  tapa::istream<U1_Data2PEChannelType> &fifo2_in,
  tapa::ostream<U1_Data2PEChannelType> &fifo2_out,
  ap_uint<5> pe_row_id,
  ap_uint<6> pe_col_id,
  tapa::istream<uint> &fifo_config_in,
  tapa::ostream<uint> &fifo_config_out
){
  U1_res_transfer(
    fifo2_local,
    fifo2_in,
    fifo2_out,
    pe_row_id,
    pe_col_id,
    fifo_config_in,
    fifo_config_out
  );
}

void U1_res_transfer_first(
  tapa::istream<U1_Data2PEChannelType> &fifo2_local,
  tapa::ostream<U1_Data2PEChannelType> &fifo2_out,
  ap_uint<5> pe_row_id,
  ap_uint<6> pe_col_id,
  tapa::istream<uint> &fifo_config_in,
  tapa::ostream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo2_out
#pragma HLS INLINE off

  bool inst_done = 0;
  uint inst = 0;
  int inst_count = fifo_config_in.read();
  fifo_config_out.write(inst_count);
  while(!inst_done){
  uint CONV_EN = fifo_config_in.read();
  fifo_config_out.write(CONV_EN);
  if(CONV_EN){
  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S_H);
  fifo_config_out.write(LAYER_FILTER_S_W);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);

  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0_H);
  fifo_config_out.write(FILTER_D0_W);
  fifo_config_out.write(FILTER_D1_H);	
  fifo_config_out.write(FILTER_D1_W);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH);
  fifo_config_out.write(KW);
  U1_data_t2 local_buffer[U1_TRANSFER_REG_NUM];

  for (ap_uint<3> layer_iter = 0; layer_iter < LAYER_BATCH; layer_iter++){
    if (layer_iter > 0){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S_H);
      fifo_config_out.write(LAYER_FILTER_S_W);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);
      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0_H);
      fifo_config_out.write(FILTER_D0_W);
      fifo_config_out.write(FILTER_D1_H);	
      fifo_config_out.write(FILTER_D1_W);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH);
      fifo_config_out.write(KW);
    }

    LAYER_LOCAL_REG_NUM = K_NUM*LAYER_LOCAL_REG_NUM;
    for (ap_uint<11> task_num = 0; task_num < LAYER_TASK_NUM2; task_num++)
    {
      for (ap_uint<6> local_reg_id = 0; local_reg_id < U1_TRANSFER_REG_NUM; local_reg_id++){
#pragma HLS PIPELINE II=1
        if (local_reg_id < LAYER_LOCAL_REG_NUM){
          U1_Data2PEChannelType fifo2_local_data = fifo2_local.read();
          local_buffer[local_reg_id] = fifo2_local_data.data;
        } else {
          break;
        }
      }

      for (int transfer_iter = pe_row_id + 1 - 1; transfer_iter >= 0; transfer_iter--){
        for (ap_uint<6> local_reg_id = 0; local_reg_id < U1_TRANSFER_REG_NUM; local_reg_id++){
#pragma HLS PIPELINE II=1
          if (local_reg_id < LAYER_LOCAL_REG_NUM){
            fifo2_out.write(U1_Data2PEChannelType(local_buffer[local_reg_id]));
          } else {
            break;
          }
        }
      }
    }
  }
  }
    inst++;
    if(inst == inst_count){
      inst_done = 1;
    }
  }
}

void U1_res_transfer_first_wrapper(
  tapa::istream<U1_Data2PEChannelType> &fifo2_local,
  tapa::ostream<U1_Data2PEChannelType> &fifo2_out,
  ap_uint<5> pe_row_id,
  ap_uint<6> pe_col_id,
  tapa::istream<uint> &fifo_config_in,
  tapa::ostream<uint> &fifo_config_out
){
  U1_res_transfer_first(
    fifo2_local,
    fifo2_out,
    pe_row_id,
    pe_col_id,
    fifo_config_in,
    fifo_config_out
  );
}

void SA(
  uint start_inst, uint end_inst,
  tapa::istream<ap_uint<U1_DATA0_WIDTH * U1_DATA0_FC_SIMD_FACTOR> > &fifo_cin,
  tapa::istream<ap_uint<U1_DATA1_WIDTH * U1_DATA1_FC_SIMD_FACTOR> > &fifo_weight,
  tapa::ostream<ap_uint<U1_DATA2_WIDTH * U1_DATA2_FC_SIMD_FACTOR> > &fifo_cout,
  tapa::istream<U1_ConfigInst> &fifo_kernel_config_in,
  tapa::ostream<U1_ConfigInst> &fifo_kernel_config_out
){
  // FIFOs
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed0_0("fifo0_feed0_0");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed0_1("fifo0_feed0_1");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed0_2("fifo0_feed0_2");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed0_3("fifo0_feed0_3");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed0_4("fifo0_feed0_4");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed0_5("fifo0_feed0_5");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed0_6("fifo0_feed0_6");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed1_0("fifo0_feed1_0");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed1_1("fifo0_feed1_1");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed1_2("fifo0_feed1_2");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed1_3("fifo0_feed1_3");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed1_4("fifo0_feed1_4");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed1_5("fifo0_feed1_5");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed1_6("fifo0_feed1_6");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed2_0("fifo0_feed2_0");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed2_1("fifo0_feed2_1");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed2_2("fifo0_feed2_2");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed2_3("fifo0_feed2_3");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed2_4("fifo0_feed2_4");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed2_5("fifo0_feed2_5");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed2_6("fifo0_feed2_6");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed3_0("fifo0_feed3_0");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed3_1("fifo0_feed3_1");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed3_2("fifo0_feed3_2");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed3_3("fifo0_feed3_3");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed3_4("fifo0_feed3_4");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed3_5("fifo0_feed3_5");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed3_6("fifo0_feed3_6");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed4_0("fifo0_feed4_0");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed4_1("fifo0_feed4_1");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed4_2("fifo0_feed4_2");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed4_3("fifo0_feed4_3");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed4_4("fifo0_feed4_4");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed4_5("fifo0_feed4_5");
  tapa::stream<U1_Data0PEChannelType, 2> fifo0_feed4_6("fifo0_feed4_6");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed0_0("fifo1_feed0_0");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed0_1("fifo1_feed0_1");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed0_2("fifo1_feed0_2");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed0_3("fifo1_feed0_3");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed0_4("fifo1_feed0_4");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed0_5("fifo1_feed0_5");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed0_6("fifo1_feed0_6");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed1_0("fifo1_feed1_0");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed1_1("fifo1_feed1_1");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed1_2("fifo1_feed1_2");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed1_3("fifo1_feed1_3");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed1_4("fifo1_feed1_4");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed1_5("fifo1_feed1_5");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed1_6("fifo1_feed1_6");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed2_0("fifo1_feed2_0");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed2_1("fifo1_feed2_1");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed2_2("fifo1_feed2_2");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed2_3("fifo1_feed2_3");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed2_4("fifo1_feed2_4");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed2_5("fifo1_feed2_5");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed2_6("fifo1_feed2_6");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed3_0("fifo1_feed3_0");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed3_1("fifo1_feed3_1");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed3_2("fifo1_feed3_2");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed3_3("fifo1_feed3_3");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed3_4("fifo1_feed3_4");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed3_5("fifo1_feed3_5");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed3_6("fifo1_feed3_6");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed4_0("fifo1_feed4_0");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed4_1("fifo1_feed4_1");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed4_2("fifo1_feed4_2");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed4_3("fifo1_feed4_3");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed4_4("fifo1_feed4_4");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed4_5("fifo1_feed4_5");
  tapa::stream<U1_Data1PEChannelType, 2> fifo1_feed4_6("fifo1_feed4_6");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect0_0("fifo2_collect0_0");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect0_1("fifo2_collect0_1");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect0_2("fifo2_collect0_2");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect0_3("fifo2_collect0_3");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect0_4("fifo2_collect0_4");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect0_5("fifo2_collect0_5");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect0_6("fifo2_collect0_6");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect1_0("fifo2_collect1_0");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect1_1("fifo2_collect1_1");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect1_2("fifo2_collect1_2");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect1_3("fifo2_collect1_3");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect1_4("fifo2_collect1_4");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect1_5("fifo2_collect1_5");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect1_6("fifo2_collect1_6");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect2_0("fifo2_collect2_0");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect2_1("fifo2_collect2_1");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect2_2("fifo2_collect2_2");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect2_3("fifo2_collect2_3");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect2_4("fifo2_collect2_4");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect2_5("fifo2_collect2_5");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect2_6("fifo2_collect2_6");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect3_0("fifo2_collect3_0");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect3_1("fifo2_collect3_1");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect3_2("fifo2_collect3_2");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect3_3("fifo2_collect3_3");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect3_4("fifo2_collect3_4");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect3_5("fifo2_collect3_5");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect3_6("fifo2_collect3_6");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect4_0("fifo2_collect4_0");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect4_1("fifo2_collect4_1");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect4_2("fifo2_collect4_2");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect4_3("fifo2_collect4_3");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect4_4("fifo2_collect4_4");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect4_5("fifo2_collect4_5");
  tapa::stream<U1_Data2PEChannelType, 2> fifo2_collect4_6("fifo2_collect4_6");
  tapa::stream<U1_Data0TransferChannelType, 2> fifo0_transfer0("fifo0_transfer0");
  tapa::stream<U1_Data0TransferChannelType, 2> fifo0_transfer1("fifo0_transfer1");
  tapa::stream<U1_Data0TransferChannelType, 2> fifo0_transfer2("fifo0_transfer2");
  tapa::stream<U1_Data0TransferChannelType, 2> fifo0_transfer3("fifo0_transfer3");
  tapa::stream<U1_Data0TransferChannelType, 2> fifo0_transfer4("fifo0_transfer4");
  tapa::stream<U1_Data0TransferChannelType, 2> fifo0_transfer5("fifo0_transfer5");
  tapa::stream<U1_Data0TransferChannelType, 2> fifo0_transfer6("fifo0_transfer6");
  tapa::stream<U1_Data1TransferChannelType, 2> fifo1_transfer0("fifo1_transfer0");
  tapa::stream<U1_Data1TransferChannelType, 2> fifo1_transfer1("fifo1_transfer1");
  tapa::stream<U1_Data1TransferChannelType, 2> fifo1_transfer2("fifo1_transfer2");
  tapa::stream<U1_Data1TransferChannelType, 2> fifo1_transfer3("fifo1_transfer3");
  tapa::stream<U1_Data1TransferChannelType, 2> fifo1_transfer4("fifo1_transfer4");
  tapa::stream<U1_Data2TransferChannelType, 2> fifo2_transfer0("fifo2_transfer0");
  tapa::stream<U1_Data2TransferChannelType, 2> fifo2_transfer1("fifo2_transfer1");
  tapa::stream<U1_Data2TransferChannelType, 2> fifo2_transfer2("fifo2_transfer2");
  tapa::stream<U1_Data2TransferChannelType, 2> fifo2_transfer3("fifo2_transfer3");
  tapa::stream<U1_Data2TransferChannelType, 2> fifo2_transfer4("fifo2_transfer4");
  tapa::stream<U1_Data2TransferChannelType, 2> fifo2_transfer5("fifo2_transfer5");
  tapa::stream<U1_Data2TransferChannelType, 2> fifo2_transfer6("fifo2_transfer6");
  tapa::stream<uint, 16> fifo_DataFeed0Head_config_out0("fifo_DataFeed0Head_config_out0");
  tapa::stream<uint, 16> fifo_DataFeed0Head_config_out1("fifo_DataFeed0Head_config_out1");
  tapa::stream<uint, 16> fifo_DataFeed1Head_config_out0("fifo_DataFeed1Head_config_out0");
  tapa::stream<uint, 16> fifo_DataFeed0Engine0_config_out0("fifo_DataFeed0Engine0_config_out0");
  tapa::stream<uint, 16> fifo_DataFeed0Engine0_config_out1("fifo_DataFeed0Engine0_config_out1");
  tapa::stream<uint, 16> fifo_DataFeed0Engine1_config_out0("fifo_DataFeed0Engine1_config_out0");
  tapa::stream<uint, 16> fifo_DataFeed0Engine1_config_out1("fifo_DataFeed0Engine1_config_out1");
  tapa::stream<uint, 16> fifo_DataFeed0Engine2_config_out0("fifo_DataFeed0Engine2_config_out0");
  tapa::stream<uint, 16> fifo_DataFeed0Engine2_config_out1("fifo_DataFeed0Engine2_config_out1");
  tapa::stream<uint, 16> fifo_DataFeed0Engine3_config_out0("fifo_DataFeed0Engine3_config_out0");
  tapa::stream<uint, 16> fifo_DataFeed0Engine3_config_out1("fifo_DataFeed0Engine3_config_out1");
  tapa::stream<uint, 16> fifo_DataFeed0Engine4_config_out0("fifo_DataFeed0Engine4_config_out0");
  tapa::stream<uint, 16> fifo_DataFeed0Engine4_config_out1("fifo_DataFeed0Engine4_config_out1");
  tapa::stream<uint, 16> fifo_DataFeed0Engine5_config_out1("fifo_DataFeed0Engine5_config_out1");
  tapa::stream<uint, 16> fifo_DataFeed1Engine0_config_out0("fifo_DataFeed1Engine0_config_out0");
  tapa::stream<uint, 16> fifo_DataFeed1Engine1_config_out0("fifo_DataFeed1Engine1_config_out0");
  tapa::stream<uint, 16> fifo_DataFeed1Engine2_config_out0("fifo_DataFeed1Engine2_config_out0");

  tapa::stream<uint, 16> fifo_DataCollect2Engine0_config_out("fifo_DataFeed2Engine0_config_out0");
  tapa::stream<uint, 16> fifo_DataCollect2Engine1_config_out("fifo_DataFeed2Engine1_config_out0");
  tapa::stream<uint, 16> fifo_DataCollect2Engine2_config_out("fifo_DataFeed2Engine2_config_out0");
  tapa::stream<uint, 16> fifo_DataCollect2Engine3_config_out("fifo_DataFeed2Engine3_config_out0");
  tapa::stream<uint, 16> fifo_DataCollect2Engine4_config_out("fifo_DataFeed2Engine4_config_out0");
  tapa::stream<uint, 16> fifo_DataCollect2Engine5_config_out("fifo_DataFeed2Engine5_config_out0");

  tapa::stream<uint, 2> fifo_PE0_0_op0_config_out("fifo_PE0_0_op0_config_out");
  tapa::stream<uint, 2> fifo_PE0_0_op1_config_out("fifo_PE0_0_op1_config_out");
  tapa::stream<uint, 2> fifo_PE0_0_compute_config_out("fifo_PE0_0_compute_config_out");
  tapa::stream<uint, 2> fifo_PE0_0_res_config_out("fifo_PE0_0_res_config_out");
  tapa::stream<uint, 2> fifo_PE0_1_op0_config_out("fifo_PE0_1_op0_config_out");
  tapa::stream<uint, 2> fifo_PE0_1_op1_config_out("fifo_PE0_1_op1_config_out");
  tapa::stream<uint, 2> fifo_PE0_1_compute_config_out("fifo_PE0_1_compute_config_out");
  tapa::stream<uint, 2> fifo_PE0_1_res_config_out("fifo_PE0_1_res_config_out");
  tapa::stream<uint, 2> fifo_PE0_2_op0_config_out("fifo_PE0_2_op0_config_out");
  tapa::stream<uint, 2> fifo_PE0_2_op1_config_out("fifo_PE0_2_op1_config_out");
  tapa::stream<uint, 2> fifo_PE0_2_compute_config_out("fifo_PE0_2_compute_config_out");
  tapa::stream<uint, 2> fifo_PE0_2_res_config_out("fifo_PE0_2_res_config_out");
  tapa::stream<uint, 2> fifo_PE0_3_op0_config_out("fifo_PE0_3_op0_config_out");
  tapa::stream<uint, 2> fifo_PE0_3_op1_config_out("fifo_PE0_3_op1_config_out");
  tapa::stream<uint, 2> fifo_PE0_3_compute_config_out("fifo_PE0_3_compute_config_out");
  tapa::stream<uint, 2> fifo_PE0_3_res_config_out("fifo_PE0_3_res_config_out");
  tapa::stream<uint, 2> fifo_PE0_4_op0_config_out("fifo_PE0_4_op0_config_out");
  tapa::stream<uint, 2> fifo_PE0_4_op1_config_out("fifo_PE0_4_op1_config_out");
  tapa::stream<uint, 2> fifo_PE0_4_compute_config_out("fifo_PE0_4_compute_config_out");
  tapa::stream<uint, 2> fifo_PE0_4_res_config_out("fifo_PE0_4_res_config_out");
  tapa::stream<uint, 2> fifo_PE0_5_op0_config_out("fifo_PE0_5_op0_config_out");
  tapa::stream<uint, 2> fifo_PE0_5_op1_config_out("fifo_PE0_5_op1_config_out");
  tapa::stream<uint, 2> fifo_PE0_5_compute_config_out("fifo_PE0_5_compute_config_out");
  tapa::stream<uint, 2> fifo_PE0_5_res_config_out("fifo_PE0_5_res_config_out");
  tapa::stream<uint, 2> fifo_PE1_0_op0_config_out("fifo_PE1_0_op0_config_out");
  tapa::stream<uint, 2> fifo_PE1_0_op1_config_out("fifo_PE1_0_op1_config_out");
  tapa::stream<uint, 2> fifo_PE1_0_compute_config_out("fifo_PE1_0_compute_config_out");
  tapa::stream<uint, 2> fifo_PE1_0_res_config_out("fifo_PE1_0_res_config_out");
  tapa::stream<uint, 2> fifo_PE1_1_op0_config_out("fifo_PE1_1_op0_config_out");
  tapa::stream<uint, 2> fifo_PE1_1_op1_config_out("fifo_PE1_1_op1_config_out");
  tapa::stream<uint, 2> fifo_PE1_1_compute_config_out("fifo_PE1_1_compute_config_out");
  tapa::stream<uint, 2> fifo_PE1_1_res_config_out("fifo_PE1_1_res_config_out");
  tapa::stream<uint, 2> fifo_PE1_2_op0_config_out("fifo_PE1_2_op0_config_out");
  tapa::stream<uint, 2> fifo_PE1_2_op1_config_out("fifo_PE1_2_op1_config_out");
  tapa::stream<uint, 2> fifo_PE1_2_compute_config_out("fifo_PE1_2_compute_config_out");
  tapa::stream<uint, 2> fifo_PE1_2_res_config_out("fifo_PE1_2_res_config_out");
  tapa::stream<uint, 2> fifo_PE1_3_op0_config_out("fifo_PE1_3_op0_config_out");
  tapa::stream<uint, 2> fifo_PE1_3_op1_config_out("fifo_PE1_3_op1_config_out");
  tapa::stream<uint, 2> fifo_PE1_3_compute_config_out("fifo_PE1_3_compute_config_out");
  tapa::stream<uint, 2> fifo_PE1_3_res_config_out("fifo_PE1_3_res_config_out");
  tapa::stream<uint, 2> fifo_PE1_4_op0_config_out("fifo_PE1_4_op0_config_out");
  tapa::stream<uint, 2> fifo_PE1_4_op1_config_out("fifo_PE1_4_op1_config_out");
  tapa::stream<uint, 2> fifo_PE1_4_compute_config_out("fifo_PE1_4_compute_config_out");
  tapa::stream<uint, 2> fifo_PE1_4_res_config_out("fifo_PE1_4_res_config_out");
  tapa::stream<uint, 2> fifo_PE1_5_op0_config_out("fifo_PE1_5_op0_config_out");
  tapa::stream<uint, 2> fifo_PE1_5_op1_config_out("fifo_PE1_5_op1_config_out");
  tapa::stream<uint, 2> fifo_PE1_5_compute_config_out("fifo_PE1_5_compute_config_out");
  tapa::stream<uint, 2> fifo_PE1_5_res_config_out("fifo_PE1_5_res_config_out");
  tapa::stream<uint, 2> fifo_PE2_0_op0_config_out("fifo_PE2_0_op0_config_out");
  tapa::stream<uint, 2> fifo_PE2_0_op1_config_out("fifo_PE2_0_op1_config_out");
  tapa::stream<uint, 2> fifo_PE2_0_compute_config_out("fifo_PE2_0_compute_config_out");
  tapa::stream<uint, 2> fifo_PE2_0_res_config_out("fifo_PE2_0_res_config_out");
  tapa::stream<uint, 2> fifo_PE2_1_op0_config_out("fifo_PE2_1_op0_config_out");
  tapa::stream<uint, 2> fifo_PE2_1_op1_config_out("fifo_PE2_1_op1_config_out");
  tapa::stream<uint, 2> fifo_PE2_1_compute_config_out("fifo_PE2_1_compute_config_out");
  tapa::stream<uint, 2> fifo_PE2_1_res_config_out("fifo_PE2_1_res_config_out");
  tapa::stream<uint, 2> fifo_PE2_2_op0_config_out("fifo_PE2_2_op0_config_out");
  tapa::stream<uint, 2> fifo_PE2_2_op1_config_out("fifo_PE2_2_op1_config_out");
  tapa::stream<uint, 2> fifo_PE2_2_compute_config_out("fifo_PE2_2_compute_config_out");
  tapa::stream<uint, 2> fifo_PE2_2_res_config_out("fifo_PE2_2_res_config_out");
  tapa::stream<uint, 2> fifo_PE2_3_op0_config_out("fifo_PE2_3_op0_config_out");
  tapa::stream<uint, 2> fifo_PE2_3_op1_config_out("fifo_PE2_3_op1_config_out");
  tapa::stream<uint, 2> fifo_PE2_3_compute_config_out("fifo_PE2_3_compute_config_out");
  tapa::stream<uint, 2> fifo_PE2_3_res_config_out("fifo_PE2_3_res_config_out");
  tapa::stream<uint, 2> fifo_PE2_4_op0_config_out("fifo_PE2_4_op0_config_out");
  tapa::stream<uint, 2> fifo_PE2_4_op1_config_out("fifo_PE2_4_op1_config_out");
  tapa::stream<uint, 2> fifo_PE2_4_compute_config_out("fifo_PE2_4_compute_config_out");
  tapa::stream<uint, 2> fifo_PE2_4_res_config_out("fifo_PE2_4_res_config_out");
  tapa::stream<uint, 2> fifo_PE2_5_op0_config_out("fifo_PE2_5_op0_config_out");
  tapa::stream<uint, 2> fifo_PE2_5_op1_config_out("fifo_PE2_5_op1_config_out");
  tapa::stream<uint, 2> fifo_PE2_5_compute_config_out("fifo_PE2_5_compute_config_out");
  tapa::stream<uint, 2> fifo_PE2_5_res_config_out("fifo_PE2_5_res_config_out");
  tapa::stream<uint, 2> fifo_PE3_0_op0_config_out("fifo_PE3_0_op0_config_out");
  tapa::stream<uint, 2> fifo_PE3_0_op1_config_out("fifo_PE3_0_op1_config_out");
  tapa::stream<uint, 2> fifo_PE3_0_compute_config_out("fifo_PE3_0_compute_config_out");
  tapa::stream<uint, 2> fifo_PE3_0_res_config_out("fifo_PE3_0_res_config_out");
  tapa::stream<uint, 2> fifo_PE3_1_op0_config_out("fifo_PE3_1_op0_config_out");
  tapa::stream<uint, 2> fifo_PE3_1_op1_config_out("fifo_PE3_1_op1_config_out");
  tapa::stream<uint, 2> fifo_PE3_1_compute_config_out("fifo_PE3_1_compute_config_out");
  tapa::stream<uint, 2> fifo_PE3_1_res_config_out("fifo_PE3_1_res_config_out");
  tapa::stream<uint, 2> fifo_PE3_2_op0_config_out("fifo_PE3_2_op0_config_out");
  tapa::stream<uint, 2> fifo_PE3_2_op1_config_out("fifo_PE3_2_op1_config_out");
  tapa::stream<uint, 2> fifo_PE3_2_compute_config_out("fifo_PE3_2_compute_config_out");
  tapa::stream<uint, 2> fifo_PE3_2_res_config_out("fifo_PE3_2_res_config_out");
  tapa::stream<uint, 2> fifo_PE3_3_op0_config_out("fifo_PE3_3_op0_config_out");
  tapa::stream<uint, 2> fifo_PE3_3_op1_config_out("fifo_PE3_3_op1_config_out");
  tapa::stream<uint, 2> fifo_PE3_3_compute_config_out("fifo_PE3_3_compute_config_out");
  tapa::stream<uint, 2> fifo_PE3_3_res_config_out("fifo_PE3_3_res_config_out");
  tapa::stream<uint, 2> fifo_PE3_4_op0_config_out("fifo_PE3_4_op0_config_out");
  tapa::stream<uint, 2> fifo_PE3_4_op1_config_out("fifo_PE3_4_op1_config_out");
  tapa::stream<uint, 2> fifo_PE3_4_compute_config_out("fifo_PE3_4_compute_config_out");
  tapa::stream<uint, 2> fifo_PE3_4_res_config_out("fifo_PE3_4_res_config_out");
  tapa::stream<uint, 2> fifo_PE3_5_op0_config_out("fifo_PE3_5_op0_config_out");
  tapa::stream<uint, 2> fifo_PE3_5_op1_config_out("fifo_PE3_5_op1_config_out");
  tapa::stream<uint, 2> fifo_PE3_5_compute_config_out("fifo_PE3_5_compute_config_out");
  tapa::stream<uint, 2> fifo_PE3_5_res_config_out("fifo_PE3_5_res_config_out");

  tapa::stream<U1_Data0PEChannelType, 2> PE0_0_fifo0_local("PE0_0_fifo0_local");
  tapa::stream<U1_Data1PEChannelType, 2> PE0_0_fifo1_local("PE0_0_fifo1_local");
  tapa::stream<U1_Data2PEChannelType, 2> PE0_0_fifo2_local("PE0_0_fifo2_local");
  tapa::stream<U1_Data0PEChannelType, 2> PE0_1_fifo0_local("PE0_1_fifo0_local");
  tapa::stream<U1_Data1PEChannelType, 2> PE0_1_fifo1_local("PE0_1_fifo1_local");
  tapa::stream<U1_Data2PEChannelType, 2> PE0_1_fifo2_local("PE0_1_fifo2_local");
  tapa::stream<U1_Data0PEChannelType, 2> PE0_2_fifo0_local("PE0_2_fifo0_local");
  tapa::stream<U1_Data1PEChannelType, 2> PE0_2_fifo1_local("PE0_2_fifo1_local");
  tapa::stream<U1_Data2PEChannelType, 2> PE0_2_fifo2_local("PE0_2_fifo2_local");
  tapa::stream<U1_Data0PEChannelType, 2> PE0_3_fifo0_local("PE0_3_fifo0_local");
  tapa::stream<U1_Data1PEChannelType, 2> PE0_3_fifo1_local("PE0_3_fifo1_local");
  tapa::stream<U1_Data2PEChannelType, 2> PE0_3_fifo2_local("PE0_3_fifo2_local");
  tapa::stream<U1_Data0PEChannelType, 2> PE0_4_fifo0_local("PE0_4_fifo0_local");
  tapa::stream<U1_Data1PEChannelType, 2> PE0_4_fifo1_local("PE0_4_fifo1_local");
  tapa::stream<U1_Data2PEChannelType, 2> PE0_4_fifo2_local("PE0_4_fifo2_local");
  tapa::stream<U1_Data0PEChannelType, 2> PE0_5_fifo0_local("PE0_5_fifo0_local");
  tapa::stream<U1_Data1PEChannelType, 2> PE0_5_fifo1_local("PE0_5_fifo1_local");
  tapa::stream<U1_Data2PEChannelType, 2> PE0_5_fifo2_local("PE0_5_fifo2_local");
  tapa::stream<U1_Data0PEChannelType, 2> PE1_0_fifo0_local("PE1_0_fifo0_local");
  tapa::stream<U1_Data1PEChannelType, 2> PE1_0_fifo1_local("PE1_0_fifo1_local");
  tapa::stream<U1_Data2PEChannelType, 2> PE1_0_fifo2_local("PE1_0_fifo2_local");
  tapa::stream<U1_Data0PEChannelType, 2> PE1_1_fifo0_local("PE1_1_fifo0_local");
  tapa::stream<U1_Data1PEChannelType, 2> PE1_1_fifo1_local("PE1_1_fifo1_local");
  tapa::stream<U1_Data2PEChannelType, 2> PE1_1_fifo2_local("PE1_1_fifo2_local");
  tapa::stream<U1_Data0PEChannelType, 2> PE1_2_fifo0_local("PE1_2_fifo0_local");
  tapa::stream<U1_Data1PEChannelType, 2> PE1_2_fifo1_local("PE1_2_fifo1_local");
  tapa::stream<U1_Data2PEChannelType, 2> PE1_2_fifo2_local("PE1_2_fifo2_local");
  tapa::stream<U1_Data0PEChannelType, 2> PE1_3_fifo0_local("PE1_3_fifo0_local");
  tapa::stream<U1_Data1PEChannelType, 2> PE1_3_fifo1_local("PE1_3_fifo1_local");
  tapa::stream<U1_Data2PEChannelType, 2> PE1_3_fifo2_local("PE1_3_fifo2_local");
  tapa::stream<U1_Data0PEChannelType, 2> PE1_4_fifo0_local("PE1_4_fifo0_local");
  tapa::stream<U1_Data1PEChannelType, 2> PE1_4_fifo1_local("PE1_4_fifo1_local");
  tapa::stream<U1_Data2PEChannelType, 2> PE1_4_fifo2_local("PE1_4_fifo2_local");
  tapa::stream<U1_Data0PEChannelType, 2> PE1_5_fifo0_local("PE1_5_fifo0_local");
  tapa::stream<U1_Data1PEChannelType, 2> PE1_5_fifo1_local("PE1_5_fifo1_local");
  tapa::stream<U1_Data2PEChannelType, 2> PE1_5_fifo2_local("PE1_5_fifo2_local");
  tapa::stream<U1_Data0PEChannelType, 2> PE2_0_fifo0_local("PE2_0_fifo0_local");
  tapa::stream<U1_Data1PEChannelType, 2> PE2_0_fifo1_local("PE2_0_fifo1_local");
  tapa::stream<U1_Data2PEChannelType, 2> PE2_0_fifo2_local("PE2_0_fifo2_local");
  tapa::stream<U1_Data0PEChannelType, 2> PE2_1_fifo0_local("PE2_1_fifo0_local");
  tapa::stream<U1_Data1PEChannelType, 2> PE2_1_fifo1_local("PE2_1_fifo1_local");
  tapa::stream<U1_Data2PEChannelType, 2> PE2_1_fifo2_local("PE2_1_fifo2_local");
  tapa::stream<U1_Data0PEChannelType, 2> PE2_2_fifo0_local("PE2_2_fifo0_local");
  tapa::stream<U1_Data1PEChannelType, 2> PE2_2_fifo1_local("PE2_2_fifo1_local");
  tapa::stream<U1_Data2PEChannelType, 2> PE2_2_fifo2_local("PE2_2_fifo2_local");
  tapa::stream<U1_Data0PEChannelType, 2> PE2_3_fifo0_local("PE2_3_fifo0_local");
  tapa::stream<U1_Data1PEChannelType, 2> PE2_3_fifo1_local("PE2_3_fifo1_local");
  tapa::stream<U1_Data2PEChannelType, 2> PE2_3_fifo2_local("PE2_3_fifo2_local");
  tapa::stream<U1_Data0PEChannelType, 2> PE2_4_fifo0_local("PE2_4_fifo0_local");
  tapa::stream<U1_Data1PEChannelType, 2> PE2_4_fifo1_local("PE2_4_fifo1_local");
  tapa::stream<U1_Data2PEChannelType, 2> PE2_4_fifo2_local("PE2_4_fifo2_local");
  tapa::stream<U1_Data0PEChannelType, 2> PE2_5_fifo0_local("PE2_5_fifo0_local");
  tapa::stream<U1_Data1PEChannelType, 2> PE2_5_fifo1_local("PE2_5_fifo1_local");
  tapa::stream<U1_Data2PEChannelType, 2> PE2_5_fifo2_local("PE2_5_fifo2_local");
  tapa::stream<U1_Data0PEChannelType, 2> PE3_0_fifo0_local("PE3_0_fifo0_local");
  tapa::stream<U1_Data1PEChannelType, 2> PE3_0_fifo1_local("PE3_0_fifo1_local");
  tapa::stream<U1_Data2PEChannelType, 2> PE3_0_fifo2_local("PE3_0_fifo2_local");
  tapa::stream<U1_Data0PEChannelType, 2> PE3_1_fifo0_local("PE3_1_fifo0_local");
  tapa::stream<U1_Data1PEChannelType, 2> PE3_1_fifo1_local("PE3_1_fifo1_local");
  tapa::stream<U1_Data2PEChannelType, 2> PE3_1_fifo2_local("PE3_1_fifo2_local");
  tapa::stream<U1_Data0PEChannelType, 2> PE3_2_fifo0_local("PE3_2_fifo0_local");
  tapa::stream<U1_Data1PEChannelType, 2> PE3_2_fifo1_local("PE3_2_fifo1_local");
  tapa::stream<U1_Data2PEChannelType, 2> PE3_2_fifo2_local("PE3_2_fifo2_local");
  tapa::stream<U1_Data0PEChannelType, 2> PE3_3_fifo0_local("PE3_3_fifo0_local");
  tapa::stream<U1_Data1PEChannelType, 2> PE3_3_fifo1_local("PE3_3_fifo1_local");
  tapa::stream<U1_Data2PEChannelType, 2> PE3_3_fifo2_local("PE3_3_fifo2_local");
  tapa::stream<U1_Data0PEChannelType, 2> PE3_4_fifo0_local("PE3_4_fifo0_local");
  tapa::stream<U1_Data1PEChannelType, 2> PE3_4_fifo1_local("PE3_4_fifo1_local");
  tapa::stream<U1_Data2PEChannelType, 2> PE3_4_fifo2_local("PE3_4_fifo2_local");
  tapa::stream<U1_Data0PEChannelType, 2> PE3_5_fifo0_local("PE3_5_fifo0_local");
  tapa::stream<U1_Data1PEChannelType, 2> PE3_5_fifo1_local("PE3_5_fifo1_local");
  tapa::stream<U1_Data2PEChannelType, 2> PE3_5_fifo2_local("PE3_5_fifo2_local");

  tapa::stream<CinLoadData0Type, 128> fifo_data_bypass("fifo_data_bypass");
  tapa::stream<uint, 2> fifo_config_bypass("fifo_config_bypass");
  // modules
  tapa::task()
  .invoke(U1_DataFeed0Head,
    start_inst, end_inst,
    fifo_cin,
    fifo0_transfer0,
    fifo_kernel_config_in,
    fifo_kernel_config_out,
    fifo_DataFeed0Head_config_out0, fifo_DataFeed0Head_config_out1,
    fifo_data_bypass,
    fifo_config_bypass
  )
  .invoke(U1_DataFeed0Engine0_wrapper,
    fifo0_transfer0,
    fifo0_transfer1,
    fifo0_feed0_0,
    0,
    fifo_DataFeed0Head_config_out0,
    fifo_DataFeed0Engine0_config_out0,
    fifo_DataFeed0Engine0_config_out1
  )
  .invoke(U1_DataFeed0Engine0_wrapper,
    fifo0_transfer1,
    fifo0_transfer2,
    fifo0_feed0_1,
    1,
    fifo_DataFeed0Engine0_config_out0,
    fifo_DataFeed0Engine1_config_out0,
    fifo_DataFeed0Engine1_config_out1
  )
  .invoke(U1_DataFeed0Engine0_wrapper,
    fifo0_transfer2,
    fifo0_transfer3,
    fifo0_feed0_2,
    2,
    fifo_DataFeed0Engine1_config_out0,
    fifo_DataFeed0Engine2_config_out0,
    fifo_DataFeed0Engine2_config_out1
  )
  .invoke(U1_DataFeed0Engine0_wrapper,
    fifo0_transfer3,
    fifo0_transfer4,
    fifo0_feed0_3,
    3,
    fifo_DataFeed0Engine2_config_out0,
    fifo_DataFeed0Engine3_config_out0,
    fifo_DataFeed0Engine3_config_out1
  )
  .invoke(U1_DataFeed0Engine0_wrapper,
    fifo0_transfer4,
    fifo0_transfer5,
    fifo0_feed0_4,
    4,
    fifo_DataFeed0Engine3_config_out0,
    fifo_DataFeed0Engine4_config_out0,
    fifo_DataFeed0Engine4_config_out1
  )
  .invoke(U1_DataFeed0EngineLast,
    fifo0_transfer5,
    fifo0_feed0_5,
    5,
    fifo_DataFeed0Engine4_config_out0,
    fifo_DataFeed0Engine5_config_out1
  )
  .invoke(U1_DataFeed1Head,
    fifo_weight,
    fifo1_transfer0,
    fifo_DataFeed0Head_config_out1, fifo_DataFeed1Head_config_out0
  )
  .invoke(U1_DataFeed1Engine0_wrapper,
    fifo1_transfer0,
    fifo1_transfer1,
    fifo1_feed0_0,
    0,
    fifo_DataFeed1Head_config_out0,
    fifo_DataFeed1Engine0_config_out0
  )
  .invoke(U1_DataFeed1Engine0_wrapper,
    fifo1_transfer1,
    fifo1_transfer2,
    fifo1_feed1_0,
    1,
    fifo_DataFeed1Engine0_config_out0,
    fifo_DataFeed1Engine1_config_out0
  )
  .invoke(U1_DataFeed1Engine0_wrapper,
    fifo1_transfer2,
    fifo1_transfer3,
    fifo1_feed2_0,
    2,
    fifo_DataFeed1Engine1_config_out0,
    fifo_DataFeed1Engine2_config_out0
  )
  .invoke(U1_DataFeed1EngineLast,
    fifo1_transfer3,
    fifo1_feed3_0,
    3,
    fifo_DataFeed1Engine2_config_out0
  )
  .invoke(U1_op0_transfer_wrapper,
    fifo0_feed0_0,
    fifo0_feed1_0,
    PE0_0_fifo0_local,
    fifo_DataFeed0Engine0_config_out1,
    fifo_PE0_0_op0_config_out
  )
  .invoke(U1_op1_transfer_wrapper,
    fifo1_feed0_0,
    fifo1_feed0_1,
    PE0_0_fifo1_local,
    fifo_PE0_0_op0_config_out,
    fifo_PE0_0_op1_config_out
  )
  .invoke(U1_compute_wrapper,
    PE0_0_fifo0_local,
    PE0_0_fifo1_local,
    PE0_0_fifo2_local,
    fifo_PE0_0_op1_config_out,
    fifo_PE0_0_compute_config_out
  )
  .invoke(U1_res_transfer_first_wrapper,
    PE0_0_fifo2_local,
    fifo2_collect0_0,
    0,
    0,
    fifo_PE0_0_compute_config_out,
    fifo_PE0_0_res_config_out
  )
  .invoke(U1_op0_transfer_wrapper,
    fifo0_feed0_1,
    fifo0_feed1_1,
    PE0_1_fifo0_local,
    fifo_DataFeed0Engine1_config_out1,
    fifo_PE0_1_op0_config_out
  )
  .invoke(U1_op1_transfer_wrapper,
    fifo1_feed0_1,
    fifo1_feed0_2,
    PE0_1_fifo1_local,
    fifo_PE0_1_op0_config_out,
    fifo_PE0_1_op1_config_out
  )
  .invoke(U1_compute_wrapper,
    PE0_1_fifo0_local,
    PE0_1_fifo1_local,
    PE0_1_fifo2_local,
    fifo_PE0_1_op1_config_out,
    fifo_PE0_1_compute_config_out
  )
  .invoke(U1_res_transfer_first_wrapper,
    PE0_1_fifo2_local,
    fifo2_collect0_1,
    0,
    1,
    fifo_PE0_1_compute_config_out,
    fifo_PE0_1_res_config_out
  )
  .invoke(U1_op0_transfer_wrapper,
    fifo0_feed0_2,
    fifo0_feed1_2,
    PE0_2_fifo0_local,
    fifo_DataFeed0Engine2_config_out1,
    fifo_PE0_2_op0_config_out
  )
  .invoke(U1_op1_transfer_wrapper,
    fifo1_feed0_2,
    fifo1_feed0_3,
    PE0_2_fifo1_local,
    fifo_PE0_2_op0_config_out,
    fifo_PE0_2_op1_config_out
  )
  .invoke(U1_compute_wrapper,
    PE0_2_fifo0_local,
    PE0_2_fifo1_local,
    PE0_2_fifo2_local,
    fifo_PE0_2_op1_config_out,
    fifo_PE0_2_compute_config_out
  )
  .invoke(U1_res_transfer_first_wrapper,
    PE0_2_fifo2_local,
    fifo2_collect0_2,
    0,
    2,
    fifo_PE0_2_compute_config_out,
    fifo_PE0_2_res_config_out
  )
  .invoke(U1_op0_transfer_wrapper,
    fifo0_feed0_3,
    fifo0_feed1_3,
    PE0_3_fifo0_local,
    fifo_DataFeed0Engine3_config_out1,
    fifo_PE0_3_op0_config_out
  )
  .invoke(U1_op1_transfer_wrapper,
    fifo1_feed0_3,
    fifo1_feed0_4,
    PE0_3_fifo1_local,
    fifo_PE0_3_op0_config_out,
    fifo_PE0_3_op1_config_out
  )
  .invoke(U1_compute_wrapper,
    PE0_3_fifo0_local,
    PE0_3_fifo1_local,
    PE0_3_fifo2_local,
    fifo_PE0_3_op1_config_out,
    fifo_PE0_3_compute_config_out
  )
  .invoke(U1_res_transfer_first_wrapper,
    PE0_3_fifo2_local,
    fifo2_collect0_3,
    0,
    3,
    fifo_PE0_3_compute_config_out,
    fifo_PE0_3_res_config_out
  )
  .invoke(U1_op0_transfer_wrapper,
    fifo0_feed0_4,
    fifo0_feed1_4,
    PE0_4_fifo0_local,
    fifo_DataFeed0Engine4_config_out1,
    fifo_PE0_4_op0_config_out
  )
  .invoke(U1_op1_transfer_wrapper,
    fifo1_feed0_4,
    fifo1_feed0_5,
    PE0_4_fifo1_local,
    fifo_PE0_4_op0_config_out,
    fifo_PE0_4_op1_config_out
  )
  .invoke(U1_compute_wrapper,
    PE0_4_fifo0_local,
    PE0_4_fifo1_local,
    PE0_4_fifo2_local,
    fifo_PE0_4_op1_config_out,
    fifo_PE0_4_compute_config_out
  )
  .invoke(U1_res_transfer_first_wrapper,
    PE0_4_fifo2_local,
    fifo2_collect0_4,
    0,
    4,
    fifo_PE0_4_compute_config_out,
    fifo_PE0_4_res_config_out
  )
  .invoke(U1_op0_transfer_wrapper,
    fifo0_feed0_5,
    fifo0_feed1_5,
    PE0_5_fifo0_local,
    fifo_DataFeed0Engine5_config_out1,
    fifo_PE0_5_op0_config_out
  )
  .invoke(U1_op1_transfer_last_wrapper,
    fifo1_feed0_5,
    PE0_5_fifo1_local,
    fifo_PE0_5_op0_config_out,
    fifo_PE0_5_op1_config_out
  )
  .invoke(U1_compute_wrapper,
    PE0_5_fifo0_local,
    PE0_5_fifo1_local,
    PE0_5_fifo2_local,
    fifo_PE0_5_op1_config_out,
    fifo_PE0_5_compute_config_out
  )
  .invoke(U1_res_transfer_first_wrapper,
    PE0_5_fifo2_local,
    fifo2_collect0_5,
    0,
    5,
    fifo_PE0_5_compute_config_out,
    fifo_PE0_5_res_config_out
  )
  .invoke(U1_op0_transfer_wrapper,
    fifo0_feed1_0,
    fifo0_feed2_0,
    PE1_0_fifo0_local,
    fifo_PE0_0_res_config_out,
    fifo_PE1_0_op0_config_out
  )
  .invoke(U1_op1_transfer_wrapper,
    fifo1_feed1_0,
    fifo1_feed1_1,
    PE1_0_fifo1_local,
    fifo_PE1_0_op0_config_out,
    fifo_PE1_0_op1_config_out
  )
  .invoke(U1_compute_wrapper,
    PE1_0_fifo0_local,
    PE1_0_fifo1_local,
    PE1_0_fifo2_local,
    fifo_PE1_0_op1_config_out,
    fifo_PE1_0_compute_config_out
  )
  .invoke(U1_res_transfer_wrapper,
    PE1_0_fifo2_local,
    fifo2_collect0_0,
    fifo2_collect1_0,
    1,
    0,
    fifo_PE1_0_compute_config_out,
    fifo_PE1_0_res_config_out
  )
  .invoke(U1_op0_transfer_wrapper,
    fifo0_feed1_1,
    fifo0_feed2_1,
    PE1_1_fifo0_local,
    fifo_PE0_1_res_config_out,
    fifo_PE1_1_op0_config_out
  )
  .invoke(U1_op1_transfer_wrapper,
    fifo1_feed1_1,
    fifo1_feed1_2,
    PE1_1_fifo1_local,
    fifo_PE1_1_op0_config_out,
    fifo_PE1_1_op1_config_out
  )
  .invoke(U1_compute_wrapper,
    PE1_1_fifo0_local,
    PE1_1_fifo1_local,
    PE1_1_fifo2_local,
    fifo_PE1_1_op1_config_out,
    fifo_PE1_1_compute_config_out
  )
  .invoke(U1_res_transfer_wrapper,
    PE1_1_fifo2_local,
    fifo2_collect0_1,
    fifo2_collect1_1,
    1,
    1,
    fifo_PE1_1_compute_config_out,
    fifo_PE1_1_res_config_out
  )
  .invoke(U1_op0_transfer_wrapper,
    fifo0_feed1_2,
    fifo0_feed2_2,
    PE1_2_fifo0_local,
    fifo_PE0_2_res_config_out,
    fifo_PE1_2_op0_config_out
  )
  .invoke(U1_op1_transfer_wrapper,
    fifo1_feed1_2,
    fifo1_feed1_3,
    PE1_2_fifo1_local,
    fifo_PE1_2_op0_config_out,
    fifo_PE1_2_op1_config_out
  )
  .invoke(U1_compute_wrapper,
    PE1_2_fifo0_local,
    PE1_2_fifo1_local,
    PE1_2_fifo2_local,
    fifo_PE1_2_op1_config_out,
    fifo_PE1_2_compute_config_out
  )
  .invoke(U1_res_transfer_wrapper,
    PE1_2_fifo2_local,
    fifo2_collect0_2,
    fifo2_collect1_2,
    1,
    2,
    fifo_PE1_2_compute_config_out,
    fifo_PE1_2_res_config_out
  )
  .invoke(U1_op0_transfer_wrapper,
    fifo0_feed1_3,
    fifo0_feed2_3,
    PE1_3_fifo0_local,
    fifo_PE0_3_res_config_out,
    fifo_PE1_3_op0_config_out
  )
  .invoke(U1_op1_transfer_wrapper,
    fifo1_feed1_3,
    fifo1_feed1_4,
    PE1_3_fifo1_local,
    fifo_PE1_3_op0_config_out,
    fifo_PE1_3_op1_config_out
  )
  .invoke(U1_compute_wrapper,
    PE1_3_fifo0_local,
    PE1_3_fifo1_local,
    PE1_3_fifo2_local,
    fifo_PE1_3_op1_config_out,
    fifo_PE1_3_compute_config_out
  )
  .invoke(U1_res_transfer_wrapper,
    PE1_3_fifo2_local,
    fifo2_collect0_3,
    fifo2_collect1_3,
    1,
    3,
    fifo_PE1_3_compute_config_out,
    fifo_PE1_3_res_config_out
  )
  .invoke(U1_op0_transfer_wrapper,
    fifo0_feed1_4,
    fifo0_feed2_4,
    PE1_4_fifo0_local,
    fifo_PE0_4_res_config_out,
    fifo_PE1_4_op0_config_out
  )
  .invoke(U1_op1_transfer_wrapper,
    fifo1_feed1_4,
    fifo1_feed1_5,
    PE1_4_fifo1_local,
    fifo_PE1_4_op0_config_out,
    fifo_PE1_4_op1_config_out
  )
  .invoke(U1_compute_wrapper,
    PE1_4_fifo0_local,
    PE1_4_fifo1_local,
    PE1_4_fifo2_local,
    fifo_PE1_4_op1_config_out,
    fifo_PE1_4_compute_config_out
  )
  .invoke(U1_res_transfer_wrapper,
    PE1_4_fifo2_local,
    fifo2_collect0_4,
    fifo2_collect1_4,
    1,
    4,
    fifo_PE1_4_compute_config_out,
    fifo_PE1_4_res_config_out
  )
  .invoke(U1_op0_transfer_wrapper,
    fifo0_feed1_5,
    fifo0_feed2_5,
    PE1_5_fifo0_local,
    fifo_PE0_5_res_config_out,
    fifo_PE1_5_op0_config_out
  )
  .invoke(U1_op1_transfer_last_wrapper,
    fifo1_feed1_5,
    PE1_5_fifo1_local,
    fifo_PE1_5_op0_config_out,
    fifo_PE1_5_op1_config_out
  )
  .invoke(U1_compute_wrapper,
    PE1_5_fifo0_local,
    PE1_5_fifo1_local,
    PE1_5_fifo2_local,
    fifo_PE1_5_op1_config_out,
    fifo_PE1_5_compute_config_out
  )
  .invoke(U1_res_transfer_wrapper,
    PE1_5_fifo2_local,
    fifo2_collect0_5,
    fifo2_collect1_5,
    1,
    5,
    fifo_PE1_5_compute_config_out,
    fifo_PE1_5_res_config_out
  )
  .invoke(U1_op0_transfer_wrapper,
    fifo0_feed2_0,
    fifo0_feed3_0,
    PE2_0_fifo0_local,
    fifo_PE1_0_res_config_out,
    fifo_PE2_0_op0_config_out
  )
  .invoke(U1_op1_transfer_wrapper,
    fifo1_feed2_0,
    fifo1_feed2_1,
    PE2_0_fifo1_local,
    fifo_PE2_0_op0_config_out,
    fifo_PE2_0_op1_config_out
  )
  .invoke(U1_compute_wrapper,
    PE2_0_fifo0_local,
    PE2_0_fifo1_local,
    PE2_0_fifo2_local,
    fifo_PE2_0_op1_config_out,
    fifo_PE2_0_compute_config_out
  )
  .invoke(U1_res_transfer_wrapper,
    PE2_0_fifo2_local,
    fifo2_collect1_0,
    fifo2_collect2_0,
    2,
    0,
    fifo_PE2_0_compute_config_out,
    fifo_PE2_0_res_config_out
  )
  .invoke(U1_op0_transfer_wrapper,
    fifo0_feed2_1,
    fifo0_feed3_1,
    PE2_1_fifo0_local,
    fifo_PE1_1_res_config_out,
    fifo_PE2_1_op0_config_out
  )
  .invoke(U1_op1_transfer_wrapper,
    fifo1_feed2_1,
    fifo1_feed2_2,
    PE2_1_fifo1_local,
    fifo_PE2_1_op0_config_out,
    fifo_PE2_1_op1_config_out
  )
  .invoke(U1_compute_wrapper,
    PE2_1_fifo0_local,
    PE2_1_fifo1_local,
    PE2_1_fifo2_local,
    fifo_PE2_1_op1_config_out,
    fifo_PE2_1_compute_config_out
  )
  .invoke(U1_res_transfer_wrapper,
    PE2_1_fifo2_local,
    fifo2_collect1_1,
    fifo2_collect2_1,
    2,
    1,
    fifo_PE2_1_compute_config_out,
    fifo_PE2_1_res_config_out
  )
  .invoke(U1_op0_transfer_wrapper,
    fifo0_feed2_2,
    fifo0_feed3_2,
    PE2_2_fifo0_local,
    fifo_PE1_2_res_config_out,
    fifo_PE2_2_op0_config_out
  )
  .invoke(U1_op1_transfer_wrapper,
    fifo1_feed2_2,
    fifo1_feed2_3,
    PE2_2_fifo1_local,
    fifo_PE2_2_op0_config_out,
    fifo_PE2_2_op1_config_out
  )
  .invoke(U1_compute_wrapper,
    PE2_2_fifo0_local,
    PE2_2_fifo1_local,
    PE2_2_fifo2_local,
    fifo_PE2_2_op1_config_out,
    fifo_PE2_2_compute_config_out
  )
  .invoke(U1_res_transfer_wrapper,
    PE2_2_fifo2_local,
    fifo2_collect1_2,
    fifo2_collect2_2,
    2,
    2,
    fifo_PE2_2_compute_config_out,
    fifo_PE2_2_res_config_out
  )
  .invoke(U1_op0_transfer_wrapper,
    fifo0_feed2_3,
    fifo0_feed3_3,
    PE2_3_fifo0_local,
    fifo_PE1_3_res_config_out,
    fifo_PE2_3_op0_config_out
  )
  .invoke(U1_op1_transfer_wrapper,
    fifo1_feed2_3,
    fifo1_feed2_4,
    PE2_3_fifo1_local,
    fifo_PE2_3_op0_config_out,
    fifo_PE2_3_op1_config_out
  )
  .invoke(U1_compute_wrapper,
    PE2_3_fifo0_local,
    PE2_3_fifo1_local,
    PE2_3_fifo2_local,
    fifo_PE2_3_op1_config_out,
    fifo_PE2_3_compute_config_out
  )
  .invoke(U1_res_transfer_wrapper,
    PE2_3_fifo2_local,
    fifo2_collect1_3,
    fifo2_collect2_3,
    2,
    3,
    fifo_PE2_3_compute_config_out,
    fifo_PE2_3_res_config_out
  )
  .invoke(U1_op0_transfer_wrapper,
    fifo0_feed2_4,
    fifo0_feed3_4,
    PE2_4_fifo0_local,
    fifo_PE1_4_res_config_out,
    fifo_PE2_4_op0_config_out
  )
  .invoke(U1_op1_transfer_wrapper,
    fifo1_feed2_4,
    fifo1_feed2_5,
    PE2_4_fifo1_local,
    fifo_PE2_4_op0_config_out,
    fifo_PE2_4_op1_config_out
  )
  .invoke(U1_compute_wrapper,
    PE2_4_fifo0_local,
    PE2_4_fifo1_local,
    PE2_4_fifo2_local,
    fifo_PE2_4_op1_config_out,
    fifo_PE2_4_compute_config_out
  )
  .invoke(U1_res_transfer_wrapper,
    PE2_4_fifo2_local,
    fifo2_collect1_4,
    fifo2_collect2_4,
    2,
    4,
    fifo_PE2_4_compute_config_out,
    fifo_PE2_4_res_config_out
  )
  .invoke(U1_op0_transfer_wrapper,
    fifo0_feed2_5,
    fifo0_feed3_5,
    PE2_5_fifo0_local,
    fifo_PE1_5_res_config_out,
    fifo_PE2_5_op0_config_out
  )
  .invoke(U1_op1_transfer_last_wrapper,
    fifo1_feed2_5,
    PE2_5_fifo1_local,
    fifo_PE2_5_op0_config_out,
    fifo_PE2_5_op1_config_out
  )
  .invoke(U1_compute_wrapper,
    PE2_5_fifo0_local,
    PE2_5_fifo1_local,
    PE2_5_fifo2_local,
    fifo_PE2_5_op1_config_out,
    fifo_PE2_5_compute_config_out
  )
  .invoke(U1_res_transfer_wrapper,
    PE2_5_fifo2_local,
    fifo2_collect1_5,
    fifo2_collect2_5,
    2,
    5,
    fifo_PE2_5_compute_config_out,
    fifo_PE2_5_res_config_out
  )
  .invoke(U1_op0_transfer_last_wrapper,
    fifo0_feed3_0,
    PE3_0_fifo0_local,
    fifo_PE2_0_res_config_out,
    fifo_PE3_0_op0_config_out
  )
  .invoke(U1_op1_transfer_wrapper,
    fifo1_feed3_0,
    fifo1_feed3_1,
    PE3_0_fifo1_local,
    fifo_PE3_0_op0_config_out,
    fifo_PE3_0_op1_config_out
  )
  .invoke(U1_compute_wrapper,
    PE3_0_fifo0_local,
    PE3_0_fifo1_local,
    PE3_0_fifo2_local,
    fifo_PE3_0_op1_config_out,
    fifo_PE3_0_compute_config_out
  )
  .invoke(U1_res_transfer_wrapper,
    PE3_0_fifo2_local,
    fifo2_collect2_0,
    fifo2_collect3_0,
    3,
    0,
    fifo_PE3_0_compute_config_out,
    fifo_PE3_0_res_config_out
  )
  .invoke(U1_op0_transfer_last_wrapper,
    fifo0_feed3_1,
    PE3_1_fifo0_local,
    fifo_PE2_1_res_config_out,
    fifo_PE3_1_op0_config_out
  )
  .invoke(U1_op1_transfer_wrapper,
    fifo1_feed3_1,
    fifo1_feed3_2,
    PE3_1_fifo1_local,
    fifo_PE3_1_op0_config_out,
    fifo_PE3_1_op1_config_out
  )
  .invoke(U1_compute_wrapper,
    PE3_1_fifo0_local,
    PE3_1_fifo1_local,
    PE3_1_fifo2_local,
    fifo_PE3_1_op1_config_out,
    fifo_PE3_1_compute_config_out
  )
  .invoke(U1_res_transfer_wrapper,
    PE3_1_fifo2_local,
    fifo2_collect2_1,
    fifo2_collect3_1,
    3,
    1,
    fifo_PE3_1_compute_config_out,
    fifo_PE3_1_res_config_out
  )
  .invoke(U1_op0_transfer_last_wrapper,
    fifo0_feed3_2,
    PE3_2_fifo0_local,
    fifo_PE2_2_res_config_out,
    fifo_PE3_2_op0_config_out
  )
  .invoke(U1_op1_transfer_wrapper,
    fifo1_feed3_2,
    fifo1_feed3_3,
    PE3_2_fifo1_local,
    fifo_PE3_2_op0_config_out,
    fifo_PE3_2_op1_config_out
  )
  .invoke(U1_compute_wrapper,
    PE3_2_fifo0_local,
    PE3_2_fifo1_local,
    PE3_2_fifo2_local,
    fifo_PE3_2_op1_config_out,
    fifo_PE3_2_compute_config_out
  )
  .invoke(U1_res_transfer_wrapper,
    PE3_2_fifo2_local,
    fifo2_collect2_2,
    fifo2_collect3_2,
    3,
    2,
    fifo_PE3_2_compute_config_out,
    fifo_PE3_2_res_config_out
  )
  .invoke(U1_op0_transfer_last_wrapper,
    fifo0_feed3_3,
    PE3_3_fifo0_local,
    fifo_PE2_3_res_config_out,
    fifo_PE3_3_op0_config_out
  )
  .invoke(U1_op1_transfer_wrapper,
    fifo1_feed3_3,
    fifo1_feed3_4,
    PE3_3_fifo1_local,
    fifo_PE3_3_op0_config_out,
    fifo_PE3_3_op1_config_out
  )
  .invoke(U1_compute_wrapper,
    PE3_3_fifo0_local,
    PE3_3_fifo1_local,
    PE3_3_fifo2_local,
    fifo_PE3_3_op1_config_out,
    fifo_PE3_3_compute_config_out
  )
  .invoke(U1_res_transfer_wrapper,
    PE3_3_fifo2_local,
    fifo2_collect2_3,
    fifo2_collect3_3,
    3,
    3,
    fifo_PE3_3_compute_config_out,
    fifo_PE3_3_res_config_out
  )
  .invoke(U1_op0_transfer_last_wrapper,
    fifo0_feed3_4,
    PE3_4_fifo0_local,
    fifo_PE2_4_res_config_out,
    fifo_PE3_4_op0_config_out
  )
  .invoke(U1_op1_transfer_wrapper,
    fifo1_feed3_4,
    fifo1_feed3_5,
    PE3_4_fifo1_local,
    fifo_PE3_4_op0_config_out,
    fifo_PE3_4_op1_config_out
  )
  .invoke(U1_compute_wrapper,
    PE3_4_fifo0_local,
    PE3_4_fifo1_local,
    PE3_4_fifo2_local,
    fifo_PE3_4_op1_config_out,
    fifo_PE3_4_compute_config_out
  )
  .invoke(U1_res_transfer_wrapper,
    PE3_4_fifo2_local,
    fifo2_collect2_4,
    fifo2_collect3_4,
    3,
    4,
    fifo_PE3_4_compute_config_out,
    fifo_PE3_4_res_config_out
  )
  .invoke(U1_op0_transfer_last_wrapper,
    fifo0_feed3_5,
    PE3_5_fifo0_local,
    fifo_PE2_5_res_config_out,
    fifo_PE3_5_op0_config_out
  )
  .invoke(U1_op1_transfer_last_wrapper,
    fifo1_feed3_5,
    PE3_5_fifo1_local,
    fifo_PE3_5_op0_config_out,
    fifo_PE3_5_op1_config_out
  )
  .invoke(U1_compute_wrapper,
    PE3_5_fifo0_local,
    PE3_5_fifo1_local,
    PE3_5_fifo2_local,
    fifo_PE3_5_op1_config_out,
    fifo_PE3_5_compute_config_out
  )
  .invoke(U1_res_transfer_wrapper,
    PE3_5_fifo2_local,
    fifo2_collect2_5,
    fifo2_collect3_5,
    3,
    5,
    fifo_PE3_5_compute_config_out,
    fifo_PE3_5_res_config_out
  )
  .invoke(U1_DataCollect2EngineLast,
    fifo2_transfer0,
    fifo2_collect3_5,
    5,
    fifo_PE3_5_res_config_out,
    fifo_DataCollect2Engine5_config_out
  )
  .invoke(U1_DataCollect2Engine0_wrapper,
    fifo2_transfer0,
    fifo2_transfer1,
    fifo2_collect3_4,
    4,
    fifo_PE3_4_res_config_out,
    fifo_DataCollect2Engine5_config_out,
    fifo_DataCollect2Engine4_config_out
  )
  .invoke(U1_DataCollect2Engine0_wrapper,
    fifo2_transfer1,
    fifo2_transfer2,
    fifo2_collect3_3,
    3,
    fifo_PE3_3_res_config_out,
    fifo_DataCollect2Engine4_config_out,
    fifo_DataCollect2Engine3_config_out
  )
  .invoke(U1_DataCollect2Engine0_wrapper,
    fifo2_transfer2,
    fifo2_transfer3,
    fifo2_collect3_2,
    2,
    fifo_PE3_2_res_config_out,
    fifo_DataCollect2Engine3_config_out,
    fifo_DataCollect2Engine2_config_out
  )
  .invoke(U1_DataCollect2Engine0_wrapper,
    fifo2_transfer3,
    fifo2_transfer4,
    fifo2_collect3_1,
    1,
    fifo_PE3_1_res_config_out,
    fifo_DataCollect2Engine2_config_out,
    fifo_DataCollect2Engine1_config_out
  )
  .invoke(U1_DataCollect2Engine0_wrapper,
    fifo2_transfer4,
    fifo2_transfer5,
    fifo2_collect3_0,
    0,
    fifo_PE3_0_res_config_out,
    fifo_DataCollect2Engine1_config_out,
    fifo_DataCollect2Engine0_config_out
  )
  .invoke(U1_DataCollect2Head,
    fifo_data_bypass,
    fifo_config_bypass,
    fifo_cout,
    fifo2_transfer5,
    fifo_DataCollect2Engine0_config_out
  );
}
