/**
 *  This file is automatically generated by PolySA CodeGen.
 *  Version: 1.0
 *  Authos: Jie Wang
 */

#include "common_header_U1.h"

void U1_Data0FeedData0(
  U1_Data0TransferChannelType buffer[U1_DATA0_FC_GROUP_FACTOR][U1_DATA0_BUF_SIZE/U1_DATA0_FC_SIMD_FACTOR],
  stream<U1_Data0PEChannelType> &fifo_feed_0,
  uint LAYER_IN_NUM_T,
  uint LAYER_IN_IMG_H_T,
  ap_uint<8> LAYER_FILTER_S_H,
  ap_uint<8> LAYER_FILTER_S_W,
  ap_uint<8> LAYER_FILTER_D_H,
  ap_uint<8> LAYER_FILTER_D_W,
  uint LAYER_STRIDE,
  uint LAYER_ROW_IL_FACTOR,
  uint LAYER_COL_IL_FACTOR,
  uint LAYER_DILATION_RATE,
  uint K_NUM,
  ap_uint<32> KH,
  ap_uint<32> KW
){
#pragma HLS INLINE off
  bool more_to_feed_to_sys_arr = true;

  ap_uint<5> c0_counter = 0;
  ap_uint<4> c1_counter = 0;
  ap_uint<4> c2_counter = 0;
  ap_uint<3> c3_counter = 0;
  ap_uint<3> c4_counter = 0;
  ap_uint<6> c5_counter = 0;
  ap_uint<5> i = 0;

  ap_uint<7> c0_counter_bound;
  if (LAYER_STRIDE == 1){
    c0_counter_bound = LAYER_IN_IMG_H_T;
  } else if (LAYER_STRIDE == 2){
    c0_counter_bound = LAYER_IN_IMG_H_T / 2;
  }

  ap_uint<8> K_H[4] = {
    unpack(KH, 0),
    unpack(KH, 1),
    unpack(KH, 2),
    unpack(KH, 3)
  };
  ap_uint<8> K_W[4] = {
    unpack(KW, 0),
    unpack(KW, 1),
    unpack(KW, 2),
    unpack(KW, 3)
  };
  #pragma HLS ARRAY_PARTITION variable=K_H complete
  #pragma HLS ARRAY_PARTITION variable=K_W complete
  ap_uint<U1_DATA0_WIDTH*U1_SIMD_FACTOR> sel_tmp_0[U1_DATA0_FC_SIMD_FACTOR/U1_SIMD_FACTOR];
#pragma HLS ARRAY_PARTITION variable=sel_tmp_0 complete dim=1

  while(more_to_feed_to_sys_arr){
#pragma HLS PIPELINE II=1
    ap_uint<17> buffer_ind_to_feed_to_sys_arr;
    ap_uint<17> w_idx, h_idx;
    if (LAYER_STRIDE == 1){
      w_idx = c2_counter + c4_counter*LAYER_DILATION_RATE;
      h_idx = c0_counter + c3_counter*LAYER_DILATION_RATE;
    } else if (LAYER_STRIDE == 2){
      w_idx = c2_counter * 2 + c4_counter;
      h_idx = c0_counter * 2 + c3_counter;
    }
    ap_uint<17> w_bound = LAYER_COL_IL_FACTOR * LAYER_STRIDE + LAYER_FILTER_S_W - LAYER_STRIDE;
    ap_uint<17> h_bound = LAYER_IN_IMG_H_T + LAYER_FILTER_S_H - LAYER_STRIDE;
    buffer_ind_to_feed_to_sys_arr = (w_idx + h_idx * w_bound + c5_counter * U1_SIMD_FACTOR / U1_DATA0_FC_SIMD_FACTOR * h_bound * w_bound) * U1_DATA0_FC_SIMD_FACTOR + c5_counter * U1_SIMD_FACTOR % U1_DATA0_FC_SIMD_FACTOR;

    ap_uint<17> wide_index = buffer_ind_to_feed_to_sys_arr / U1_DATA0_FC_SIMD_FACTOR + (K_W[0]-K_W[i]) + (K_H[0]-K_H[i]) * (LAYER_COL_IL_FACTOR+LAYER_FILTER_S_W-LAYER_STRIDE);
    ap_uint<17> wide_offset = buffer_ind_to_feed_to_sys_arr % U1_DATA0_FC_SIMD_FACTOR;

    U1_Data0TransferChannelType buf_data_0 = buffer[0][wide_index];
    ap_uint<U1_DATA0_WIDTH*U1_DATA0_FC_SIMD_FACTOR> wide_data_0 = buf_data_0.data;
    ap_uint<U1_DATA0_WIDTH*U1_SIMD_FACTOR> data_to_feed_0;
    for (int s = 0; s < U1_DATA0_FC_SIMD_FACTOR / U1_SIMD_FACTOR; s++){
#pragma HLS UNROLL
      sel_tmp_0[s] = wide_data_0(U1_DATA0_WIDTH * U1_SIMD_FACTOR-1, 0);
      wide_data_0 = wide_data_0 >> (U1_DATA0_WIDTH * U1_SIMD_FACTOR);
    }
    data_to_feed_0 = sel_tmp_0[wide_offset / U1_SIMD_FACTOR];

    U1_Data0PEChannelType fifo_data_to_feed_0;
    fifo_data_to_feed_0 = U1_Data0PEChannelType(data_to_feed_0, buf_data_0.new_pair, buf_data_0.last_pair, buf_data_0.FILTER_S);
    fifo_feed_0.write(fifo_data_to_feed_0);

    // counter logic
    c0_counter++;
    if (c0_counter == c0_counter_bound){
      c0_counter = 0;
      c1_counter++;
      if (c1_counter == LAYER_ROW_IL_FACTOR){
        c1_counter = 0;
        c2_counter++;
        if (c2_counter == LAYER_COL_IL_FACTOR){
          c2_counter = 0;
          c3_counter++;
          if (c3_counter == K_H[i]){
            c3_counter = 0;
            c4_counter++;
            if (c4_counter == K_W[i]){
              c4_counter = 0;
              c5_counter++;
              if (c5_counter == LAYER_IN_NUM_T / U1_SIMD_FACTOR){
                c5_counter = 0;
                i++;
                if (i == K_NUM){
                  i = 0;
                  more_to_feed_to_sys_arr = false;
                }
              }
            }
          }
        }
      }
    }
  }
}

void U1_Data1FeedData0(
  U1_Data1TransferChannelType buffer[U1_DATA1_FC_GROUP_FACTOR][U1_DATA1_BUF_SIZE/U1_DATA1_FC_SIMD_FACTOR],
  stream<U1_Data1PEChannelType> &fifo_feed_0,
  uint LAYER_IN_NUM_T,
  uint LAYER_IN_IMG_H_T,
  ap_uint<8> LAYER_FILTER_S_H,
  ap_uint<8> LAYER_FILTER_S_W,
  uint LAYER_STRIDE,
  uint LAYER_ROW_IL_FACTOR,
  uint LAYER_COL_IL_FACTOR,
  uint K_NUM,
  ap_uint<32> KH,
  ap_uint<32> KW
){
#pragma HLS INLINE off
  bool more_to_feed_to_sys_arr = true;

  ap_uint<5> c0_counter = 0;
  ap_uint<4> c1_counter = 0;
  ap_uint<4> c2_counter = 0;
  ap_uint<3> c3_counter = 0;
  ap_uint<3> c4_counter = 0;
  ap_uint<6> c5_counter = 0;
  ap_uint<5> i = 0;

  ap_uint<7> c0_counter_bound;
  ap_uint<6> offsets[4] = {0};
  #pragma HLS ARRAY_PARTITION variable=offsets complete
  if(K_NUM==4){
    offsets[0] = 0*LAYER_FILTER_S_H + 0                                  ;
    offsets[1] = 0*LAYER_FILTER_S_H + 0                   + unpack(KW,0) ;
    offsets[2] = unpack(KH,0)*LAYER_FILTER_S_H + 0                       ;
    offsets[3] = unpack(KH,0)*LAYER_FILTER_S_H + 0        + unpack(KW,2) ;
  }
  ap_uint<8> K_H[4] = {
    unpack(KH, 0),
    unpack(KH, 1),
    unpack(KH, 2),
    unpack(KH, 3)
  };
  ap_uint<8> K_W[4] = {
    unpack(KW, 0),
    unpack(KW, 1),
    unpack(KW, 2),
    unpack(KW, 3)
  };
  #pragma HLS ARRAY_PARTITION variable=K_H complete
  #pragma HLS ARRAY_PARTITION variable=K_W complete
    if (LAYER_STRIDE == 1){
    c0_counter_bound = LAYER_IN_IMG_H_T;
  } else if (LAYER_STRIDE == 2){
    c0_counter_bound = LAYER_IN_IMG_H_T / 2;
  }

  ap_uint<U1_DATA1_WIDTH*U1_SIMD_FACTOR> sel_tmp_0[U1_DATA1_FC_SIMD_FACTOR/U1_SIMD_FACTOR];
#pragma HLS ARRAY_PARTITION variable=sel_tmp_0 complete dim=1

  while(more_to_feed_to_sys_arr){
#pragma HLS PIPELINE II=1
    ap_uint<16> buffer_ind_to_feed_to_sys_arr;
    buffer_ind_to_feed_to_sys_arr = c1_counter * LAYER_FILTER_S_H * LAYER_FILTER_S_W * LAYER_IN_NUM_T + c3_counter * LAYER_FILTER_S_W * LAYER_IN_NUM_T + (c4_counter+offsets[i]) * LAYER_IN_NUM_T + c5_counter * U1_SIMD_FACTOR;
    ap_uint<16> wide_index = buffer_ind_to_feed_to_sys_arr / U1_DATA1_FC_SIMD_FACTOR;
    ap_uint<16> wide_offset = buffer_ind_to_feed_to_sys_arr % U1_DATA1_FC_SIMD_FACTOR;

    U1_Data1TransferChannelType buf_data_0 = buffer[0][wide_index];
    ap_uint<U1_DATA1_WIDTH*U1_DATA1_FC_SIMD_FACTOR> wide_data_0 = buf_data_0.data;
    ap_uint<U1_DATA1_WIDTH*U1_SIMD_FACTOR> data_to_feed_0;
    for (int s = 0; s < U1_DATA1_FC_SIMD_FACTOR/U1_SIMD_FACTOR; s++){
#pragma HLS UNROLL
      sel_tmp_0[s] = wide_data_0(U1_DATA1_WIDTH * U1_SIMD_FACTOR-1, 0);
      wide_data_0 = wide_data_0 >> (U1_DATA1_WIDTH * U1_SIMD_FACTOR);
    }
    data_to_feed_0 = sel_tmp_0[wide_offset / U1_SIMD_FACTOR];

    U1_Data1PEChannelType fifo_data_to_feed_0;
    fifo_data_to_feed_0 = U1_Data1PEChannelType(data_to_feed_0, buf_data_0.new_pair, buf_data_0.last_pair, buf_data_0.FILTER_S);
    fifo_feed_0.write(fifo_data_to_feed_0);

    // counter logic
    c0_counter++;
    if (c0_counter == c0_counter_bound){
      c0_counter = 0;
      c1_counter++;
      if (c1_counter == LAYER_ROW_IL_FACTOR){
        c1_counter = 0;
        c2_counter++;
        if (c2_counter == LAYER_COL_IL_FACTOR){
          c2_counter = 0;
          c3_counter++;
          if (c3_counter == K_H[i]){
            c3_counter = 0;
            c4_counter++;
            if (c4_counter == K_W[i]){
              c4_counter = 0;
              c5_counter++;
              if (c5_counter == LAYER_IN_NUM_T / U1_SIMD_FACTOR){
                c5_counter = 0;
                i++;
                if (i == K_NUM){
                  i = 0;
                more_to_feed_to_sys_arr = false;
                }
              }
            }
          }
        }
      }
    }
  }
}

void U1_Data0ReadData0(
  U1_Data0TransferChannelType buffer[U1_DATA0_FC_GROUP_FACTOR][U1_DATA0_BUF_SIZE / U1_DATA0_FC_SIMD_FACTOR],
  stream<U1_Data0TransferChannelType> &fifo_transfer_in,
  stream<U1_Data0TransferChannelType> &fifo_transfer_out,
  unsigned int engine_id,
  uint LAYER_IN_NUM_T,
  uint LAYER_IN_IMG_H_T,
  ap_uint<8> LAYER_FILTER_S_H,
  ap_uint<8> LAYER_FILTER_S_W,
  uint LAYER_STRIDE,
  uint LAYER_ROW_IL_FACTOR,
  uint LAYER_COL_IL_FACTOR
){
#pragma HLS INLINE off
  bool LAST_ENGINE = (engine_id == 14 / U1_DATA0_FC_SPLIT_FACTOR - 1);
  ap_uint<18> transfer_counter = 0;
  ap_uint<18> data0_buf_size;
  ap_uint<18> local_transfer_size;
  bool more_to_write_to_buffer = true;
  bool more_to_feed_to_sys_arr = false;
  bool more_to_forward = true;
  ap_uint<14> buffer_write_counter = 0;
  ap_uint<3> buffer_gs_id = 0;

  // the first read
  data0_buf_size = LAYER_IN_NUM_T * (LAYER_IN_IMG_H_T + LAYER_FILTER_S_H - LAYER_STRIDE) * (LAYER_COL_IL_FACTOR * LAYER_STRIDE + LAYER_FILTER_S_W - LAYER_STRIDE) / U1_DATA0_FC_SIMD_FACTOR;
  local_transfer_size = data0_buf_size * (14 / U1_DATA0_FC_SPLIT_FACTOR - engine_id) * U1_DATA0_FC_GROUP_FACTOR;

  while(more_to_forward){
#pragma HLS PIPELINE II=1
    U1_Data0TransferChannelType data_read_from_fifo = fifo_transfer_in.read();
    bool data_is_to_buffer;
    bool data_is_to_forward;
    unsigned int feeder_id = data_read_from_fifo.feeder_id;
    data_is_to_buffer = LAST_ENGINE || (!LAST_ENGINE && feeder_id == engine_id);
    data_is_to_forward = !LAST_ENGINE && (feeder_id != engine_id);
    if (!LAST_ENGINE){
      if (data_is_to_forward){
        fifo_transfer_out.write(data_read_from_fifo);
      }
    }
    ap_uint<14> buffer_ind_to_write_to_buffer = buffer_write_counter;

    if (data_is_to_buffer){
      buffer[buffer_gs_id][buffer_ind_to_write_to_buffer] = data_read_from_fifo;
      buffer_write_counter++;
      if (buffer_write_counter == data0_buf_size){
        buffer_write_counter = 0;
        buffer_gs_id++;
        if (buffer_gs_id == U1_DATA0_FC_GROUP_FACTOR){
          buffer_gs_id = 0;
          more_to_write_to_buffer = false;
        }
      }
    }
    transfer_counter++;
    if (transfer_counter == local_transfer_size){
      transfer_counter = 0;
      more_to_forward = false;
    }
  }

}

void U1_Data0ReadDataLast(
  U1_Data0TransferChannelType buffer[U1_DATA0_FC_GROUP_FACTOR][U1_DATA0_BUF_SIZE / U1_DATA0_FC_SIMD_FACTOR],
  stream<U1_Data0TransferChannelType> &fifo_transfer_in,
  unsigned int engine_id,
  uint LAYER_IN_NUM_T,
  uint LAYER_IN_IMG_H_T,
  ap_uint<8> LAYER_FILTER_S_H,
  ap_uint<8> LAYER_FILTER_S_W,
  uint LAYER_STRIDE,
  uint LAYER_ROW_IL_FACTOR,
  uint LAYER_COL_IL_FACTOR
){
#pragma HLS INLINE off
  bool LAST_ENGINE = (engine_id == 14 / U1_DATA0_FC_SPLIT_FACTOR - 1);
  bool buffer_id_to_write_to_buffer = 0;
  bool buffer_id_to_feed_to_sys_arr = 1;
  ap_uint<18> transfer_counter = 0;
  ap_uint<18> data0_buf_size;
  ap_uint<18> local_transfer_size;
  bool more_to_write_to_buffer = true;
  bool more_to_feed_to_sys_arr = false;
  bool more_to_forward = true;
  ap_uint<14> buffer_write_counter = 0;
  ap_uint<3> buffer_gs_id = 0;

  // the first read
  data0_buf_size = LAYER_IN_NUM_T * (LAYER_IN_IMG_H_T + LAYER_FILTER_S_H - LAYER_STRIDE) * (LAYER_COL_IL_FACTOR * LAYER_STRIDE + LAYER_FILTER_S_W - LAYER_STRIDE) / U1_DATA0_FC_SIMD_FACTOR;
  local_transfer_size = data0_buf_size * (14 / U1_DATA0_FC_SPLIT_FACTOR - engine_id) * U1_DATA0_FC_GROUP_FACTOR;

  while(more_to_forward){
#pragma HLS PIPELINE II=1
    U1_Data0TransferChannelType data_read_from_fifo = fifo_transfer_in.read();
    bool data_is_to_buffer;
    bool data_is_to_forward;
    unsigned int feeder_id = data_read_from_fifo.feeder_id;
    data_is_to_buffer = LAST_ENGINE || (!LAST_ENGINE && feeder_id == engine_id);
    data_is_to_forward = !LAST_ENGINE && (feeder_id != engine_id);
    ap_uint<14> buffer_ind_to_write_to_buffer = buffer_write_counter;

    if (data_is_to_buffer){
      buffer[buffer_gs_id][buffer_ind_to_write_to_buffer] = data_read_from_fifo;
      buffer_write_counter++;
      if (buffer_write_counter == data0_buf_size){
        buffer_write_counter = 0;
        buffer_gs_id++;
        if (buffer_gs_id == U1_DATA0_FC_GROUP_FACTOR){
          buffer_gs_id = 0;
          more_to_write_to_buffer = false;
        }
      }
    }
    transfer_counter++;
    if (transfer_counter == local_transfer_size){
      transfer_counter = 0;
      more_to_forward = false;
    }
  }

}

void U1_Data1ReadData0(
  U1_Data1TransferChannelType buffer[U1_DATA1_FC_GROUP_FACTOR][U1_DATA1_BUF_SIZE / U1_DATA1_FC_SIMD_FACTOR],
  stream<U1_Data1TransferChannelType> &fifo_transfer_in,
  stream<U1_Data1TransferChannelType> &fifo_transfer_out,
  unsigned int engine_id,
  uint LAYER_IN_NUM_T,
  uint LAYER_IN_IMG_H_T,
  ap_uint<8> LAYER_FILTER_S_H,
  ap_uint<8> LAYER_FILTER_S_W,
  uint LAYER_STRIDE,
  uint LAYER_ROW_IL_FACTOR,
  uint LAYER_COL_IL_FACTOR
){
#pragma HLS INLINE off
  bool LAST_ENGINE = (engine_id == 8 / U1_DATA1_FC_SPLIT_FACTOR - 1);
  ap_uint<16> transfer_counter = 0;
  ap_uint<16> data1_buf_size;
  ap_uint<16> local_transfer_size;
  bool more_to_write_to_buffer = true;
  bool more_to_feed_to_sys_arr = false;
  bool more_to_forward = true;
  ap_uint<13> buffer_write_counter = 0;
  ap_uint<3> buffer_gs_id = 0;

  // the first read
  data1_buf_size = LAYER_IN_NUM_T * LAYER_ROW_IL_FACTOR * LAYER_FILTER_S_H * LAYER_FILTER_S_W / U1_DATA1_FC_SIMD_FACTOR;
  local_transfer_size = data1_buf_size * (8 / U1_DATA1_FC_SPLIT_FACTOR - engine_id) * U1_DATA1_FC_GROUP_FACTOR;

  while(more_to_forward){
#pragma HLS PIPELINE II=1
    U1_Data1TransferChannelType data_read_from_fifo = fifo_transfer_in.read();
    bool data_is_to_buffer;
    bool data_is_to_forward;
    unsigned int feeder_id = data_read_from_fifo.feeder_id;
    data_is_to_buffer = LAST_ENGINE || (!LAST_ENGINE && feeder_id == engine_id);
    data_is_to_forward = !LAST_ENGINE && (feeder_id != engine_id);
    if (!LAST_ENGINE){
      if (data_is_to_forward){
        fifo_transfer_out.write(data_read_from_fifo);
      }
    }
    ap_uint<13> buffer_ind_to_write_to_buffer = buffer_write_counter;

    if (data_is_to_buffer){
      buffer[buffer_gs_id][buffer_ind_to_write_to_buffer] = data_read_from_fifo;
      buffer_write_counter++;
      if (buffer_write_counter == data1_buf_size){
        buffer_write_counter = 0;
        buffer_gs_id++;
        if (buffer_gs_id == U1_DATA1_FC_GROUP_FACTOR){
          buffer_gs_id = 0;
          more_to_write_to_buffer = false;
        }
      }
    }
    transfer_counter++;
    if (transfer_counter == local_transfer_size){
      transfer_counter = 0;
      more_to_forward = false;
    }
  }

}

void U1_Data1ReadDataLast(
  U1_Data1TransferChannelType buffer[U1_DATA1_FC_GROUP_FACTOR][U1_DATA1_BUF_SIZE / U1_DATA1_FC_SIMD_FACTOR],
  stream<U1_Data1TransferChannelType> &fifo_transfer_in,
  unsigned int engine_id,
  uint LAYER_IN_NUM_T,
  uint LAYER_IN_IMG_H_T,
  ap_uint<8> LAYER_FILTER_S_H,
  ap_uint<8> LAYER_FILTER_S_W,
  uint LAYER_STRIDE,
  uint LAYER_ROW_IL_FACTOR,
  uint LAYER_COL_IL_FACTOR
){
#pragma HLS INLINE off
  bool LAST_ENGINE = (engine_id == 8 / U1_DATA1_FC_SPLIT_FACTOR - 1);
  bool buffer_id_to_write_to_buffer = 0;
  bool buffer_id_to_feed_to_sys_arr = 1;
  ap_uint<16> transfer_counter = 0;
  ap_uint<16> data1_buf_size;
  ap_uint<16> local_transfer_size;
  bool more_to_write_to_buffer = true;
  bool more_to_feed_to_sys_arr = false;
  bool more_to_forward = true;
  ap_uint<13> buffer_write_counter = 0;
  ap_uint<3> buffer_gs_id = 0;

  // the first read
  data1_buf_size = LAYER_IN_NUM_T * LAYER_ROW_IL_FACTOR * LAYER_FILTER_S_H * LAYER_FILTER_S_W / U1_DATA1_FC_SIMD_FACTOR;
  local_transfer_size = data1_buf_size * (8 / U1_DATA1_FC_SPLIT_FACTOR - engine_id) * U1_DATA1_FC_GROUP_FACTOR;

  while(more_to_forward){
#pragma HLS PIPELINE II=1
    U1_Data1TransferChannelType data_read_from_fifo = fifo_transfer_in.read();
    bool data_is_to_buffer;
    bool data_is_to_forward;
    unsigned int feeder_id = data_read_from_fifo.feeder_id;
    data_is_to_buffer = LAST_ENGINE || (!LAST_ENGINE && feeder_id == engine_id);
    data_is_to_forward = !LAST_ENGINE && (feeder_id != engine_id);
    ap_uint<13> buffer_ind_to_write_to_buffer = buffer_write_counter;

    if (data_is_to_buffer){
      buffer[buffer_gs_id][buffer_ind_to_write_to_buffer] = data_read_from_fifo;
      buffer_write_counter++;
      if (buffer_write_counter == data1_buf_size){
        buffer_write_counter = 0;
        buffer_gs_id++;
        if (buffer_gs_id == U1_DATA1_FC_GROUP_FACTOR){
          buffer_gs_id = 0;
          more_to_write_to_buffer = false;
        }
      }
    }
    transfer_counter++;
    if (transfer_counter == local_transfer_size){
      transfer_counter = 0;
      more_to_forward = false;
    }
  }

}

void U1_DataFeed0Engine0(
  stream<U1_Data0TransferChannelType> &fifo_transfer_in,
  stream<U1_Data0TransferChannelType> &fifo_transfer_out,
  stream<U1_Data0PEChannelType> &fifo_feed_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out0,
  stream<uint> &fifo_config_out1
){
#pragma HLS DATA_PACK variable=fifo_transfer_in
#pragma HLS DATA_PACK variable=fifo_transfer_out
#pragma HLS DATA_PACK variable=fifo_feed_0
#pragma HLS INLINE off

  uint task_iter = 0;
  uint LAYER_IN_NUM_T_prev;
  uint LAYER_IN_IMG_H_T_prev;
  uint FILTER_D0_H_prev;
  uint FILTER_D0_W_prev;
  uint FILTER_D1_H_prev;
  uint FILTER_D1_W_prev;
  uint LAYER_STRIDE_prev;
  uint LAYER_ROW_IL_FACTOR_prev;
  uint LAYER_COL_IL_FACTOR_prev;
  uint dummy;
  uint LAYER_DILATION_RATE_prev;
  uint K_NUM_prev;
  ap_uint<32> KH_prev;
  ap_uint<32> KW_prev;

  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  // write out configurations
  fifo_config_out0.write(LAYER_IN_NUM_T);
  fifo_config_out0.write(LAYER_OUT_NUM_T);
  fifo_config_out0.write(LAYER_IN_IMG_H_T);
  fifo_config_out0.write(LAYER_IN_IMG_W_T);
  fifo_config_out0.write(LAYER_FILTER_S_H);
  fifo_config_out0.write(LAYER_FILTER_S_W);
  fifo_config_out0.write(LAYER_TASK_NUM1);
  fifo_config_out0.write(LAYER_TASK_NUM2);
  fifo_config_out0.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out0.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out0.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out0.write(LAYER_COL_IL_FACTOR);
  fifo_config_out0.write(LAYER_STRIDE);
  fifo_config_out0.write(LAYER_BATCH);

  fifo_config_out0.write(LAYER_CONV_TYPE);
  fifo_config_out0.write(FILTER_D0_H);
  fifo_config_out0.write(FILTER_D0_W);
  fifo_config_out0.write(FILTER_D1_H);	
  fifo_config_out0.write(FILTER_D1_W);	
  fifo_config_out0.write(LAYER_DILATION_RATE);
  fifo_config_out0.write(LAYER_TCONV_STRIDE);
  fifo_config_out0.write(K_NUM);
  fifo_config_out0.write(KH);
  fifo_config_out0.write(KW);
  fifo_config_out1.write(LAYER_IN_NUM_T);
  fifo_config_out1.write(LAYER_OUT_NUM_T);
  fifo_config_out1.write(LAYER_IN_IMG_H_T);
  fifo_config_out1.write(LAYER_IN_IMG_W_T);
  fifo_config_out1.write(LAYER_FILTER_S_H);
  fifo_config_out1.write(LAYER_FILTER_S_W);
  fifo_config_out1.write(LAYER_TASK_NUM1);
  fifo_config_out1.write(LAYER_TASK_NUM2);
  fifo_config_out1.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out1.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out1.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out1.write(LAYER_COL_IL_FACTOR);
  fifo_config_out1.write(LAYER_STRIDE);
  fifo_config_out1.write(LAYER_BATCH);

  fifo_config_out1.write(LAYER_CONV_TYPE);
  fifo_config_out1.write(FILTER_D0_H);
  fifo_config_out1.write(FILTER_D0_W);
  fifo_config_out1.write(FILTER_D1_H);	
  fifo_config_out1.write(FILTER_D1_W);	
  fifo_config_out1.write(LAYER_DILATION_RATE);
  fifo_config_out1.write(LAYER_TCONV_STRIDE);
  fifo_config_out1.write(K_NUM);
  fifo_config_out1.write(KH);
  fifo_config_out1.write(KW);
  U1_Data0TransferChannelType ping_buffer[U1_DATA0_FC_GROUP_FACTOR][U1_DATA0_BUF_SIZE / U1_DATA0_FC_SIMD_FACTOR];
  U1_Data0TransferChannelType pong_buffer[U1_DATA0_FC_GROUP_FACTOR][U1_DATA0_BUF_SIZE / U1_DATA0_FC_SIMD_FACTOR];
  #if U1_DataFeed0Engine0_MEM == 0
    #pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=BRAM
    #pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=BRAM
  #elif U1_DataFeed0Engine0_MEM == 1
    #pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=URAM
    #pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=URAM
  #endif
  #pragma HLS DATA_PACK variable=ping_buffer
  #pragma HLS DATA_PACK variable=pong_buffer
  #pragma HLS ARRAY_PARTITION variable=ping_buffer dim=1 complete
  #pragma HLS ARRAY_PARTITION variable=pong_buffer dim=1 complete

  unsigned int initial_round = 0;

  bool done = 0;
  ap_uint<3> layer_iter = 0;
  bool layer_start = 0;
  while(!done){
    if (layer_start){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      dummy = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
      // write out configurations
      fifo_config_out0.write(LAYER_IN_NUM_T);
      fifo_config_out0.write(LAYER_OUT_NUM_T);
      fifo_config_out0.write(LAYER_IN_IMG_H_T);
      fifo_config_out0.write(LAYER_IN_IMG_W_T);
      fifo_config_out0.write(LAYER_FILTER_S_H);
      fifo_config_out0.write(LAYER_FILTER_S_W);
      fifo_config_out0.write(LAYER_TASK_NUM1);
      fifo_config_out0.write(LAYER_TASK_NUM2);
      fifo_config_out0.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out0.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out0.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out0.write(LAYER_COL_IL_FACTOR);
      fifo_config_out0.write(LAYER_STRIDE);
      fifo_config_out0.write(LAYER_BATCH);

      fifo_config_out0.write(LAYER_CONV_TYPE);
      fifo_config_out0.write(FILTER_D0_H);
      fifo_config_out0.write(FILTER_D0_W);
      fifo_config_out0.write(FILTER_D1_H);	
      fifo_config_out0.write(FILTER_D1_W);	
      fifo_config_out0.write(LAYER_DILATION_RATE);
      fifo_config_out0.write(LAYER_TCONV_STRIDE);
      fifo_config_out0.write(K_NUM);
      fifo_config_out0.write(KH);
      fifo_config_out0.write(KW);
      fifo_config_out1.write(LAYER_IN_NUM_T);
      fifo_config_out1.write(LAYER_OUT_NUM_T);
      fifo_config_out1.write(LAYER_IN_IMG_H_T);
      fifo_config_out1.write(LAYER_IN_IMG_W_T);
      fifo_config_out1.write(LAYER_FILTER_S_H);
      fifo_config_out1.write(LAYER_FILTER_S_W);
      fifo_config_out1.write(LAYER_TASK_NUM1);
      fifo_config_out1.write(LAYER_TASK_NUM2);
      fifo_config_out1.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out1.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out1.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out1.write(LAYER_COL_IL_FACTOR);
      fifo_config_out1.write(LAYER_STRIDE);
      fifo_config_out1.write(LAYER_BATCH);

      fifo_config_out1.write(LAYER_CONV_TYPE);
      fifo_config_out1.write(FILTER_D0_H);
      fifo_config_out1.write(FILTER_D0_W);
      fifo_config_out1.write(FILTER_D1_H);	
      fifo_config_out1.write(FILTER_D1_W);	
      fifo_config_out1.write(LAYER_DILATION_RATE);
      fifo_config_out1.write(LAYER_TCONV_STRIDE);
      fifo_config_out1.write(K_NUM);
      fifo_config_out1.write(KH);
      fifo_config_out1.write(KW);
      layer_start = 0;
    }

    if (initial_round == 0){
      U1_Data0ReadData0(ping_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D0_H, FILTER_D0_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
    } else {
      if (initial_round % 2 == 1){
        U1_Data0ReadData0(pong_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D0_H, FILTER_D0_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
        U1_Data0FeedData0(
          ping_buffer,
          fifo_feed_0,
          LAYER_IN_NUM_T_prev,
          LAYER_IN_IMG_H_T_prev,
          FILTER_D0_H_prev,
          FILTER_D0_W_prev,
          FILTER_D1_H_prev,
          FILTER_D1_W_prev,
          LAYER_STRIDE_prev,
          LAYER_ROW_IL_FACTOR_prev,
          LAYER_COL_IL_FACTOR_prev,
          LAYER_DILATION_RATE_prev,
          K_NUM_prev,
          KH_prev,
          KW_prev);
      } else {
        U1_Data0ReadData0(ping_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D0_H, FILTER_D0_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
        U1_Data0FeedData0(
          pong_buffer,
          fifo_feed_0,
          LAYER_IN_NUM_T_prev,
          LAYER_IN_IMG_H_T_prev,
          FILTER_D0_H_prev,
          FILTER_D0_W_prev,
          FILTER_D1_H_prev,
          FILTER_D1_W_prev,
          LAYER_STRIDE_prev,
          LAYER_ROW_IL_FACTOR_prev,
          LAYER_COL_IL_FACTOR_prev,
          LAYER_DILATION_RATE_prev,
          K_NUM_prev,
          KH_prev,
          KW_prev);
      }
    }

    initial_round++;
    LAYER_IN_NUM_T_prev = LAYER_IN_NUM_T;
    LAYER_IN_IMG_H_T_prev = LAYER_IN_IMG_H_T;
    FILTER_D0_H_prev = FILTER_D0_H;
    FILTER_D0_W_prev = FILTER_D0_W;
    FILTER_D1_H_prev = FILTER_D1_H;
    FILTER_D1_W_prev = FILTER_D1_W;
    LAYER_STRIDE_prev = LAYER_STRIDE;
    LAYER_ROW_IL_FACTOR_prev = LAYER_ROW_IL_FACTOR;
    LAYER_COL_IL_FACTOR_prev = LAYER_COL_IL_FACTOR;
    LAYER_DILATION_RATE_prev = LAYER_DILATION_RATE;
    K_NUM_prev = K_NUM;
    KH_prev = KH;
    KW_prev = KW;
    task_iter++;
    if (task_iter == LAYER_TASK_NUM1){
      task_iter = 0;
      layer_iter += 1;
      layer_start = 1;
      if (layer_iter == LAYER_BATCH){
        layer_iter = 0;
        done = 1;
      }
    }
  }

  if (initial_round % 2 == 1){
    U1_Data0FeedData0(
      ping_buffer,
      fifo_feed_0,
      LAYER_IN_NUM_T_prev,
      LAYER_IN_IMG_H_T_prev,
      FILTER_D0_H_prev,
      FILTER_D0_W_prev,
      FILTER_D1_H_prev,
      FILTER_D1_W_prev,
      LAYER_STRIDE_prev,
      LAYER_ROW_IL_FACTOR_prev,
      LAYER_COL_IL_FACTOR_prev,
      LAYER_DILATION_RATE_prev,
      K_NUM_prev,
      KH_prev,
      KW_prev);
  } else {
    U1_Data0FeedData0(
      pong_buffer,
      fifo_feed_0,
      LAYER_IN_NUM_T_prev,
      LAYER_IN_IMG_H_T_prev,
      FILTER_D0_H_prev,
      FILTER_D0_W_prev,
      FILTER_D1_H_prev,
      FILTER_D1_W_prev,
      LAYER_STRIDE_prev,
      LAYER_ROW_IL_FACTOR_prev,
      LAYER_COL_IL_FACTOR_prev,
      LAYER_DILATION_RATE_prev,
      K_NUM_prev,
      KH_prev,
      KW_prev);
  }
}

void U1_DataFeed0Engine0_wrapper(
  stream<U1_Data0TransferChannelType> &fifo_transfer_in,
  stream<U1_Data0TransferChannelType> &fifo_transfer_out,
  stream<U1_Data0PEChannelType> &fifo_feed_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out0,
  stream<uint> &fifo_config_out1
){
  U1_DataFeed0Engine0(
    fifo_transfer_in,
    fifo_transfer_out, 
    fifo_feed_0,
    engine_id,
    fifo_config_in,
    fifo_config_out0,
    fifo_config_out1
  );
}

void U1_DataFeed0EngineLast(
  stream<U1_Data0TransferChannelType> &fifo_transfer_in,
  stream<U1_Data0PEChannelType> &fifo_feed_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out1
){
#pragma HLS DATA_PACK variable=fifo_transfer_in
#pragma HLS DATA_PACK variable=fifo_feed_0
#pragma HLS INLINE off

  uint task_iter = 0;
  uint LAYER_IN_NUM_T_prev;
  uint LAYER_IN_IMG_H_T_prev;
  uint FILTER_D0_H_prev;
  uint FILTER_D0_W_prev;
  uint FILTER_D1_H_prev;
  uint FILTER_D1_W_prev;
  uint LAYER_STRIDE_prev;
  uint LAYER_ROW_IL_FACTOR_prev;
  uint LAYER_COL_IL_FACTOR_prev;
  uint dummy;
  uint LAYER_DILATION_RATE_prev;
  uint K_NUM_prev;
  ap_uint<32> KH_prev;
  ap_uint<32> KW_prev;

  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  // write out configurations
  fifo_config_out1.write(LAYER_IN_NUM_T);
  fifo_config_out1.write(LAYER_OUT_NUM_T);
  fifo_config_out1.write(LAYER_IN_IMG_H_T);
  fifo_config_out1.write(LAYER_IN_IMG_W_T);
  fifo_config_out1.write(LAYER_FILTER_S_H);
  fifo_config_out1.write(LAYER_FILTER_S_W);
  fifo_config_out1.write(LAYER_TASK_NUM1);
  fifo_config_out1.write(LAYER_TASK_NUM2);
  fifo_config_out1.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out1.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out1.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out1.write(LAYER_COL_IL_FACTOR);
  fifo_config_out1.write(LAYER_STRIDE);
  fifo_config_out1.write(LAYER_BATCH);

  fifo_config_out1.write(LAYER_CONV_TYPE);
  fifo_config_out1.write(FILTER_D0_H);
  fifo_config_out1.write(FILTER_D0_W);
  fifo_config_out1.write(FILTER_D1_H);	
  fifo_config_out1.write(FILTER_D1_W);	
  fifo_config_out1.write(LAYER_DILATION_RATE);
  fifo_config_out1.write(LAYER_TCONV_STRIDE);
  fifo_config_out1.write(K_NUM);
  fifo_config_out1.write(KH);
  fifo_config_out1.write(KW);
  U1_Data0TransferChannelType ping_buffer[U1_DATA0_FC_GROUP_FACTOR][U1_DATA0_BUF_SIZE / U1_DATA0_FC_SIMD_FACTOR];
  U1_Data0TransferChannelType pong_buffer[U1_DATA0_FC_GROUP_FACTOR][U1_DATA0_BUF_SIZE / U1_DATA0_FC_SIMD_FACTOR];
  #if U1_DataFeed0EngineLast_MEM == 0
    #pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=BRAM
    #pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=BRAM
  #elif U1_DataFeed0EngineLast_MEM == 1
    #pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=URAM
    #pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=URAM
  #endif
#pragma HLS DATA_PACK variable=ping_buffer
#pragma HLS DATA_PACK variable=pong_buffer
#pragma HLS ARRAY_PARTITION variable=ping_buffer dim=1 complete
#pragma HLS ARRAY_PARTITION variable=pong_buffer dim=1 complete

  unsigned int initial_round = 0;

  bool done = 0;
  ap_uint<3> layer_iter = 0;
  bool layer_start = 0;
  while(!done){
    if (layer_start){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      dummy = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
      // write out configurations
      fifo_config_out1.write(LAYER_IN_NUM_T);
      fifo_config_out1.write(LAYER_OUT_NUM_T);
      fifo_config_out1.write(LAYER_IN_IMG_H_T);
      fifo_config_out1.write(LAYER_IN_IMG_W_T);
      fifo_config_out1.write(LAYER_FILTER_S_H);
      fifo_config_out1.write(LAYER_FILTER_S_W);
      fifo_config_out1.write(LAYER_TASK_NUM1);
      fifo_config_out1.write(LAYER_TASK_NUM2);
      fifo_config_out1.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out1.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out1.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out1.write(LAYER_COL_IL_FACTOR);
      fifo_config_out1.write(LAYER_STRIDE);
      fifo_config_out1.write(LAYER_BATCH);

      fifo_config_out1.write(LAYER_CONV_TYPE);
      fifo_config_out1.write(FILTER_D0_H);
      fifo_config_out1.write(FILTER_D0_W);
      fifo_config_out1.write(FILTER_D1_H);	
      fifo_config_out1.write(FILTER_D1_W);	
      fifo_config_out1.write(LAYER_DILATION_RATE);
      fifo_config_out1.write(LAYER_TCONV_STRIDE);
      fifo_config_out1.write(K_NUM);
      fifo_config_out1.write(KH);
      fifo_config_out1.write(KW);
      layer_start = 0;
    }

    if (initial_round == 0){
      U1_Data0ReadDataLast(ping_buffer, fifo_transfer_in, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D0_H, FILTER_D0_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
    } else {
      if (initial_round % 2 == 1){
        U1_Data0ReadDataLast(pong_buffer, fifo_transfer_in, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D0_H, FILTER_D0_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
        U1_Data0FeedData0(
          ping_buffer,
          fifo_feed_0,
          LAYER_IN_NUM_T_prev,
          LAYER_IN_IMG_H_T_prev,
          FILTER_D0_H_prev,
          FILTER_D0_W_prev,
          FILTER_D1_H_prev,
          FILTER_D1_W_prev,
          LAYER_STRIDE_prev,
          LAYER_ROW_IL_FACTOR_prev,
          LAYER_COL_IL_FACTOR_prev,
          LAYER_DILATION_RATE_prev,
          K_NUM_prev,
          KH_prev,
          KW_prev);
      } else {
        U1_Data0ReadDataLast(ping_buffer, fifo_transfer_in, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D0_H, FILTER_D0_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
        U1_Data0FeedData0(
          pong_buffer,
          fifo_feed_0,
          LAYER_IN_NUM_T_prev,
          LAYER_IN_IMG_H_T_prev,
          FILTER_D0_H_prev,
          FILTER_D0_W_prev,
          FILTER_D1_H_prev,
          FILTER_D1_W_prev,
          LAYER_STRIDE_prev,
          LAYER_ROW_IL_FACTOR_prev,
          LAYER_COL_IL_FACTOR_prev,
          LAYER_DILATION_RATE_prev,
          K_NUM_prev,
          KH_prev,
          KW_prev);
      }
    }

    initial_round++;
    LAYER_IN_NUM_T_prev = LAYER_IN_NUM_T;
    LAYER_IN_IMG_H_T_prev = LAYER_IN_IMG_H_T;
    FILTER_D0_H_prev = FILTER_D0_H;
    FILTER_D0_W_prev = FILTER_D0_W;
    FILTER_D1_H_prev = FILTER_D1_H;
    FILTER_D1_W_prev = FILTER_D1_W;
    LAYER_STRIDE_prev = LAYER_STRIDE;
    LAYER_ROW_IL_FACTOR_prev = LAYER_ROW_IL_FACTOR;
    LAYER_COL_IL_FACTOR_prev = LAYER_COL_IL_FACTOR;
    LAYER_DILATION_RATE_prev = LAYER_DILATION_RATE;
    K_NUM_prev = K_NUM;
    KH_prev = KH;
    KW_prev = KW;
    task_iter++;
    if (task_iter == LAYER_TASK_NUM1){
      task_iter = 0;
      layer_iter += 1;
      layer_start = 1;
      if (layer_iter == LAYER_BATCH){
        layer_iter = 0;
        done = 1;
      }
    }
  }

  if (initial_round % 2 == 1){
    U1_Data0FeedData0(
      ping_buffer,
      fifo_feed_0,
      LAYER_IN_NUM_T_prev,
      LAYER_IN_IMG_H_T_prev,
      FILTER_D0_H_prev,
      FILTER_D0_W_prev,
      FILTER_D1_H_prev,
      FILTER_D1_W_prev,
      LAYER_STRIDE_prev,
      LAYER_ROW_IL_FACTOR_prev,
      LAYER_COL_IL_FACTOR_prev,
      LAYER_DILATION_RATE_prev,
      K_NUM_prev,
      KH_prev,
      KW_prev);
  } else {
    U1_Data0FeedData0(
      pong_buffer,
      fifo_feed_0,
      LAYER_IN_NUM_T_prev,
      LAYER_IN_IMG_H_T_prev,
      FILTER_D0_H_prev,
      FILTER_D0_W_prev,
      FILTER_D1_H_prev,
      FILTER_D1_W_prev,
      LAYER_STRIDE_prev,
      LAYER_ROW_IL_FACTOR_prev,
      LAYER_COL_IL_FACTOR_prev,
      LAYER_DILATION_RATE_prev,
      K_NUM_prev,
      KH_prev,
      KW_prev);
  }
}

void U1_DataFeed1Engine0(
  stream<U1_Data1TransferChannelType> &fifo_transfer_in,
  stream<U1_Data1TransferChannelType> &fifo_transfer_out,
  stream<U1_Data1PEChannelType> &fifo_feed_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out0
){
#pragma HLS DATA_PACK variable=fifo_transfer_in
#pragma HLS DATA_PACK variable=fifo_transfer_out
#pragma HLS DATA_PACK variable=fifo_feed_0
#pragma HLS INLINE off

  uint task_iter = 0;
  uint LAYER_IN_NUM_T_prev;
  uint LAYER_IN_IMG_H_T_prev;
  uint FILTER_D1_H_prev;
  uint FILTER_D1_W_prev;
  uint LAYER_STRIDE_prev;
  uint LAYER_ROW_IL_FACTOR_prev;
  uint LAYER_COL_IL_FACTOR_prev;
  uint dummy;
  uint K_NUM_prev;
  ap_uint<32> KH_prev;
  ap_uint<32> KW_prev;

  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  // write out configurations
  fifo_config_out0.write(LAYER_IN_NUM_T);
  fifo_config_out0.write(LAYER_OUT_NUM_T);
  fifo_config_out0.write(LAYER_IN_IMG_H_T);
  fifo_config_out0.write(LAYER_IN_IMG_W_T);
  fifo_config_out0.write(LAYER_FILTER_S_H);
  fifo_config_out0.write(LAYER_FILTER_S_W);
  fifo_config_out0.write(LAYER_TASK_NUM1);
  fifo_config_out0.write(LAYER_TASK_NUM2);
  fifo_config_out0.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out0.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out0.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out0.write(LAYER_COL_IL_FACTOR);
  fifo_config_out0.write(LAYER_STRIDE);
  fifo_config_out0.write(LAYER_BATCH);

  fifo_config_out0.write(LAYER_CONV_TYPE);
  fifo_config_out0.write(FILTER_D0_H);
  fifo_config_out0.write(FILTER_D0_W);
  fifo_config_out0.write(FILTER_D1_H);	
  fifo_config_out0.write(FILTER_D1_W);	
  fifo_config_out0.write(LAYER_DILATION_RATE);
  fifo_config_out0.write(LAYER_TCONV_STRIDE);
  fifo_config_out0.write(K_NUM);
  fifo_config_out0.write(KH);
  fifo_config_out0.write(KW);
  U1_Data1TransferChannelType ping_buffer[U1_DATA1_FC_GROUP_FACTOR][U1_DATA1_BUF_SIZE / U1_DATA1_FC_SIMD_FACTOR];
  U1_Data1TransferChannelType pong_buffer[U1_DATA1_FC_GROUP_FACTOR][U1_DATA1_BUF_SIZE / U1_DATA1_FC_SIMD_FACTOR];
  #if U1_DataFeed1Engine0_MEM == 0
    #pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=BRAM
    #pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=BRAM
  #elif U1_DataFeed1Engine0_MEM == 1
    #pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=URAM
    #pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=URAM
  #endif
  #pragma HLS DATA_PACK variable=ping_buffer
  #pragma HLS DATA_PACK variable=pong_buffer
  #pragma HLS ARRAY_PARTITION variable=ping_buffer dim=1 complete
  #pragma HLS ARRAY_PARTITION variable=pong_buffer dim=1 complete

  unsigned int initial_round = 0;

  bool done = 0;
  ap_uint<3> layer_iter = 0;
  bool layer_start = 0;
  while(!done){
    if (layer_start){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      dummy = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
      // write out configurations
      fifo_config_out0.write(LAYER_IN_NUM_T);
      fifo_config_out0.write(LAYER_OUT_NUM_T);
      fifo_config_out0.write(LAYER_IN_IMG_H_T);
      fifo_config_out0.write(LAYER_IN_IMG_W_T);
      fifo_config_out0.write(LAYER_FILTER_S_H);
      fifo_config_out0.write(LAYER_FILTER_S_W);
      fifo_config_out0.write(LAYER_TASK_NUM1);
      fifo_config_out0.write(LAYER_TASK_NUM2);
      fifo_config_out0.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out0.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out0.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out0.write(LAYER_COL_IL_FACTOR);
      fifo_config_out0.write(LAYER_STRIDE);
      fifo_config_out0.write(LAYER_BATCH);

      fifo_config_out0.write(LAYER_CONV_TYPE);
      fifo_config_out0.write(FILTER_D0_H);
      fifo_config_out0.write(FILTER_D0_W);
      fifo_config_out0.write(FILTER_D1_H);	
      fifo_config_out0.write(FILTER_D1_W);	
      fifo_config_out0.write(LAYER_DILATION_RATE);
      fifo_config_out0.write(LAYER_TCONV_STRIDE);
      fifo_config_out0.write(K_NUM);
      fifo_config_out0.write(KH);
      fifo_config_out0.write(KW);
      layer_start = 0;
    }

    if (initial_round == 0){
      U1_Data1ReadData0(ping_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D1_H, FILTER_D1_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
    } else {
      if (initial_round % 2 == 1){
        U1_Data1ReadData0(pong_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D1_H, FILTER_D1_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
        U1_Data1FeedData0(
          ping_buffer,
          fifo_feed_0,
          LAYER_IN_NUM_T_prev,
          LAYER_IN_IMG_H_T_prev,
          FILTER_D1_H_prev,
          FILTER_D1_W_prev,
          LAYER_STRIDE_prev,
          LAYER_ROW_IL_FACTOR_prev,
          LAYER_COL_IL_FACTOR_prev,
          K_NUM_prev,
          KH_prev,
          KW_prev);
      } else {
        U1_Data1ReadData0(ping_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D1_H, FILTER_D1_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
        U1_Data1FeedData0(
          pong_buffer,
          fifo_feed_0,
          LAYER_IN_NUM_T_prev,
          LAYER_IN_IMG_H_T_prev,
          FILTER_D1_H_prev,
          FILTER_D1_W_prev,
          LAYER_STRIDE_prev,
          LAYER_ROW_IL_FACTOR_prev,
          LAYER_COL_IL_FACTOR_prev,
          K_NUM_prev,
          KH_prev,
          KW_prev);
      }
    }

    initial_round++;
    LAYER_IN_NUM_T_prev = LAYER_IN_NUM_T;
    LAYER_IN_IMG_H_T_prev = LAYER_IN_IMG_H_T;
    FILTER_D1_H_prev = FILTER_D1_H;
    FILTER_D1_W_prev = FILTER_D1_W;
    LAYER_STRIDE_prev = LAYER_STRIDE;
    LAYER_ROW_IL_FACTOR_prev = LAYER_ROW_IL_FACTOR;
    LAYER_COL_IL_FACTOR_prev = LAYER_COL_IL_FACTOR;
    K_NUM_prev = K_NUM;
    KH_prev = KH;
    KW_prev = KW;
    task_iter++;
    if (task_iter == LAYER_TASK_NUM1){
      task_iter = 0;
      layer_iter += 1;
      layer_start = 1;
      if (layer_iter == LAYER_BATCH){
        layer_iter = 0;
        done = 1;
      }
    }
  }

  if (initial_round % 2 == 1){
    U1_Data1FeedData0(
      ping_buffer,
      fifo_feed_0,
      LAYER_IN_NUM_T_prev,
      LAYER_IN_IMG_H_T_prev,
      FILTER_D1_H_prev,
      FILTER_D1_W_prev,
      LAYER_STRIDE_prev,
      LAYER_ROW_IL_FACTOR_prev,
      LAYER_COL_IL_FACTOR_prev,
      K_NUM_prev,
      KH_prev,
      KW_prev);
  } else {
    U1_Data1FeedData0(
      pong_buffer,
      fifo_feed_0,
      LAYER_IN_NUM_T_prev,
      LAYER_IN_IMG_H_T_prev,
      FILTER_D1_H_prev,
      FILTER_D1_W_prev,
      LAYER_STRIDE_prev,
      LAYER_ROW_IL_FACTOR_prev,
      LAYER_COL_IL_FACTOR_prev,
      K_NUM_prev,
      KH_prev,
      KW_prev);
  }
}

void U1_DataFeed1Engine0_wrapper(
  stream<U1_Data1TransferChannelType> &fifo_transfer_in,
  stream<U1_Data1TransferChannelType> &fifo_transfer_out,
  stream<U1_Data1PEChannelType> &fifo_feed_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out0
){
  U1_DataFeed1Engine0(
    fifo_transfer_in,
    fifo_transfer_out, 
    fifo_feed_0,
    engine_id,
    fifo_config_in,
    fifo_config_out0
  );
}

void U1_DataFeed1EngineLast(
  stream<U1_Data1TransferChannelType> &fifo_transfer_in,
  stream<U1_Data1PEChannelType> &fifo_feed_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in
){
#pragma HLS DATA_PACK variable=fifo_transfer_in
#pragma HLS DATA_PACK variable=fifo_feed_0
#pragma HLS INLINE off

  uint task_iter = 0;
  uint LAYER_IN_NUM_T_prev;
  uint LAYER_IN_IMG_H_T_prev;
  uint FILTER_D1_H_prev;
  uint FILTER_D1_W_prev;
  uint LAYER_STRIDE_prev;
  uint LAYER_ROW_IL_FACTOR_prev;
  uint LAYER_COL_IL_FACTOR_prev;
  uint dummy;
  uint K_NUM_prev;
  ap_uint<32> KH_prev;
  ap_uint<32> KW_prev;

  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  U1_Data1TransferChannelType ping_buffer[U1_DATA1_FC_GROUP_FACTOR][U1_DATA1_BUF_SIZE / U1_DATA1_FC_SIMD_FACTOR];
  U1_Data1TransferChannelType pong_buffer[U1_DATA1_FC_GROUP_FACTOR][U1_DATA1_BUF_SIZE / U1_DATA1_FC_SIMD_FACTOR];
  #if U1_DataFeed1EngineLast_MEM == 0
    #pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=BRAM
    #pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=BRAM
  #elif U1_DataFeed1EngineLast_MEM == 1
    #pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=URAM
    #pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=URAM
  #endif
#pragma HLS DATA_PACK variable=ping_buffer
#pragma HLS DATA_PACK variable=pong_buffer
#pragma HLS ARRAY_PARTITION variable=ping_buffer dim=1 complete
#pragma HLS ARRAY_PARTITION variable=pong_buffer dim=1 complete

  unsigned int initial_round = 0;

  bool done = 0;
  ap_uint<3> layer_iter = 0;
  bool layer_start = 0;
  while(!done){
    if (layer_start){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      dummy = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
      layer_start = 0;
    }

    if (initial_round == 0){
      U1_Data1ReadDataLast(ping_buffer, fifo_transfer_in, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D1_H, FILTER_D1_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
    } else {
      if (initial_round % 2 == 1){
        U1_Data1ReadDataLast(pong_buffer, fifo_transfer_in, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D1_H, FILTER_D1_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
        U1_Data1FeedData0(
          ping_buffer,
          fifo_feed_0,
          LAYER_IN_NUM_T_prev,
          LAYER_IN_IMG_H_T_prev,
          FILTER_D1_H_prev,
          FILTER_D1_W_prev,
          LAYER_STRIDE_prev,
          LAYER_ROW_IL_FACTOR_prev,
          LAYER_COL_IL_FACTOR_prev,
          K_NUM_prev,
          KH_prev,
          KW_prev);
      } else {
        U1_Data1ReadDataLast(ping_buffer, fifo_transfer_in, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D1_H, FILTER_D1_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
        U1_Data1FeedData0(
          pong_buffer,
          fifo_feed_0,
          LAYER_IN_NUM_T_prev,
          LAYER_IN_IMG_H_T_prev,
          FILTER_D1_H_prev,
          FILTER_D1_W_prev,
          LAYER_STRIDE_prev,
          LAYER_ROW_IL_FACTOR_prev,
          LAYER_COL_IL_FACTOR_prev,
          K_NUM_prev,
          KH_prev,
          KW_prev);
      }
    }

    initial_round++;
    LAYER_IN_NUM_T_prev = LAYER_IN_NUM_T;
    LAYER_IN_IMG_H_T_prev = LAYER_IN_IMG_H_T;
    FILTER_D1_H_prev = FILTER_D1_H;
    FILTER_D1_W_prev = FILTER_D1_W;
    LAYER_STRIDE_prev = LAYER_STRIDE;
    LAYER_ROW_IL_FACTOR_prev = LAYER_ROW_IL_FACTOR;
    LAYER_COL_IL_FACTOR_prev = LAYER_COL_IL_FACTOR;
    K_NUM_prev = K_NUM;
    KH_prev = KH;
    KW_prev = KW;
    task_iter++;
    if (task_iter == LAYER_TASK_NUM1){
      task_iter = 0;
      layer_iter += 1;
      layer_start = 1;
      if (layer_iter == LAYER_BATCH){
        layer_iter = 0;
        done = 1;
      }
    }
  }

  if (initial_round % 2 == 1){
    U1_Data1FeedData0(
      ping_buffer,
      fifo_feed_0,
      LAYER_IN_NUM_T_prev,
      LAYER_IN_IMG_H_T_prev,
      FILTER_D1_H_prev,
      FILTER_D1_W_prev,
      LAYER_STRIDE_prev,
      LAYER_ROW_IL_FACTOR_prev,
      LAYER_COL_IL_FACTOR_prev,
      K_NUM_prev,
      KH_prev,
      KW_prev);
  } else {
    U1_Data1FeedData0(
      pong_buffer,
      fifo_feed_0,
      LAYER_IN_NUM_T_prev,
      LAYER_IN_IMG_H_T_prev,
      FILTER_D1_H_prev,
      FILTER_D1_W_prev,
      LAYER_STRIDE_prev,
      LAYER_ROW_IL_FACTOR_prev,
      LAYER_COL_IL_FACTOR_prev,
      K_NUM_prev,
      KH_prev,
      KW_prev);
  }
}

