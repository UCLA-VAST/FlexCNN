/**
 *  This file is automatically generated by PolySA CodeGen.
 *  Version: 1.0
 *  Authos: Jie Wang
 */

#include "common_header_U1.h"

extern void top_kernel(
  U1_bus_t0* global_cin,
  U1_bus_t1* global_weight,
  U1_bus_t2* global_cout,
  bool init,
  unsigned int FILTER_S
);

void top_kernel_sw(
  U1_data_t0* global_cin,
  U1_data_t1* global_weight,
  U1_data_t2* global_cout,
  bool init,
  unsigned int FILTER_S
){
  for (int out_num = 0; out_num < U1_OUT_NUM; out_num++){
    for (int out_img_h = 0; out_img_h < U1_OUT_IMG_H; out_img_h++){
      for (int out_img_w = 0; out_img_w < U1_OUT_IMG_W; out_img_w++){
        if (init == 1){
          global_cout[out_img_h*U1_OUT_IMG_W*U1_OUT_NUM + out_img_w*U1_OUT_NUM + out_num] = 0;
        }
        for (int in_num = 0; in_num < U1_IN_NUM; in_num++){
          for (int p = 0; p < U1_K; p++){
            for (int q = 0; q < U1_K; q++){
              global_cout[out_img_h*U1_OUT_IMG_W*U1_OUT_NUM + out_img_w*U1_OUT_NUM + out_num] += global_cin[(out_img_h + p)*U1_IN_IMG_W*U1_IN_NUM + (out_img_w+q)*U1_IN_NUM + in_num] * global_weight[out_num*U1_K*U1_K*U1_IN_NUM + p*U1_K*U1_IN_NUM + q*U1_IN_NUM + in_num];            }
          }
        }
      }
    }
  }
}

template<class data_t>
void init_random(
  data_t* buf,
  int buf_size
){
  srand(0);
  for (int i = 0; i < buf_size; i++)
    buf[i] = (double)rand() / (RAND_MAX) * 1.0;
}

template<class data_t>
void init_uniform(
  data_t* buf,
  int buf_size,
  data_t val
){
  for (int i = 0; i < buf_size; i++)
    buf[i] = val;
}

template<class data_t>
int buf_compare(
  data_t* buf1,
  data_t* buf2,
  int buf_size,
  data_t thres,
  bool verbose
){  int err = 0;
  for (int i = 0; i < buf_size; i++){
    // use L1 norm
    data_t diff = fabs((float)buf1[i] - (float)buf2[i]);
    if (diff > thres){
      err++;
      printf("Index %d sw - %f hw - %f\n", i, (float)buf1[i], (float)buf2[i]);
    } else {
      if (verbose){
        printf("Index %d sw - %f hw - %f\n", i, (float)buf1[i], (float)buf2[i]);
      }
    }
  }
  return err;
}

int main(){
  // app buffers
  U1_data_t0* cin = (U1_data_t0*)malloc(U1_DATA0_SIZE_ALIGNED*sizeof(U1_data_t0));
  U1_data_t1* weight = (U1_data_t1*)malloc(U1_DATA1_SIZE_ALIGNED*sizeof(U1_data_t1));
  U1_data_t2* cout_hw = (U1_data_t2*)malloc(U1_DATA2_SIZE_ALIGNED*sizeof(U1_data_t2));
  U1_data_t2* cout_sw = (U1_data_t2*)malloc(U1_DATA2_SIZE_ALIGNED*sizeof(U1_data_t2));
  U1_bus_t0* cin_bus = (U1_bus_t0*)malloc(U1_DATA0_SIZE_ALIGNED*sizeof(U1_data_t0));
  U1_bus_t1* weight_bus = (U1_bus_t1*)malloc(U1_DATA1_SIZE_ALIGNED*sizeof(U1_data_t1));
  U1_bus_t2* cout_hw_bus = (U1_bus_t2*)malloc(U1_DATA2_SIZE_ALIGNED*sizeof(U1_data_t2));
  
  // data initialization
  printf("INIT_BUFFERS...\n");
  init_random<U1_data_t0>(cin, U1_DATA0_SIZE_ALIGNED);
  memcpy((void*)cin_bus, (void*)cin, sizeof(U1_data_t0)*U1_DATA0_SIZE_ALIGNED);
  init_random<U1_data_t1>(weight, U1_DATA1_SIZE_ALIGNED);
  memcpy((void*)weight_bus, (void*)weight, sizeof(U1_data_t1)*U1_DATA1_SIZE_ALIGNED);
  
  // hw solution
  unsigned int FILTER_S_H = U1_K;
  unsigned int FILTER_S_W = U1_K;
  printf("CALLING HW ROUTINE...\n");
  for (int b = 0; b < 1; b++)
    top_kernel(cin_bus, weight_bus, cout_hw_bus, 1, FILTER_S_H);

    top_kernel(cin_bus, weight_bus, cout_hw_bus, 1, FILTER_S_W);

  // sw solution
  printf("CALLING SW ROUTINE...\n");
    top_kernel_sw(cin, weight, cout_sw, 1, FILTER_S_H);

    top_kernel_sw(cin, weight, cout_sw, 1, FILTER_S_W);

  // comparison
  memcpy((void*)cout_hw, (void*)cout_hw_bus, sizeof(U1_data_t2)*U1_DATA2_SIZE_ALIGNED);

  int err_cnt = 0;
  err_cnt += buf_compare<U1_data_t2>((U1_data_t2*)cout_sw, (U1_data_t2*)cout_hw, U1_DATA2_SIZE, 0.001, 0);

  free(cin);
  free(cin_bus);
  free(weight);
  free(weight_bus);
  free(cout_sw);
  free(cout_hw);
  free(cout_hw_bus);

  if (err_cnt){
    printf("TEST FAILED! %d ERRORS!\n", err_cnt);
  } else {
    printf("TEST PASSED!\n");
  }
}
