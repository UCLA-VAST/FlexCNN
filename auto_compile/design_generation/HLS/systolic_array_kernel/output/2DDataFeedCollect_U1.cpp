/**
 *  This file is automatically generated by PolySA CodeGen.
 *  Version: 1.0
 *  Authos: Jie Wang
 */

#include "common_header_U1.h"

void U1_DataFeed0Head(
  stream<ap_uint<U1_DATA0_WIDTH * U1_DATA0_FC_SIMD_FACTOR> > &fifo_transfer_in,
  stream<U1_Data0TransferChannelType> &fifo_transfer_out0,
  stream<U1_ConfigInst> &fifo_kernel_config_in,
  stream<U1_ConfigInst> &fifo_kernel_config_out,
  stream<uint> &fifo_config_out0,
  stream<uint> &fifo_config_out1
){
#pragma HLS INLINE off
#pragma HLS DATA_PACK variable=fifo_transfer_out0

  // loader buffer
  ap_uint<U1_DATA0_WIDTH * U1_DATA0_FC_SIMD_FACTOR> cin_buf[CIN_BUFF / U1_DATA0_FC_SIMD_FACTOR];
  #if U1_DataFeed0Head_MEM == 0
    #pragma HLS bind_storage variable=cin_buf type=RAM_T2P impl=BRAM
  #elif U1_DataFeed0Head_MEM == 1
    #pragma HLS bind_storage variable=cin_buf type=RAM_T2P impl=URAM
  #endif
#pragma HLS ARRAY_PARTITION variable=cin_buf dim=1 block factor=1

  // Read instructions
  U1_ConfigInst inst0 = fifo_kernel_config_in.read();
  fifo_kernel_config_out.write(inst0);
  U1_ConfigInst inst1 = fifo_kernel_config_in.read();
  fifo_kernel_config_out.write(inst1);
  U1_ConfigInst inst2 = fifo_kernel_config_in.read();
  fifo_kernel_config_out.write(inst2);
  U1_ConfigInst inst3 = fifo_kernel_config_in.read();
  fifo_kernel_config_out.write(inst3);
  U1_ConfigInst inst4 = fifo_kernel_config_in.read();
  fifo_kernel_config_out.write(inst4);
  U1_ConfigInst inst5 = fifo_kernel_config_in.read();
  fifo_kernel_config_out.write(inst5);
  ap_uint<32> LAYER_BATCH = inst3(32*5+31, 32*5);

  ap_uint<3> layer_iter = 0;
  bool done1 = 0;
  while(!done1){
    if (layer_iter > 0){
      // Read instructions
      inst0 = fifo_kernel_config_in.read();
      fifo_kernel_config_out.write(inst0);
      inst1 = fifo_kernel_config_in.read();
      fifo_kernel_config_out.write(inst1);
      inst2 = fifo_kernel_config_in.read();
      fifo_kernel_config_out.write(inst2);
      inst3 = fifo_kernel_config_in.read();
      fifo_kernel_config_out.write(inst3);
      inst4 = fifo_kernel_config_in.read();
      fifo_kernel_config_out.write(inst4);
      inst5 = fifo_kernel_config_in.read();
      fifo_kernel_config_out.write(inst5);
    }
    ap_uint<32> EXT_LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
    ap_uint<32> EXT_LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
    ap_uint<32> EXT_LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
    ap_uint<32> EXT_LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
    ap_uint<32> EXT_LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
    ap_uint<32> EXT_LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
    // inst1
    ap_uint<32> EXT_LAYER_IN_NUM     = inst1(32*0+31, 32*0);
    ap_uint<32> EXT_LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
    ap_uint<32> EXT_LAYER_IN_H       = inst1(32*2+31, 32*2);
    ap_uint<32> EXT_LAYER_IN_W       = inst1(32*3+31, 32*3);
    ap_uint<32> EXT_LAYER_OUT_H      = inst1(32*4+31, 32*4);
    ap_uint<32> EXT_LAYER_OUT_W      = inst1(32*5+31, 32*5);
    // inst2
    ap_uint<32> EXT_CIN_OFFSET       = inst2(32*0+31, 32*0);
    ap_uint<32> EXT_WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
    ap_uint<32> EXT_BIAS_OFFSET      = inst2(32*2+31, 32*2);
    ap_uint<32> EXT_COUT_OFFSET      = inst2(32*3+31, 32*3);
    ap_uint<16> EXT_FILTER_S1        = inst2(32*4+15, 32*4);
    ap_uint<8>  EXT_FILTER_S2_H      = inst2(32*4+23, 32*4+16);
    ap_uint<8>  EXT_FILTER_S2_W      = inst2(32*4+31, 32*4+24);
    ap_uint<32> EXT_STRIDE           = inst2(32*5+31, 32*5);
    // inst3
    ap_uint<32> EXT_LAYER_EN         = inst3(32*0+31, 32*0);
    ap_uint<32> EXT_PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
    ap_uint<16> EXT_LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
    ap_uint<16> EXT_LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
    ap_uint<32> EXT_LAYER_IN_IMG_H_T = inst3(32*3+31, 32*3);
    ap_uint<32> EXT_LAYER_IN_IMG_W_T = inst3(32*4+31, 32*4);
    ap_uint<1>  EXT_CONV_1ST_EN      = EXT_LAYER_EN[0];
    ap_uint<1>  EXT_DEPTH_CONV_EN    = EXT_LAYER_EN[1];
    ap_uint<1>  EXT_CONV_EN          = EXT_LAYER_EN[2];
    ap_uint<1>  EXT_RELU_EN          = EXT_LAYER_EN[3];
    ap_uint<1>  EXT_RELU6_EN         = EXT_LAYER_EN[4];
    ap_uint<1>  EXT_POOL_EN          = EXT_LAYER_EN[5];

    ap_uint<32> EXT_LAYER_TASK_NUM1        = inst4(32*0+31, 32*0);
    ap_uint<32> EXT_LAYER_TASK_NUM2        = inst4(32*1+31, 32*1);
    ap_uint<32> EXT_LAYER_LOCAL_ACCUM_NUM  = inst4(32*2+31, 32*2);
    ap_uint<32> EXT_LAYER_LOCAL_REG_NUM    = inst4(32*3+31, 32*3);
    ap_uint<32> EXT_LAYER_ROW_IL_FACTOR    = inst4(32*4+31, 32*4);
    ap_uint<32> EXT_LAYER_COL_IL_FACTOR    = inst4(32*5+31, 32*5);

    ap_uint<16> EXT_LAYER_CONV_TYPE     = inst5(32*0+15, 32*0);
    ap_uint<8>  EXT_FILTER_D0_H         = inst5(32*0+23, 32*0+16);
    ap_uint<8>  EXT_FILTER_D0_W         = inst5(32*0+31, 32*0+24);
    ap_uint<8>  EXT_FILTER_D1_H         = inst5(32*1+7, 32*1);
    ap_uint<8>  EXT_FILTER_D1_W         = inst5(32*1+15, 32*1+8);
    ap_uint<16> EXT_LAYER_DILATION_RATE = inst5(32*1+31, 32*1+16);
    ap_uint<16> EXT_LAYER_TCONV_STRIDE  = inst5(32*2+15, 32*2);
    ap_uint<16> EXT_K_NUM               = inst5(32*2+31, 32*2+16);
    ap_uint<32> EXT_KH                  = inst5(32*3+31, 32*3);
    ap_uint<32> EXT_KW                  = inst5(32*4+31, 32*4);

    bool separable_conv = (EXT_DEPTH_CONV_EN == 1) && (EXT_CONV_EN == 1);
    bool conv2d = (EXT_DEPTH_CONV_EN == 0) && (EXT_CONV_EN == 1);
    bool max_pool = (EXT_DEPTH_CONV_EN == 0) && (EXT_CONV_EN == 0);
    uint stride1 = (EXT_DEPTH_CONV_EN == 0)? 1 : (uint)EXT_STRIDE;
    uint stride2 = (EXT_DEPTH_CONV_EN == 0)? (uint)EXT_STRIDE : 1;

    uint LAYER_IN_IMG_H = (EXT_DEPTH_CONV_EN == 1)? (uint)EXT_LAYER_IN_H_HW - (uint)EXT_FILTER_S1 + 1: (uint)EXT_LAYER_IN_H_HW;
    uint LAYER_IN_IMG_W = (EXT_DEPTH_CONV_EN == 1)? (uint)EXT_LAYER_IN_W_HW - (uint)EXT_FILTER_S1 + 1: (uint)EXT_LAYER_IN_W_HW;
    uint LAYER_OUT_IMG_H = EXT_LAYER_OUT_H;
    uint LAYER_OUT_IMG_W = EXT_LAYER_OUT_W;
    uint LAYER_IN_NUM = EXT_LAYER_IN_NUM_HW;
    uint LAYER_OUT_NUM = EXT_LAYER_OUT_NUM_HW;
    uint LAYER_IN_NUM_T = EXT_LAYER_IN_NUM_T;
    uint LAYER_OUT_NUM_T = EXT_LAYER_OUT_NUM_T;
    uint LAYER_IN_IMG_H_T;
    uint LAYER_IN_IMG_W_T;
    if (stride1 == 1){
      LAYER_IN_IMG_H_T = EXT_LAYER_IN_IMG_H_T;
      LAYER_IN_IMG_W_T = EXT_LAYER_IN_IMG_W_T;
    } else if (stride1 == 2){
      LAYER_IN_IMG_H_T = EXT_LAYER_IN_IMG_H_T / 2;
      LAYER_IN_IMG_W_T = EXT_LAYER_IN_IMG_W_T / 2;
    }
    uint LAYER_FILTER_S_H = EXT_FILTER_S2_H;
    uint LAYER_FILTER_S_W = EXT_FILTER_S2_W;
    uint LAYER_STRIDE = stride2;

    uint LAYER_TASK_NUM1 = EXT_LAYER_TASK_NUM1;
    uint LAYER_TASK_NUM2 = EXT_LAYER_TASK_NUM2;
    uint LAYER_LOCAL_ACCUM_NUM = EXT_LAYER_LOCAL_ACCUM_NUM;
    uint LAYER_LOCAL_REG_NUM = EXT_LAYER_LOCAL_REG_NUM;
    uint LAYER_ROW_IL_FACTOR = EXT_LAYER_ROW_IL_FACTOR;
    uint LAYER_COL_IL_FACTOR = EXT_LAYER_COL_IL_FACTOR;

    uint LAYER_CONV_TYPE = EXT_LAYER_CONV_TYPE;
    uint FILTER_D0_H = EXT_FILTER_D0_H;
    uint FILTER_D0_W = EXT_FILTER_D0_W;
    uint FILTER_D1_H = EXT_FILTER_D1_H;
    uint FILTER_D1_W = EXT_FILTER_D1_W;
    uint LAYER_DILATION_RATE = EXT_LAYER_DILATION_RATE;
    uint LAYER_TCONV_STRIDE = EXT_LAYER_TCONV_STRIDE;
    uint K_NUM = EXT_K_NUM;
    ap_uint<32> KH = EXT_KH;
    ap_uint<32> KW = EXT_KW;
    // write out configurations
    fifo_config_out0.write(LAYER_IN_NUM_T);
    fifo_config_out0.write(LAYER_OUT_NUM_T);
    fifo_config_out0.write(LAYER_IN_IMG_H_T);
    fifo_config_out0.write(LAYER_IN_IMG_W_T);
    fifo_config_out0.write(LAYER_FILTER_S_H);
    fifo_config_out0.write(LAYER_FILTER_S_W);
    fifo_config_out0.write(LAYER_TASK_NUM1);
    fifo_config_out0.write(LAYER_TASK_NUM2);
    fifo_config_out0.write(LAYER_LOCAL_ACCUM_NUM);
    fifo_config_out0.write(LAYER_LOCAL_REG_NUM);
    fifo_config_out0.write(LAYER_ROW_IL_FACTOR);
    fifo_config_out0.write(LAYER_COL_IL_FACTOR);
    fifo_config_out0.write(LAYER_STRIDE);
    fifo_config_out0.write(LAYER_BATCH);

    fifo_config_out0.write(LAYER_CONV_TYPE);
    fifo_config_out0.write(FILTER_D0_H);
    fifo_config_out0.write(FILTER_D0_W);
    fifo_config_out0.write(FILTER_D1_H);	
    fifo_config_out0.write(FILTER_D1_W);	
    fifo_config_out0.write(LAYER_DILATION_RATE);
    fifo_config_out0.write(LAYER_TCONV_STRIDE);
    fifo_config_out0.write(K_NUM);
    fifo_config_out0.write(KH);
    fifo_config_out0.write(KW);
    fifo_config_out1.write(LAYER_IN_NUM);
    fifo_config_out1.write(LAYER_IN_NUM_T);
    fifo_config_out1.write(LAYER_OUT_NUM_T);
    fifo_config_out1.write(LAYER_IN_IMG_H_T);
    fifo_config_out1.write(LAYER_IN_IMG_W_T);
    fifo_config_out1.write(LAYER_FILTER_S_H);
    fifo_config_out1.write(LAYER_FILTER_S_W);
    fifo_config_out1.write(LAYER_TASK_NUM1);
    fifo_config_out1.write(LAYER_TASK_NUM2);
    fifo_config_out1.write(LAYER_LOCAL_ACCUM_NUM);
    fifo_config_out1.write(LAYER_LOCAL_REG_NUM);
    fifo_config_out1.write(LAYER_ROW_IL_FACTOR);
    fifo_config_out1.write(LAYER_COL_IL_FACTOR);
    fifo_config_out1.write(LAYER_STRIDE);
    fifo_config_out1.write(LAYER_BATCH);

    fifo_config_out1.write(LAYER_CONV_TYPE);
    fifo_config_out1.write(FILTER_D0_H);
    fifo_config_out1.write(FILTER_D0_W);
    fifo_config_out1.write(FILTER_D1_H);	
    fifo_config_out1.write(FILTER_D1_W);	
    fifo_config_out1.write(LAYER_DILATION_RATE);
    fifo_config_out1.write(LAYER_TCONV_STRIDE);
    fifo_config_out1.write(K_NUM);
    fifo_config_out1.write(KH);
    fifo_config_out1.write(KW);
    ap_uint<28> task_iter = 0;
    ap_uint<12> in_num_t = 0;
    bool done2 = 0;
    while(!done2){
      if (FILTER_D0_W > 1 || FILTER_D0_H > 1){ //TODO this is to check overlapping tiles
        bool done3 = 0;
        ap_uint<12> ii = 0;
        ap_uint<11> hh = 0;
        ap_uint<11> ww = 0;
        while(!done3){
#pragma HLS PIPELINE II=1
          uint cin_local_idx = hh *  (LAYER_IN_IMG_W_T + FILTER_D0_W - LAYER_STRIDE) * LAYER_IN_NUM_T + ww * LAYER_IN_NUM_T + ii * U1_DATA0_FC_SIMD_FACTOR;
          cin_buf[cin_local_idx / U1_DATA0_FC_SIMD_FACTOR] = fifo_transfer_in.read();
          ww++;
          if (ww == LAYER_IN_IMG_W_T + FILTER_D0_W - LAYER_STRIDE){
            ww = 0;
            hh++;
            if (hh == LAYER_IN_IMG_H_T + FILTER_D0_H - LAYER_STRIDE){
              hh = 0;
              ii++;
              if (ii == LAYER_IN_NUM_T / U1_DATA0_FC_SIMD_FACTOR){
                ii = 0;
                done3 = 1;
              }
            }
          }
        }
      }
      bool init_final = (in_num_t == 0);
      bool last = (in_num_t == (LAYER_IN_NUM - LAYER_IN_NUM_T));
      // write to SA
      ap_uint<U1_DATA0_WIDTH * U1_DATA0_FC_SIMD_FACTOR> sel_tmp0[U1_DATA0_PACK_FACTOR / U1_DATA0_FC_SIMD_FACTOR];
#pragma HLS ARRAY_PARTITION variable=sel_tmp0 complete dim=1
      ap_uint<12> t3 = 0;
      ap_uint<11> t1 = 0;
      ap_uint<7> t0 = 0;
      ap_uint<8> t2 = 0;
      bool done4 = 0;
      while(!done4){
#pragma HLS PIPELINE II=1
        uint local_in_img_w = t0 * (LAYER_IN_IMG_W_T / U1_SA_COLS) + t2;
        uint local_in_num = in_num_t + t3 * U1_DATA0_FC_SIMD_FACTOR;
        uint local_in_img_h = t1;
        uint feeder_id = t0 / U1_DATA0_FC_GROUP_FACTOR;
        ap_uint<U1_DATA0_WIDTH * U1_DATA0_FC_SIMD_FACTOR> wide_data0;
        if (FILTER_D0_W > 1 || FILTER_D0_H > 1){
          uint cin_local_index = local_in_img_h * (LAYER_IN_IMG_W_T + FILTER_D0_W - LAYER_STRIDE) * LAYER_IN_NUM_T + local_in_img_w * LAYER_IN_NUM_T + t3 * U1_DATA0_FC_SIMD_FACTOR;
          uint cin_bus_index = cin_local_index / U1_DATA0_FC_SIMD_FACTOR;
          wide_data0 = cin_buf[cin_bus_index];
        } else {
          wide_data0 = fifo_transfer_in.read();
        }
        fifo_transfer_out0.write(U1_Data0TransferChannelType(
          wide_data0,
          (uint)feeder_id, init_final, last, 1));

        t2++;
        if (t2 == LAYER_IN_IMG_W_T / U1_SA_COLS + FILTER_D0_W - LAYER_STRIDE){
          t2 = 0;
          t0++;
          if (t0 == U1_SA_COLS / U1_DATA0_FC_SPLIT_FACTOR){
            t0 = 0;
            t1++;
            if (t1 == LAYER_IN_IMG_H_T + FILTER_D0_H - LAYER_STRIDE){
              t1 = 0;
              t3++;
              if (t3 == LAYER_IN_NUM_T / U1_DATA0_FC_SIMD_FACTOR){
                t3 = 0;
                done4 = 1;
              }
            }
          }
        }
      }

      in_num_t += LAYER_IN_NUM_T;
      if (in_num_t == LAYER_IN_NUM){
        in_num_t = 0;
        task_iter++;
        if (task_iter == LAYER_TASK_NUM2){
          task_iter = 0;
          done2 = 1;
        }
      }
    }
    layer_iter++;
    if (layer_iter == LAYER_BATCH){
      layer_iter = 0;
      done1 = 1;
    }
  }
}

void U1_DataFeed1Head(
  stream<ap_uint<U1_DATA1_WIDTH * U1_DATA1_FC_SIMD_FACTOR> > &fifo_transfer_in,
  stream<U1_Data1TransferChannelType> &fifo_transfer_out0,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
){
#pragma HLS INLINE off
#pragma HLS DATA_PACK variable=fifo_transfer_out0

  // read in configurations
  uint LAYER_IN_NUM = fifo_config_in.read();
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  // loader buffer
  ap_uint<U1_DATA1_WIDTH * U1_DATA1_FC_SIMD_FACTOR> weight_buf[WEIGHT_BUFF / U1_DATA1_FC_SIMD_FACTOR];
  #if U1_DataFeed1Head_MEM == 0
    #pragma HLS bind_storage variable=weight_buf type=RAM_T2P impl=BRAM
  #elif U1_DataFeed1Head_MEM == 1
    #pragma HLS bind_storage variable=weight_buf type=RAM_T2P impl=URAM
  #endif
#pragma HLS ARRAY_PARTITION variable=weight_buf dim=1 block factor=1

  bool done1 = 0;
  ap_uint<3> layer_iter = 0;
  while(!done1){
    if (layer_iter > 0){
      LAYER_IN_NUM = fifo_config_in.read();
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
    }
    // write out configurations
    fifo_config_out.write(LAYER_IN_NUM_T);
    fifo_config_out.write(LAYER_OUT_NUM_T);
    fifo_config_out.write(LAYER_IN_IMG_H_T);
    fifo_config_out.write(LAYER_IN_IMG_W_T);
    fifo_config_out.write(LAYER_FILTER_S_H);
    fifo_config_out.write(LAYER_FILTER_S_W);
    fifo_config_out.write(LAYER_TASK_NUM1);
    fifo_config_out.write(LAYER_TASK_NUM2);
    fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
    fifo_config_out.write(LAYER_LOCAL_REG_NUM);
    fifo_config_out.write(LAYER_ROW_IL_FACTOR);
    fifo_config_out.write(LAYER_COL_IL_FACTOR);
    fifo_config_out.write(LAYER_STRIDE);
    fifo_config_out.write(LAYER_BATCH);

    fifo_config_out.write(LAYER_CONV_TYPE);
    fifo_config_out.write(FILTER_D0_H);
    fifo_config_out.write(FILTER_D0_W);
    fifo_config_out.write(FILTER_D1_H);	
    fifo_config_out.write(FILTER_D1_W);	
    fifo_config_out.write(LAYER_DILATION_RATE);
    fifo_config_out.write(LAYER_TCONV_STRIDE);
    fifo_config_out.write(K_NUM);
    fifo_config_out.write(KH);
    fifo_config_out.write(KW);
    bool done2 = 0;
    uint task_iter = 0;
    ap_uint<12> in_num_t = 0;
    while(!done2){
      bool init_final = (in_num_t == 0);
      bool last = (in_num_t == (LAYER_IN_NUM - LAYER_IN_NUM_T));
      // write to SA
      ap_uint<U1_DATA1_WIDTH * U1_DATA1_FC_SIMD_FACTOR> sel_tmp0[U1_DATA1_PACK_FACTOR / U1_DATA1_FC_SIMD_FACTOR];
#pragma HLS ARRAY_PARTITION variable=sel_tmp0 complete dim=1
      ap_uint<7> t0 = 0;
      ap_uint<5> t1 = 0;
      ap_uint<5> t2 = 0;
      ap_uint<5> t3 = 0;
      ap_uint<12> t4 = 0;
      bool done3 = 0;
      while(!done3){
#pragma HLS PIPELINE II=1
        ap_uint<7> feeder_id = t0 / U1_DATA1_FC_GROUP_FACTOR;
        ap_uint<U1_DATA1_WIDTH * U1_DATA1_FC_SIMD_FACTOR> wide_data0;
        wide_data0 = fifo_transfer_in.read();
        fifo_transfer_out0.write(U1_Data1TransferChannelType(
          wide_data0,
          (uint)feeder_id, init_final, last, 1));

        t4++;
        if (t4 == LAYER_IN_NUM_T / U1_DATA1_FC_SIMD_FACTOR){
          t4 = 0;
          t3++;
          if (t3 == FILTER_D1_H){
            t3 = 0;
            t2++;
            if (t2 == FILTER_D1_W){
              t2 = 0;
              t1++;
              if (t1 == LAYER_ROW_IL_FACTOR){
                t1 = 0;
                t0++;
                if (t0 == U1_SA_ROWS / U1_DATA1_FC_SPLIT_FACTOR){
                  t0 = 0;
                  done3 = 1;
                }
              }
            }
          }
        }
      }

      in_num_t += LAYER_IN_NUM_T;
      if (in_num_t == LAYER_IN_NUM){
        in_num_t = 0;
        task_iter++;
        if (task_iter == LAYER_TASK_NUM2){
          task_iter = 0;
          done2 = 1;
        }
      }
    }
    layer_iter++;
    if (layer_iter == LAYER_BATCH){
      layer_iter = 0;
      done1 = 1;
    }
  }
}

void U1_DataCollect2Head(
  stream<ap_uint<U1_DATA2_WIDTH * U1_DATA2_FC_SIMD_FACTOR> > &fifo_transfer_out,
  stream<U1_Data2TransferChannelType> &fifo_transfer_in0,
  stream<uint> &fifo_config_in
){
#pragma HLS INLINE off
#pragma HLS DATA_PACK variable=fifo_transfer_in0

  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  // loader buffer
  ap_uint<U1_DATA2_WIDTH * U1_DATA2_FC_SIMD_FACTOR> cout_buf[COUT_BUFF / U1_DATA2_FC_SIMD_FACTOR];
  #if U1_DataCollect2Head_MEM == 0
    #pragma HLS bind_storage variable=cout_buf type=RAM_T2P impl=BRAM
  #elif U1_DataCollect2Head_MEM == 1
    #pragma HLS bind_storage variable=cout_buf type=RAM_T2P impl=URAM
  #endif
  ap_uint<3> layer_iter = 0;
  bool done1 = 0;
  while(!done1){
    if (layer_iter > 0){
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
    }
    int task_num = 0;
    ap_uint<12> t3 = 0;
    ap_uint<7> t1 = 0;
    ap_uint<7> t1_bound = LAYER_IN_IMG_H_T*LAYER_TCONV_STRIDE / LAYER_STRIDE;
    ap_uint<7> t0 = 0;
    ap_uint<7> t2 = 0;
    ap_uint<7> t2_bound = LAYER_IN_IMG_W_T*LAYER_TCONV_STRIDE / U1_SA_COLS / LAYER_STRIDE;
    bool done2 = 0;
    while(!done2){
#pragma HLS PIPELINE II=1
      U1_Data2TransferChannelType fifo_data0 = fifo_transfer_in0.read();
      fifo_transfer_out.write(fifo_data0.data);
      t2++;
      if (t2 == t2_bound){
        t2 = 0;
        t0++;
        if (t0 == U1_SA_COLS / U1_DATA2_FC_SPLIT_FACTOR){
          t0 = 0;
          t1++;
          if (t1 == t1_bound){
            t1 = 0;
            t3++;
            if (t3 == LAYER_OUT_NUM_T / U1_DATA2_FC_SIMD_FACTOR){
              t3 = 0;
              task_num++;
              if (task_num == LAYER_TASK_NUM2){
                task_num = 0;
                done2 = 1;
              }
            }
          }
        }
      }
    }
    layer_iter++;
    if (layer_iter == LAYER_BATCH){
      layer_iter = 0;
      done1 = 1;
    }
  }
}

