#include "util.h"
/**
 *  This file is automatically generated by PolySA CodeGen.
 *  Version: 1.0
 *  Authos: Jie Wang
 */

// vendor headers
#include "hls_stream.h"
#include "ap_int.h"
#include "ap_fixed.h"

// common headers
#include <stdio.h>
#include <string.h>
using namespace hls;

#define cal_aligned_size(x,y) ((x+y-1)/y*y)
#define unpack(num, i) num(((4-i)*8)-1, ((4-i)*8)-8)

typedef ap_uint<192> U1_ConfigInst;

// Data types
typedef float U1_data_t0;
typedef ap_uint<512> U1_bus_t0;
#define U1_DATA0_WIDTH 32
#define U1_DATA0_PACK_FACTOR (512/U1_DATA0_WIDTH)
typedef float U1_data_t1;
typedef ap_uint<512> U1_bus_t1;
#define U1_DATA1_WIDTH 32
#define U1_DATA1_PACK_FACTOR (512/U1_DATA1_WIDTH)
typedef float U1_data_t2;
typedef ap_uint<512> U1_bus_t2;
#define U1_DATA2_WIDTH 32
#define U1_DATA2_PACK_FACTOR (512/U1_DATA2_WIDTH)
typedef unsigned int uint;
union ufloat{
  float f;
  unsigned int u;
};

// Macros
#define U1_SA_ROWS 16
#define U1_SA_COLS 14
#define U1_SIMD_FACTOR 8
#define U1_DATA0_FC_SIMD_FACTOR 8
#define U1_DATA0_FC_GROUP_FACTOR 1
#define U1_DATA0_FC_SPLIT_FACTOR 1
#define U1_DATA1_FC_SIMD_FACTOR 8
#define U1_DATA1_FC_GROUP_FACTOR 1
#define U1_DATA1_FC_SPLIT_FACTOR 1
#define U1_DATA2_FC_SIMD_FACTOR 8
#define U1_DATA2_FC_GROUP_FACTOR 1
#define U1_DATA2_FC_SPLIT_FACTOR 1

// Functions and structs
struct U1_Data0TransferChannelType{
  U1_Data0TransferChannelType(){}
  U1_Data0TransferChannelType(
    ap_uint<U1_DATA0_WIDTH*U1_DATA0_FC_SIMD_FACTOR> data_t,
    unsigned int feeder_id_t,
    bool new_pair_t,
    bool last_pair_t,
    unsigned int filter_s_t
  ){
    data = data_t;
    feeder_id = feeder_id_t;
    new_pair = new_pair_t;
    last_pair = last_pair_t;
    FILTER_S = filter_s_t;
  }
  ap_uint<U1_DATA0_WIDTH*U1_DATA0_FC_SIMD_FACTOR> data;
  unsigned int feeder_id;
  bool new_pair;
  bool last_pair;
  unsigned int FILTER_S;
};

struct U1_Data1TransferChannelType{
  U1_Data1TransferChannelType(){}
  U1_Data1TransferChannelType(
    ap_uint<U1_DATA1_WIDTH*U1_DATA1_FC_SIMD_FACTOR> data_t,
    unsigned int feeder_id_t,
    bool new_pair_t,
    bool last_pair_t,
    unsigned int filter_s_t
  ){
    data = data_t;
    feeder_id = feeder_id_t;
    new_pair = new_pair_t;
    last_pair = last_pair_t;
    FILTER_S = filter_s_t;
  }
  ap_uint<U1_DATA1_WIDTH*U1_DATA1_FC_SIMD_FACTOR> data;
  unsigned int feeder_id;
  bool new_pair;
  bool last_pair;
  unsigned int FILTER_S;
};

struct U1_Data2TransferChannelType{
  U1_Data2TransferChannelType(){}
  U1_Data2TransferChannelType(
    ap_uint<U1_DATA2_WIDTH*U1_DATA2_FC_SIMD_FACTOR> data_t){
    data = data_t;
  }
  ap_uint<U1_DATA2_WIDTH*U1_DATA2_FC_SIMD_FACTOR> data;
};

struct U1_Data0PEChannelType{
  U1_Data0PEChannelType(){}
  U1_Data0PEChannelType(
    ap_uint<256> data_t
  ){
    data = data_t;
  }
  U1_Data0PEChannelType(
    ap_uint<256> data_t,
    bool new_pair_t,
    unsigned int filter_s_t
  ){
    data = data_t;
    new_pair = new_pair_t;
    FILTER_S = filter_s_t;
  }
  U1_Data0PEChannelType(
    ap_uint<256> data_t,
    bool new_pair_t,
    bool last_pair_t,
    unsigned int filter_s_t
  ){
    data = data_t;
    new_pair = new_pair_t;
    last_pair = last_pair_t;
    FILTER_S = filter_s_t;
  }
  ap_uint<256> data;
  bool new_pair;
  bool last_pair;
  unsigned int FILTER_S;
};

typedef ap_uint<256> U1_Data0SIMDType;

struct U1_Data1PEChannelType{
  U1_Data1PEChannelType(){}
  U1_Data1PEChannelType(
    ap_uint<256> data_t
  ){
    data = data_t;
  }
  U1_Data1PEChannelType(
    ap_uint<256> data_t,
    bool new_pair_t,
    unsigned int filter_s_t
  ){
    data = data_t;
    new_pair = new_pair_t;
    FILTER_S = filter_s_t;
  }
  U1_Data1PEChannelType(
    ap_uint<256> data_t,
    bool new_pair_t,
    bool last_pair_t,
    unsigned int filter_s_t
  ){
    data = data_t;
    new_pair = new_pair_t;
    last_pair = last_pair_t;
    FILTER_S = filter_s_t;
  }
  ap_uint<256> data;
  bool new_pair;
  bool last_pair;
  unsigned int FILTER_S;
};

typedef ap_uint<256> U1_Data1SIMDType;

struct U1_Data2PEChannelType{
  U1_Data2PEChannelType(){}
  U1_Data2PEChannelType(
    U1_data_t2 data_t){
    data = data_t;
  }
  U1_data_t2 data;
};

void U1_DataFeed0Head(
  stream<ap_uint<U1_DATA0_WIDTH * U1_DATA0_FC_SIMD_FACTOR> > &fifo_transfer_in,
  stream<U1_Data0TransferChannelType> &fifo_transfer_out0,
  stream<U1_ConfigInst> &fifo_kernel_config_in,
  stream<U1_ConfigInst> &fifo_kernel_config_out,
  stream<uint> &fifo_config_out0,
  stream<uint> &fifo_config_out1
);

void U1_DataFeed1Head(
  stream<ap_uint<U1_DATA1_WIDTH * U1_DATA1_FC_SIMD_FACTOR> > &fifo_transfer_in,
  stream<U1_Data1TransferChannelType> &fifo_transfer_out0,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
);

void U1_DataCollect2Head(
  stream<ap_uint<U1_DATA2_WIDTH * U1_DATA2_FC_SIMD_FACTOR> > &fifo_transfer_out,
  stream<U1_Data2TransferChannelType> &fifo_transfer_in0,
  stream<uint> &fifo_config_in
);

void U1_DataFeed0Engine0_wrapper(
  stream<U1_Data0TransferChannelType> &fifo_transfer_in,
  stream<U1_Data0TransferChannelType> &fifo_transfer_out,
  stream<U1_Data0PEChannelType> &fifo_feed_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out0,
  stream<uint> &fifo_config_out1
);

void U1_DataFeed0EngineLast(
  stream<U1_Data0TransferChannelType> &fifo_transfer_in,
  stream<U1_Data0PEChannelType> &fifo_feed_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out1
);

void U1_DataFeed1Engine0_wrapper(
  stream<U1_Data1TransferChannelType> &fifo_transfer_in,
  stream<U1_Data1TransferChannelType> &fifo_transfer_out,
  stream<U1_Data1PEChannelType> &fifo_feed_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out0
);

void U1_DataFeed1EngineLast(
  stream<U1_Data1TransferChannelType> &fifo_transfer_in,
  stream<U1_Data1PEChannelType> &fifo_feed_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in
);

void U1_DataCollect2Engine0_wrapper(
  stream<U1_Data2TransferChannelType> &fifo_transfer_in,
  stream<U1_Data2TransferChannelType> &fifo_transfer_out,
  stream<U1_Data2PEChannelType> &fifo_collect_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in0,
  stream<uint> &fifo_config_in1,
  stream<uint> &fifo_config_out
);

void U1_DataCollect2EngineLast(
  stream<U1_Data2TransferChannelType> &fifo_transfer_out,
  stream<U1_Data2PEChannelType> &fifo_collect_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in0,
  stream<uint> &fifo_config_out
);

void U1_kernel(
  U1_bus_t0* cin,
  U1_bus_t1* weight,
  U1_bus_t2* cout,
  bool init,
  unsigned int FILTER_S
);

//template<typename To, typename From>
//inline To Reinterpret(const From& val){
//  return reinterpret_cast<const To&>(val);
//}

template<class data_t, class bus_t, int WIDTH>
data_t data_select(
  bus_t bus_data,
  uint offset
){
  data_t ret;
  ret = Reinterpret<data_t>((ap_uint<WIDTH>)bus_data(WIDTH-1 + offset*WIDTH, offset*WIDTH));
  return ret;
}
/**
 *  This file is automatically generated by PolySA CodeGen.
 *  Version: 1.0
 *  Authos: Jie Wang
 */

//#include "common_header_U1.h"

void U1_DataFeed0Head(
  stream<ap_uint<U1_DATA0_WIDTH * U1_DATA0_FC_SIMD_FACTOR> > &fifo_transfer_in,
  stream<U1_Data0TransferChannelType> &fifo_transfer_out0,
  stream<U1_ConfigInst> &fifo_kernel_config_in,
  stream<U1_ConfigInst> &fifo_kernel_config_out,
  stream<uint> &fifo_config_out0,
  stream<uint> &fifo_config_out1
){
#pragma HLS INLINE off
#pragma HLS DATA_PACK variable=fifo_transfer_out0

  // loader buffer
  ap_uint<U1_DATA0_WIDTH * U1_DATA0_FC_SIMD_FACTOR> cin_buf[CIN_BUFF / U1_DATA0_FC_SIMD_FACTOR];
  #if U1_DataFeed0Head_MEM == 0
    #pragma HLS bind_storage variable=cin_buf type=RAM_T2P impl=BRAM
  #elif U1_DataFeed0Head_MEM == 1
    #pragma HLS bind_storage variable=cin_buf type=RAM_T2P impl=URAM
  #endif
#pragma HLS ARRAY_PARTITION variable=cin_buf dim=1 block factor=1

  // Read instructions
  U1_ConfigInst inst0 = fifo_kernel_config_in.read();
  fifo_kernel_config_out.write(inst0);
  U1_ConfigInst inst1 = fifo_kernel_config_in.read();
  fifo_kernel_config_out.write(inst1);
  U1_ConfigInst inst2 = fifo_kernel_config_in.read();
  fifo_kernel_config_out.write(inst2);
  U1_ConfigInst inst3 = fifo_kernel_config_in.read();
  fifo_kernel_config_out.write(inst3);
  U1_ConfigInst inst4 = fifo_kernel_config_in.read();
  fifo_kernel_config_out.write(inst4);
  U1_ConfigInst inst5 = fifo_kernel_config_in.read();
  fifo_kernel_config_out.write(inst5);
  ap_uint<32> LAYER_BATCH = inst3(32*5+31, 32*5);

  ap_uint<3> layer_iter = 0;
  bool done1 = 0;
  while(!done1){
    if (layer_iter > 0){
      // Read instructions
      inst0 = fifo_kernel_config_in.read();
      fifo_kernel_config_out.write(inst0);
      inst1 = fifo_kernel_config_in.read();
      fifo_kernel_config_out.write(inst1);
      inst2 = fifo_kernel_config_in.read();
      fifo_kernel_config_out.write(inst2);
      inst3 = fifo_kernel_config_in.read();
      fifo_kernel_config_out.write(inst3);
      inst4 = fifo_kernel_config_in.read();
      fifo_kernel_config_out.write(inst4);
      inst5 = fifo_kernel_config_in.read();
      fifo_kernel_config_out.write(inst5);
    }
    ap_uint<32> EXT_LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
    ap_uint<32> EXT_LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
    ap_uint<32> EXT_LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
    ap_uint<32> EXT_LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
    ap_uint<32> EXT_LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
    ap_uint<32> EXT_LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
    // inst1
    ap_uint<32> EXT_LAYER_IN_NUM     = inst1(32*0+31, 32*0);
    ap_uint<32> EXT_LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
    ap_uint<32> EXT_LAYER_IN_H       = inst1(32*2+31, 32*2);
    ap_uint<32> EXT_LAYER_IN_W       = inst1(32*3+31, 32*3);
    ap_uint<32> EXT_LAYER_OUT_H      = inst1(32*4+31, 32*4);
    ap_uint<32> EXT_LAYER_OUT_W      = inst1(32*5+31, 32*5);
    // inst2
    ap_uint<32> EXT_CIN_OFFSET       = inst2(32*0+31, 32*0);
    ap_uint<32> EXT_WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
    ap_uint<32> EXT_BIAS_OFFSET      = inst2(32*2+31, 32*2);
    ap_uint<32> EXT_COUT_OFFSET      = inst2(32*3+31, 32*3);
    ap_uint<16> EXT_FILTER_S1        = inst2(32*4+15, 32*4);
    ap_uint<8>  EXT_FILTER_S2_H      = inst2(32*4+23, 32*4+16);
    ap_uint<8>  EXT_FILTER_S2_W      = inst2(32*4+31, 32*4+24);
    ap_uint<32> EXT_STRIDE           = inst2(32*5+31, 32*5);
    // inst3
    ap_uint<32> EXT_LAYER_EN         = inst3(32*0+31, 32*0);
    ap_uint<32> EXT_PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
    ap_uint<16> EXT_LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
    ap_uint<16> EXT_LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
    ap_uint<32> EXT_LAYER_IN_IMG_H_T = inst3(32*3+31, 32*3);
    ap_uint<32> EXT_LAYER_IN_IMG_W_T = inst3(32*4+31, 32*4);
    ap_uint<1>  EXT_CONV_1ST_EN      = EXT_LAYER_EN[0];
    ap_uint<1>  EXT_DEPTH_CONV_EN    = EXT_LAYER_EN[1];
    ap_uint<1>  EXT_CONV_EN          = EXT_LAYER_EN[2];
    ap_uint<1>  EXT_RELU_EN          = EXT_LAYER_EN[3];
    ap_uint<1>  EXT_RELU6_EN         = EXT_LAYER_EN[4];
    ap_uint<1>  EXT_POOL_EN          = EXT_LAYER_EN[5];

    ap_uint<32> EXT_LAYER_TASK_NUM1        = inst4(32*0+31, 32*0);
    ap_uint<32> EXT_LAYER_TASK_NUM2        = inst4(32*1+31, 32*1);
    ap_uint<32> EXT_LAYER_LOCAL_ACCUM_NUM  = inst4(32*2+31, 32*2);
    ap_uint<32> EXT_LAYER_LOCAL_REG_NUM    = inst4(32*3+31, 32*3);
    ap_uint<32> EXT_LAYER_ROW_IL_FACTOR    = inst4(32*4+31, 32*4);
    ap_uint<32> EXT_LAYER_COL_IL_FACTOR    = inst4(32*5+31, 32*5);

    ap_uint<16> EXT_LAYER_CONV_TYPE     = inst5(32*0+15, 32*0);
    ap_uint<8>  EXT_FILTER_D0_H         = inst5(32*0+23, 32*0+16);
    ap_uint<8>  EXT_FILTER_D0_W         = inst5(32*0+31, 32*0+24);
    ap_uint<8>  EXT_FILTER_D1_H         = inst5(32*1+7, 32*1);
    ap_uint<8>  EXT_FILTER_D1_W         = inst5(32*1+15, 32*1+8);
    ap_uint<16> EXT_LAYER_DILATION_RATE = inst5(32*1+31, 32*1+16);
    ap_uint<16> EXT_LAYER_TCONV_STRIDE  = inst5(32*2+15, 32*2);
    ap_uint<16> EXT_K_NUM               = inst5(32*2+31, 32*2+16);
    ap_uint<32> EXT_KH                  = inst5(32*3+31, 32*3);
    ap_uint<32> EXT_KW                  = inst5(32*4+31, 32*4);

    bool separable_conv = (EXT_DEPTH_CONV_EN == 1) && (EXT_CONV_EN == 1);
    bool conv2d = (EXT_DEPTH_CONV_EN == 0) && (EXT_CONV_EN == 1);
    bool max_pool = (EXT_DEPTH_CONV_EN == 0) && (EXT_CONV_EN == 0);
    uint stride1 = (EXT_DEPTH_CONV_EN == 0)? 1 : (uint)EXT_STRIDE;
    uint stride2 = (EXT_DEPTH_CONV_EN == 0)? (uint)EXT_STRIDE : 1;

    uint LAYER_IN_IMG_H = (EXT_DEPTH_CONV_EN == 1)? (uint)EXT_LAYER_IN_H_HW - (uint)EXT_FILTER_S1 + 1: (uint)EXT_LAYER_IN_H_HW;
    uint LAYER_IN_IMG_W = (EXT_DEPTH_CONV_EN == 1)? (uint)EXT_LAYER_IN_W_HW - (uint)EXT_FILTER_S1 + 1: (uint)EXT_LAYER_IN_W_HW;
    uint LAYER_OUT_IMG_H = EXT_LAYER_OUT_H;
    uint LAYER_OUT_IMG_W = EXT_LAYER_OUT_W;
    uint LAYER_IN_NUM = EXT_LAYER_IN_NUM_HW;
    uint LAYER_OUT_NUM = EXT_LAYER_OUT_NUM_HW;
    uint LAYER_IN_NUM_T = EXT_LAYER_IN_NUM_T;
    uint LAYER_OUT_NUM_T = EXT_LAYER_OUT_NUM_T;
    uint LAYER_IN_IMG_H_T;
    uint LAYER_IN_IMG_W_T;
    if (stride1 == 1){
      LAYER_IN_IMG_H_T = EXT_LAYER_IN_IMG_H_T;
      LAYER_IN_IMG_W_T = EXT_LAYER_IN_IMG_W_T;
    } else if (stride1 == 2){
      LAYER_IN_IMG_H_T = EXT_LAYER_IN_IMG_H_T / 2;
      LAYER_IN_IMG_W_T = EXT_LAYER_IN_IMG_W_T / 2;
    }
    uint LAYER_FILTER_S_H = EXT_FILTER_S2_H;
    uint LAYER_FILTER_S_W = EXT_FILTER_S2_W;
    uint LAYER_STRIDE = stride2;

    uint LAYER_TASK_NUM1 = EXT_LAYER_TASK_NUM1;
    uint LAYER_TASK_NUM2 = EXT_LAYER_TASK_NUM2;
    uint LAYER_LOCAL_ACCUM_NUM = EXT_LAYER_LOCAL_ACCUM_NUM;
    uint LAYER_LOCAL_REG_NUM = EXT_LAYER_LOCAL_REG_NUM;
    uint LAYER_ROW_IL_FACTOR = EXT_LAYER_ROW_IL_FACTOR;
    uint LAYER_COL_IL_FACTOR = EXT_LAYER_COL_IL_FACTOR;

    uint LAYER_CONV_TYPE = EXT_LAYER_CONV_TYPE;
    uint FILTER_D0_H = EXT_FILTER_D0_H;
    uint FILTER_D0_W = EXT_FILTER_D0_W;
    uint FILTER_D1_H = EXT_FILTER_D1_H;
    uint FILTER_D1_W = EXT_FILTER_D1_W;
    uint LAYER_DILATION_RATE = EXT_LAYER_DILATION_RATE;
    uint LAYER_TCONV_STRIDE = EXT_LAYER_TCONV_STRIDE;
    uint K_NUM = EXT_K_NUM;
    ap_uint<32> KH = EXT_KH;
    ap_uint<32> KW = EXT_KW;
    // write out configurations
    fifo_config_out0.write(LAYER_IN_NUM_T);
    fifo_config_out0.write(LAYER_OUT_NUM_T);
    fifo_config_out0.write(LAYER_IN_IMG_H_T);
    fifo_config_out0.write(LAYER_IN_IMG_W_T);
    fifo_config_out0.write(LAYER_FILTER_S_H);
    fifo_config_out0.write(LAYER_FILTER_S_W);
    fifo_config_out0.write(LAYER_TASK_NUM1);
    fifo_config_out0.write(LAYER_TASK_NUM2);
    fifo_config_out0.write(LAYER_LOCAL_ACCUM_NUM);
    fifo_config_out0.write(LAYER_LOCAL_REG_NUM);
    fifo_config_out0.write(LAYER_ROW_IL_FACTOR);
    fifo_config_out0.write(LAYER_COL_IL_FACTOR);
    fifo_config_out0.write(LAYER_STRIDE);
    fifo_config_out0.write(LAYER_BATCH);

    fifo_config_out0.write(LAYER_CONV_TYPE);
    fifo_config_out0.write(FILTER_D0_H);
    fifo_config_out0.write(FILTER_D0_W);
    fifo_config_out0.write(FILTER_D1_H);	
    fifo_config_out0.write(FILTER_D1_W);	
    fifo_config_out0.write(LAYER_DILATION_RATE);
    fifo_config_out0.write(LAYER_TCONV_STRIDE);
    fifo_config_out0.write(K_NUM);
    fifo_config_out0.write(KH);
    fifo_config_out0.write(KW);
    fifo_config_out1.write(LAYER_IN_NUM);
    fifo_config_out1.write(LAYER_IN_NUM_T);
    fifo_config_out1.write(LAYER_OUT_NUM_T);
    fifo_config_out1.write(LAYER_IN_IMG_H_T);
    fifo_config_out1.write(LAYER_IN_IMG_W_T);
    fifo_config_out1.write(LAYER_FILTER_S_H);
    fifo_config_out1.write(LAYER_FILTER_S_W);
    fifo_config_out1.write(LAYER_TASK_NUM1);
    fifo_config_out1.write(LAYER_TASK_NUM2);
    fifo_config_out1.write(LAYER_LOCAL_ACCUM_NUM);
    fifo_config_out1.write(LAYER_LOCAL_REG_NUM);
    fifo_config_out1.write(LAYER_ROW_IL_FACTOR);
    fifo_config_out1.write(LAYER_COL_IL_FACTOR);
    fifo_config_out1.write(LAYER_STRIDE);
    fifo_config_out1.write(LAYER_BATCH);

    fifo_config_out1.write(LAYER_CONV_TYPE);
    fifo_config_out1.write(FILTER_D0_H);
    fifo_config_out1.write(FILTER_D0_W);
    fifo_config_out1.write(FILTER_D1_H);	
    fifo_config_out1.write(FILTER_D1_W);	
    fifo_config_out1.write(LAYER_DILATION_RATE);
    fifo_config_out1.write(LAYER_TCONV_STRIDE);
    fifo_config_out1.write(K_NUM);
    fifo_config_out1.write(KH);
    fifo_config_out1.write(KW);
    ap_uint<28> task_iter = 0;
    ap_uint<12> in_num_t = 0;
    bool done2 = 0;
    while(!done2){
      if (FILTER_D0_W > 1 || FILTER_D0_H > 1){ //TODO this is to check overlapping tiles
        bool done3 = 0;
        ap_uint<12> ii = 0;
        ap_uint<11> hh = 0;
        ap_uint<11> ww = 0;
        while(!done3){
#pragma HLS PIPELINE II=1
          uint cin_local_idx = hh *  (LAYER_IN_IMG_W_T + FILTER_D0_W - LAYER_STRIDE) * LAYER_IN_NUM_T + ww * LAYER_IN_NUM_T + ii * U1_DATA0_FC_SIMD_FACTOR;
          cin_buf[cin_local_idx / U1_DATA0_FC_SIMD_FACTOR] = fifo_transfer_in.read();
          ww++;
          if (ww == LAYER_IN_IMG_W_T + FILTER_D0_W - LAYER_STRIDE){
            ww = 0;
            hh++;
            if (hh == LAYER_IN_IMG_H_T + FILTER_D0_H - LAYER_STRIDE){
              hh = 0;
              ii++;
              if (ii == LAYER_IN_NUM_T / U1_DATA0_FC_SIMD_FACTOR){
                ii = 0;
                done3 = 1;
              }
            }
          }
        }
      }
      bool init_final = (in_num_t == 0);
      bool last = (in_num_t == (LAYER_IN_NUM - LAYER_IN_NUM_T));
      // write to SA
      ap_uint<U1_DATA0_WIDTH * U1_DATA0_FC_SIMD_FACTOR> sel_tmp0[U1_DATA0_PACK_FACTOR / U1_DATA0_FC_SIMD_FACTOR];
#pragma HLS ARRAY_PARTITION variable=sel_tmp0 complete dim=1
      ap_uint<12> t3 = 0;
      ap_uint<11> t1 = 0;
      ap_uint<7> t0 = 0;
      ap_uint<8> t2 = 0;
      bool done4 = 0;
      while(!done4){
#pragma HLS PIPELINE II=1
        uint local_in_img_w = t0 * (LAYER_IN_IMG_W_T / U1_SA_COLS) + t2;
        uint local_in_num = in_num_t + t3 * U1_DATA0_FC_SIMD_FACTOR;
        uint local_in_img_h = t1;
        uint feeder_id = t0 / U1_DATA0_FC_GROUP_FACTOR;
        ap_uint<U1_DATA0_WIDTH * U1_DATA0_FC_SIMD_FACTOR> wide_data0;
        if (FILTER_D0_W > 1 || FILTER_D0_H > 1){
          uint cin_local_index = local_in_img_h * (LAYER_IN_IMG_W_T + FILTER_D0_W - LAYER_STRIDE) * LAYER_IN_NUM_T + local_in_img_w * LAYER_IN_NUM_T + t3 * U1_DATA0_FC_SIMD_FACTOR;
          uint cin_bus_index = cin_local_index / U1_DATA0_FC_SIMD_FACTOR;
          wide_data0 = cin_buf[cin_bus_index];
        } else {
          wide_data0 = fifo_transfer_in.read();
        }
        fifo_transfer_out0.write(U1_Data0TransferChannelType(
          wide_data0,
          (uint)feeder_id, init_final, last, 1));

        t2++;
        if (t2 == LAYER_IN_IMG_W_T / U1_SA_COLS + FILTER_D0_W - LAYER_STRIDE){
          t2 = 0;
          t0++;
          if (t0 == U1_SA_COLS / U1_DATA0_FC_SPLIT_FACTOR){
            t0 = 0;
            t1++;
            if (t1 == LAYER_IN_IMG_H_T + FILTER_D0_H - LAYER_STRIDE){
              t1 = 0;
              t3++;
              if (t3 == LAYER_IN_NUM_T / U1_DATA0_FC_SIMD_FACTOR){
                t3 = 0;
                done4 = 1;
              }
            }
          }
        }
      }

      in_num_t += LAYER_IN_NUM_T;
      if (in_num_t == LAYER_IN_NUM){
        in_num_t = 0;
        task_iter++;
        if (task_iter == LAYER_TASK_NUM2){
          task_iter = 0;
          done2 = 1;
        }
      }
    }
    layer_iter++;
    if (layer_iter == LAYER_BATCH){
      layer_iter = 0;
      done1 = 1;
    }
  }
}

void U1_DataFeed1Head(
  stream<ap_uint<U1_DATA1_WIDTH * U1_DATA1_FC_SIMD_FACTOR> > &fifo_transfer_in,
  stream<U1_Data1TransferChannelType> &fifo_transfer_out0,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
){
#pragma HLS INLINE off
#pragma HLS DATA_PACK variable=fifo_transfer_out0

  // read in configurations
  uint LAYER_IN_NUM = fifo_config_in.read();
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  // loader buffer
  ap_uint<U1_DATA1_WIDTH * U1_DATA1_FC_SIMD_FACTOR> weight_buf[WEIGHT_BUFF / U1_DATA1_FC_SIMD_FACTOR];
  #if U1_DataFeed1Head_MEM == 0
    #pragma HLS bind_storage variable=weight_buf type=RAM_T2P impl=BRAM
  #elif U1_DataFeed1Head_MEM == 1
    #pragma HLS bind_storage variable=weight_buf type=RAM_T2P impl=URAM
  #endif
#pragma HLS ARRAY_PARTITION variable=weight_buf dim=1 block factor=1

  bool done1 = 0;
  ap_uint<3> layer_iter = 0;
  while(!done1){
    if (layer_iter > 0){
      LAYER_IN_NUM = fifo_config_in.read();
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
    }
    // write out configurations
    fifo_config_out.write(LAYER_IN_NUM_T);
    fifo_config_out.write(LAYER_OUT_NUM_T);
    fifo_config_out.write(LAYER_IN_IMG_H_T);
    fifo_config_out.write(LAYER_IN_IMG_W_T);
    fifo_config_out.write(LAYER_FILTER_S_H);
    fifo_config_out.write(LAYER_FILTER_S_W);
    fifo_config_out.write(LAYER_TASK_NUM1);
    fifo_config_out.write(LAYER_TASK_NUM2);
    fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
    fifo_config_out.write(LAYER_LOCAL_REG_NUM);
    fifo_config_out.write(LAYER_ROW_IL_FACTOR);
    fifo_config_out.write(LAYER_COL_IL_FACTOR);
    fifo_config_out.write(LAYER_STRIDE);
    fifo_config_out.write(LAYER_BATCH);

    fifo_config_out.write(LAYER_CONV_TYPE);
    fifo_config_out.write(FILTER_D0_H);
    fifo_config_out.write(FILTER_D0_W);
    fifo_config_out.write(FILTER_D1_H);	
    fifo_config_out.write(FILTER_D1_W);	
    fifo_config_out.write(LAYER_DILATION_RATE);
    fifo_config_out.write(LAYER_TCONV_STRIDE);
    fifo_config_out.write(K_NUM);
    fifo_config_out.write(KH);
    fifo_config_out.write(KW);
    bool done2 = 0;
    uint task_iter = 0;
    ap_uint<12> in_num_t = 0;
    while(!done2){
      bool init_final = (in_num_t == 0);
      bool last = (in_num_t == (LAYER_IN_NUM - LAYER_IN_NUM_T));
      // write to SA
      ap_uint<U1_DATA1_WIDTH * U1_DATA1_FC_SIMD_FACTOR> sel_tmp0[U1_DATA1_PACK_FACTOR / U1_DATA1_FC_SIMD_FACTOR];
#pragma HLS ARRAY_PARTITION variable=sel_tmp0 complete dim=1
      ap_uint<7> t0 = 0;
      ap_uint<5> t1 = 0;
      ap_uint<5> t2 = 0;
      ap_uint<5> t3 = 0;
      ap_uint<12> t4 = 0;
      bool done3 = 0;
      while(!done3){
#pragma HLS PIPELINE II=1
        ap_uint<7> feeder_id = t0 / U1_DATA1_FC_GROUP_FACTOR;
        ap_uint<U1_DATA1_WIDTH * U1_DATA1_FC_SIMD_FACTOR> wide_data0;
        wide_data0 = fifo_transfer_in.read();
        fifo_transfer_out0.write(U1_Data1TransferChannelType(
          wide_data0,
          (uint)feeder_id, init_final, last, 1));

        t4++;
        if (t4 == LAYER_IN_NUM_T / U1_DATA1_FC_SIMD_FACTOR){
          t4 = 0;
          t3++;
          if (t3 == FILTER_D1_H){
            t3 = 0;
            t2++;
            if (t2 == FILTER_D1_W){
              t2 = 0;
              t1++;
              if (t1 == LAYER_ROW_IL_FACTOR){
                t1 = 0;
                t0++;
                if (t0 == U1_SA_ROWS / U1_DATA1_FC_SPLIT_FACTOR){
                  t0 = 0;
                  done3 = 1;
                }
              }
            }
          }
        }
      }

      in_num_t += LAYER_IN_NUM_T;
      if (in_num_t == LAYER_IN_NUM){
        in_num_t = 0;
        task_iter++;
        if (task_iter == LAYER_TASK_NUM2){
          task_iter = 0;
          done2 = 1;
        }
      }
    }
    layer_iter++;
    if (layer_iter == LAYER_BATCH){
      layer_iter = 0;
      done1 = 1;
    }
  }
}

void U1_DataCollect2Head(
  stream<ap_uint<U1_DATA2_WIDTH * U1_DATA2_FC_SIMD_FACTOR> > &fifo_transfer_out,
  stream<U1_Data2TransferChannelType> &fifo_transfer_in0,
  stream<uint> &fifo_config_in
){
#pragma HLS INLINE off
#pragma HLS DATA_PACK variable=fifo_transfer_in0

  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  // loader buffer
  ap_uint<U1_DATA2_WIDTH * U1_DATA2_FC_SIMD_FACTOR> cout_buf[COUT_BUFF / U1_DATA2_FC_SIMD_FACTOR];
  #if U1_DataCollect2Head_MEM == 0
    #pragma HLS bind_storage variable=cout_buf type=RAM_T2P impl=BRAM
  #elif U1_DataCollect2Head_MEM == 1
    #pragma HLS bind_storage variable=cout_buf type=RAM_T2P impl=URAM
  #endif
  ap_uint<3> layer_iter = 0;
  bool done1 = 0;
  while(!done1){
    if (layer_iter > 0){
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
    }
    int task_num = 0;
    ap_uint<12> t3 = 0;
    ap_uint<7> t1 = 0;
    ap_uint<7> t1_bound = LAYER_IN_IMG_H_T*LAYER_TCONV_STRIDE / LAYER_STRIDE;
    ap_uint<7> t0 = 0;
    ap_uint<7> t2 = 0;
    ap_uint<7> t2_bound = LAYER_IN_IMG_W_T*LAYER_TCONV_STRIDE / U1_SA_COLS / LAYER_STRIDE;
    bool done2 = 0;
    while(!done2){
#pragma HLS PIPELINE II=1
      U1_Data2TransferChannelType fifo_data0 = fifo_transfer_in0.read();
      fifo_transfer_out.write(fifo_data0.data);
      t2++;
      if (t2 == t2_bound){
        t2 = 0;
        t0++;
        if (t0 == U1_SA_COLS / U1_DATA2_FC_SPLIT_FACTOR){
          t0 = 0;
          t1++;
          if (t1 == t1_bound){
            t1 = 0;
            t3++;
            if (t3 == LAYER_OUT_NUM_T / U1_DATA2_FC_SIMD_FACTOR){
              t3 = 0;
              task_num++;
              if (task_num == LAYER_TASK_NUM2){
                task_num = 0;
                done2 = 1;
              }
            }
          }
        }
      }
    }
    layer_iter++;
    if (layer_iter == LAYER_BATCH){
      layer_iter = 0;
      done1 = 1;
    }
  }
}

/**
 *  This file is automatically generated by PolySA CodeGen.
 *  Version: 1.0
 *  Authos: Jie Wang
 */

//#include "common_header_U1.h"

void U1_Data0FeedData0(
  U1_Data0TransferChannelType buffer[U1_DATA0_FC_GROUP_FACTOR][U1_DATA0_BUF_SIZE/U1_DATA0_FC_SIMD_FACTOR],
  stream<U1_Data0PEChannelType> &fifo_feed_0,
  uint LAYER_IN_NUM_T,
  uint LAYER_IN_IMG_H_T,
  ap_uint<8> LAYER_FILTER_S_H,
  ap_uint<8> LAYER_FILTER_S_W,
  ap_uint<8> LAYER_FILTER_D_H,
  ap_uint<8> LAYER_FILTER_D_W,
  uint LAYER_STRIDE,
  uint LAYER_ROW_IL_FACTOR,
  uint LAYER_COL_IL_FACTOR,
  uint LAYER_DILATION_RATE,
  uint K_NUM,
  ap_uint<32> KH,
  ap_uint<32> KW
){
#pragma HLS INLINE off
  bool more_to_feed_to_sys_arr = true;

  ap_uint<5> c0_counter = 0;
  ap_uint<3> c1_counter = 0;
  ap_uint<4> c2_counter = 0;
  ap_uint<3> c3_counter = 0;
  ap_uint<3> c4_counter = 0;
  ap_uint<6> c5_counter = 0;
  ap_uint<5> i = 0;

  ap_uint<7> c0_counter_bound;
  if (LAYER_STRIDE == 1){
    c0_counter_bound = LAYER_IN_IMG_H_T;
  } else if (LAYER_STRIDE == 2){
    c0_counter_bound = LAYER_IN_IMG_H_T / 2;
  }

  ap_uint<8> K_H[4] = {
    unpack(KH, 0),
    unpack(KH, 1),
    unpack(KH, 2),
    unpack(KH, 3)
  };
  ap_uint<8> K_W[4] = {
    unpack(KW, 0),
    unpack(KW, 1),
    unpack(KW, 2),
    unpack(KW, 3)
  };
  #pragma HLS ARRAY_PARTITION variable=K_H complete
  #pragma HLS ARRAY_PARTITION variable=K_W complete
  ap_uint<U1_DATA0_WIDTH*U1_SIMD_FACTOR> sel_tmp_0[U1_DATA0_FC_SIMD_FACTOR/U1_SIMD_FACTOR];
#pragma HLS ARRAY_PARTITION variable=sel_tmp_0 complete dim=1

  while(more_to_feed_to_sys_arr){
#pragma HLS PIPELINE II=1
    ap_uint<17> buffer_ind_to_feed_to_sys_arr;
    ap_uint<17> w_idx, h_idx;
    if (LAYER_STRIDE == 1){
      w_idx = c2_counter + c4_counter*LAYER_DILATION_RATE;
      h_idx = c0_counter + c3_counter*LAYER_DILATION_RATE;
    } else if (LAYER_STRIDE == 2){
      w_idx = c2_counter * 2 + c4_counter;
      h_idx = c0_counter * 2 + c3_counter;
    }
    ap_uint<17> w_bound = LAYER_COL_IL_FACTOR * LAYER_STRIDE + LAYER_FILTER_S_W - LAYER_STRIDE;
    ap_uint<17> h_bound = LAYER_IN_IMG_H_T + LAYER_FILTER_S_H - LAYER_STRIDE;
    buffer_ind_to_feed_to_sys_arr = (w_idx + h_idx * w_bound + c5_counter * U1_SIMD_FACTOR / U1_DATA0_FC_SIMD_FACTOR * h_bound * w_bound) * U1_DATA0_FC_SIMD_FACTOR + c5_counter * U1_SIMD_FACTOR % U1_DATA0_FC_SIMD_FACTOR;

    ap_uint<17> wide_index = buffer_ind_to_feed_to_sys_arr / U1_DATA0_FC_SIMD_FACTOR + (K_W[0]-K_W[i]) + (K_H[0]-K_H[i]) * (LAYER_COL_IL_FACTOR+LAYER_FILTER_S_W-LAYER_STRIDE);
    ap_uint<17> wide_offset = buffer_ind_to_feed_to_sys_arr % U1_DATA0_FC_SIMD_FACTOR;

    U1_Data0TransferChannelType buf_data_0 = buffer[0][wide_index];
    ap_uint<U1_DATA0_WIDTH*U1_DATA0_FC_SIMD_FACTOR> wide_data_0 = buf_data_0.data;
    ap_uint<U1_DATA0_WIDTH*U1_SIMD_FACTOR> data_to_feed_0;
    for (int s = 0; s < U1_DATA0_FC_SIMD_FACTOR / U1_SIMD_FACTOR; s++){
#pragma HLS UNROLL
      sel_tmp_0[s] = wide_data_0(U1_DATA0_WIDTH * U1_SIMD_FACTOR-1, 0);
      wide_data_0 = wide_data_0 >> (U1_DATA0_WIDTH * U1_SIMD_FACTOR);
    }
    data_to_feed_0 = sel_tmp_0[wide_offset / U1_SIMD_FACTOR];

    U1_Data0PEChannelType fifo_data_to_feed_0;
    fifo_data_to_feed_0 = U1_Data0PEChannelType(data_to_feed_0, buf_data_0.new_pair, buf_data_0.last_pair, buf_data_0.FILTER_S);
    fifo_feed_0.write(fifo_data_to_feed_0);

    // counter logic
    c0_counter++;
    if (c0_counter == c0_counter_bound){
      c0_counter = 0;
      c1_counter++;
      if (c1_counter == LAYER_ROW_IL_FACTOR){
        c1_counter = 0;
        c2_counter++;
        if (c2_counter == LAYER_COL_IL_FACTOR){
          c2_counter = 0;
          c3_counter++;
          if (c3_counter == K_H[i]){
            c3_counter = 0;
            c4_counter++;
            if (c4_counter == K_W[i]){
              c4_counter = 0;
              c5_counter++;
              if (c5_counter == LAYER_IN_NUM_T / U1_SIMD_FACTOR){
                c5_counter = 0;
                i++;
                if (i == K_NUM){
                  i = 0;
                  more_to_feed_to_sys_arr = false;
                }
              }
            }
          }
        }
      }
    }
  }
}

void U1_Data1FeedData0(
  U1_Data1TransferChannelType buffer[U1_DATA1_FC_GROUP_FACTOR][U1_DATA1_BUF_SIZE/U1_DATA1_FC_SIMD_FACTOR],
  stream<U1_Data1PEChannelType> &fifo_feed_0,
  uint LAYER_IN_NUM_T,
  uint LAYER_IN_IMG_H_T,
  ap_uint<8> LAYER_FILTER_S_H,
  ap_uint<8> LAYER_FILTER_S_W,
  uint LAYER_STRIDE,
  uint LAYER_ROW_IL_FACTOR,
  uint LAYER_COL_IL_FACTOR,
  uint K_NUM,
  ap_uint<32> KH,
  ap_uint<32> KW
){
#pragma HLS INLINE off
  bool more_to_feed_to_sys_arr = true;

  ap_uint<5> c0_counter = 0;
  ap_uint<3> c1_counter = 0;
  ap_uint<4> c2_counter = 0;
  ap_uint<3> c3_counter = 0;
  ap_uint<3> c4_counter = 0;
  ap_uint<6> c5_counter = 0;
  ap_uint<5> i = 0;

  ap_uint<7> c0_counter_bound;
  ap_uint<6> offsets[4] = {0};
  #pragma HLS ARRAY_PARTITION variable=offsets complete
  if(K_NUM==4){
    offsets[0] = 0*LAYER_FILTER_S_H + 0                                  ;
    offsets[1] = 0*LAYER_FILTER_S_H + 0                   + unpack(KW,0) ;
    offsets[2] = unpack(KH,0)*LAYER_FILTER_S_H + 0                       ;
    offsets[3] = unpack(KH,0)*LAYER_FILTER_S_H + 0        + unpack(KW,2) ;
  }
  ap_uint<8> K_H[4] = {
    unpack(KH, 0),
    unpack(KH, 1),
    unpack(KH, 2),
    unpack(KH, 3)
  };
  ap_uint<8> K_W[4] = {
    unpack(KW, 0),
    unpack(KW, 1),
    unpack(KW, 2),
    unpack(KW, 3)
  };
  #pragma HLS ARRAY_PARTITION variable=K_H complete
  #pragma HLS ARRAY_PARTITION variable=K_W complete
    if (LAYER_STRIDE == 1){
    c0_counter_bound = LAYER_IN_IMG_H_T;
  } else if (LAYER_STRIDE == 2){
    c0_counter_bound = LAYER_IN_IMG_H_T / 2;
  }

  ap_uint<U1_DATA1_WIDTH*U1_SIMD_FACTOR> sel_tmp_0[U1_DATA1_FC_SIMD_FACTOR/U1_SIMD_FACTOR];
#pragma HLS ARRAY_PARTITION variable=sel_tmp_0 complete dim=1

  while(more_to_feed_to_sys_arr){
#pragma HLS PIPELINE II=1
    ap_uint<15> buffer_ind_to_feed_to_sys_arr;
    buffer_ind_to_feed_to_sys_arr = c1_counter * LAYER_FILTER_S_H * LAYER_FILTER_S_W * LAYER_IN_NUM_T + c3_counter * LAYER_FILTER_S_W * LAYER_IN_NUM_T + (c4_counter+offsets[i]) * LAYER_IN_NUM_T + c5_counter * U1_SIMD_FACTOR;
    ap_uint<15> wide_index = buffer_ind_to_feed_to_sys_arr / U1_DATA1_FC_SIMD_FACTOR;
    ap_uint<15> wide_offset = buffer_ind_to_feed_to_sys_arr % U1_DATA1_FC_SIMD_FACTOR;

    U1_Data1TransferChannelType buf_data_0 = buffer[0][wide_index];
    ap_uint<U1_DATA1_WIDTH*U1_DATA1_FC_SIMD_FACTOR> wide_data_0 = buf_data_0.data;
    ap_uint<U1_DATA1_WIDTH*U1_SIMD_FACTOR> data_to_feed_0;
    for (int s = 0; s < U1_DATA1_FC_SIMD_FACTOR/U1_SIMD_FACTOR; s++){
#pragma HLS UNROLL
      sel_tmp_0[s] = wide_data_0(U1_DATA1_WIDTH * U1_SIMD_FACTOR-1, 0);
      wide_data_0 = wide_data_0 >> (U1_DATA1_WIDTH * U1_SIMD_FACTOR);
    }
    data_to_feed_0 = sel_tmp_0[wide_offset / U1_SIMD_FACTOR];

    U1_Data1PEChannelType fifo_data_to_feed_0;
    fifo_data_to_feed_0 = U1_Data1PEChannelType(data_to_feed_0, buf_data_0.new_pair, buf_data_0.last_pair, buf_data_0.FILTER_S);
    fifo_feed_0.write(fifo_data_to_feed_0);

    // counter logic
    c0_counter++;
    if (c0_counter == c0_counter_bound){
      c0_counter = 0;
      c1_counter++;
      if (c1_counter == LAYER_ROW_IL_FACTOR){
        c1_counter = 0;
        c2_counter++;
        if (c2_counter == LAYER_COL_IL_FACTOR){
          c2_counter = 0;
          c3_counter++;
          if (c3_counter == K_H[i]){
            c3_counter = 0;
            c4_counter++;
            if (c4_counter == K_W[i]){
              c4_counter = 0;
              c5_counter++;
              if (c5_counter == LAYER_IN_NUM_T / U1_SIMD_FACTOR){
                c5_counter = 0;
                i++;
                if (i == K_NUM){
                  i = 0;
                more_to_feed_to_sys_arr = false;
                }
              }
            }
          }
        }
      }
    }
  }
}

void U1_Data0ReadData0(
  U1_Data0TransferChannelType buffer[U1_DATA0_FC_GROUP_FACTOR][U1_DATA0_BUF_SIZE / U1_DATA0_FC_SIMD_FACTOR],
  stream<U1_Data0TransferChannelType> &fifo_transfer_in,
  stream<U1_Data0TransferChannelType> &fifo_transfer_out,
  unsigned int engine_id,
  uint LAYER_IN_NUM_T,
  uint LAYER_IN_IMG_H_T,
  ap_uint<8> LAYER_FILTER_S_H,
  ap_uint<8> LAYER_FILTER_S_W,
  uint LAYER_STRIDE,
  uint LAYER_ROW_IL_FACTOR,
  uint LAYER_COL_IL_FACTOR
){
#pragma HLS INLINE off
  bool LAST_ENGINE = (engine_id == 14 / U1_DATA0_FC_SPLIT_FACTOR - 1);
  ap_uint<18> transfer_counter = 0;
  ap_uint<18> data0_buf_size;
  ap_uint<18> local_transfer_size;
  bool more_to_write_to_buffer = true;
  bool more_to_feed_to_sys_arr = false;
  bool more_to_forward = true;
  ap_uint<14> buffer_write_counter = 0;
  ap_uint<3> buffer_gs_id = 0;

  // the first read
  data0_buf_size = LAYER_IN_NUM_T * (LAYER_IN_IMG_H_T + LAYER_FILTER_S_H - LAYER_STRIDE) * (LAYER_COL_IL_FACTOR * LAYER_STRIDE + LAYER_FILTER_S_W - LAYER_STRIDE) / U1_DATA0_FC_SIMD_FACTOR;
  local_transfer_size = data0_buf_size * (14 / U1_DATA0_FC_SPLIT_FACTOR - engine_id) * U1_DATA0_FC_GROUP_FACTOR;

  while(more_to_forward){
#pragma HLS PIPELINE II=1
    U1_Data0TransferChannelType data_read_from_fifo = fifo_transfer_in.read();
    bool data_is_to_buffer;
    bool data_is_to_forward;
    unsigned int feeder_id = data_read_from_fifo.feeder_id;
    data_is_to_buffer = LAST_ENGINE || (!LAST_ENGINE && feeder_id == engine_id);
    data_is_to_forward = !LAST_ENGINE && (feeder_id != engine_id);
    if (!LAST_ENGINE){
      if (data_is_to_forward){
        fifo_transfer_out.write(data_read_from_fifo);
      }
    }
    ap_uint<14> buffer_ind_to_write_to_buffer = buffer_write_counter;

    if (data_is_to_buffer){
      buffer[buffer_gs_id][buffer_ind_to_write_to_buffer] = data_read_from_fifo;
      buffer_write_counter++;
      if (buffer_write_counter == data0_buf_size){
        buffer_write_counter = 0;
        buffer_gs_id++;
        if (buffer_gs_id == U1_DATA0_FC_GROUP_FACTOR){
          buffer_gs_id = 0;
          more_to_write_to_buffer = false;
        }
      }
    }
    transfer_counter++;
    if (transfer_counter == local_transfer_size){
      transfer_counter = 0;
      more_to_forward = false;
    }
  }

}

void U1_Data0ReadDataLast(
  U1_Data0TransferChannelType buffer[U1_DATA0_FC_GROUP_FACTOR][U1_DATA0_BUF_SIZE / U1_DATA0_FC_SIMD_FACTOR],
  stream<U1_Data0TransferChannelType> &fifo_transfer_in,
  unsigned int engine_id,
  uint LAYER_IN_NUM_T,
  uint LAYER_IN_IMG_H_T,
  ap_uint<8> LAYER_FILTER_S_H,
  ap_uint<8> LAYER_FILTER_S_W,
  uint LAYER_STRIDE,
  uint LAYER_ROW_IL_FACTOR,
  uint LAYER_COL_IL_FACTOR
){
#pragma HLS INLINE off
  bool LAST_ENGINE = (engine_id == 14 / U1_DATA0_FC_SPLIT_FACTOR - 1);
  bool buffer_id_to_write_to_buffer = 0;
  bool buffer_id_to_feed_to_sys_arr = 1;
  ap_uint<18> transfer_counter = 0;
  ap_uint<18> data0_buf_size;
  ap_uint<18> local_transfer_size;
  bool more_to_write_to_buffer = true;
  bool more_to_feed_to_sys_arr = false;
  bool more_to_forward = true;
  ap_uint<14> buffer_write_counter = 0;
  ap_uint<3> buffer_gs_id = 0;

  // the first read
  data0_buf_size = LAYER_IN_NUM_T * (LAYER_IN_IMG_H_T + LAYER_FILTER_S_H - LAYER_STRIDE) * (LAYER_COL_IL_FACTOR * LAYER_STRIDE + LAYER_FILTER_S_W - LAYER_STRIDE) / U1_DATA0_FC_SIMD_FACTOR;
  local_transfer_size = data0_buf_size * (14 / U1_DATA0_FC_SPLIT_FACTOR - engine_id) * U1_DATA0_FC_GROUP_FACTOR;

  while(more_to_forward){
#pragma HLS PIPELINE II=1
    U1_Data0TransferChannelType data_read_from_fifo = fifo_transfer_in.read();
    bool data_is_to_buffer;
    bool data_is_to_forward;
    unsigned int feeder_id = data_read_from_fifo.feeder_id;
    data_is_to_buffer = LAST_ENGINE || (!LAST_ENGINE && feeder_id == engine_id);
    data_is_to_forward = !LAST_ENGINE && (feeder_id != engine_id);
    ap_uint<14> buffer_ind_to_write_to_buffer = buffer_write_counter;

    if (data_is_to_buffer){
      buffer[buffer_gs_id][buffer_ind_to_write_to_buffer] = data_read_from_fifo;
      buffer_write_counter++;
      if (buffer_write_counter == data0_buf_size){
        buffer_write_counter = 0;
        buffer_gs_id++;
        if (buffer_gs_id == U1_DATA0_FC_GROUP_FACTOR){
          buffer_gs_id = 0;
          more_to_write_to_buffer = false;
        }
      }
    }
    transfer_counter++;
    if (transfer_counter == local_transfer_size){
      transfer_counter = 0;
      more_to_forward = false;
    }
  }

}

void U1_Data1ReadData0(
  U1_Data1TransferChannelType buffer[U1_DATA1_FC_GROUP_FACTOR][U1_DATA1_BUF_SIZE / U1_DATA1_FC_SIMD_FACTOR],
  stream<U1_Data1TransferChannelType> &fifo_transfer_in,
  stream<U1_Data1TransferChannelType> &fifo_transfer_out,
  unsigned int engine_id,
  uint LAYER_IN_NUM_T,
  uint LAYER_IN_IMG_H_T,
  ap_uint<8> LAYER_FILTER_S_H,
  ap_uint<8> LAYER_FILTER_S_W,
  uint LAYER_STRIDE,
  uint LAYER_ROW_IL_FACTOR,
  uint LAYER_COL_IL_FACTOR
){
#pragma HLS INLINE off
  bool LAST_ENGINE = (engine_id == 16 / U1_DATA1_FC_SPLIT_FACTOR - 1);
  ap_uint<16> transfer_counter = 0;
  ap_uint<16> data1_buf_size;
  ap_uint<16> local_transfer_size;
  bool more_to_write_to_buffer = true;
  bool more_to_feed_to_sys_arr = false;
  bool more_to_forward = true;
  ap_uint<12> buffer_write_counter = 0;
  ap_uint<3> buffer_gs_id = 0;

  // the first read
  data1_buf_size = LAYER_IN_NUM_T * LAYER_ROW_IL_FACTOR * LAYER_FILTER_S_H * LAYER_FILTER_S_W / U1_DATA1_FC_SIMD_FACTOR;
  local_transfer_size = data1_buf_size * (16 / U1_DATA1_FC_SPLIT_FACTOR - engine_id) * U1_DATA1_FC_GROUP_FACTOR;

  while(more_to_forward){
#pragma HLS PIPELINE II=1
    U1_Data1TransferChannelType data_read_from_fifo = fifo_transfer_in.read();
    bool data_is_to_buffer;
    bool data_is_to_forward;
    unsigned int feeder_id = data_read_from_fifo.feeder_id;
    data_is_to_buffer = LAST_ENGINE || (!LAST_ENGINE && feeder_id == engine_id);
    data_is_to_forward = !LAST_ENGINE && (feeder_id != engine_id);
    if (!LAST_ENGINE){
      if (data_is_to_forward){
        fifo_transfer_out.write(data_read_from_fifo);
      }
    }
    ap_uint<12> buffer_ind_to_write_to_buffer = buffer_write_counter;

    if (data_is_to_buffer){
      buffer[buffer_gs_id][buffer_ind_to_write_to_buffer] = data_read_from_fifo;
      buffer_write_counter++;
      if (buffer_write_counter == data1_buf_size){
        buffer_write_counter = 0;
        buffer_gs_id++;
        if (buffer_gs_id == U1_DATA1_FC_GROUP_FACTOR){
          buffer_gs_id = 0;
          more_to_write_to_buffer = false;
        }
      }
    }
    transfer_counter++;
    if (transfer_counter == local_transfer_size){
      transfer_counter = 0;
      more_to_forward = false;
    }
  }

}

void U1_Data1ReadDataLast(
  U1_Data1TransferChannelType buffer[U1_DATA1_FC_GROUP_FACTOR][U1_DATA1_BUF_SIZE / U1_DATA1_FC_SIMD_FACTOR],
  stream<U1_Data1TransferChannelType> &fifo_transfer_in,
  unsigned int engine_id,
  uint LAYER_IN_NUM_T,
  uint LAYER_IN_IMG_H_T,
  ap_uint<8> LAYER_FILTER_S_H,
  ap_uint<8> LAYER_FILTER_S_W,
  uint LAYER_STRIDE,
  uint LAYER_ROW_IL_FACTOR,
  uint LAYER_COL_IL_FACTOR
){
#pragma HLS INLINE off
  bool LAST_ENGINE = (engine_id == 16 / U1_DATA1_FC_SPLIT_FACTOR - 1);
  bool buffer_id_to_write_to_buffer = 0;
  bool buffer_id_to_feed_to_sys_arr = 1;
  ap_uint<16> transfer_counter = 0;
  ap_uint<16> data1_buf_size;
  ap_uint<16> local_transfer_size;
  bool more_to_write_to_buffer = true;
  bool more_to_feed_to_sys_arr = false;
  bool more_to_forward = true;
  ap_uint<12> buffer_write_counter = 0;
  ap_uint<3> buffer_gs_id = 0;

  // the first read
  data1_buf_size = LAYER_IN_NUM_T * LAYER_ROW_IL_FACTOR * LAYER_FILTER_S_H * LAYER_FILTER_S_W / U1_DATA1_FC_SIMD_FACTOR;
  local_transfer_size = data1_buf_size * (16 / U1_DATA1_FC_SPLIT_FACTOR - engine_id) * U1_DATA1_FC_GROUP_FACTOR;

  while(more_to_forward){
#pragma HLS PIPELINE II=1
    U1_Data1TransferChannelType data_read_from_fifo = fifo_transfer_in.read();
    bool data_is_to_buffer;
    bool data_is_to_forward;
    unsigned int feeder_id = data_read_from_fifo.feeder_id;
    data_is_to_buffer = LAST_ENGINE || (!LAST_ENGINE && feeder_id == engine_id);
    data_is_to_forward = !LAST_ENGINE && (feeder_id != engine_id);
    ap_uint<12> buffer_ind_to_write_to_buffer = buffer_write_counter;

    if (data_is_to_buffer){
      buffer[buffer_gs_id][buffer_ind_to_write_to_buffer] = data_read_from_fifo;
      buffer_write_counter++;
      if (buffer_write_counter == data1_buf_size){
        buffer_write_counter = 0;
        buffer_gs_id++;
        if (buffer_gs_id == U1_DATA1_FC_GROUP_FACTOR){
          buffer_gs_id = 0;
          more_to_write_to_buffer = false;
        }
      }
    }
    transfer_counter++;
    if (transfer_counter == local_transfer_size){
      transfer_counter = 0;
      more_to_forward = false;
    }
  }

}

void U1_DataFeed0Engine0(
  stream<U1_Data0TransferChannelType> &fifo_transfer_in,
  stream<U1_Data0TransferChannelType> &fifo_transfer_out,
  stream<U1_Data0PEChannelType> &fifo_feed_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out0,
  stream<uint> &fifo_config_out1
){
#pragma HLS DATA_PACK variable=fifo_transfer_in
#pragma HLS DATA_PACK variable=fifo_transfer_out
#pragma HLS DATA_PACK variable=fifo_feed_0
#pragma HLS INLINE off

  uint task_iter = 0;
  uint LAYER_IN_NUM_T_prev;
  uint LAYER_IN_IMG_H_T_prev;
  uint FILTER_D0_H_prev;
  uint FILTER_D0_W_prev;
  uint FILTER_D1_H_prev;
  uint FILTER_D1_W_prev;
  uint LAYER_STRIDE_prev;
  uint LAYER_ROW_IL_FACTOR_prev;
  uint LAYER_COL_IL_FACTOR_prev;
  uint dummy;
  uint LAYER_DILATION_RATE_prev;
  uint K_NUM_prev;
  ap_uint<32> KH_prev;
  ap_uint<32> KW_prev;

  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  // write out configurations
  fifo_config_out0.write(LAYER_IN_NUM_T);
  fifo_config_out0.write(LAYER_OUT_NUM_T);
  fifo_config_out0.write(LAYER_IN_IMG_H_T);
  fifo_config_out0.write(LAYER_IN_IMG_W_T);
  fifo_config_out0.write(LAYER_FILTER_S_H);
  fifo_config_out0.write(LAYER_FILTER_S_W);
  fifo_config_out0.write(LAYER_TASK_NUM1);
  fifo_config_out0.write(LAYER_TASK_NUM2);
  fifo_config_out0.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out0.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out0.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out0.write(LAYER_COL_IL_FACTOR);
  fifo_config_out0.write(LAYER_STRIDE);
  fifo_config_out0.write(LAYER_BATCH);

  fifo_config_out0.write(LAYER_CONV_TYPE);
  fifo_config_out0.write(FILTER_D0_H);
  fifo_config_out0.write(FILTER_D0_W);
  fifo_config_out0.write(FILTER_D1_H);	
  fifo_config_out0.write(FILTER_D1_W);	
  fifo_config_out0.write(LAYER_DILATION_RATE);
  fifo_config_out0.write(LAYER_TCONV_STRIDE);
  fifo_config_out0.write(K_NUM);
  fifo_config_out0.write(KH);
  fifo_config_out0.write(KW);
  fifo_config_out1.write(LAYER_IN_NUM_T);
  fifo_config_out1.write(LAYER_OUT_NUM_T);
  fifo_config_out1.write(LAYER_IN_IMG_H_T);
  fifo_config_out1.write(LAYER_IN_IMG_W_T);
  fifo_config_out1.write(LAYER_FILTER_S_H);
  fifo_config_out1.write(LAYER_FILTER_S_W);
  fifo_config_out1.write(LAYER_TASK_NUM1);
  fifo_config_out1.write(LAYER_TASK_NUM2);
  fifo_config_out1.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out1.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out1.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out1.write(LAYER_COL_IL_FACTOR);
  fifo_config_out1.write(LAYER_STRIDE);
  fifo_config_out1.write(LAYER_BATCH);

  fifo_config_out1.write(LAYER_CONV_TYPE);
  fifo_config_out1.write(FILTER_D0_H);
  fifo_config_out1.write(FILTER_D0_W);
  fifo_config_out1.write(FILTER_D1_H);	
  fifo_config_out1.write(FILTER_D1_W);	
  fifo_config_out1.write(LAYER_DILATION_RATE);
  fifo_config_out1.write(LAYER_TCONV_STRIDE);
  fifo_config_out1.write(K_NUM);
  fifo_config_out1.write(KH);
  fifo_config_out1.write(KW);
  U1_Data0TransferChannelType ping_buffer[U1_DATA0_FC_GROUP_FACTOR][U1_DATA0_BUF_SIZE / U1_DATA0_FC_SIMD_FACTOR];
  U1_Data0TransferChannelType pong_buffer[U1_DATA0_FC_GROUP_FACTOR][U1_DATA0_BUF_SIZE / U1_DATA0_FC_SIMD_FACTOR];
  #if U1_DataFeed0Engine0_MEM == 0
    #pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=BRAM
    #pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=BRAM
  #elif U1_DataFeed0Engine0_MEM == 1
    #pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=URAM
    #pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=URAM
  #endif
  #pragma HLS DATA_PACK variable=ping_buffer
  #pragma HLS DATA_PACK variable=pong_buffer
  #pragma HLS ARRAY_PARTITION variable=ping_buffer dim=1 complete
  #pragma HLS ARRAY_PARTITION variable=pong_buffer dim=1 complete

  unsigned int initial_round = 0;

  bool done = 0;
  ap_uint<3> layer_iter = 0;
  bool layer_start = 0;
  while(!done){
    if (layer_start){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      dummy = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
      // write out configurations
      fifo_config_out0.write(LAYER_IN_NUM_T);
      fifo_config_out0.write(LAYER_OUT_NUM_T);
      fifo_config_out0.write(LAYER_IN_IMG_H_T);
      fifo_config_out0.write(LAYER_IN_IMG_W_T);
      fifo_config_out0.write(LAYER_FILTER_S_H);
      fifo_config_out0.write(LAYER_FILTER_S_W);
      fifo_config_out0.write(LAYER_TASK_NUM1);
      fifo_config_out0.write(LAYER_TASK_NUM2);
      fifo_config_out0.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out0.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out0.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out0.write(LAYER_COL_IL_FACTOR);
      fifo_config_out0.write(LAYER_STRIDE);
      fifo_config_out0.write(LAYER_BATCH);

      fifo_config_out0.write(LAYER_CONV_TYPE);
      fifo_config_out0.write(FILTER_D0_H);
      fifo_config_out0.write(FILTER_D0_W);
      fifo_config_out0.write(FILTER_D1_H);	
      fifo_config_out0.write(FILTER_D1_W);	
      fifo_config_out0.write(LAYER_DILATION_RATE);
      fifo_config_out0.write(LAYER_TCONV_STRIDE);
      fifo_config_out0.write(K_NUM);
      fifo_config_out0.write(KH);
      fifo_config_out0.write(KW);
      fifo_config_out1.write(LAYER_IN_NUM_T);
      fifo_config_out1.write(LAYER_OUT_NUM_T);
      fifo_config_out1.write(LAYER_IN_IMG_H_T);
      fifo_config_out1.write(LAYER_IN_IMG_W_T);
      fifo_config_out1.write(LAYER_FILTER_S_H);
      fifo_config_out1.write(LAYER_FILTER_S_W);
      fifo_config_out1.write(LAYER_TASK_NUM1);
      fifo_config_out1.write(LAYER_TASK_NUM2);
      fifo_config_out1.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out1.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out1.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out1.write(LAYER_COL_IL_FACTOR);
      fifo_config_out1.write(LAYER_STRIDE);
      fifo_config_out1.write(LAYER_BATCH);

      fifo_config_out1.write(LAYER_CONV_TYPE);
      fifo_config_out1.write(FILTER_D0_H);
      fifo_config_out1.write(FILTER_D0_W);
      fifo_config_out1.write(FILTER_D1_H);	
      fifo_config_out1.write(FILTER_D1_W);	
      fifo_config_out1.write(LAYER_DILATION_RATE);
      fifo_config_out1.write(LAYER_TCONV_STRIDE);
      fifo_config_out1.write(K_NUM);
      fifo_config_out1.write(KH);
      fifo_config_out1.write(KW);
      layer_start = 0;
    }

    if (initial_round == 0){
      U1_Data0ReadData0(ping_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D0_H, FILTER_D0_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
    } else {
      if (initial_round % 2 == 1){
        U1_Data0ReadData0(pong_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D0_H, FILTER_D0_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
        U1_Data0FeedData0(
          ping_buffer,
          fifo_feed_0,
          LAYER_IN_NUM_T_prev,
          LAYER_IN_IMG_H_T_prev,
          FILTER_D0_H_prev,
          FILTER_D0_W_prev,
          FILTER_D1_H_prev,
          FILTER_D1_W_prev,
          LAYER_STRIDE_prev,
          LAYER_ROW_IL_FACTOR_prev,
          LAYER_COL_IL_FACTOR_prev,
          LAYER_DILATION_RATE_prev,
          K_NUM_prev,
          KH_prev,
          KW_prev);
      } else {
        U1_Data0ReadData0(ping_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D0_H, FILTER_D0_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
        U1_Data0FeedData0(
          pong_buffer,
          fifo_feed_0,
          LAYER_IN_NUM_T_prev,
          LAYER_IN_IMG_H_T_prev,
          FILTER_D0_H_prev,
          FILTER_D0_W_prev,
          FILTER_D1_H_prev,
          FILTER_D1_W_prev,
          LAYER_STRIDE_prev,
          LAYER_ROW_IL_FACTOR_prev,
          LAYER_COL_IL_FACTOR_prev,
          LAYER_DILATION_RATE_prev,
          K_NUM_prev,
          KH_prev,
          KW_prev);
      }
    }

    initial_round++;
    LAYER_IN_NUM_T_prev = LAYER_IN_NUM_T;
    LAYER_IN_IMG_H_T_prev = LAYER_IN_IMG_H_T;
    FILTER_D0_H_prev = FILTER_D0_H;
    FILTER_D0_W_prev = FILTER_D0_W;
    FILTER_D1_H_prev = FILTER_D1_H;
    FILTER_D1_W_prev = FILTER_D1_W;
    LAYER_STRIDE_prev = LAYER_STRIDE;
    LAYER_ROW_IL_FACTOR_prev = LAYER_ROW_IL_FACTOR;
    LAYER_COL_IL_FACTOR_prev = LAYER_COL_IL_FACTOR;
    LAYER_DILATION_RATE_prev = LAYER_DILATION_RATE;
    K_NUM_prev = K_NUM;
    KH_prev = KH;
    KW_prev = KW;
    task_iter++;
    if (task_iter == LAYER_TASK_NUM1){
      task_iter = 0;
      layer_iter += 1;
      layer_start = 1;
      if (layer_iter == LAYER_BATCH){
        layer_iter = 0;
        done = 1;
      }
    }
  }

  if (initial_round % 2 == 1){
    U1_Data0FeedData0(
      ping_buffer,
      fifo_feed_0,
      LAYER_IN_NUM_T_prev,
      LAYER_IN_IMG_H_T_prev,
      FILTER_D0_H_prev,
      FILTER_D0_W_prev,
      FILTER_D1_H_prev,
      FILTER_D1_W_prev,
      LAYER_STRIDE_prev,
      LAYER_ROW_IL_FACTOR_prev,
      LAYER_COL_IL_FACTOR_prev,
      LAYER_DILATION_RATE_prev,
      K_NUM_prev,
      KH_prev,
      KW_prev);
  } else {
    U1_Data0FeedData0(
      pong_buffer,
      fifo_feed_0,
      LAYER_IN_NUM_T_prev,
      LAYER_IN_IMG_H_T_prev,
      FILTER_D0_H_prev,
      FILTER_D0_W_prev,
      FILTER_D1_H_prev,
      FILTER_D1_W_prev,
      LAYER_STRIDE_prev,
      LAYER_ROW_IL_FACTOR_prev,
      LAYER_COL_IL_FACTOR_prev,
      LAYER_DILATION_RATE_prev,
      K_NUM_prev,
      KH_prev,
      KW_prev);
  }
}

void U1_DataFeed0Engine0_wrapper(
  stream<U1_Data0TransferChannelType> &fifo_transfer_in,
  stream<U1_Data0TransferChannelType> &fifo_transfer_out,
  stream<U1_Data0PEChannelType> &fifo_feed_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out0,
  stream<uint> &fifo_config_out1
){
  U1_DataFeed0Engine0(
    fifo_transfer_in,
    fifo_transfer_out, 
    fifo_feed_0,
    engine_id,
    fifo_config_in,
    fifo_config_out0,
    fifo_config_out1
  );
}

void U1_DataFeed0EngineLast(
  stream<U1_Data0TransferChannelType> &fifo_transfer_in,
  stream<U1_Data0PEChannelType> &fifo_feed_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out1
){
#pragma HLS DATA_PACK variable=fifo_transfer_in
#pragma HLS DATA_PACK variable=fifo_feed_0
#pragma HLS INLINE off

  uint task_iter = 0;
  uint LAYER_IN_NUM_T_prev;
  uint LAYER_IN_IMG_H_T_prev;
  uint FILTER_D0_H_prev;
  uint FILTER_D0_W_prev;
  uint FILTER_D1_H_prev;
  uint FILTER_D1_W_prev;
  uint LAYER_STRIDE_prev;
  uint LAYER_ROW_IL_FACTOR_prev;
  uint LAYER_COL_IL_FACTOR_prev;
  uint dummy;
  uint LAYER_DILATION_RATE_prev;
  uint K_NUM_prev;
  ap_uint<32> KH_prev;
  ap_uint<32> KW_prev;

  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  // write out configurations
  fifo_config_out1.write(LAYER_IN_NUM_T);
  fifo_config_out1.write(LAYER_OUT_NUM_T);
  fifo_config_out1.write(LAYER_IN_IMG_H_T);
  fifo_config_out1.write(LAYER_IN_IMG_W_T);
  fifo_config_out1.write(LAYER_FILTER_S_H);
  fifo_config_out1.write(LAYER_FILTER_S_W);
  fifo_config_out1.write(LAYER_TASK_NUM1);
  fifo_config_out1.write(LAYER_TASK_NUM2);
  fifo_config_out1.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out1.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out1.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out1.write(LAYER_COL_IL_FACTOR);
  fifo_config_out1.write(LAYER_STRIDE);
  fifo_config_out1.write(LAYER_BATCH);

  fifo_config_out1.write(LAYER_CONV_TYPE);
  fifo_config_out1.write(FILTER_D0_H);
  fifo_config_out1.write(FILTER_D0_W);
  fifo_config_out1.write(FILTER_D1_H);	
  fifo_config_out1.write(FILTER_D1_W);	
  fifo_config_out1.write(LAYER_DILATION_RATE);
  fifo_config_out1.write(LAYER_TCONV_STRIDE);
  fifo_config_out1.write(K_NUM);
  fifo_config_out1.write(KH);
  fifo_config_out1.write(KW);
  U1_Data0TransferChannelType ping_buffer[U1_DATA0_FC_GROUP_FACTOR][U1_DATA0_BUF_SIZE / U1_DATA0_FC_SIMD_FACTOR];
  U1_Data0TransferChannelType pong_buffer[U1_DATA0_FC_GROUP_FACTOR][U1_DATA0_BUF_SIZE / U1_DATA0_FC_SIMD_FACTOR];
  #if U1_DataFeed0EngineLast_MEM == 0
    #pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=BRAM
    #pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=BRAM
  #elif U1_DataFeed0EngineLast_MEM == 1
    #pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=URAM
    #pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=URAM
  #endif
#pragma HLS DATA_PACK variable=ping_buffer
#pragma HLS DATA_PACK variable=pong_buffer
#pragma HLS ARRAY_PARTITION variable=ping_buffer dim=1 complete
#pragma HLS ARRAY_PARTITION variable=pong_buffer dim=1 complete

  unsigned int initial_round = 0;

  bool done = 0;
  ap_uint<3> layer_iter = 0;
  bool layer_start = 0;
  while(!done){
    if (layer_start){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      dummy = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
      // write out configurations
      fifo_config_out1.write(LAYER_IN_NUM_T);
      fifo_config_out1.write(LAYER_OUT_NUM_T);
      fifo_config_out1.write(LAYER_IN_IMG_H_T);
      fifo_config_out1.write(LAYER_IN_IMG_W_T);
      fifo_config_out1.write(LAYER_FILTER_S_H);
      fifo_config_out1.write(LAYER_FILTER_S_W);
      fifo_config_out1.write(LAYER_TASK_NUM1);
      fifo_config_out1.write(LAYER_TASK_NUM2);
      fifo_config_out1.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out1.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out1.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out1.write(LAYER_COL_IL_FACTOR);
      fifo_config_out1.write(LAYER_STRIDE);
      fifo_config_out1.write(LAYER_BATCH);

      fifo_config_out1.write(LAYER_CONV_TYPE);
      fifo_config_out1.write(FILTER_D0_H);
      fifo_config_out1.write(FILTER_D0_W);
      fifo_config_out1.write(FILTER_D1_H);	
      fifo_config_out1.write(FILTER_D1_W);	
      fifo_config_out1.write(LAYER_DILATION_RATE);
      fifo_config_out1.write(LAYER_TCONV_STRIDE);
      fifo_config_out1.write(K_NUM);
      fifo_config_out1.write(KH);
      fifo_config_out1.write(KW);
      layer_start = 0;
    }

    if (initial_round == 0){
      U1_Data0ReadDataLast(ping_buffer, fifo_transfer_in, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D0_H, FILTER_D0_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
    } else {
      if (initial_round % 2 == 1){
        U1_Data0ReadDataLast(pong_buffer, fifo_transfer_in, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D0_H, FILTER_D0_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
        U1_Data0FeedData0(
          ping_buffer,
          fifo_feed_0,
          LAYER_IN_NUM_T_prev,
          LAYER_IN_IMG_H_T_prev,
          FILTER_D0_H_prev,
          FILTER_D0_W_prev,
          FILTER_D1_H_prev,
          FILTER_D1_W_prev,
          LAYER_STRIDE_prev,
          LAYER_ROW_IL_FACTOR_prev,
          LAYER_COL_IL_FACTOR_prev,
          LAYER_DILATION_RATE_prev,
          K_NUM_prev,
          KH_prev,
          KW_prev);
      } else {
        U1_Data0ReadDataLast(ping_buffer, fifo_transfer_in, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D0_H, FILTER_D0_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
        U1_Data0FeedData0(
          pong_buffer,
          fifo_feed_0,
          LAYER_IN_NUM_T_prev,
          LAYER_IN_IMG_H_T_prev,
          FILTER_D0_H_prev,
          FILTER_D0_W_prev,
          FILTER_D1_H_prev,
          FILTER_D1_W_prev,
          LAYER_STRIDE_prev,
          LAYER_ROW_IL_FACTOR_prev,
          LAYER_COL_IL_FACTOR_prev,
          LAYER_DILATION_RATE_prev,
          K_NUM_prev,
          KH_prev,
          KW_prev);
      }
    }

    initial_round++;
    LAYER_IN_NUM_T_prev = LAYER_IN_NUM_T;
    LAYER_IN_IMG_H_T_prev = LAYER_IN_IMG_H_T;
    FILTER_D0_H_prev = FILTER_D0_H;
    FILTER_D0_W_prev = FILTER_D0_W;
    FILTER_D1_H_prev = FILTER_D1_H;
    FILTER_D1_W_prev = FILTER_D1_W;
    LAYER_STRIDE_prev = LAYER_STRIDE;
    LAYER_ROW_IL_FACTOR_prev = LAYER_ROW_IL_FACTOR;
    LAYER_COL_IL_FACTOR_prev = LAYER_COL_IL_FACTOR;
    LAYER_DILATION_RATE_prev = LAYER_DILATION_RATE;
    K_NUM_prev = K_NUM;
    KH_prev = KH;
    KW_prev = KW;
    task_iter++;
    if (task_iter == LAYER_TASK_NUM1){
      task_iter = 0;
      layer_iter += 1;
      layer_start = 1;
      if (layer_iter == LAYER_BATCH){
        layer_iter = 0;
        done = 1;
      }
    }
  }

  if (initial_round % 2 == 1){
    U1_Data0FeedData0(
      ping_buffer,
      fifo_feed_0,
      LAYER_IN_NUM_T_prev,
      LAYER_IN_IMG_H_T_prev,
      FILTER_D0_H_prev,
      FILTER_D0_W_prev,
      FILTER_D1_H_prev,
      FILTER_D1_W_prev,
      LAYER_STRIDE_prev,
      LAYER_ROW_IL_FACTOR_prev,
      LAYER_COL_IL_FACTOR_prev,
      LAYER_DILATION_RATE_prev,
      K_NUM_prev,
      KH_prev,
      KW_prev);
  } else {
    U1_Data0FeedData0(
      pong_buffer,
      fifo_feed_0,
      LAYER_IN_NUM_T_prev,
      LAYER_IN_IMG_H_T_prev,
      FILTER_D0_H_prev,
      FILTER_D0_W_prev,
      FILTER_D1_H_prev,
      FILTER_D1_W_prev,
      LAYER_STRIDE_prev,
      LAYER_ROW_IL_FACTOR_prev,
      LAYER_COL_IL_FACTOR_prev,
      LAYER_DILATION_RATE_prev,
      K_NUM_prev,
      KH_prev,
      KW_prev);
  }
}

void U1_DataFeed1Engine0(
  stream<U1_Data1TransferChannelType> &fifo_transfer_in,
  stream<U1_Data1TransferChannelType> &fifo_transfer_out,
  stream<U1_Data1PEChannelType> &fifo_feed_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out0
){
#pragma HLS DATA_PACK variable=fifo_transfer_in
#pragma HLS DATA_PACK variable=fifo_transfer_out
#pragma HLS DATA_PACK variable=fifo_feed_0
#pragma HLS INLINE off

  uint task_iter = 0;
  uint LAYER_IN_NUM_T_prev;
  uint LAYER_IN_IMG_H_T_prev;
  uint FILTER_D1_H_prev;
  uint FILTER_D1_W_prev;
  uint LAYER_STRIDE_prev;
  uint LAYER_ROW_IL_FACTOR_prev;
  uint LAYER_COL_IL_FACTOR_prev;
  uint dummy;
  uint K_NUM_prev;
  ap_uint<32> KH_prev;
  ap_uint<32> KW_prev;

  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  // write out configurations
  fifo_config_out0.write(LAYER_IN_NUM_T);
  fifo_config_out0.write(LAYER_OUT_NUM_T);
  fifo_config_out0.write(LAYER_IN_IMG_H_T);
  fifo_config_out0.write(LAYER_IN_IMG_W_T);
  fifo_config_out0.write(LAYER_FILTER_S_H);
  fifo_config_out0.write(LAYER_FILTER_S_W);
  fifo_config_out0.write(LAYER_TASK_NUM1);
  fifo_config_out0.write(LAYER_TASK_NUM2);
  fifo_config_out0.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out0.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out0.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out0.write(LAYER_COL_IL_FACTOR);
  fifo_config_out0.write(LAYER_STRIDE);
  fifo_config_out0.write(LAYER_BATCH);

  fifo_config_out0.write(LAYER_CONV_TYPE);
  fifo_config_out0.write(FILTER_D0_H);
  fifo_config_out0.write(FILTER_D0_W);
  fifo_config_out0.write(FILTER_D1_H);	
  fifo_config_out0.write(FILTER_D1_W);	
  fifo_config_out0.write(LAYER_DILATION_RATE);
  fifo_config_out0.write(LAYER_TCONV_STRIDE);
  fifo_config_out0.write(K_NUM);
  fifo_config_out0.write(KH);
  fifo_config_out0.write(KW);
  U1_Data1TransferChannelType ping_buffer[U1_DATA1_FC_GROUP_FACTOR][U1_DATA1_BUF_SIZE / U1_DATA1_FC_SIMD_FACTOR];
  U1_Data1TransferChannelType pong_buffer[U1_DATA1_FC_GROUP_FACTOR][U1_DATA1_BUF_SIZE / U1_DATA1_FC_SIMD_FACTOR];
  #if U1_DataFeed1Engine0_MEM == 0
    #pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=BRAM
    #pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=BRAM
  #elif U1_DataFeed1Engine0_MEM == 1
    #pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=URAM
    #pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=URAM
  #endif
  #pragma HLS DATA_PACK variable=ping_buffer
  #pragma HLS DATA_PACK variable=pong_buffer
  #pragma HLS ARRAY_PARTITION variable=ping_buffer dim=1 complete
  #pragma HLS ARRAY_PARTITION variable=pong_buffer dim=1 complete

  unsigned int initial_round = 0;

  bool done = 0;
  ap_uint<3> layer_iter = 0;
  bool layer_start = 0;
  while(!done){
    if (layer_start){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      dummy = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
      // write out configurations
      fifo_config_out0.write(LAYER_IN_NUM_T);
      fifo_config_out0.write(LAYER_OUT_NUM_T);
      fifo_config_out0.write(LAYER_IN_IMG_H_T);
      fifo_config_out0.write(LAYER_IN_IMG_W_T);
      fifo_config_out0.write(LAYER_FILTER_S_H);
      fifo_config_out0.write(LAYER_FILTER_S_W);
      fifo_config_out0.write(LAYER_TASK_NUM1);
      fifo_config_out0.write(LAYER_TASK_NUM2);
      fifo_config_out0.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out0.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out0.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out0.write(LAYER_COL_IL_FACTOR);
      fifo_config_out0.write(LAYER_STRIDE);
      fifo_config_out0.write(LAYER_BATCH);

      fifo_config_out0.write(LAYER_CONV_TYPE);
      fifo_config_out0.write(FILTER_D0_H);
      fifo_config_out0.write(FILTER_D0_W);
      fifo_config_out0.write(FILTER_D1_H);	
      fifo_config_out0.write(FILTER_D1_W);	
      fifo_config_out0.write(LAYER_DILATION_RATE);
      fifo_config_out0.write(LAYER_TCONV_STRIDE);
      fifo_config_out0.write(K_NUM);
      fifo_config_out0.write(KH);
      fifo_config_out0.write(KW);
      layer_start = 0;
    }

    if (initial_round == 0){
      U1_Data1ReadData0(ping_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D1_H, FILTER_D1_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
    } else {
      if (initial_round % 2 == 1){
        U1_Data1ReadData0(pong_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D1_H, FILTER_D1_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
        U1_Data1FeedData0(
          ping_buffer,
          fifo_feed_0,
          LAYER_IN_NUM_T_prev,
          LAYER_IN_IMG_H_T_prev,
          FILTER_D1_H_prev,
          FILTER_D1_W_prev,
          LAYER_STRIDE_prev,
          LAYER_ROW_IL_FACTOR_prev,
          LAYER_COL_IL_FACTOR_prev,
          K_NUM_prev,
          KH_prev,
          KW_prev);
      } else {
        U1_Data1ReadData0(ping_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D1_H, FILTER_D1_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
        U1_Data1FeedData0(
          pong_buffer,
          fifo_feed_0,
          LAYER_IN_NUM_T_prev,
          LAYER_IN_IMG_H_T_prev,
          FILTER_D1_H_prev,
          FILTER_D1_W_prev,
          LAYER_STRIDE_prev,
          LAYER_ROW_IL_FACTOR_prev,
          LAYER_COL_IL_FACTOR_prev,
          K_NUM_prev,
          KH_prev,
          KW_prev);
      }
    }

    initial_round++;
    LAYER_IN_NUM_T_prev = LAYER_IN_NUM_T;
    LAYER_IN_IMG_H_T_prev = LAYER_IN_IMG_H_T;
    FILTER_D1_H_prev = FILTER_D1_H;
    FILTER_D1_W_prev = FILTER_D1_W;
    LAYER_STRIDE_prev = LAYER_STRIDE;
    LAYER_ROW_IL_FACTOR_prev = LAYER_ROW_IL_FACTOR;
    LAYER_COL_IL_FACTOR_prev = LAYER_COL_IL_FACTOR;
    K_NUM_prev = K_NUM;
    KH_prev = KH;
    KW_prev = KW;
    task_iter++;
    if (task_iter == LAYER_TASK_NUM1){
      task_iter = 0;
      layer_iter += 1;
      layer_start = 1;
      if (layer_iter == LAYER_BATCH){
        layer_iter = 0;
        done = 1;
      }
    }
  }

  if (initial_round % 2 == 1){
    U1_Data1FeedData0(
      ping_buffer,
      fifo_feed_0,
      LAYER_IN_NUM_T_prev,
      LAYER_IN_IMG_H_T_prev,
      FILTER_D1_H_prev,
      FILTER_D1_W_prev,
      LAYER_STRIDE_prev,
      LAYER_ROW_IL_FACTOR_prev,
      LAYER_COL_IL_FACTOR_prev,
      K_NUM_prev,
      KH_prev,
      KW_prev);
  } else {
    U1_Data1FeedData0(
      pong_buffer,
      fifo_feed_0,
      LAYER_IN_NUM_T_prev,
      LAYER_IN_IMG_H_T_prev,
      FILTER_D1_H_prev,
      FILTER_D1_W_prev,
      LAYER_STRIDE_prev,
      LAYER_ROW_IL_FACTOR_prev,
      LAYER_COL_IL_FACTOR_prev,
      K_NUM_prev,
      KH_prev,
      KW_prev);
  }
}

void U1_DataFeed1Engine0_wrapper(
  stream<U1_Data1TransferChannelType> &fifo_transfer_in,
  stream<U1_Data1TransferChannelType> &fifo_transfer_out,
  stream<U1_Data1PEChannelType> &fifo_feed_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out0
){
  U1_DataFeed1Engine0(
    fifo_transfer_in,
    fifo_transfer_out, 
    fifo_feed_0,
    engine_id,
    fifo_config_in,
    fifo_config_out0
  );
}

void U1_DataFeed1EngineLast(
  stream<U1_Data1TransferChannelType> &fifo_transfer_in,
  stream<U1_Data1PEChannelType> &fifo_feed_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in
){
#pragma HLS DATA_PACK variable=fifo_transfer_in
#pragma HLS DATA_PACK variable=fifo_feed_0
#pragma HLS INLINE off

  uint task_iter = 0;
  uint LAYER_IN_NUM_T_prev;
  uint LAYER_IN_IMG_H_T_prev;
  uint FILTER_D1_H_prev;
  uint FILTER_D1_W_prev;
  uint LAYER_STRIDE_prev;
  uint LAYER_ROW_IL_FACTOR_prev;
  uint LAYER_COL_IL_FACTOR_prev;
  uint dummy;
  uint K_NUM_prev;
  ap_uint<32> KH_prev;
  ap_uint<32> KW_prev;

  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  U1_Data1TransferChannelType ping_buffer[U1_DATA1_FC_GROUP_FACTOR][U1_DATA1_BUF_SIZE / U1_DATA1_FC_SIMD_FACTOR];
  U1_Data1TransferChannelType pong_buffer[U1_DATA1_FC_GROUP_FACTOR][U1_DATA1_BUF_SIZE / U1_DATA1_FC_SIMD_FACTOR];
  #if U1_DataFeed1EngineLast_MEM == 0
    #pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=BRAM
    #pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=BRAM
  #elif U1_DataFeed1EngineLast_MEM == 1
    #pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=URAM
    #pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=URAM
  #endif
#pragma HLS DATA_PACK variable=ping_buffer
#pragma HLS DATA_PACK variable=pong_buffer
#pragma HLS ARRAY_PARTITION variable=ping_buffer dim=1 complete
#pragma HLS ARRAY_PARTITION variable=pong_buffer dim=1 complete

  unsigned int initial_round = 0;

  bool done = 0;
  ap_uint<3> layer_iter = 0;
  bool layer_start = 0;
  while(!done){
    if (layer_start){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      dummy = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
      layer_start = 0;
    }

    if (initial_round == 0){
      U1_Data1ReadDataLast(ping_buffer, fifo_transfer_in, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D1_H, FILTER_D1_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
    } else {
      if (initial_round % 2 == 1){
        U1_Data1ReadDataLast(pong_buffer, fifo_transfer_in, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D1_H, FILTER_D1_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
        U1_Data1FeedData0(
          ping_buffer,
          fifo_feed_0,
          LAYER_IN_NUM_T_prev,
          LAYER_IN_IMG_H_T_prev,
          FILTER_D1_H_prev,
          FILTER_D1_W_prev,
          LAYER_STRIDE_prev,
          LAYER_ROW_IL_FACTOR_prev,
          LAYER_COL_IL_FACTOR_prev,
          K_NUM_prev,
          KH_prev,
          KW_prev);
      } else {
        U1_Data1ReadDataLast(ping_buffer, fifo_transfer_in, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D1_H, FILTER_D1_W, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
        U1_Data1FeedData0(
          pong_buffer,
          fifo_feed_0,
          LAYER_IN_NUM_T_prev,
          LAYER_IN_IMG_H_T_prev,
          FILTER_D1_H_prev,
          FILTER_D1_W_prev,
          LAYER_STRIDE_prev,
          LAYER_ROW_IL_FACTOR_prev,
          LAYER_COL_IL_FACTOR_prev,
          K_NUM_prev,
          KH_prev,
          KW_prev);
      }
    }

    initial_round++;
    LAYER_IN_NUM_T_prev = LAYER_IN_NUM_T;
    LAYER_IN_IMG_H_T_prev = LAYER_IN_IMG_H_T;
    FILTER_D1_H_prev = FILTER_D1_H;
    FILTER_D1_W_prev = FILTER_D1_W;
    LAYER_STRIDE_prev = LAYER_STRIDE;
    LAYER_ROW_IL_FACTOR_prev = LAYER_ROW_IL_FACTOR;
    LAYER_COL_IL_FACTOR_prev = LAYER_COL_IL_FACTOR;
    K_NUM_prev = K_NUM;
    KH_prev = KH;
    KW_prev = KW;
    task_iter++;
    if (task_iter == LAYER_TASK_NUM1){
      task_iter = 0;
      layer_iter += 1;
      layer_start = 1;
      if (layer_iter == LAYER_BATCH){
        layer_iter = 0;
        done = 1;
      }
    }
  }

  if (initial_round % 2 == 1){
    U1_Data1FeedData0(
      ping_buffer,
      fifo_feed_0,
      LAYER_IN_NUM_T_prev,
      LAYER_IN_IMG_H_T_prev,
      FILTER_D1_H_prev,
      FILTER_D1_W_prev,
      LAYER_STRIDE_prev,
      LAYER_ROW_IL_FACTOR_prev,
      LAYER_COL_IL_FACTOR_prev,
      K_NUM_prev,
      KH_prev,
      KW_prev);
  } else {
    U1_Data1FeedData0(
      pong_buffer,
      fifo_feed_0,
      LAYER_IN_NUM_T_prev,
      LAYER_IN_IMG_H_T_prev,
      FILTER_D1_H_prev,
      FILTER_D1_W_prev,
      LAYER_STRIDE_prev,
      LAYER_ROW_IL_FACTOR_prev,
      LAYER_COL_IL_FACTOR_prev,
      K_NUM_prev,
      KH_prev,
      KW_prev);
  }
}

/**
 *  This file is automatically generated by PolySA CodeGen.
 *  Version: 1.0
 *  Authos: Jie Wang
 */

//#include "common_header_U1.h"

void U1_Data2WriteData0(
  U1_data_t2 buffer[U1_DATA2_FC_GROUP_FACTOR][U1_DATA2_BUF_SIZE / U1_DATA2_FC_SIMD_FACTOR][U1_DATA2_FC_SIMD_FACTOR],
  stream<U1_Data2TransferChannelType> &fifo_transfer_in,
  stream<U1_Data2TransferChannelType> &fifo_transfer_out,
  unsigned int engine_id,
  uint LAYER_OUT_NUM_T,
  uint LAYER_IN_IMG_H_T,
  uint LAYER_IN_IMG_W_T,
  uint LAYER_COL_IL_FACTOR,
  uint LAYER_STRIDE,
  uint LAYER_TCONV_STRIDE
){
#pragma HLS INLINE off

  bool LAST_ENGINE = (engine_id == 14 / U1_DATA2_FC_SPLIT_FACTOR - 1);

  bool more_to_read_from_buffer = true;
  bool more_to_collect_from_sys_arr = true;
  bool data_is_from_local_buffer;
  bool data_is_from_external_buffer;
  ap_uint<9> oo = 0;
  ap_uint<7> h = 0;
  ap_uint<7> h_bound = LAYER_IN_IMG_H_T*LAYER_TCONV_STRIDE / LAYER_STRIDE;
  ap_uint<10> w = 0;
  ap_uint<10> w_bound = LAYER_IN_IMG_W_T*LAYER_TCONV_STRIDE / LAYER_STRIDE;
  LAYER_COL_IL_FACTOR *= LAYER_TCONV_STRIDE;
  bool done = 0;

  while(!done){
#pragma HLS PIPELINE II=1
    ap_uint<19> local_buf_idx = h * LAYER_COL_IL_FACTOR * LAYER_OUT_NUM_T + (w % LAYER_COL_IL_FACTOR) * LAYER_OUT_NUM_T + oo * U1_DATA2_FC_SIMD_FACTOR;
    if (w >= engine_id * LAYER_COL_IL_FACTOR){
      ap_uint<10> collector_id = w / LAYER_COL_IL_FACTOR;
      data_is_from_local_buffer = (collector_id == engine_id);
      data_is_from_external_buffer = !data_is_from_local_buffer;

      U1_Data2TransferChannelType data_write_to_fifo;

      if (data_is_from_external_buffer){
        data_write_to_fifo = fifo_transfer_in.read();
      } else {
        U1_data_t2 data0 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][0];
        ap_uint<U1_DATA2_WIDTH> data0_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data0);
        U1_data_t2 data1 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][1];
        ap_uint<U1_DATA2_WIDTH> data1_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data1);
        U1_data_t2 data2 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][2];
        ap_uint<U1_DATA2_WIDTH> data2_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data2);
        U1_data_t2 data3 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][3];
        ap_uint<U1_DATA2_WIDTH> data3_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data3);
        U1_data_t2 data4 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][4];
        ap_uint<U1_DATA2_WIDTH> data4_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data4);
        U1_data_t2 data5 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][5];
        ap_uint<U1_DATA2_WIDTH> data5_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data5);
        U1_data_t2 data6 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][6];
        ap_uint<U1_DATA2_WIDTH> data6_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data6);
        U1_data_t2 data7 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][7];
        ap_uint<U1_DATA2_WIDTH> data7_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data7);
        ap_uint<U1_DATA2_WIDTH * U1_DATA2_FC_SIMD_FACTOR> pack_data = (
          data7_cast,
          data6_cast,
          data5_cast,
          data4_cast,
          data3_cast,
          data2_cast,
          data1_cast,
          data0_cast
        );
        data_write_to_fifo.data = pack_data;
      }

      fifo_transfer_out.write(data_write_to_fifo);
    }
    w++;
    if (w == w_bound){
      w = 0;
      h++;
      if (h == h_bound){
        h = 0;
        oo++;
        if (oo == LAYER_OUT_NUM_T / U1_DATA2_FC_SIMD_FACTOR){
          oo = 0;
          done = 1;
        }
      }
    }
  }

}

void U1_Data2WriteDataLast(
  U1_data_t2 buffer[U1_DATA2_FC_GROUP_FACTOR][U1_DATA2_BUF_SIZE / U1_DATA2_FC_SIMD_FACTOR][U1_DATA2_FC_SIMD_FACTOR],
  stream<U1_Data2TransferChannelType> &fifo_transfer_out,
  unsigned int engine_id,
  uint LAYER_OUT_NUM_T,
  uint LAYER_IN_IMG_H_T,
  uint LAYER_IN_IMG_W_T,
  uint LAYER_COL_IL_FACTOR,
  uint LAYER_STRIDE,
  uint LAYER_TCONV_STRIDE
){
#pragma HLS INLINE off

  bool LAST_ENGINE = (engine_id == 14 / U1_DATA2_FC_SPLIT_FACTOR - 1);

  bool more_to_read_from_buffer = true;
  bool more_to_collect_from_sys_arr = true;
  bool data_is_from_local_buffer;
  bool data_is_from_external_buffer;
  ap_uint<9> oo = 0;
  ap_uint<7> h = 0;
  ap_uint<7> h_bound = LAYER_IN_IMG_H_T*LAYER_TCONV_STRIDE / LAYER_STRIDE;
  ap_uint<10> w = 0;
  ap_uint<10> w_bound = LAYER_IN_IMG_W_T*LAYER_TCONV_STRIDE / LAYER_STRIDE;
  LAYER_COL_IL_FACTOR *= LAYER_TCONV_STRIDE;
  bool done = 0;

  while(!done){
#pragma HLS PIPELINE II=1
    ap_uint<19> local_buf_idx = h * LAYER_COL_IL_FACTOR * LAYER_OUT_NUM_T + (w % LAYER_COL_IL_FACTOR) * LAYER_OUT_NUM_T + oo * U1_DATA2_FC_SIMD_FACTOR;
    if (w >= engine_id * LAYER_COL_IL_FACTOR){
      ap_uint<10> collector_id = w / LAYER_COL_IL_FACTOR;
      data_is_from_local_buffer = (collector_id == engine_id);
      data_is_from_external_buffer = !data_is_from_local_buffer;

      U1_Data2TransferChannelType data_write_to_fifo;

      if (data_is_from_external_buffer){
      } else {
        U1_data_t2 data0 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][0];
        ap_uint<U1_DATA2_WIDTH> data0_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data0);
        U1_data_t2 data1 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][1];
        ap_uint<U1_DATA2_WIDTH> data1_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data1);
        U1_data_t2 data2 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][2];
        ap_uint<U1_DATA2_WIDTH> data2_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data2);
        U1_data_t2 data3 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][3];
        ap_uint<U1_DATA2_WIDTH> data3_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data3);
        U1_data_t2 data4 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][4];
        ap_uint<U1_DATA2_WIDTH> data4_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data4);
        U1_data_t2 data5 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][5];
        ap_uint<U1_DATA2_WIDTH> data5_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data5);
        U1_data_t2 data6 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][6];
        ap_uint<U1_DATA2_WIDTH> data6_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data6);
        U1_data_t2 data7 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][7];
        ap_uint<U1_DATA2_WIDTH> data7_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data7);
        ap_uint<U1_DATA2_WIDTH * U1_DATA2_FC_SIMD_FACTOR> pack_data = (
          data7_cast,
          data6_cast,
          data5_cast,
          data4_cast,
          data3_cast,
          data2_cast,
          data1_cast,
          data0_cast
        );
        data_write_to_fifo.data = pack_data;
      }

      fifo_transfer_out.write(data_write_to_fifo);
    }
    w++;
    if (w == w_bound){
      w = 0;
      h++;
      if (h == h_bound){
        h = 0;
        oo++;
        if (oo == LAYER_OUT_NUM_T / U1_DATA2_FC_SIMD_FACTOR){
          oo = 0;
          done = 1;
        }
      }
    }
  }

}

void U1_Data2ReadData0(
  U1_data_t2 buffer[U1_DATA2_FC_GROUP_FACTOR][U1_DATA2_BUF_SIZE / U1_DATA2_FC_SIMD_FACTOR][U1_DATA2_FC_SIMD_FACTOR],
  stream<U1_Data2PEChannelType> &fifo_collect_0,
  uint LAYER_IN_IMG_H_T,
  uint LAYER_ROW_IL_FACTOR,
  uint LAYER_COL_IL_FACTOR,
  uint LAYER_STRIDE,
  uint LAYER_TCONV_STRIDE
){
#pragma HLS INLINE off

  bool more_to_collect_from_sys_arr = true;
  ap_uint<3> buffer_gs_id = 0;
  ap_uint<16> buffer_read_counter = 0;
  ap_uint<5> c0_counter = 0;
  ap_uint<3> c1_counter = 0;
  ap_uint<4> c2_counter = 0;
  ap_uint<5> c3_counter = 0;
  ap_uint<10> col_counter = 0;
  ap_uint<10> row_counter = 0;
  ap_uint<7> c0_counter_bound = LAYER_IN_IMG_H_T / LAYER_STRIDE;

  while(more_to_collect_from_sys_arr){
#pragma HLS PIPELINE II=1
    ap_uint<20> offset0 = c0_counter * LAYER_COL_IL_FACTOR*LAYER_TCONV_STRIDE*LAYER_TCONV_STRIDE * U1_SA_ROWS * LAYER_ROW_IL_FACTOR;
    ap_uint<20> offset1 = c2_counter*LAYER_TCONV_STRIDE * U1_SA_ROWS * LAYER_ROW_IL_FACTOR;
    ap_uint<20> offset2 = ((U1_SA_ROWS - 1 - c3_counter) * LAYER_ROW_IL_FACTOR + c1_counter);
    ap_uint<20> offset3 = U1_SA_ROWS*(row_counter*LAYER_COL_IL_FACTOR*LAYER_ROW_IL_FACTOR*LAYER_TCONV_STRIDE+LAYER_ROW_IL_FACTOR*col_counter);

    ap_uint<16> buffer_ind_to_collect_from_sys_arr = offset0 + offset1 + offset2 + offset3;
    U1_Data2PEChannelType data_to_collect_0;
    data_to_collect_0 = fifo_collect_0.read();
    buffer[0][buffer_ind_to_collect_from_sys_arr / U1_DATA2_FC_SIMD_FACTOR][buffer_ind_to_collect_from_sys_arr % U1_DATA2_FC_SIMD_FACTOR] = data_to_collect_0.data;

    // counter logic
    c0_counter++;
    if (c0_counter == c0_counter_bound){
      c0_counter = 0;
      c1_counter++;
      if (c1_counter == LAYER_ROW_IL_FACTOR){
        c1_counter = 0;
        c2_counter++;
        if (c2_counter == LAYER_COL_IL_FACTOR){
          c2_counter = 0;
          col_counter++;
          if (col_counter == LAYER_TCONV_STRIDE){
            col_counter = 0;
            row_counter++;
            if (row_counter == LAYER_TCONV_STRIDE){
              row_counter = 0;
              c3_counter++;
              if (c3_counter == U1_SA_ROWS){
                c3_counter = 0;
                more_to_collect_from_sys_arr = false;
              }
            }
          }
        }
      }
    }
  }
}

void U1_DataCollect2Engine0(
  stream<U1_Data2TransferChannelType> &fifo_transfer_in,
  stream<U1_Data2TransferChannelType> &fifo_transfer_out,
  stream<U1_Data2PEChannelType> &fifo_collect_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in0, // from PE
  stream<uint> &fifo_config_in1, // from other engines
  stream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo_transfer_in
#pragma HLS DATA_PACK variable=fifo_transfer_out
#pragma HLS DATA_PACK variable=fifo_collect_0
#pragma HLS INLINE off

  uint LAYER_OUT_NUM_T_prev;
  uint LAYER_IN_IMG_H_T_prev;
  uint LAYER_IN_IMG_W_T_prev;
  uint LAYER_COL_IL_FACTOR_prev;
  uint LAYER_STRIDE_prev;
  uint LAYER_TCONV_STRIDE_prev;
  uint task_iter = 0;
  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in0.read();
  uint LAYER_OUT_NUM_T = fifo_config_in0.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in0.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in0.read();
  uint LAYER_FILTER_S_H = fifo_config_in0.read();
  uint LAYER_FILTER_S_W = fifo_config_in0.read();
  uint LAYER_TASK_NUM1 = fifo_config_in0.read();
  uint LAYER_TASK_NUM2 = fifo_config_in0.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in0.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in0.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in0.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in0.read();
  uint LAYER_STRIDE = fifo_config_in0.read();
  uint LAYER_BATCH = fifo_config_in0.read();

  uint LAYER_CONV_TYPE = fifo_config_in0.read();
  uint FILTER_D0_H = fifo_config_in0.read();
  uint FILTER_D0_W = fifo_config_in0.read();
  uint FILTER_D1_H = fifo_config_in0.read();
  uint FILTER_D1_W = fifo_config_in0.read();
  uint LAYER_DILATION_RATE = fifo_config_in0.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in0.read();
  uint K_NUM = fifo_config_in0.read();
  ap_uint<32> KH = fifo_config_in0.read();
  ap_uint<32> KW = fifo_config_in0.read();
  // dummpy read
  LAYER_IN_NUM_T = fifo_config_in1.read();
  LAYER_OUT_NUM_T = fifo_config_in1.read();
  LAYER_IN_IMG_H_T = fifo_config_in1.read();
  LAYER_IN_IMG_W_T = fifo_config_in1.read();
  LAYER_FILTER_S_H = fifo_config_in1.read();
  LAYER_FILTER_S_W = fifo_config_in1.read();
  LAYER_TASK_NUM1 = fifo_config_in1.read();
  LAYER_TASK_NUM2 = fifo_config_in1.read();
  LAYER_LOCAL_ACCUM_NUM = fifo_config_in1.read();
  LAYER_LOCAL_REG_NUM = fifo_config_in1.read();
  LAYER_ROW_IL_FACTOR = fifo_config_in1.read();
  LAYER_COL_IL_FACTOR = fifo_config_in1.read();
  LAYER_STRIDE = fifo_config_in1.read();
  LAYER_BATCH = fifo_config_in1.read();

  LAYER_CONV_TYPE = fifo_config_in1.read();
  FILTER_D0_H = fifo_config_in1.read();
  FILTER_D0_W = fifo_config_in1.read();
  FILTER_D1_H = fifo_config_in1.read();
  FILTER_D1_W = fifo_config_in1.read();
  LAYER_DILATION_RATE = fifo_config_in1.read();
  LAYER_TCONV_STRIDE = fifo_config_in1.read();
  K_NUM = fifo_config_in1.read();
  KH = fifo_config_in1.read();
  KW = fifo_config_in1.read();
  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S_H);
  fifo_config_out.write(LAYER_FILTER_S_W);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);

  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0_H);
  fifo_config_out.write(FILTER_D0_W);
  fifo_config_out.write(FILTER_D1_H);	
  fifo_config_out.write(FILTER_D1_W);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH);
  fifo_config_out.write(KW);
  U1_data_t2 ping_buffer[U1_DATA2_FC_GROUP_FACTOR][U1_DATA2_BUF_SIZE / U1_DATA2_FC_SIMD_FACTOR][U1_DATA2_FC_SIMD_FACTOR];
  U1_data_t2 pong_buffer[U1_DATA2_FC_GROUP_FACTOR][U1_DATA2_BUF_SIZE / U1_DATA2_FC_SIMD_FACTOR][U1_DATA2_FC_SIMD_FACTOR];
  #if U1_DataCollect2Engine0_MEM == 0
    #pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=BRAM
    #pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=BRAM
  #elif U1_DataCollect2Engine0_MEM == 1
    #pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=URAM
    #pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=URAM
  #endif
#pragma HLS ARRAY_PARTITION variable=ping_buffer dim=3 complete
#pragma HLS ARRAY_PARTITION variable=pong_buffer dim=3 complete
#pragma HLS DATA_PACK variable=ping_buffer
#pragma HLS DATA_PACK variable=pong_buffer

  unsigned int initial_round = 0;
  bool done = 0;
  ap_uint<3> layer_iter = 0;
  bool layer_start = 0;
  while(!done){
    if (layer_start){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in0.read();
      LAYER_OUT_NUM_T = fifo_config_in0.read();
      LAYER_IN_IMG_H_T = fifo_config_in0.read();
      LAYER_IN_IMG_W_T = fifo_config_in0.read();
      LAYER_FILTER_S_H = fifo_config_in0.read();
      LAYER_FILTER_S_W = fifo_config_in0.read();
      LAYER_TASK_NUM1 = fifo_config_in0.read();
      LAYER_TASK_NUM2 = fifo_config_in0.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in0.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in0.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in0.read();
      LAYER_COL_IL_FACTOR = fifo_config_in0.read();
      LAYER_STRIDE = fifo_config_in0.read();
      LAYER_BATCH = fifo_config_in0.read();

      LAYER_CONV_TYPE = fifo_config_in0.read();
      FILTER_D0_H = fifo_config_in0.read();
      FILTER_D0_W = fifo_config_in0.read();
      FILTER_D1_H = fifo_config_in0.read();
      FILTER_D1_W = fifo_config_in0.read();
      LAYER_DILATION_RATE = fifo_config_in0.read();
      LAYER_TCONV_STRIDE = fifo_config_in0.read();
      K_NUM = fifo_config_in0.read();
      KH = fifo_config_in0.read();
      KW = fifo_config_in0.read();
      // dummpy read
      LAYER_IN_NUM_T = fifo_config_in1.read();
      LAYER_OUT_NUM_T = fifo_config_in1.read();
      LAYER_IN_IMG_H_T = fifo_config_in1.read();
      LAYER_IN_IMG_W_T = fifo_config_in1.read();
      LAYER_FILTER_S_H = fifo_config_in1.read();
      LAYER_FILTER_S_W = fifo_config_in1.read();
      LAYER_TASK_NUM1 = fifo_config_in1.read();
      LAYER_TASK_NUM2 = fifo_config_in1.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in1.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in1.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in1.read();
      LAYER_COL_IL_FACTOR = fifo_config_in1.read();
      LAYER_STRIDE = fifo_config_in1.read();
      LAYER_BATCH = fifo_config_in1.read();

      LAYER_CONV_TYPE = fifo_config_in1.read();
      FILTER_D0_H = fifo_config_in1.read();
      FILTER_D0_W = fifo_config_in1.read();
      FILTER_D1_H = fifo_config_in1.read();
      FILTER_D1_W = fifo_config_in1.read();
      LAYER_DILATION_RATE = fifo_config_in1.read();
      LAYER_TCONV_STRIDE = fifo_config_in1.read();
      K_NUM = fifo_config_in1.read();
      KH = fifo_config_in1.read();
      KW = fifo_config_in1.read();
      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S_H);
      fifo_config_out.write(LAYER_FILTER_S_W);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);

      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0_H);
      fifo_config_out.write(FILTER_D0_W);
      fifo_config_out.write(FILTER_D1_H);	
      fifo_config_out.write(FILTER_D1_W);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH);
      fifo_config_out.write(KW);
      layer_start = 0;
    }

    if (initial_round == 0){
      U1_Data2ReadData0(
        ping_buffer,
        fifo_collect_0,
        LAYER_IN_IMG_H_T,
        LAYER_ROW_IL_FACTOR,
        LAYER_COL_IL_FACTOR,
        LAYER_STRIDE,
        LAYER_TCONV_STRIDE
      );
    } else {
      if (initial_round % 2 == 1){
        U1_Data2ReadData0(
          pong_buffer,
          fifo_collect_0,
          LAYER_IN_IMG_H_T,
          LAYER_ROW_IL_FACTOR,
          LAYER_COL_IL_FACTOR,
          LAYER_STRIDE,
          LAYER_TCONV_STRIDE
        );
        U1_Data2WriteData0(ping_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_OUT_NUM_T_prev, LAYER_IN_IMG_H_T_prev, LAYER_IN_IMG_W_T_prev, LAYER_COL_IL_FACTOR_prev, LAYER_STRIDE_prev, LAYER_TCONV_STRIDE_prev);
      } else {
        U1_Data2ReadData0(
          ping_buffer,
          fifo_collect_0,
          LAYER_IN_IMG_H_T,
          LAYER_ROW_IL_FACTOR,
          LAYER_COL_IL_FACTOR,
          LAYER_STRIDE,
          LAYER_TCONV_STRIDE
        );
        U1_Data2WriteData0(pong_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_OUT_NUM_T_prev, LAYER_IN_IMG_H_T_prev, LAYER_IN_IMG_W_T_prev, LAYER_COL_IL_FACTOR_prev, LAYER_STRIDE_prev, LAYER_TCONV_STRIDE_prev);
      }
    }
    initial_round++;
    LAYER_OUT_NUM_T_prev = LAYER_OUT_NUM_T;
    LAYER_IN_IMG_H_T_prev = LAYER_IN_IMG_H_T;
    LAYER_IN_IMG_W_T_prev = LAYER_IN_IMG_W_T;
    LAYER_COL_IL_FACTOR_prev = LAYER_COL_IL_FACTOR;
    LAYER_STRIDE_prev = LAYER_STRIDE;
    LAYER_TCONV_STRIDE_prev = LAYER_TCONV_STRIDE;

    task_iter += 1;
    if (task_iter == LAYER_TASK_NUM2){
      task_iter = 0;
      layer_iter += 1;
      layer_start = 1;
      if (layer_iter == LAYER_BATCH){
        layer_iter = 0;
        done = 1;
      }
    }
  }

  if (initial_round % 2 == 1){
    U1_Data2WriteData0(ping_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_OUT_NUM_T_prev, LAYER_IN_IMG_H_T_prev, LAYER_IN_IMG_W_T_prev, LAYER_COL_IL_FACTOR_prev, LAYER_STRIDE_prev, LAYER_TCONV_STRIDE_prev);
  } else {
    U1_Data2WriteData0(pong_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_OUT_NUM_T_prev, LAYER_IN_IMG_H_T_prev, LAYER_IN_IMG_W_T_prev, LAYER_COL_IL_FACTOR_prev, LAYER_STRIDE_prev, LAYER_TCONV_STRIDE_prev);
  }
}

void U1_DataCollect2Engine0_wrapper(
  stream<U1_Data2TransferChannelType> &fifo_transfer_in,
  stream<U1_Data2TransferChannelType> &fifo_transfer_out,
  stream<U1_Data2PEChannelType> &fifo_collect_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in0,
  stream<uint> &fifo_config_in1,
  stream<uint> &fifo_config_out
){
  U1_DataCollect2Engine0(
    fifo_transfer_in,
    fifo_transfer_out,
    fifo_collect_0,
    engine_id,
    fifo_config_in0,
    fifo_config_in1,
    fifo_config_out
  );
}

void U1_DataCollect2EngineLast(
  stream<U1_Data2TransferChannelType> &fifo_transfer_out,
  stream<U1_Data2PEChannelType> &fifo_collect_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in0,
  stream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo_transfer_out
#pragma HLS DATA_PACK variable=fifo_collect_0
#pragma HLS INLINE off

  uint LAYER_OUT_NUM_T_prev;
  uint LAYER_IN_IMG_H_T_prev;
  uint LAYER_IN_IMG_W_T_prev;
  uint LAYER_COL_IL_FACTOR_prev;
  uint LAYER_STRIDE_prev;
  uint LAYER_TCONV_STRIDE_prev;
  uint task_iter = 0;
  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in0.read();
  uint LAYER_OUT_NUM_T = fifo_config_in0.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in0.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in0.read();
  uint LAYER_FILTER_S_H = fifo_config_in0.read();
  uint LAYER_FILTER_S_W = fifo_config_in0.read();
  uint LAYER_TASK_NUM1 = fifo_config_in0.read();
  uint LAYER_TASK_NUM2 = fifo_config_in0.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in0.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in0.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in0.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in0.read();
  uint LAYER_STRIDE = fifo_config_in0.read();
  uint LAYER_BATCH = fifo_config_in0.read();

  uint LAYER_CONV_TYPE = fifo_config_in0.read();
  uint FILTER_D0_H = fifo_config_in0.read();
  uint FILTER_D0_W = fifo_config_in0.read();
  uint FILTER_D1_H = fifo_config_in0.read();
  uint FILTER_D1_W = fifo_config_in0.read();
  uint LAYER_DILATION_RATE = fifo_config_in0.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in0.read();
  uint K_NUM = fifo_config_in0.read();
  ap_uint<32> KH = fifo_config_in0.read();
  ap_uint<32> KW = fifo_config_in0.read();
  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S_H);
  fifo_config_out.write(LAYER_FILTER_S_W);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);

  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0_H);
  fifo_config_out.write(FILTER_D0_W);
  fifo_config_out.write(FILTER_D1_H);	
  fifo_config_out.write(FILTER_D1_W);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH);
  fifo_config_out.write(KW);
  U1_data_t2 ping_buffer[U1_DATA2_FC_GROUP_FACTOR][U1_DATA2_BUF_SIZE / U1_DATA2_FC_SIMD_FACTOR][U1_DATA2_FC_SIMD_FACTOR];
  U1_data_t2 pong_buffer[U1_DATA2_FC_GROUP_FACTOR][U1_DATA2_BUF_SIZE / U1_DATA2_FC_SIMD_FACTOR][U1_DATA2_FC_SIMD_FACTOR];
  #if U1_DataCollect2EngineLast_MEM == 0
    #pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=BRAM
    #pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=BRAM
  #elif U1_DataCollect2EngineLast_MEM == 1
    #pragma HLS bind_storage variable=ping_buffer type=RAM_T2P impl=URAM
    #pragma HLS bind_storage variable=pong_buffer type=RAM_T2P impl=URAM
  #endif
#pragma HLS ARRAY_PARTITION variable=ping_buffer dim=3 complete
#pragma HLS ARRAY_PARTITION variable=pong_buffer dim=3 complete
#pragma HLS DATA_PACK variable=ping_buffer
#pragma HLS DATA_PACK variable=pong_buffer

  unsigned int initial_round = 0;
  bool done = 0;
  ap_uint<3> layer_iter = 0;
  bool layer_start = 0;
  while(!done){
    if (layer_start){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in0.read();
      LAYER_OUT_NUM_T = fifo_config_in0.read();
      LAYER_IN_IMG_H_T = fifo_config_in0.read();
      LAYER_IN_IMG_W_T = fifo_config_in0.read();
      LAYER_FILTER_S_H = fifo_config_in0.read();
      LAYER_FILTER_S_W = fifo_config_in0.read();
      LAYER_TASK_NUM1 = fifo_config_in0.read();
      LAYER_TASK_NUM2 = fifo_config_in0.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in0.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in0.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in0.read();
      LAYER_COL_IL_FACTOR = fifo_config_in0.read();
      LAYER_STRIDE = fifo_config_in0.read();
      LAYER_BATCH = fifo_config_in0.read();

      LAYER_CONV_TYPE = fifo_config_in0.read();
      FILTER_D0_H = fifo_config_in0.read();
      FILTER_D0_W = fifo_config_in0.read();
      FILTER_D1_H = fifo_config_in0.read();
      FILTER_D1_W = fifo_config_in0.read();
      LAYER_DILATION_RATE = fifo_config_in0.read();
      LAYER_TCONV_STRIDE = fifo_config_in0.read();
      K_NUM = fifo_config_in0.read();
      KH = fifo_config_in0.read();
      KW = fifo_config_in0.read();
      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S_H);
      fifo_config_out.write(LAYER_FILTER_S_W);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);

      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0_H);
      fifo_config_out.write(FILTER_D0_W);
      fifo_config_out.write(FILTER_D1_H);	
      fifo_config_out.write(FILTER_D1_W);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH);
      fifo_config_out.write(KW);
      layer_start = 0;
    }

    if (initial_round == 0){
      U1_Data2ReadData0(
        ping_buffer,
        fifo_collect_0,
        LAYER_IN_IMG_H_T,
        LAYER_ROW_IL_FACTOR,
        LAYER_COL_IL_FACTOR,
        LAYER_STRIDE,
        LAYER_TCONV_STRIDE
      );
    } else {
      if (initial_round % 2 == 1){
        U1_Data2ReadData0(
          pong_buffer,
          fifo_collect_0,
          LAYER_IN_IMG_H_T,
          LAYER_ROW_IL_FACTOR,
          LAYER_COL_IL_FACTOR,
          LAYER_STRIDE,
          LAYER_TCONV_STRIDE
        );
        U1_Data2WriteDataLast(ping_buffer, fifo_transfer_out, engine_id, LAYER_OUT_NUM_T_prev, LAYER_IN_IMG_H_T_prev, LAYER_IN_IMG_W_T_prev, LAYER_COL_IL_FACTOR_prev, LAYER_STRIDE_prev, LAYER_TCONV_STRIDE_prev);
      } else {
        U1_Data2ReadData0(
          ping_buffer,
          fifo_collect_0,
          LAYER_IN_IMG_H_T,
          LAYER_ROW_IL_FACTOR,
          LAYER_COL_IL_FACTOR,
          LAYER_STRIDE,
          LAYER_TCONV_STRIDE
        );
        U1_Data2WriteDataLast(pong_buffer, fifo_transfer_out, engine_id, LAYER_OUT_NUM_T_prev, LAYER_IN_IMG_H_T_prev, LAYER_IN_IMG_W_T_prev, LAYER_COL_IL_FACTOR_prev, LAYER_STRIDE_prev, LAYER_TCONV_STRIDE_prev);
      }
    }
    initial_round++;
    LAYER_OUT_NUM_T_prev = LAYER_OUT_NUM_T;
    LAYER_IN_IMG_H_T_prev = LAYER_IN_IMG_H_T;
    LAYER_IN_IMG_W_T_prev = LAYER_IN_IMG_W_T;
    LAYER_COL_IL_FACTOR_prev = LAYER_COL_IL_FACTOR;
    LAYER_STRIDE_prev = LAYER_STRIDE;
    LAYER_TCONV_STRIDE_prev = LAYER_TCONV_STRIDE;
    task_iter += 1;
    if (task_iter == LAYER_TASK_NUM2){
      task_iter = 0;
      layer_iter += 1;
      layer_start = 1;
      if (layer_iter == LAYER_BATCH){
        layer_iter = 0;
        done = 1;
      }
    }
  }

  if (initial_round % 2 == 1){
    U1_Data2WriteDataLast(ping_buffer, fifo_transfer_out, engine_id, LAYER_OUT_NUM_T_prev, LAYER_IN_IMG_H_T_prev, LAYER_IN_IMG_W_T_prev, LAYER_COL_IL_FACTOR_prev, LAYER_STRIDE_prev, LAYER_TCONV_STRIDE_prev);
  } else {
    U1_Data2WriteDataLast(pong_buffer, fifo_transfer_out, engine_id, LAYER_OUT_NUM_T_prev, LAYER_IN_IMG_H_T_prev, LAYER_IN_IMG_W_T_prev, LAYER_COL_IL_FACTOR_prev, LAYER_STRIDE_prev, LAYER_TCONV_STRIDE_prev);
  }
}

/**
 *  This file is automatically generated by PolySA CodeGen.
 *  Version: 1.0
 *  Authos: Jie Wang
 */

//#include "common_header_U1.h"

void U1_PE_MAC(
  U1_Data0SIMDType op0,
  U1_Data1SIMDType op1,
  U1_data_t2* op2,
  bool init
){
#pragma HLS INLINE
#pragma HLS DATA_PACK variable=op0
#pragma HLS DATA_PACK variable=op1
  ap_uint<256> op0_data = op0;
  ap_uint<256> op1_data = op1;

  float op0_u[U1_SIMD_FACTOR];
#pragma HLS ARRAY_PARTITION variable=op0_u complete
  float op1_u[U1_SIMD_FACTOR];
#pragma HLS ARRAY_PARTITION variable=op1_u complete

  for (int i = 0; i < U1_SIMD_FACTOR; i++){
#pragma HLS UNROLL
    ap_uint<U1_DATA0_WIDTH> sel0 = op0_data(U1_DATA0_WIDTH-1, 0);
    op0_u[i] = Reinterpret<U1_data_t0>(sel0);
    op0_data = op0_data >> U1_DATA0_WIDTH;
    ap_uint<U1_DATA1_WIDTH> sel1 = op1_data(U1_DATA1_WIDTH-1, 0);
    op1_u[i] = Reinterpret<U1_data_t1>(sel1);
    op1_data = op1_data >> U1_DATA1_WIDTH;
  }

  U1_data_t2 sum = (init == 1)? (U1_data_t2) 0: *op2;

  U1_data_t2 mult0 = op0_u[0] * op1_u[0];
  U1_data_t2 mult1 = op0_u[1] * op1_u[1];
  U1_data_t2 mult2 = op0_u[2] * op1_u[2];
  U1_data_t2 mult3 = op0_u[3] * op1_u[3];
  U1_data_t2 mult4 = op0_u[4] * op1_u[4];
  U1_data_t2 mult5 = op0_u[5] * op1_u[5];
  U1_data_t2 mult6 = op0_u[6] * op1_u[6];
  U1_data_t2 mult7 = op0_u[7] * op1_u[7];

  U1_data_t2 sum2_0 = mult0 + mult1;
  U1_data_t2 sum2_1 = mult2 + mult3;
  U1_data_t2 sum2_2 = mult4 + mult5;
  U1_data_t2 sum2_3 = mult6 + mult7;

  U1_data_t2 sum1_0 = sum2_0 + sum2_1;
  U1_data_t2 sum1_1 = sum2_2 + sum2_3;

  U1_data_t2 sum0_0 = sum1_0 + sum1_1;

  sum += sum0_0;

  *op2 = sum;
}

void U1_op0_transfer(
  stream<U1_Data0PEChannelType> &fifo0_in,
  stream<U1_Data0PEChannelType> &fifo0_out,
  stream<U1_Data0PEChannelType> &fifo0_local,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo0_in
#pragma HLS DATA_PACK variable=fifo0_out
#pragma HLS DATA_PACK variable=fifo0_local
#pragma HLS INLINE off

  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S_H);
  fifo_config_out.write(LAYER_FILTER_S_W);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);

  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0_H);
  fifo_config_out.write(FILTER_D0_W);
  fifo_config_out.write(FILTER_D1_H);	
  fifo_config_out.write(FILTER_D1_W);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH);
  fifo_config_out.write(KW);
  ap_uint<3> layer_iter = 0;
  bool done1 = 0;
  while(!done1){
    if (layer_iter > 0){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S_H);
      fifo_config_out.write(LAYER_FILTER_S_W);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);
      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0_H);
      fifo_config_out.write(FILTER_D0_W);
      fifo_config_out.write(FILTER_D1_H);	
      fifo_config_out.write(FILTER_D1_W);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH);
      fifo_config_out.write(KW);
      }

    ap_uint<37> task_num = 0;
    ap_uint<13> la_counter = 0;
    ap_uint<12> local_reg_id = 0;
    bool done2 = 0;
    while(!done2){
#pragma HLS PIPELINE II=1
      U1_Data0PEChannelType fifo0_in_data;
      fifo0_in_data = fifo0_in.read();
      fifo0_out.write(fifo0_in_data);
      fifo0_local.write(fifo0_in_data);
      local_reg_id++;
      if (local_reg_id == LAYER_LOCAL_REG_NUM){
        local_reg_id = 0;
        la_counter++;
        if (la_counter == LAYER_LOCAL_ACCUM_NUM){
          la_counter = 0;
          task_num++;
          if (task_num == LAYER_TASK_NUM1){
            task_num = 0;
            done2 = 1;
          }
        }
      }
    }
    layer_iter++;
    if (layer_iter == LAYER_BATCH){
      layer_iter = 0;
      done1 = 1;
    }
  }
}

void U1_op0_transfer_wrapper(
  stream<U1_Data0PEChannelType> &fifo0_in,
  stream<U1_Data0PEChannelType> &fifo0_out,
  stream<U1_Data0PEChannelType> &fifo0_local,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
){
  U1_op0_transfer(
    fifo0_in,
    fifo0_out,
    fifo0_local,
    fifo_config_in,
    fifo_config_out
  );
}

void U1_op0_transfer_last(
  stream<U1_Data0PEChannelType> &fifo0_in,
  stream<U1_Data0PEChannelType> &fifo0_local,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo0_in
#pragma HLS DATA_PACK variable=fifo0_local
#pragma HLS INLINE off

  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S_H);
  fifo_config_out.write(LAYER_FILTER_S_W);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);

  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0_H);
  fifo_config_out.write(FILTER_D0_W);
  fifo_config_out.write(FILTER_D1_H);	
  fifo_config_out.write(FILTER_D1_W);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH);
  fifo_config_out.write(KW);
  ap_uint<3> layer_iter = 0;
  bool done1 = 0;
  while(!done1){
    if (layer_iter > 0){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S_H);
      fifo_config_out.write(LAYER_FILTER_S_W);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);
      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0_H);
      fifo_config_out.write(FILTER_D0_W);
      fifo_config_out.write(FILTER_D1_H);	
      fifo_config_out.write(FILTER_D1_W);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH);
      fifo_config_out.write(KW);
    }

    ap_uint<37> task_num = 0;
    ap_uint<13> la_counter = 0;
    ap_uint<12> local_reg_id = 0;
    bool done2 = 0;
    while(!done2){
#pragma HLS PIPELINE II=1
      U1_Data0PEChannelType fifo0_in_data;
      fifo0_in_data = fifo0_in.read();
      fifo0_local.write(fifo0_in_data);
      local_reg_id++;
      if (local_reg_id == LAYER_LOCAL_REG_NUM){
        local_reg_id = 0;
        la_counter++;
        if (la_counter == LAYER_LOCAL_ACCUM_NUM){
          la_counter = 0;
          task_num++;
          if (task_num == LAYER_TASK_NUM1){
            task_num = 0;
            done2 = 1;
          }
        }
      }
    }
    layer_iter++;
    if (layer_iter == LAYER_BATCH){
      layer_iter = 0;
      done1 = 1;
    }
  }
}

void U1_op0_transfer_last_wrapper(
  stream<U1_Data0PEChannelType> &fifo0_in,
  stream<U1_Data0PEChannelType> &fifo0_local,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
){
  U1_op0_transfer_last(
    fifo0_in,
    fifo0_local,
    fifo_config_in,
    fifo_config_out
  );
}

void U1_op1_transfer(
  stream<U1_Data1PEChannelType> &fifo1_in,
  stream<U1_Data1PEChannelType> &fifo1_out,
  stream<U1_Data1PEChannelType> &fifo1_local,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo1_in
#pragma HLS DATA_PACK variable=fifo1_out
#pragma HLS DATA_PACK variable=fifo1_local
#pragma HLS INLINE off

  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S_H);
  fifo_config_out.write(LAYER_FILTER_S_W);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);

  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0_H);
  fifo_config_out.write(FILTER_D0_W);
  fifo_config_out.write(FILTER_D1_H);	
  fifo_config_out.write(FILTER_D1_W);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH);
  fifo_config_out.write(KW);
  ap_uint<3> layer_iter = 0;
  bool done1 = 0;
  while(!done1){
    if (layer_iter > 0){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S_H);
      fifo_config_out.write(LAYER_FILTER_S_W);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);
      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0_H);
      fifo_config_out.write(FILTER_D0_W);
      fifo_config_out.write(FILTER_D1_H);	
      fifo_config_out.write(FILTER_D1_W);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH);
      fifo_config_out.write(KW);
      }

    ap_uint<37> task_num = 0;
    ap_uint<13> la_counter = 0;
    ap_uint<12> local_reg_id = 0;
    bool done2 = 0;
    while(!done2){
#pragma HLS PIPELINE II=1
      U1_Data1PEChannelType fifo1_in_data;
      fifo1_in_data = fifo1_in.read();
      fifo1_out.write(fifo1_in_data);
      fifo1_local.write(fifo1_in_data);
      local_reg_id++;
      if (local_reg_id == LAYER_LOCAL_REG_NUM){
        local_reg_id = 0;
        la_counter++;
        if (la_counter == LAYER_LOCAL_ACCUM_NUM){
          la_counter = 0;
          task_num++;
          if (task_num == LAYER_TASK_NUM1){
            task_num = 0;
            done2 = 1;
          }
        }
      }
    }
    layer_iter++;
    if (layer_iter == LAYER_BATCH){
      layer_iter = 0;
      done1 = 1;
    }
  }
}

void U1_op1_transfer_wrapper(
  stream<U1_Data1PEChannelType> &fifo1_in,
  stream<U1_Data1PEChannelType> &fifo1_out,
  stream<U1_Data1PEChannelType> &fifo1_local,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
){
  U1_op1_transfer(
    fifo1_in,
    fifo1_out,
    fifo1_local,
    fifo_config_in,
    fifo_config_out
  );
}

void U1_op1_transfer_last(
  stream<U1_Data1PEChannelType> &fifo1_in,
  stream<U1_Data1PEChannelType> &fifo1_local,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo1_in
#pragma HLS DATA_PACK variable=fifo1_local
#pragma HLS INLINE off

  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S_H);
  fifo_config_out.write(LAYER_FILTER_S_W);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);

  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0_H);
  fifo_config_out.write(FILTER_D0_W);
  fifo_config_out.write(FILTER_D1_H);	
  fifo_config_out.write(FILTER_D1_W);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH);
  fifo_config_out.write(KW);
  ap_uint<3> layer_iter = 0;
  bool done1 = 0;
  while(!done1){
    if (layer_iter > 0){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S_H);
      fifo_config_out.write(LAYER_FILTER_S_W);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);
      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0_H);
      fifo_config_out.write(FILTER_D0_W);
      fifo_config_out.write(FILTER_D1_H);	
      fifo_config_out.write(FILTER_D1_W);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH);
      fifo_config_out.write(KW);
    }

    ap_uint<37> task_num = 0;
    ap_uint<13> la_counter = 0;
    ap_uint<12> local_reg_id = 0;
    bool done2 = 0;
    while(!done2){
#pragma HLS PIPELINE II=1
      U1_Data1PEChannelType fifo1_in_data;
      fifo1_in_data = fifo1_in.read();
      fifo1_local.write(fifo1_in_data);
      local_reg_id++;
      if (local_reg_id == LAYER_LOCAL_REG_NUM){
        local_reg_id = 0;
        la_counter++;
        if (la_counter == LAYER_LOCAL_ACCUM_NUM){
          la_counter = 0;
          task_num++;
          if (task_num == LAYER_TASK_NUM1){
            task_num = 0;
            done2 = 1;
          }
        }
      }
    }
    layer_iter++;
    if (layer_iter == LAYER_BATCH){
      layer_iter = 0;
      done1 = 1;
    }
  }
}

void U1_op1_transfer_last_wrapper(
  stream<U1_Data1PEChannelType> &fifo1_in,
  stream<U1_Data1PEChannelType> &fifo1_local,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
){
  U1_op1_transfer_last(
    fifo1_in,
    fifo1_local,
    fifo_config_in,
    fifo_config_out
  );
}

void U1_compute(
  stream<U1_Data0PEChannelType> &fifo0_local,
  stream<U1_Data1PEChannelType> &fifo1_local,
  stream<U1_Data2PEChannelType> &fifo2_local,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo0_local
#pragma HLS DATA_PACK variable=fifo1_local
#pragma HLS INLINE off

  U1_data_t2 local_buffer[U1_LOCAL_REG_NUM];

  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  ap_uint<8> in_ch_factor = LAYER_IN_NUM_T/U1_SIMD_FACTOR;

  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S_H);
  fifo_config_out.write(LAYER_FILTER_S_W);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);

  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0_H);
  fifo_config_out.write(FILTER_D0_W);
  fifo_config_out.write(FILTER_D1_H);	
  fifo_config_out.write(FILTER_D1_W);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH);
  fifo_config_out.write(KW);
  ap_uint<3> layer_iter = 0;
  bool done1 = 0;
  int i = 0;
  ap_uint<10> LAYER_LOCAL_ACCUM_NUM_ARR[4] = {
    in_ch_factor*unpack(KH,0)*unpack(KW,0),
    in_ch_factor*unpack(KH,1)*unpack(KW,1),
    in_ch_factor*unpack(KH,2)*unpack(KW,2),
    in_ch_factor*unpack(KH,3)*unpack(KW,3)
  };
  #pragma HLS ARRAY_PARTITION variable=LAYER_LOCAL_ACCUM_NUM_ARR complete
  while(!done1){
    if (layer_iter > 0){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S_H);
      fifo_config_out.write(LAYER_FILTER_S_W);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);
      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0_H);
      fifo_config_out.write(FILTER_D0_W);
      fifo_config_out.write(FILTER_D1_H);	
      fifo_config_out.write(FILTER_D1_W);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH);
      fifo_config_out.write(KW);
    }

    ap_uint<37> task_num = 0;
    ap_uint<13> la_counter = 0;
    ap_uint<12> local_reg_id = 0;
    bool done2 = 0;
    while(!done2){
#pragma HLS PIPELINE II=1
#pragma HLS DEPENDENCE inter false variable=local_buffer
      U1_Data0PEChannelType fifo0_in_data;
      fifo0_in_data = fifo0_local.read();
      U1_Data1PEChannelType fifo1_in_data;
      fifo1_in_data = fifo1_local.read();
      bool init = fifo0_in_data.new_pair;
      bool last = fifo0_in_data.last_pair;
      U1_PE_MAC(fifo0_in_data.data, fifo1_in_data.data, &local_buffer[local_reg_id], (init == 1 && la_counter == 0 && i<K_NUM)? 1:0);
      if (la_counter == LAYER_LOCAL_ACCUM_NUM_ARR[i] - 1 && last){
        fifo2_local.write(U1_Data2PEChannelType(local_buffer[local_reg_id]));
      }
      local_reg_id++;
      if (local_reg_id == (i+1)*LAYER_LOCAL_REG_NUM){
        local_reg_id = i*LAYER_LOCAL_REG_NUM;
        la_counter++;
        if (la_counter == LAYER_LOCAL_ACCUM_NUM_ARR[i]){
          la_counter = 0;
          i++;
          local_reg_id = i*LAYER_LOCAL_REG_NUM;
          if (i == K_NUM){
            i = 0;
            local_reg_id = 0;
            task_num++;
            if (task_num == LAYER_TASK_NUM1){
              task_num = 0;
              done2 = 1;
            }
          }
        }
      }
    }
    layer_iter++;
    if (layer_iter == LAYER_BATCH){
      layer_iter = 0;
      done1 = 1;
    }
  }
}

void U1_compute_wrapper(
  stream<U1_Data0PEChannelType> &fifo0_local,
  stream<U1_Data1PEChannelType> &fifo1_local,
  stream<U1_Data2PEChannelType> &fifo2_local,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
){
  U1_compute(
    fifo0_local,
    fifo1_local,
    fifo2_local,
    fifo_config_in,
    fifo_config_out
  );
}

void U1_res_transfer(
  stream<U1_Data2PEChannelType> &fifo2_local,
  stream<U1_Data2PEChannelType> &fifo2_in,
  stream<U1_Data2PEChannelType> &fifo2_out,
  ap_uint<7> pe_row_id,
  ap_uint<7> pe_col_id,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo2_in
#pragma HLS DATA_PACK variable=fifo2_out
#pragma HLS INLINE off

  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S_H);
  fifo_config_out.write(LAYER_FILTER_S_W);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);

  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0_H);
  fifo_config_out.write(FILTER_D0_W);
  fifo_config_out.write(FILTER_D1_H);	
  fifo_config_out.write(FILTER_D1_W);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH);
  fifo_config_out.write(KW);
  U1_data_t2 local_buffer[U1_TRANSFER_REG_NUM];

  for (ap_uint<3> layer_iter = 0; layer_iter < LAYER_BATCH; layer_iter++){
    if (layer_iter > 0){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S_H);
      fifo_config_out.write(LAYER_FILTER_S_W);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);
      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0_H);
      fifo_config_out.write(FILTER_D0_W);
      fifo_config_out.write(FILTER_D1_H);	
      fifo_config_out.write(FILTER_D1_W);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH);
      fifo_config_out.write(KW);
    }

    LAYER_LOCAL_REG_NUM = K_NUM*LAYER_LOCAL_REG_NUM;
    for (ap_uint<28> task_num = 0; task_num < LAYER_TASK_NUM2; task_num++)
    {
      for (ap_uint<12> local_reg_id = 0; local_reg_id < U1_TRANSFER_REG_NUM; local_reg_id++){
#pragma HLS PIPELINE II=1
        if (local_reg_id < LAYER_LOCAL_REG_NUM){
          U1_Data2PEChannelType fifo2_local_data = fifo2_local.read();
          local_buffer[local_reg_id] = fifo2_local_data.data;
        } else {
          break;
        }
      }

      for (int transfer_iter = pe_row_id + 1 - 1; transfer_iter >= 0; transfer_iter--){
        for (ap_uint<12> local_reg_id = 0; local_reg_id < U1_TRANSFER_REG_NUM; local_reg_id++){
#pragma HLS PIPELINE II=1
          if (local_reg_id < LAYER_LOCAL_REG_NUM){
            fifo2_out.write(U1_Data2PEChannelType(local_buffer[local_reg_id]));
            if (transfer_iter > 0){
              U1_Data2PEChannelType fifo2_in_data = fifo2_in.read();
              local_buffer[local_reg_id] = fifo2_in_data.data;
            }
          } else {
            break;
          }
        }
      }
    }
  }
}

void U1_res_transfer_wrapper(
  stream<U1_Data2PEChannelType> &fifo2_local,
  stream<U1_Data2PEChannelType> &fifo2_in,
  stream<U1_Data2PEChannelType> &fifo2_out,
  ap_uint<7> pe_row_id,
  ap_uint<7> pe_col_id,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
){
  U1_res_transfer(
    fifo2_local,
    fifo2_in,
    fifo2_out,
    pe_row_id,
    pe_col_id,
    fifo_config_in,
    fifo_config_out
  );
}

void U1_res_transfer_first(
  stream<U1_Data2PEChannelType> &fifo2_local,
  stream<U1_Data2PEChannelType> &fifo2_out,
  ap_uint<7> pe_row_id,
  ap_uint<7> pe_col_id,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo2_out
#pragma HLS INLINE off

  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S_H = fifo_config_in.read();
  uint LAYER_FILTER_S_W = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();

  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0_H = fifo_config_in.read();
  uint FILTER_D0_W = fifo_config_in.read();
  uint FILTER_D1_H = fifo_config_in.read();
  uint FILTER_D1_W = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  ap_uint<32> KH = fifo_config_in.read();
  ap_uint<32> KW = fifo_config_in.read();
  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S_H);
  fifo_config_out.write(LAYER_FILTER_S_W);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);

  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0_H);
  fifo_config_out.write(FILTER_D0_W);
  fifo_config_out.write(FILTER_D1_H);	
  fifo_config_out.write(FILTER_D1_W);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH);
  fifo_config_out.write(KW);
  U1_data_t2 local_buffer[U1_TRANSFER_REG_NUM];

  for (ap_uint<3> layer_iter = 0; layer_iter < LAYER_BATCH; layer_iter++){
    if (layer_iter > 0){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S_H = fifo_config_in.read();
      LAYER_FILTER_S_W = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();

      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0_H = fifo_config_in.read();
      FILTER_D0_W = fifo_config_in.read();
      FILTER_D1_H = fifo_config_in.read();
      FILTER_D1_W = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH = fifo_config_in.read();
      KW = fifo_config_in.read();
      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S_H);
      fifo_config_out.write(LAYER_FILTER_S_W);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);
      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0_H);
      fifo_config_out.write(FILTER_D0_W);
      fifo_config_out.write(FILTER_D1_H);	
      fifo_config_out.write(FILTER_D1_W);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH);
      fifo_config_out.write(KW);
    }

    LAYER_LOCAL_REG_NUM = K_NUM*LAYER_LOCAL_REG_NUM;
    for (ap_uint<28> task_num = 0; task_num < LAYER_TASK_NUM2; task_num++)
    {
      for (ap_uint<12> local_reg_id = 0; local_reg_id < U1_TRANSFER_REG_NUM; local_reg_id++){
#pragma HLS PIPELINE II=1
        if (local_reg_id < LAYER_LOCAL_REG_NUM){
          U1_Data2PEChannelType fifo2_local_data = fifo2_local.read();
          local_buffer[local_reg_id] = fifo2_local_data.data;
        } else {
          break;
        }
      }

      for (int transfer_iter = pe_row_id + 1 - 1; transfer_iter >= 0; transfer_iter--){
        for (ap_uint<12> local_reg_id = 0; local_reg_id < U1_TRANSFER_REG_NUM; local_reg_id++){
#pragma HLS PIPELINE II=1
          if (local_reg_id < LAYER_LOCAL_REG_NUM){
            fifo2_out.write(U1_Data2PEChannelType(local_buffer[local_reg_id]));
          } else {
            break;
          }
        }
      }
    }
  }
}

void U1_res_transfer_first_wrapper(
  stream<U1_Data2PEChannelType> &fifo2_local,
  stream<U1_Data2PEChannelType> &fifo2_out,
  ap_uint<7> pe_row_id,
  ap_uint<7> pe_col_id,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
){
  U1_res_transfer_first(
    fifo2_local,
    fifo2_out,
    pe_row_id,
    pe_col_id,
    fifo_config_in,
    fifo_config_out
  );
}

void kernel(
  stream<ap_uint<U1_DATA0_WIDTH * U1_DATA0_FC_SIMD_FACTOR> > &fifo_cin,
  stream<ap_uint<U1_DATA1_WIDTH * U1_DATA1_FC_SIMD_FACTOR> > &fifo_weight,
  stream<ap_uint<U1_DATA2_WIDTH * U1_DATA2_FC_SIMD_FACTOR> > &fifo_cout,
  stream<U1_ConfigInst> &fifo_kernel_config_in,
  stream<U1_ConfigInst> &fifo_kernel_config_out
){
#pragma HLS DATAFLOW

  // FIFOs
  stream<U1_Data0PEChannelType> fifo0_feed0_0;
#pragma HLS STREAM variable=fifo0_feed0_0 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed0_1;
#pragma HLS STREAM variable=fifo0_feed0_1 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed0_2;
#pragma HLS STREAM variable=fifo0_feed0_2 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed0_3;
#pragma HLS STREAM variable=fifo0_feed0_3 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed0_4;
#pragma HLS STREAM variable=fifo0_feed0_4 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed0_5;
#pragma HLS STREAM variable=fifo0_feed0_5 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed0_6;
#pragma HLS STREAM variable=fifo0_feed0_6 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed0_7;
#pragma HLS STREAM variable=fifo0_feed0_7 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed0_8;
#pragma HLS STREAM variable=fifo0_feed0_8 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed0_9;
#pragma HLS STREAM variable=fifo0_feed0_9 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed0_10;
#pragma HLS STREAM variable=fifo0_feed0_10 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed0_11;
#pragma HLS STREAM variable=fifo0_feed0_11 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed0_12;
#pragma HLS STREAM variable=fifo0_feed0_12 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed0_13;
#pragma HLS STREAM variable=fifo0_feed0_13 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed0_14;
#pragma HLS STREAM variable=fifo0_feed0_14 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed1_0;
#pragma HLS STREAM variable=fifo0_feed1_0 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed1_1;
#pragma HLS STREAM variable=fifo0_feed1_1 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed1_2;
#pragma HLS STREAM variable=fifo0_feed1_2 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed1_3;
#pragma HLS STREAM variable=fifo0_feed1_3 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed1_4;
#pragma HLS STREAM variable=fifo0_feed1_4 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed1_5;
#pragma HLS STREAM variable=fifo0_feed1_5 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed1_6;
#pragma HLS STREAM variable=fifo0_feed1_6 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed1_7;
#pragma HLS STREAM variable=fifo0_feed1_7 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed1_8;
#pragma HLS STREAM variable=fifo0_feed1_8 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed1_9;
#pragma HLS STREAM variable=fifo0_feed1_9 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed1_10;
#pragma HLS STREAM variable=fifo0_feed1_10 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed1_11;
#pragma HLS STREAM variable=fifo0_feed1_11 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed1_12;
#pragma HLS STREAM variable=fifo0_feed1_12 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed1_13;
#pragma HLS STREAM variable=fifo0_feed1_13 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed1_14;
#pragma HLS STREAM variable=fifo0_feed1_14 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed2_0;
#pragma HLS STREAM variable=fifo0_feed2_0 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed2_1;
#pragma HLS STREAM variable=fifo0_feed2_1 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed2_2;
#pragma HLS STREAM variable=fifo0_feed2_2 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed2_3;
#pragma HLS STREAM variable=fifo0_feed2_3 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed2_4;
#pragma HLS STREAM variable=fifo0_feed2_4 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed2_5;
#pragma HLS STREAM variable=fifo0_feed2_5 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed2_6;
#pragma HLS STREAM variable=fifo0_feed2_6 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed2_7;
#pragma HLS STREAM variable=fifo0_feed2_7 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed2_8;
#pragma HLS STREAM variable=fifo0_feed2_8 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed2_9;
#pragma HLS STREAM variable=fifo0_feed2_9 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed2_10;
#pragma HLS STREAM variable=fifo0_feed2_10 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed2_11;
#pragma HLS STREAM variable=fifo0_feed2_11 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed2_12;
#pragma HLS STREAM variable=fifo0_feed2_12 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed2_13;
#pragma HLS STREAM variable=fifo0_feed2_13 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed2_14;
#pragma HLS STREAM variable=fifo0_feed2_14 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed3_0;
#pragma HLS STREAM variable=fifo0_feed3_0 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed3_1;
#pragma HLS STREAM variable=fifo0_feed3_1 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed3_2;
#pragma HLS STREAM variable=fifo0_feed3_2 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed3_3;
#pragma HLS STREAM variable=fifo0_feed3_3 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed3_4;
#pragma HLS STREAM variable=fifo0_feed3_4 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed3_5;
#pragma HLS STREAM variable=fifo0_feed3_5 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed3_6;
#pragma HLS STREAM variable=fifo0_feed3_6 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed3_7;
#pragma HLS STREAM variable=fifo0_feed3_7 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed3_8;
#pragma HLS STREAM variable=fifo0_feed3_8 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed3_9;
#pragma HLS STREAM variable=fifo0_feed3_9 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed3_10;
#pragma HLS STREAM variable=fifo0_feed3_10 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed3_11;
#pragma HLS STREAM variable=fifo0_feed3_11 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed3_12;
#pragma HLS STREAM variable=fifo0_feed3_12 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed3_13;
#pragma HLS STREAM variable=fifo0_feed3_13 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed3_14;
#pragma HLS STREAM variable=fifo0_feed3_14 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed4_0;
#pragma HLS STREAM variable=fifo0_feed4_0 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed4_1;
#pragma HLS STREAM variable=fifo0_feed4_1 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed4_2;
#pragma HLS STREAM variable=fifo0_feed4_2 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed4_3;
#pragma HLS STREAM variable=fifo0_feed4_3 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed4_4;
#pragma HLS STREAM variable=fifo0_feed4_4 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed4_5;
#pragma HLS STREAM variable=fifo0_feed4_5 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed4_6;
#pragma HLS STREAM variable=fifo0_feed4_6 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed4_7;
#pragma HLS STREAM variable=fifo0_feed4_7 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed4_8;
#pragma HLS STREAM variable=fifo0_feed4_8 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed4_9;
#pragma HLS STREAM variable=fifo0_feed4_9 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed4_10;
#pragma HLS STREAM variable=fifo0_feed4_10 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed4_11;
#pragma HLS STREAM variable=fifo0_feed4_11 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed4_12;
#pragma HLS STREAM variable=fifo0_feed4_12 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed4_13;
#pragma HLS STREAM variable=fifo0_feed4_13 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed4_14;
#pragma HLS STREAM variable=fifo0_feed4_14 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed5_0;
#pragma HLS STREAM variable=fifo0_feed5_0 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed5_1;
#pragma HLS STREAM variable=fifo0_feed5_1 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed5_2;
#pragma HLS STREAM variable=fifo0_feed5_2 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed5_3;
#pragma HLS STREAM variable=fifo0_feed5_3 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed5_4;
#pragma HLS STREAM variable=fifo0_feed5_4 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed5_5;
#pragma HLS STREAM variable=fifo0_feed5_5 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed5_6;
#pragma HLS STREAM variable=fifo0_feed5_6 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed5_7;
#pragma HLS STREAM variable=fifo0_feed5_7 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed5_8;
#pragma HLS STREAM variable=fifo0_feed5_8 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed5_9;
#pragma HLS STREAM variable=fifo0_feed5_9 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed5_10;
#pragma HLS STREAM variable=fifo0_feed5_10 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed5_11;
#pragma HLS STREAM variable=fifo0_feed5_11 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed5_12;
#pragma HLS STREAM variable=fifo0_feed5_12 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed5_13;
#pragma HLS STREAM variable=fifo0_feed5_13 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed5_14;
#pragma HLS STREAM variable=fifo0_feed5_14 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed6_0;
#pragma HLS STREAM variable=fifo0_feed6_0 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed6_1;
#pragma HLS STREAM variable=fifo0_feed6_1 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed6_2;
#pragma HLS STREAM variable=fifo0_feed6_2 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed6_3;
#pragma HLS STREAM variable=fifo0_feed6_3 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed6_4;
#pragma HLS STREAM variable=fifo0_feed6_4 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed6_5;
#pragma HLS STREAM variable=fifo0_feed6_5 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed6_6;
#pragma HLS STREAM variable=fifo0_feed6_6 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed6_7;
#pragma HLS STREAM variable=fifo0_feed6_7 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed6_8;
#pragma HLS STREAM variable=fifo0_feed6_8 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed6_9;
#pragma HLS STREAM variable=fifo0_feed6_9 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed6_10;
#pragma HLS STREAM variable=fifo0_feed6_10 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed6_11;
#pragma HLS STREAM variable=fifo0_feed6_11 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed6_12;
#pragma HLS STREAM variable=fifo0_feed6_12 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed6_13;
#pragma HLS STREAM variable=fifo0_feed6_13 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed6_14;
#pragma HLS STREAM variable=fifo0_feed6_14 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed7_0;
#pragma HLS STREAM variable=fifo0_feed7_0 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed7_1;
#pragma HLS STREAM variable=fifo0_feed7_1 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed7_2;
#pragma HLS STREAM variable=fifo0_feed7_2 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed7_3;
#pragma HLS STREAM variable=fifo0_feed7_3 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed7_4;
#pragma HLS STREAM variable=fifo0_feed7_4 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed7_5;
#pragma HLS STREAM variable=fifo0_feed7_5 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed7_6;
#pragma HLS STREAM variable=fifo0_feed7_6 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed7_7;
#pragma HLS STREAM variable=fifo0_feed7_7 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed7_8;
#pragma HLS STREAM variable=fifo0_feed7_8 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed7_9;
#pragma HLS STREAM variable=fifo0_feed7_9 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed7_10;
#pragma HLS STREAM variable=fifo0_feed7_10 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed7_11;
#pragma HLS STREAM variable=fifo0_feed7_11 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed7_12;
#pragma HLS STREAM variable=fifo0_feed7_12 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed7_13;
#pragma HLS STREAM variable=fifo0_feed7_13 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed7_14;
#pragma HLS STREAM variable=fifo0_feed7_14 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed8_0;
#pragma HLS STREAM variable=fifo0_feed8_0 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed8_1;
#pragma HLS STREAM variable=fifo0_feed8_1 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed8_2;
#pragma HLS STREAM variable=fifo0_feed8_2 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed8_3;
#pragma HLS STREAM variable=fifo0_feed8_3 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed8_4;
#pragma HLS STREAM variable=fifo0_feed8_4 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed8_5;
#pragma HLS STREAM variable=fifo0_feed8_5 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed8_6;
#pragma HLS STREAM variable=fifo0_feed8_6 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed8_7;
#pragma HLS STREAM variable=fifo0_feed8_7 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed8_8;
#pragma HLS STREAM variable=fifo0_feed8_8 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed8_9;
#pragma HLS STREAM variable=fifo0_feed8_9 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed8_10;
#pragma HLS STREAM variable=fifo0_feed8_10 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed8_11;
#pragma HLS STREAM variable=fifo0_feed8_11 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed8_12;
#pragma HLS STREAM variable=fifo0_feed8_12 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed8_13;
#pragma HLS STREAM variable=fifo0_feed8_13 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed8_14;
#pragma HLS STREAM variable=fifo0_feed8_14 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed9_0;
#pragma HLS STREAM variable=fifo0_feed9_0 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed9_1;
#pragma HLS STREAM variable=fifo0_feed9_1 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed9_2;
#pragma HLS STREAM variable=fifo0_feed9_2 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed9_3;
#pragma HLS STREAM variable=fifo0_feed9_3 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed9_4;
#pragma HLS STREAM variable=fifo0_feed9_4 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed9_5;
#pragma HLS STREAM variable=fifo0_feed9_5 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed9_6;
#pragma HLS STREAM variable=fifo0_feed9_6 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed9_7;
#pragma HLS STREAM variable=fifo0_feed9_7 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed9_8;
#pragma HLS STREAM variable=fifo0_feed9_8 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed9_9;
#pragma HLS STREAM variable=fifo0_feed9_9 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed9_10;
#pragma HLS STREAM variable=fifo0_feed9_10 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed9_11;
#pragma HLS STREAM variable=fifo0_feed9_11 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed9_12;
#pragma HLS STREAM variable=fifo0_feed9_12 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed9_13;
#pragma HLS STREAM variable=fifo0_feed9_13 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed9_14;
#pragma HLS STREAM variable=fifo0_feed9_14 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed10_0;
#pragma HLS STREAM variable=fifo0_feed10_0 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed10_1;
#pragma HLS STREAM variable=fifo0_feed10_1 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed10_2;
#pragma HLS STREAM variable=fifo0_feed10_2 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed10_3;
#pragma HLS STREAM variable=fifo0_feed10_3 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed10_4;
#pragma HLS STREAM variable=fifo0_feed10_4 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed10_5;
#pragma HLS STREAM variable=fifo0_feed10_5 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed10_6;
#pragma HLS STREAM variable=fifo0_feed10_6 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed10_7;
#pragma HLS STREAM variable=fifo0_feed10_7 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed10_8;
#pragma HLS STREAM variable=fifo0_feed10_8 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed10_9;
#pragma HLS STREAM variable=fifo0_feed10_9 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed10_10;
#pragma HLS STREAM variable=fifo0_feed10_10 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed10_11;
#pragma HLS STREAM variable=fifo0_feed10_11 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed10_12;
#pragma HLS STREAM variable=fifo0_feed10_12 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed10_13;
#pragma HLS STREAM variable=fifo0_feed10_13 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed10_14;
#pragma HLS STREAM variable=fifo0_feed10_14 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed11_0;
#pragma HLS STREAM variable=fifo0_feed11_0 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed11_1;
#pragma HLS STREAM variable=fifo0_feed11_1 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed11_2;
#pragma HLS STREAM variable=fifo0_feed11_2 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed11_3;
#pragma HLS STREAM variable=fifo0_feed11_3 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed11_4;
#pragma HLS STREAM variable=fifo0_feed11_4 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed11_5;
#pragma HLS STREAM variable=fifo0_feed11_5 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed11_6;
#pragma HLS STREAM variable=fifo0_feed11_6 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed11_7;
#pragma HLS STREAM variable=fifo0_feed11_7 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed11_8;
#pragma HLS STREAM variable=fifo0_feed11_8 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed11_9;
#pragma HLS STREAM variable=fifo0_feed11_9 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed11_10;
#pragma HLS STREAM variable=fifo0_feed11_10 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed11_11;
#pragma HLS STREAM variable=fifo0_feed11_11 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed11_12;
#pragma HLS STREAM variable=fifo0_feed11_12 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed11_13;
#pragma HLS STREAM variable=fifo0_feed11_13 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed11_14;
#pragma HLS STREAM variable=fifo0_feed11_14 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed12_0;
#pragma HLS STREAM variable=fifo0_feed12_0 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed12_1;
#pragma HLS STREAM variable=fifo0_feed12_1 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed12_2;
#pragma HLS STREAM variable=fifo0_feed12_2 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed12_3;
#pragma HLS STREAM variable=fifo0_feed12_3 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed12_4;
#pragma HLS STREAM variable=fifo0_feed12_4 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed12_5;
#pragma HLS STREAM variable=fifo0_feed12_5 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed12_6;
#pragma HLS STREAM variable=fifo0_feed12_6 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed12_7;
#pragma HLS STREAM variable=fifo0_feed12_7 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed12_8;
#pragma HLS STREAM variable=fifo0_feed12_8 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed12_9;
#pragma HLS STREAM variable=fifo0_feed12_9 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed12_10;
#pragma HLS STREAM variable=fifo0_feed12_10 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed12_11;
#pragma HLS STREAM variable=fifo0_feed12_11 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed12_12;
#pragma HLS STREAM variable=fifo0_feed12_12 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed12_13;
#pragma HLS STREAM variable=fifo0_feed12_13 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed12_14;
#pragma HLS STREAM variable=fifo0_feed12_14 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed13_0;
#pragma HLS STREAM variable=fifo0_feed13_0 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed13_1;
#pragma HLS STREAM variable=fifo0_feed13_1 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed13_2;
#pragma HLS STREAM variable=fifo0_feed13_2 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed13_3;
#pragma HLS STREAM variable=fifo0_feed13_3 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed13_4;
#pragma HLS STREAM variable=fifo0_feed13_4 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed13_5;
#pragma HLS STREAM variable=fifo0_feed13_5 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed13_6;
#pragma HLS STREAM variable=fifo0_feed13_6 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed13_7;
#pragma HLS STREAM variable=fifo0_feed13_7 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed13_8;
#pragma HLS STREAM variable=fifo0_feed13_8 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed13_9;
#pragma HLS STREAM variable=fifo0_feed13_9 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed13_10;
#pragma HLS STREAM variable=fifo0_feed13_10 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed13_11;
#pragma HLS STREAM variable=fifo0_feed13_11 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed13_12;
#pragma HLS STREAM variable=fifo0_feed13_12 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed13_13;
#pragma HLS STREAM variable=fifo0_feed13_13 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed13_14;
#pragma HLS STREAM variable=fifo0_feed13_14 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed14_0;
#pragma HLS STREAM variable=fifo0_feed14_0 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed14_1;
#pragma HLS STREAM variable=fifo0_feed14_1 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed14_2;
#pragma HLS STREAM variable=fifo0_feed14_2 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed14_3;
#pragma HLS STREAM variable=fifo0_feed14_3 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed14_4;
#pragma HLS STREAM variable=fifo0_feed14_4 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed14_5;
#pragma HLS STREAM variable=fifo0_feed14_5 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed14_6;
#pragma HLS STREAM variable=fifo0_feed14_6 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed14_7;
#pragma HLS STREAM variable=fifo0_feed14_7 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed14_8;
#pragma HLS STREAM variable=fifo0_feed14_8 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed14_9;
#pragma HLS STREAM variable=fifo0_feed14_9 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed14_10;
#pragma HLS STREAM variable=fifo0_feed14_10 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed14_11;
#pragma HLS STREAM variable=fifo0_feed14_11 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed14_12;
#pragma HLS STREAM variable=fifo0_feed14_12 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed14_13;
#pragma HLS STREAM variable=fifo0_feed14_13 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed14_14;
#pragma HLS STREAM variable=fifo0_feed14_14 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed15_0;
#pragma HLS STREAM variable=fifo0_feed15_0 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed15_1;
#pragma HLS STREAM variable=fifo0_feed15_1 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed15_2;
#pragma HLS STREAM variable=fifo0_feed15_2 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed15_3;
#pragma HLS STREAM variable=fifo0_feed15_3 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed15_4;
#pragma HLS STREAM variable=fifo0_feed15_4 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed15_5;
#pragma HLS STREAM variable=fifo0_feed15_5 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed15_6;
#pragma HLS STREAM variable=fifo0_feed15_6 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed15_7;
#pragma HLS STREAM variable=fifo0_feed15_7 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed15_8;
#pragma HLS STREAM variable=fifo0_feed15_8 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed15_9;
#pragma HLS STREAM variable=fifo0_feed15_9 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed15_10;
#pragma HLS STREAM variable=fifo0_feed15_10 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed15_11;
#pragma HLS STREAM variable=fifo0_feed15_11 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed15_12;
#pragma HLS STREAM variable=fifo0_feed15_12 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed15_13;
#pragma HLS STREAM variable=fifo0_feed15_13 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed15_14;
#pragma HLS STREAM variable=fifo0_feed15_14 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed16_0;
#pragma HLS STREAM variable=fifo0_feed16_0 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed16_1;
#pragma HLS STREAM variable=fifo0_feed16_1 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed16_2;
#pragma HLS STREAM variable=fifo0_feed16_2 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed16_3;
#pragma HLS STREAM variable=fifo0_feed16_3 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed16_4;
#pragma HLS STREAM variable=fifo0_feed16_4 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed16_5;
#pragma HLS STREAM variable=fifo0_feed16_5 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed16_6;
#pragma HLS STREAM variable=fifo0_feed16_6 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed16_7;
#pragma HLS STREAM variable=fifo0_feed16_7 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed16_8;
#pragma HLS STREAM variable=fifo0_feed16_8 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed16_9;
#pragma HLS STREAM variable=fifo0_feed16_9 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed16_10;
#pragma HLS STREAM variable=fifo0_feed16_10 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed16_11;
#pragma HLS STREAM variable=fifo0_feed16_11 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed16_12;
#pragma HLS STREAM variable=fifo0_feed16_12 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed16_13;
#pragma HLS STREAM variable=fifo0_feed16_13 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed16_14;
#pragma HLS STREAM variable=fifo0_feed16_14 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed0_0;
#pragma HLS STREAM variable=fifo1_feed0_0 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed0_1;
#pragma HLS STREAM variable=fifo1_feed0_1 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed0_2;
#pragma HLS STREAM variable=fifo1_feed0_2 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed0_3;
#pragma HLS STREAM variable=fifo1_feed0_3 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed0_4;
#pragma HLS STREAM variable=fifo1_feed0_4 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed0_5;
#pragma HLS STREAM variable=fifo1_feed0_5 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed0_6;
#pragma HLS STREAM variable=fifo1_feed0_6 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed0_7;
#pragma HLS STREAM variable=fifo1_feed0_7 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed0_8;
#pragma HLS STREAM variable=fifo1_feed0_8 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed0_9;
#pragma HLS STREAM variable=fifo1_feed0_9 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed0_10;
#pragma HLS STREAM variable=fifo1_feed0_10 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed0_11;
#pragma HLS STREAM variable=fifo1_feed0_11 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed0_12;
#pragma HLS STREAM variable=fifo1_feed0_12 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed0_13;
#pragma HLS STREAM variable=fifo1_feed0_13 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed0_14;
#pragma HLS STREAM variable=fifo1_feed0_14 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed1_0;
#pragma HLS STREAM variable=fifo1_feed1_0 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed1_1;
#pragma HLS STREAM variable=fifo1_feed1_1 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed1_2;
#pragma HLS STREAM variable=fifo1_feed1_2 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed1_3;
#pragma HLS STREAM variable=fifo1_feed1_3 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed1_4;
#pragma HLS STREAM variable=fifo1_feed1_4 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed1_5;
#pragma HLS STREAM variable=fifo1_feed1_5 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed1_6;
#pragma HLS STREAM variable=fifo1_feed1_6 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed1_7;
#pragma HLS STREAM variable=fifo1_feed1_7 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed1_8;
#pragma HLS STREAM variable=fifo1_feed1_8 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed1_9;
#pragma HLS STREAM variable=fifo1_feed1_9 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed1_10;
#pragma HLS STREAM variable=fifo1_feed1_10 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed1_11;
#pragma HLS STREAM variable=fifo1_feed1_11 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed1_12;
#pragma HLS STREAM variable=fifo1_feed1_12 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed1_13;
#pragma HLS STREAM variable=fifo1_feed1_13 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed1_14;
#pragma HLS STREAM variable=fifo1_feed1_14 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed2_0;
#pragma HLS STREAM variable=fifo1_feed2_0 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed2_1;
#pragma HLS STREAM variable=fifo1_feed2_1 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed2_2;
#pragma HLS STREAM variable=fifo1_feed2_2 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed2_3;
#pragma HLS STREAM variable=fifo1_feed2_3 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed2_4;
#pragma HLS STREAM variable=fifo1_feed2_4 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed2_5;
#pragma HLS STREAM variable=fifo1_feed2_5 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed2_6;
#pragma HLS STREAM variable=fifo1_feed2_6 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed2_7;
#pragma HLS STREAM variable=fifo1_feed2_7 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed2_8;
#pragma HLS STREAM variable=fifo1_feed2_8 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed2_9;
#pragma HLS STREAM variable=fifo1_feed2_9 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed2_10;
#pragma HLS STREAM variable=fifo1_feed2_10 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed2_11;
#pragma HLS STREAM variable=fifo1_feed2_11 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed2_12;
#pragma HLS STREAM variable=fifo1_feed2_12 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed2_13;
#pragma HLS STREAM variable=fifo1_feed2_13 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed2_14;
#pragma HLS STREAM variable=fifo1_feed2_14 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed3_0;
#pragma HLS STREAM variable=fifo1_feed3_0 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed3_1;
#pragma HLS STREAM variable=fifo1_feed3_1 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed3_2;
#pragma HLS STREAM variable=fifo1_feed3_2 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed3_3;
#pragma HLS STREAM variable=fifo1_feed3_3 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed3_4;
#pragma HLS STREAM variable=fifo1_feed3_4 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed3_5;
#pragma HLS STREAM variable=fifo1_feed3_5 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed3_6;
#pragma HLS STREAM variable=fifo1_feed3_6 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed3_7;
#pragma HLS STREAM variable=fifo1_feed3_7 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed3_8;
#pragma HLS STREAM variable=fifo1_feed3_8 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed3_9;
#pragma HLS STREAM variable=fifo1_feed3_9 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed3_10;
#pragma HLS STREAM variable=fifo1_feed3_10 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed3_11;
#pragma HLS STREAM variable=fifo1_feed3_11 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed3_12;
#pragma HLS STREAM variable=fifo1_feed3_12 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed3_13;
#pragma HLS STREAM variable=fifo1_feed3_13 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed3_14;
#pragma HLS STREAM variable=fifo1_feed3_14 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed4_0;
#pragma HLS STREAM variable=fifo1_feed4_0 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed4_1;
#pragma HLS STREAM variable=fifo1_feed4_1 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed4_2;
#pragma HLS STREAM variable=fifo1_feed4_2 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed4_3;
#pragma HLS STREAM variable=fifo1_feed4_3 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed4_4;
#pragma HLS STREAM variable=fifo1_feed4_4 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed4_5;
#pragma HLS STREAM variable=fifo1_feed4_5 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed4_6;
#pragma HLS STREAM variable=fifo1_feed4_6 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed4_7;
#pragma HLS STREAM variable=fifo1_feed4_7 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed4_8;
#pragma HLS STREAM variable=fifo1_feed4_8 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed4_9;
#pragma HLS STREAM variable=fifo1_feed4_9 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed4_10;
#pragma HLS STREAM variable=fifo1_feed4_10 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed4_11;
#pragma HLS STREAM variable=fifo1_feed4_11 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed4_12;
#pragma HLS STREAM variable=fifo1_feed4_12 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed4_13;
#pragma HLS STREAM variable=fifo1_feed4_13 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed4_14;
#pragma HLS STREAM variable=fifo1_feed4_14 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed5_0;
#pragma HLS STREAM variable=fifo1_feed5_0 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed5_1;
#pragma HLS STREAM variable=fifo1_feed5_1 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed5_2;
#pragma HLS STREAM variable=fifo1_feed5_2 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed5_3;
#pragma HLS STREAM variable=fifo1_feed5_3 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed5_4;
#pragma HLS STREAM variable=fifo1_feed5_4 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed5_5;
#pragma HLS STREAM variable=fifo1_feed5_5 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed5_6;
#pragma HLS STREAM variable=fifo1_feed5_6 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed5_7;
#pragma HLS STREAM variable=fifo1_feed5_7 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed5_8;
#pragma HLS STREAM variable=fifo1_feed5_8 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed5_9;
#pragma HLS STREAM variable=fifo1_feed5_9 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed5_10;
#pragma HLS STREAM variable=fifo1_feed5_10 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed5_11;
#pragma HLS STREAM variable=fifo1_feed5_11 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed5_12;
#pragma HLS STREAM variable=fifo1_feed5_12 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed5_13;
#pragma HLS STREAM variable=fifo1_feed5_13 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed5_14;
#pragma HLS STREAM variable=fifo1_feed5_14 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed6_0;
#pragma HLS STREAM variable=fifo1_feed6_0 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed6_1;
#pragma HLS STREAM variable=fifo1_feed6_1 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed6_2;
#pragma HLS STREAM variable=fifo1_feed6_2 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed6_3;
#pragma HLS STREAM variable=fifo1_feed6_3 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed6_4;
#pragma HLS STREAM variable=fifo1_feed6_4 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed6_5;
#pragma HLS STREAM variable=fifo1_feed6_5 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed6_6;
#pragma HLS STREAM variable=fifo1_feed6_6 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed6_7;
#pragma HLS STREAM variable=fifo1_feed6_7 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed6_8;
#pragma HLS STREAM variable=fifo1_feed6_8 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed6_9;
#pragma HLS STREAM variable=fifo1_feed6_9 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed6_10;
#pragma HLS STREAM variable=fifo1_feed6_10 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed6_11;
#pragma HLS STREAM variable=fifo1_feed6_11 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed6_12;
#pragma HLS STREAM variable=fifo1_feed6_12 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed6_13;
#pragma HLS STREAM variable=fifo1_feed6_13 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed6_14;
#pragma HLS STREAM variable=fifo1_feed6_14 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed7_0;
#pragma HLS STREAM variable=fifo1_feed7_0 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed7_1;
#pragma HLS STREAM variable=fifo1_feed7_1 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed7_2;
#pragma HLS STREAM variable=fifo1_feed7_2 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed7_3;
#pragma HLS STREAM variable=fifo1_feed7_3 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed7_4;
#pragma HLS STREAM variable=fifo1_feed7_4 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed7_5;
#pragma HLS STREAM variable=fifo1_feed7_5 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed7_6;
#pragma HLS STREAM variable=fifo1_feed7_6 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed7_7;
#pragma HLS STREAM variable=fifo1_feed7_7 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed7_8;
#pragma HLS STREAM variable=fifo1_feed7_8 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed7_9;
#pragma HLS STREAM variable=fifo1_feed7_9 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed7_10;
#pragma HLS STREAM variable=fifo1_feed7_10 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed7_11;
#pragma HLS STREAM variable=fifo1_feed7_11 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed7_12;
#pragma HLS STREAM variable=fifo1_feed7_12 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed7_13;
#pragma HLS STREAM variable=fifo1_feed7_13 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed7_14;
#pragma HLS STREAM variable=fifo1_feed7_14 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed8_0;
#pragma HLS STREAM variable=fifo1_feed8_0 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed8_1;
#pragma HLS STREAM variable=fifo1_feed8_1 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed8_2;
#pragma HLS STREAM variable=fifo1_feed8_2 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed8_3;
#pragma HLS STREAM variable=fifo1_feed8_3 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed8_4;
#pragma HLS STREAM variable=fifo1_feed8_4 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed8_5;
#pragma HLS STREAM variable=fifo1_feed8_5 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed8_6;
#pragma HLS STREAM variable=fifo1_feed8_6 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed8_7;
#pragma HLS STREAM variable=fifo1_feed8_7 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed8_8;
#pragma HLS STREAM variable=fifo1_feed8_8 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed8_9;
#pragma HLS STREAM variable=fifo1_feed8_9 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed8_10;
#pragma HLS STREAM variable=fifo1_feed8_10 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed8_11;
#pragma HLS STREAM variable=fifo1_feed8_11 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed8_12;
#pragma HLS STREAM variable=fifo1_feed8_12 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed8_13;
#pragma HLS STREAM variable=fifo1_feed8_13 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed8_14;
#pragma HLS STREAM variable=fifo1_feed8_14 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed9_0;
#pragma HLS STREAM variable=fifo1_feed9_0 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed9_1;
#pragma HLS STREAM variable=fifo1_feed9_1 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed9_2;
#pragma HLS STREAM variable=fifo1_feed9_2 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed9_3;
#pragma HLS STREAM variable=fifo1_feed9_3 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed9_4;
#pragma HLS STREAM variable=fifo1_feed9_4 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed9_5;
#pragma HLS STREAM variable=fifo1_feed9_5 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed9_6;
#pragma HLS STREAM variable=fifo1_feed9_6 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed9_7;
#pragma HLS STREAM variable=fifo1_feed9_7 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed9_8;
#pragma HLS STREAM variable=fifo1_feed9_8 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed9_9;
#pragma HLS STREAM variable=fifo1_feed9_9 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed9_10;
#pragma HLS STREAM variable=fifo1_feed9_10 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed9_11;
#pragma HLS STREAM variable=fifo1_feed9_11 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed9_12;
#pragma HLS STREAM variable=fifo1_feed9_12 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed9_13;
#pragma HLS STREAM variable=fifo1_feed9_13 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed9_14;
#pragma HLS STREAM variable=fifo1_feed9_14 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed10_0;
#pragma HLS STREAM variable=fifo1_feed10_0 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed10_1;
#pragma HLS STREAM variable=fifo1_feed10_1 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed10_2;
#pragma HLS STREAM variable=fifo1_feed10_2 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed10_3;
#pragma HLS STREAM variable=fifo1_feed10_3 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed10_4;
#pragma HLS STREAM variable=fifo1_feed10_4 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed10_5;
#pragma HLS STREAM variable=fifo1_feed10_5 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed10_6;
#pragma HLS STREAM variable=fifo1_feed10_6 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed10_7;
#pragma HLS STREAM variable=fifo1_feed10_7 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed10_8;
#pragma HLS STREAM variable=fifo1_feed10_8 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed10_9;
#pragma HLS STREAM variable=fifo1_feed10_9 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed10_10;
#pragma HLS STREAM variable=fifo1_feed10_10 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed10_11;
#pragma HLS STREAM variable=fifo1_feed10_11 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed10_12;
#pragma HLS STREAM variable=fifo1_feed10_12 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed10_13;
#pragma HLS STREAM variable=fifo1_feed10_13 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed10_14;
#pragma HLS STREAM variable=fifo1_feed10_14 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed11_0;
#pragma HLS STREAM variable=fifo1_feed11_0 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed11_1;
#pragma HLS STREAM variable=fifo1_feed11_1 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed11_2;
#pragma HLS STREAM variable=fifo1_feed11_2 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed11_3;
#pragma HLS STREAM variable=fifo1_feed11_3 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed11_4;
#pragma HLS STREAM variable=fifo1_feed11_4 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed11_5;
#pragma HLS STREAM variable=fifo1_feed11_5 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed11_6;
#pragma HLS STREAM variable=fifo1_feed11_6 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed11_7;
#pragma HLS STREAM variable=fifo1_feed11_7 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed11_8;
#pragma HLS STREAM variable=fifo1_feed11_8 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed11_9;
#pragma HLS STREAM variable=fifo1_feed11_9 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed11_10;
#pragma HLS STREAM variable=fifo1_feed11_10 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed11_11;
#pragma HLS STREAM variable=fifo1_feed11_11 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed11_12;
#pragma HLS STREAM variable=fifo1_feed11_12 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed11_13;
#pragma HLS STREAM variable=fifo1_feed11_13 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed11_14;
#pragma HLS STREAM variable=fifo1_feed11_14 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed12_0;
#pragma HLS STREAM variable=fifo1_feed12_0 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed12_1;
#pragma HLS STREAM variable=fifo1_feed12_1 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed12_2;
#pragma HLS STREAM variable=fifo1_feed12_2 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed12_3;
#pragma HLS STREAM variable=fifo1_feed12_3 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed12_4;
#pragma HLS STREAM variable=fifo1_feed12_4 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed12_5;
#pragma HLS STREAM variable=fifo1_feed12_5 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed12_6;
#pragma HLS STREAM variable=fifo1_feed12_6 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed12_7;
#pragma HLS STREAM variable=fifo1_feed12_7 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed12_8;
#pragma HLS STREAM variable=fifo1_feed12_8 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed12_9;
#pragma HLS STREAM variable=fifo1_feed12_9 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed12_10;
#pragma HLS STREAM variable=fifo1_feed12_10 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed12_11;
#pragma HLS STREAM variable=fifo1_feed12_11 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed12_12;
#pragma HLS STREAM variable=fifo1_feed12_12 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed12_13;
#pragma HLS STREAM variable=fifo1_feed12_13 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed12_14;
#pragma HLS STREAM variable=fifo1_feed12_14 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed13_0;
#pragma HLS STREAM variable=fifo1_feed13_0 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed13_1;
#pragma HLS STREAM variable=fifo1_feed13_1 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed13_2;
#pragma HLS STREAM variable=fifo1_feed13_2 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed13_3;
#pragma HLS STREAM variable=fifo1_feed13_3 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed13_4;
#pragma HLS STREAM variable=fifo1_feed13_4 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed13_5;
#pragma HLS STREAM variable=fifo1_feed13_5 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed13_6;
#pragma HLS STREAM variable=fifo1_feed13_6 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed13_7;
#pragma HLS STREAM variable=fifo1_feed13_7 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed13_8;
#pragma HLS STREAM variable=fifo1_feed13_8 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed13_9;
#pragma HLS STREAM variable=fifo1_feed13_9 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed13_10;
#pragma HLS STREAM variable=fifo1_feed13_10 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed13_11;
#pragma HLS STREAM variable=fifo1_feed13_11 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed13_12;
#pragma HLS STREAM variable=fifo1_feed13_12 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed13_13;
#pragma HLS STREAM variable=fifo1_feed13_13 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed13_14;
#pragma HLS STREAM variable=fifo1_feed13_14 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed14_0;
#pragma HLS STREAM variable=fifo1_feed14_0 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed14_1;
#pragma HLS STREAM variable=fifo1_feed14_1 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed14_2;
#pragma HLS STREAM variable=fifo1_feed14_2 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed14_3;
#pragma HLS STREAM variable=fifo1_feed14_3 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed14_4;
#pragma HLS STREAM variable=fifo1_feed14_4 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed14_5;
#pragma HLS STREAM variable=fifo1_feed14_5 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed14_6;
#pragma HLS STREAM variable=fifo1_feed14_6 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed14_7;
#pragma HLS STREAM variable=fifo1_feed14_7 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed14_8;
#pragma HLS STREAM variable=fifo1_feed14_8 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed14_9;
#pragma HLS STREAM variable=fifo1_feed14_9 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed14_10;
#pragma HLS STREAM variable=fifo1_feed14_10 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed14_11;
#pragma HLS STREAM variable=fifo1_feed14_11 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed14_12;
#pragma HLS STREAM variable=fifo1_feed14_12 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed14_13;
#pragma HLS STREAM variable=fifo1_feed14_13 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed14_14;
#pragma HLS STREAM variable=fifo1_feed14_14 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed15_0;
#pragma HLS STREAM variable=fifo1_feed15_0 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed15_1;
#pragma HLS STREAM variable=fifo1_feed15_1 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed15_2;
#pragma HLS STREAM variable=fifo1_feed15_2 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed15_3;
#pragma HLS STREAM variable=fifo1_feed15_3 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed15_4;
#pragma HLS STREAM variable=fifo1_feed15_4 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed15_5;
#pragma HLS STREAM variable=fifo1_feed15_5 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed15_6;
#pragma HLS STREAM variable=fifo1_feed15_6 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed15_7;
#pragma HLS STREAM variable=fifo1_feed15_7 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed15_8;
#pragma HLS STREAM variable=fifo1_feed15_8 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed15_9;
#pragma HLS STREAM variable=fifo1_feed15_9 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed15_10;
#pragma HLS STREAM variable=fifo1_feed15_10 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed15_11;
#pragma HLS STREAM variable=fifo1_feed15_11 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed15_12;
#pragma HLS STREAM variable=fifo1_feed15_12 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed15_13;
#pragma HLS STREAM variable=fifo1_feed15_13 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed15_14;
#pragma HLS STREAM variable=fifo1_feed15_14 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed16_0;
#pragma HLS STREAM variable=fifo1_feed16_0 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed16_1;
#pragma HLS STREAM variable=fifo1_feed16_1 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed16_2;
#pragma HLS STREAM variable=fifo1_feed16_2 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed16_3;
#pragma HLS STREAM variable=fifo1_feed16_3 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed16_4;
#pragma HLS STREAM variable=fifo1_feed16_4 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed16_5;
#pragma HLS STREAM variable=fifo1_feed16_5 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed16_6;
#pragma HLS STREAM variable=fifo1_feed16_6 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed16_7;
#pragma HLS STREAM variable=fifo1_feed16_7 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed16_8;
#pragma HLS STREAM variable=fifo1_feed16_8 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed16_9;
#pragma HLS STREAM variable=fifo1_feed16_9 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed16_10;
#pragma HLS STREAM variable=fifo1_feed16_10 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed16_11;
#pragma HLS STREAM variable=fifo1_feed16_11 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed16_12;
#pragma HLS STREAM variable=fifo1_feed16_12 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed16_13;
#pragma HLS STREAM variable=fifo1_feed16_13 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed16_14;
#pragma HLS STREAM variable=fifo1_feed16_14 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect0_0;
#pragma HLS STREAM variable=fifo2_collect0_0 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect0_1;
#pragma HLS STREAM variable=fifo2_collect0_1 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect0_2;
#pragma HLS STREAM variable=fifo2_collect0_2 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect0_3;
#pragma HLS STREAM variable=fifo2_collect0_3 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect0_4;
#pragma HLS STREAM variable=fifo2_collect0_4 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect0_5;
#pragma HLS STREAM variable=fifo2_collect0_5 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect0_6;
#pragma HLS STREAM variable=fifo2_collect0_6 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect0_7;
#pragma HLS STREAM variable=fifo2_collect0_7 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect0_8;
#pragma HLS STREAM variable=fifo2_collect0_8 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect0_9;
#pragma HLS STREAM variable=fifo2_collect0_9 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect0_10;
#pragma HLS STREAM variable=fifo2_collect0_10 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect0_11;
#pragma HLS STREAM variable=fifo2_collect0_11 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect0_12;
#pragma HLS STREAM variable=fifo2_collect0_12 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect0_13;
#pragma HLS STREAM variable=fifo2_collect0_13 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect0_14;
#pragma HLS STREAM variable=fifo2_collect0_14 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect1_0;
#pragma HLS STREAM variable=fifo2_collect1_0 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect1_1;
#pragma HLS STREAM variable=fifo2_collect1_1 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect1_2;
#pragma HLS STREAM variable=fifo2_collect1_2 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect1_3;
#pragma HLS STREAM variable=fifo2_collect1_3 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect1_4;
#pragma HLS STREAM variable=fifo2_collect1_4 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect1_5;
#pragma HLS STREAM variable=fifo2_collect1_5 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect1_6;
#pragma HLS STREAM variable=fifo2_collect1_6 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect1_7;
#pragma HLS STREAM variable=fifo2_collect1_7 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect1_8;
#pragma HLS STREAM variable=fifo2_collect1_8 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect1_9;
#pragma HLS STREAM variable=fifo2_collect1_9 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect1_10;
#pragma HLS STREAM variable=fifo2_collect1_10 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect1_11;
#pragma HLS STREAM variable=fifo2_collect1_11 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect1_12;
#pragma HLS STREAM variable=fifo2_collect1_12 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect1_13;
#pragma HLS STREAM variable=fifo2_collect1_13 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect1_14;
#pragma HLS STREAM variable=fifo2_collect1_14 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect2_0;
#pragma HLS STREAM variable=fifo2_collect2_0 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect2_1;
#pragma HLS STREAM variable=fifo2_collect2_1 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect2_2;
#pragma HLS STREAM variable=fifo2_collect2_2 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect2_3;
#pragma HLS STREAM variable=fifo2_collect2_3 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect2_4;
#pragma HLS STREAM variable=fifo2_collect2_4 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect2_5;
#pragma HLS STREAM variable=fifo2_collect2_5 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect2_6;
#pragma HLS STREAM variable=fifo2_collect2_6 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect2_7;
#pragma HLS STREAM variable=fifo2_collect2_7 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect2_8;
#pragma HLS STREAM variable=fifo2_collect2_8 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect2_9;
#pragma HLS STREAM variable=fifo2_collect2_9 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect2_10;
#pragma HLS STREAM variable=fifo2_collect2_10 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect2_11;
#pragma HLS STREAM variable=fifo2_collect2_11 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect2_12;
#pragma HLS STREAM variable=fifo2_collect2_12 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect2_13;
#pragma HLS STREAM variable=fifo2_collect2_13 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect2_14;
#pragma HLS STREAM variable=fifo2_collect2_14 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect3_0;
#pragma HLS STREAM variable=fifo2_collect3_0 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect3_1;
#pragma HLS STREAM variable=fifo2_collect3_1 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect3_2;
#pragma HLS STREAM variable=fifo2_collect3_2 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect3_3;
#pragma HLS STREAM variable=fifo2_collect3_3 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect3_4;
#pragma HLS STREAM variable=fifo2_collect3_4 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect3_5;
#pragma HLS STREAM variable=fifo2_collect3_5 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect3_6;
#pragma HLS STREAM variable=fifo2_collect3_6 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect3_7;
#pragma HLS STREAM variable=fifo2_collect3_7 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect3_8;
#pragma HLS STREAM variable=fifo2_collect3_8 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect3_9;
#pragma HLS STREAM variable=fifo2_collect3_9 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect3_10;
#pragma HLS STREAM variable=fifo2_collect3_10 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect3_11;
#pragma HLS STREAM variable=fifo2_collect3_11 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect3_12;
#pragma HLS STREAM variable=fifo2_collect3_12 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect3_13;
#pragma HLS STREAM variable=fifo2_collect3_13 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect3_14;
#pragma HLS STREAM variable=fifo2_collect3_14 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect4_0;
#pragma HLS STREAM variable=fifo2_collect4_0 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect4_1;
#pragma HLS STREAM variable=fifo2_collect4_1 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect4_2;
#pragma HLS STREAM variable=fifo2_collect4_2 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect4_3;
#pragma HLS STREAM variable=fifo2_collect4_3 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect4_4;
#pragma HLS STREAM variable=fifo2_collect4_4 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect4_5;
#pragma HLS STREAM variable=fifo2_collect4_5 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect4_6;
#pragma HLS STREAM variable=fifo2_collect4_6 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect4_7;
#pragma HLS STREAM variable=fifo2_collect4_7 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect4_8;
#pragma HLS STREAM variable=fifo2_collect4_8 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect4_9;
#pragma HLS STREAM variable=fifo2_collect4_9 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect4_10;
#pragma HLS STREAM variable=fifo2_collect4_10 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect4_11;
#pragma HLS STREAM variable=fifo2_collect4_11 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect4_12;
#pragma HLS STREAM variable=fifo2_collect4_12 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect4_13;
#pragma HLS STREAM variable=fifo2_collect4_13 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect4_14;
#pragma HLS STREAM variable=fifo2_collect4_14 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect5_0;
#pragma HLS STREAM variable=fifo2_collect5_0 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect5_1;
#pragma HLS STREAM variable=fifo2_collect5_1 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect5_2;
#pragma HLS STREAM variable=fifo2_collect5_2 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect5_3;
#pragma HLS STREAM variable=fifo2_collect5_3 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect5_4;
#pragma HLS STREAM variable=fifo2_collect5_4 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect5_5;
#pragma HLS STREAM variable=fifo2_collect5_5 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect5_6;
#pragma HLS STREAM variable=fifo2_collect5_6 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect5_7;
#pragma HLS STREAM variable=fifo2_collect5_7 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect5_8;
#pragma HLS STREAM variable=fifo2_collect5_8 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect5_9;
#pragma HLS STREAM variable=fifo2_collect5_9 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect5_10;
#pragma HLS STREAM variable=fifo2_collect5_10 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect5_11;
#pragma HLS STREAM variable=fifo2_collect5_11 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect5_12;
#pragma HLS STREAM variable=fifo2_collect5_12 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect5_13;
#pragma HLS STREAM variable=fifo2_collect5_13 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect5_14;
#pragma HLS STREAM variable=fifo2_collect5_14 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect6_0;
#pragma HLS STREAM variable=fifo2_collect6_0 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect6_1;
#pragma HLS STREAM variable=fifo2_collect6_1 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect6_2;
#pragma HLS STREAM variable=fifo2_collect6_2 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect6_3;
#pragma HLS STREAM variable=fifo2_collect6_3 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect6_4;
#pragma HLS STREAM variable=fifo2_collect6_4 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect6_5;
#pragma HLS STREAM variable=fifo2_collect6_5 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect6_6;
#pragma HLS STREAM variable=fifo2_collect6_6 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect6_7;
#pragma HLS STREAM variable=fifo2_collect6_7 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect6_8;
#pragma HLS STREAM variable=fifo2_collect6_8 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect6_9;
#pragma HLS STREAM variable=fifo2_collect6_9 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect6_10;
#pragma HLS STREAM variable=fifo2_collect6_10 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect6_11;
#pragma HLS STREAM variable=fifo2_collect6_11 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect6_12;
#pragma HLS STREAM variable=fifo2_collect6_12 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect6_13;
#pragma HLS STREAM variable=fifo2_collect6_13 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect6_14;
#pragma HLS STREAM variable=fifo2_collect6_14 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect7_0;
#pragma HLS STREAM variable=fifo2_collect7_0 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect7_1;
#pragma HLS STREAM variable=fifo2_collect7_1 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect7_2;
#pragma HLS STREAM variable=fifo2_collect7_2 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect7_3;
#pragma HLS STREAM variable=fifo2_collect7_3 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect7_4;
#pragma HLS STREAM variable=fifo2_collect7_4 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect7_5;
#pragma HLS STREAM variable=fifo2_collect7_5 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect7_6;
#pragma HLS STREAM variable=fifo2_collect7_6 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect7_7;
#pragma HLS STREAM variable=fifo2_collect7_7 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect7_8;
#pragma HLS STREAM variable=fifo2_collect7_8 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect7_9;
#pragma HLS STREAM variable=fifo2_collect7_9 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect7_10;
#pragma HLS STREAM variable=fifo2_collect7_10 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect7_11;
#pragma HLS STREAM variable=fifo2_collect7_11 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect7_12;
#pragma HLS STREAM variable=fifo2_collect7_12 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect7_13;
#pragma HLS STREAM variable=fifo2_collect7_13 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect7_14;
#pragma HLS STREAM variable=fifo2_collect7_14 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect8_0;
#pragma HLS STREAM variable=fifo2_collect8_0 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect8_1;
#pragma HLS STREAM variable=fifo2_collect8_1 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect8_2;
#pragma HLS STREAM variable=fifo2_collect8_2 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect8_3;
#pragma HLS STREAM variable=fifo2_collect8_3 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect8_4;
#pragma HLS STREAM variable=fifo2_collect8_4 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect8_5;
#pragma HLS STREAM variable=fifo2_collect8_5 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect8_6;
#pragma HLS STREAM variable=fifo2_collect8_6 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect8_7;
#pragma HLS STREAM variable=fifo2_collect8_7 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect8_8;
#pragma HLS STREAM variable=fifo2_collect8_8 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect8_9;
#pragma HLS STREAM variable=fifo2_collect8_9 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect8_10;
#pragma HLS STREAM variable=fifo2_collect8_10 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect8_11;
#pragma HLS STREAM variable=fifo2_collect8_11 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect8_12;
#pragma HLS STREAM variable=fifo2_collect8_12 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect8_13;
#pragma HLS STREAM variable=fifo2_collect8_13 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect8_14;
#pragma HLS STREAM variable=fifo2_collect8_14 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect9_0;
#pragma HLS STREAM variable=fifo2_collect9_0 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect9_1;
#pragma HLS STREAM variable=fifo2_collect9_1 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect9_2;
#pragma HLS STREAM variable=fifo2_collect9_2 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect9_3;
#pragma HLS STREAM variable=fifo2_collect9_3 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect9_4;
#pragma HLS STREAM variable=fifo2_collect9_4 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect9_5;
#pragma HLS STREAM variable=fifo2_collect9_5 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect9_6;
#pragma HLS STREAM variable=fifo2_collect9_6 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect9_7;
#pragma HLS STREAM variable=fifo2_collect9_7 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect9_8;
#pragma HLS STREAM variable=fifo2_collect9_8 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect9_9;
#pragma HLS STREAM variable=fifo2_collect9_9 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect9_10;
#pragma HLS STREAM variable=fifo2_collect9_10 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect9_11;
#pragma HLS STREAM variable=fifo2_collect9_11 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect9_12;
#pragma HLS STREAM variable=fifo2_collect9_12 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect9_13;
#pragma HLS STREAM variable=fifo2_collect9_13 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect9_14;
#pragma HLS STREAM variable=fifo2_collect9_14 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect10_0;
#pragma HLS STREAM variable=fifo2_collect10_0 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect10_1;
#pragma HLS STREAM variable=fifo2_collect10_1 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect10_2;
#pragma HLS STREAM variable=fifo2_collect10_2 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect10_3;
#pragma HLS STREAM variable=fifo2_collect10_3 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect10_4;
#pragma HLS STREAM variable=fifo2_collect10_4 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect10_5;
#pragma HLS STREAM variable=fifo2_collect10_5 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect10_6;
#pragma HLS STREAM variable=fifo2_collect10_6 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect10_7;
#pragma HLS STREAM variable=fifo2_collect10_7 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect10_8;
#pragma HLS STREAM variable=fifo2_collect10_8 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect10_9;
#pragma HLS STREAM variable=fifo2_collect10_9 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect10_10;
#pragma HLS STREAM variable=fifo2_collect10_10 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect10_11;
#pragma HLS STREAM variable=fifo2_collect10_11 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect10_12;
#pragma HLS STREAM variable=fifo2_collect10_12 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect10_13;
#pragma HLS STREAM variable=fifo2_collect10_13 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect10_14;
#pragma HLS STREAM variable=fifo2_collect10_14 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect11_0;
#pragma HLS STREAM variable=fifo2_collect11_0 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect11_1;
#pragma HLS STREAM variable=fifo2_collect11_1 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect11_2;
#pragma HLS STREAM variable=fifo2_collect11_2 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect11_3;
#pragma HLS STREAM variable=fifo2_collect11_3 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect11_4;
#pragma HLS STREAM variable=fifo2_collect11_4 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect11_5;
#pragma HLS STREAM variable=fifo2_collect11_5 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect11_6;
#pragma HLS STREAM variable=fifo2_collect11_6 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect11_7;
#pragma HLS STREAM variable=fifo2_collect11_7 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect11_8;
#pragma HLS STREAM variable=fifo2_collect11_8 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect11_9;
#pragma HLS STREAM variable=fifo2_collect11_9 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect11_10;
#pragma HLS STREAM variable=fifo2_collect11_10 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect11_11;
#pragma HLS STREAM variable=fifo2_collect11_11 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect11_12;
#pragma HLS STREAM variable=fifo2_collect11_12 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect11_13;
#pragma HLS STREAM variable=fifo2_collect11_13 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect11_14;
#pragma HLS STREAM variable=fifo2_collect11_14 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect12_0;
#pragma HLS STREAM variable=fifo2_collect12_0 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect12_1;
#pragma HLS STREAM variable=fifo2_collect12_1 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect12_2;
#pragma HLS STREAM variable=fifo2_collect12_2 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect12_3;
#pragma HLS STREAM variable=fifo2_collect12_3 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect12_4;
#pragma HLS STREAM variable=fifo2_collect12_4 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect12_5;
#pragma HLS STREAM variable=fifo2_collect12_5 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect12_6;
#pragma HLS STREAM variable=fifo2_collect12_6 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect12_7;
#pragma HLS STREAM variable=fifo2_collect12_7 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect12_8;
#pragma HLS STREAM variable=fifo2_collect12_8 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect12_9;
#pragma HLS STREAM variable=fifo2_collect12_9 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect12_10;
#pragma HLS STREAM variable=fifo2_collect12_10 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect12_11;
#pragma HLS STREAM variable=fifo2_collect12_11 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect12_12;
#pragma HLS STREAM variable=fifo2_collect12_12 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect12_13;
#pragma HLS STREAM variable=fifo2_collect12_13 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect12_14;
#pragma HLS STREAM variable=fifo2_collect12_14 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect13_0;
#pragma HLS STREAM variable=fifo2_collect13_0 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect13_1;
#pragma HLS STREAM variable=fifo2_collect13_1 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect13_2;
#pragma HLS STREAM variable=fifo2_collect13_2 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect13_3;
#pragma HLS STREAM variable=fifo2_collect13_3 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect13_4;
#pragma HLS STREAM variable=fifo2_collect13_4 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect13_5;
#pragma HLS STREAM variable=fifo2_collect13_5 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect13_6;
#pragma HLS STREAM variable=fifo2_collect13_6 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect13_7;
#pragma HLS STREAM variable=fifo2_collect13_7 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect13_8;
#pragma HLS STREAM variable=fifo2_collect13_8 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect13_9;
#pragma HLS STREAM variable=fifo2_collect13_9 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect13_10;
#pragma HLS STREAM variable=fifo2_collect13_10 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect13_11;
#pragma HLS STREAM variable=fifo2_collect13_11 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect13_12;
#pragma HLS STREAM variable=fifo2_collect13_12 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect13_13;
#pragma HLS STREAM variable=fifo2_collect13_13 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect13_14;
#pragma HLS STREAM variable=fifo2_collect13_14 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect14_0;
#pragma HLS STREAM variable=fifo2_collect14_0 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect14_1;
#pragma HLS STREAM variable=fifo2_collect14_1 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect14_2;
#pragma HLS STREAM variable=fifo2_collect14_2 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect14_3;
#pragma HLS STREAM variable=fifo2_collect14_3 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect14_4;
#pragma HLS STREAM variable=fifo2_collect14_4 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect14_5;
#pragma HLS STREAM variable=fifo2_collect14_5 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect14_6;
#pragma HLS STREAM variable=fifo2_collect14_6 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect14_7;
#pragma HLS STREAM variable=fifo2_collect14_7 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect14_8;
#pragma HLS STREAM variable=fifo2_collect14_8 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect14_9;
#pragma HLS STREAM variable=fifo2_collect14_9 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect14_10;
#pragma HLS STREAM variable=fifo2_collect14_10 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect14_11;
#pragma HLS STREAM variable=fifo2_collect14_11 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect14_12;
#pragma HLS STREAM variable=fifo2_collect14_12 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect14_13;
#pragma HLS STREAM variable=fifo2_collect14_13 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect14_14;
#pragma HLS STREAM variable=fifo2_collect14_14 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect15_0;
#pragma HLS STREAM variable=fifo2_collect15_0 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect15_1;
#pragma HLS STREAM variable=fifo2_collect15_1 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect15_2;
#pragma HLS STREAM variable=fifo2_collect15_2 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect15_3;
#pragma HLS STREAM variable=fifo2_collect15_3 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect15_4;
#pragma HLS STREAM variable=fifo2_collect15_4 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect15_5;
#pragma HLS STREAM variable=fifo2_collect15_5 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect15_6;
#pragma HLS STREAM variable=fifo2_collect15_6 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect15_7;
#pragma HLS STREAM variable=fifo2_collect15_7 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect15_8;
#pragma HLS STREAM variable=fifo2_collect15_8 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect15_9;
#pragma HLS STREAM variable=fifo2_collect15_9 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect15_10;
#pragma HLS STREAM variable=fifo2_collect15_10 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect15_11;
#pragma HLS STREAM variable=fifo2_collect15_11 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect15_12;
#pragma HLS STREAM variable=fifo2_collect15_12 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect15_13;
#pragma HLS STREAM variable=fifo2_collect15_13 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect15_14;
#pragma HLS STREAM variable=fifo2_collect15_14 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect16_0;
#pragma HLS STREAM variable=fifo2_collect16_0 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect16_1;
#pragma HLS STREAM variable=fifo2_collect16_1 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect16_2;
#pragma HLS STREAM variable=fifo2_collect16_2 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect16_3;
#pragma HLS STREAM variable=fifo2_collect16_3 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect16_4;
#pragma HLS STREAM variable=fifo2_collect16_4 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect16_5;
#pragma HLS STREAM variable=fifo2_collect16_5 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect16_6;
#pragma HLS STREAM variable=fifo2_collect16_6 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect16_7;
#pragma HLS STREAM variable=fifo2_collect16_7 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect16_8;
#pragma HLS STREAM variable=fifo2_collect16_8 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect16_9;
#pragma HLS STREAM variable=fifo2_collect16_9 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect16_10;
#pragma HLS STREAM variable=fifo2_collect16_10 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect16_11;
#pragma HLS STREAM variable=fifo2_collect16_11 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect16_12;
#pragma HLS STREAM variable=fifo2_collect16_12 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect16_13;
#pragma HLS STREAM variable=fifo2_collect16_13 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect16_14;
#pragma HLS STREAM variable=fifo2_collect16_14 depth=2
  stream<U1_Data0TransferChannelType> fifo0_transfer0;
#pragma HLS STREAM variable=fifo0_transfer0 depth=2
  stream<U1_Data0TransferChannelType> fifo0_transfer1;
#pragma HLS STREAM variable=fifo0_transfer1 depth=2
  stream<U1_Data0TransferChannelType> fifo0_transfer2;
#pragma HLS STREAM variable=fifo0_transfer2 depth=2
  stream<U1_Data0TransferChannelType> fifo0_transfer3;
#pragma HLS STREAM variable=fifo0_transfer3 depth=2
  stream<U1_Data0TransferChannelType> fifo0_transfer4;
#pragma HLS STREAM variable=fifo0_transfer4 depth=2
  stream<U1_Data0TransferChannelType> fifo0_transfer5;
#pragma HLS STREAM variable=fifo0_transfer5 depth=2
  stream<U1_Data0TransferChannelType> fifo0_transfer6;
#pragma HLS STREAM variable=fifo0_transfer6 depth=2
  stream<U1_Data0TransferChannelType> fifo0_transfer7;
#pragma HLS STREAM variable=fifo0_transfer7 depth=2
  stream<U1_Data0TransferChannelType> fifo0_transfer8;
#pragma HLS STREAM variable=fifo0_transfer8 depth=2
  stream<U1_Data0TransferChannelType> fifo0_transfer9;
#pragma HLS STREAM variable=fifo0_transfer9 depth=2
  stream<U1_Data0TransferChannelType> fifo0_transfer10;
#pragma HLS STREAM variable=fifo0_transfer10 depth=2
  stream<U1_Data0TransferChannelType> fifo0_transfer11;
#pragma HLS STREAM variable=fifo0_transfer11 depth=2
  stream<U1_Data0TransferChannelType> fifo0_transfer12;
#pragma HLS STREAM variable=fifo0_transfer12 depth=2
  stream<U1_Data0TransferChannelType> fifo0_transfer13;
#pragma HLS STREAM variable=fifo0_transfer13 depth=2
  stream<U1_Data0TransferChannelType> fifo0_transfer14;
#pragma HLS STREAM variable=fifo0_transfer14 depth=2
  stream<U1_Data1TransferChannelType> fifo1_transfer0;
#pragma HLS STREAM variable=fifo1_transfer0 depth=2
  stream<U1_Data1TransferChannelType> fifo1_transfer1;
#pragma HLS STREAM variable=fifo1_transfer1 depth=2
  stream<U1_Data1TransferChannelType> fifo1_transfer2;
#pragma HLS STREAM variable=fifo1_transfer2 depth=2
  stream<U1_Data1TransferChannelType> fifo1_transfer3;
#pragma HLS STREAM variable=fifo1_transfer3 depth=2
  stream<U1_Data1TransferChannelType> fifo1_transfer4;
#pragma HLS STREAM variable=fifo1_transfer4 depth=2
  stream<U1_Data1TransferChannelType> fifo1_transfer5;
#pragma HLS STREAM variable=fifo1_transfer5 depth=2
  stream<U1_Data1TransferChannelType> fifo1_transfer6;
#pragma HLS STREAM variable=fifo1_transfer6 depth=2
  stream<U1_Data1TransferChannelType> fifo1_transfer7;
#pragma HLS STREAM variable=fifo1_transfer7 depth=2
  stream<U1_Data1TransferChannelType> fifo1_transfer8;
#pragma HLS STREAM variable=fifo1_transfer8 depth=2
  stream<U1_Data1TransferChannelType> fifo1_transfer9;
#pragma HLS STREAM variable=fifo1_transfer9 depth=2
  stream<U1_Data1TransferChannelType> fifo1_transfer10;
#pragma HLS STREAM variable=fifo1_transfer10 depth=2
  stream<U1_Data1TransferChannelType> fifo1_transfer11;
#pragma HLS STREAM variable=fifo1_transfer11 depth=2
  stream<U1_Data1TransferChannelType> fifo1_transfer12;
#pragma HLS STREAM variable=fifo1_transfer12 depth=2
  stream<U1_Data1TransferChannelType> fifo1_transfer13;
#pragma HLS STREAM variable=fifo1_transfer13 depth=2
  stream<U1_Data1TransferChannelType> fifo1_transfer14;
#pragma HLS STREAM variable=fifo1_transfer14 depth=2
  stream<U1_Data1TransferChannelType> fifo1_transfer15;
#pragma HLS STREAM variable=fifo1_transfer15 depth=2
  stream<U1_Data1TransferChannelType> fifo1_transfer16;
#pragma HLS STREAM variable=fifo1_transfer16 depth=2
  stream<U1_Data2TransferChannelType> fifo2_transfer0;
#pragma HLS STREAM variable=fifo2_transfer0 depth=2
  stream<U1_Data2TransferChannelType> fifo2_transfer1;
#pragma HLS STREAM variable=fifo2_transfer1 depth=2
  stream<U1_Data2TransferChannelType> fifo2_transfer2;
#pragma HLS STREAM variable=fifo2_transfer2 depth=2
  stream<U1_Data2TransferChannelType> fifo2_transfer3;
#pragma HLS STREAM variable=fifo2_transfer3 depth=2
  stream<U1_Data2TransferChannelType> fifo2_transfer4;
#pragma HLS STREAM variable=fifo2_transfer4 depth=2
  stream<U1_Data2TransferChannelType> fifo2_transfer5;
#pragma HLS STREAM variable=fifo2_transfer5 depth=2
  stream<U1_Data2TransferChannelType> fifo2_transfer6;
#pragma HLS STREAM variable=fifo2_transfer6 depth=2
  stream<U1_Data2TransferChannelType> fifo2_transfer7;
#pragma HLS STREAM variable=fifo2_transfer7 depth=2
  stream<U1_Data2TransferChannelType> fifo2_transfer8;
#pragma HLS STREAM variable=fifo2_transfer8 depth=2
  stream<U1_Data2TransferChannelType> fifo2_transfer9;
#pragma HLS STREAM variable=fifo2_transfer9 depth=2
  stream<U1_Data2TransferChannelType> fifo2_transfer10;
#pragma HLS STREAM variable=fifo2_transfer10 depth=2
  stream<U1_Data2TransferChannelType> fifo2_transfer11;
#pragma HLS STREAM variable=fifo2_transfer11 depth=2
  stream<U1_Data2TransferChannelType> fifo2_transfer12;
#pragma HLS STREAM variable=fifo2_transfer12 depth=2
  stream<U1_Data2TransferChannelType> fifo2_transfer13;
#pragma HLS STREAM variable=fifo2_transfer13 depth=2
  stream<U1_Data2TransferChannelType> fifo2_transfer14;
#pragma HLS STREAM variable=fifo2_transfer14 depth=2
  stream<ap_uint<U1_DATA0_WIDTH * U1_DATA0_FC_SIMD_FACTOR> > fifo0_shim;
#pragma HLS STREAM variable=fifo0_shim depth=2
  stream<ap_uint<U1_DATA1_WIDTH * U1_DATA1_FC_SIMD_FACTOR> > fifo1_shim;
#pragma HLS STREAM variable=fifo1_shim depth=2
  stream<ap_uint<U1_DATA2_WIDTH * U1_DATA2_FC_SIMD_FACTOR> > fifo2_shim;
#pragma HLS STREAM variable=fifo2_shim depth=2

  stream<uint> fifo_DataFeed0Head_config_out0;
#pragma HLS STREAM variable=fifo_DataFeed0Head_config_out0 depth=16
  stream<uint> fifo_DataFeed0Head_config_out1;
#pragma HLS STREAM variable=fifo_DataFeed0Head_config_out1 depth=16
  stream<uint> fifo_DataFeed1Head_config_out0;
#pragma HLS STREAM variable=fifo_DataFeed1Head_config_out0 depth=16

  stream<uint> fifo_DataFeed0Engine0_config_out0;
  stream<uint> fifo_DataFeed0Engine0_config_out1;
#pragma HLS STREAM variable=fifo_DataFeed0Engine0_config_out0 depth=16
#pragma HLS STREAM variable=fifo_DataFeed0Engine0_config_out1 depth=16
  stream<uint> fifo_DataFeed0Engine1_config_out0;
  stream<uint> fifo_DataFeed0Engine1_config_out1;
#pragma HLS STREAM variable=fifo_DataFeed0Engine1_config_out0 depth=16
#pragma HLS STREAM variable=fifo_DataFeed0Engine1_config_out1 depth=16
  stream<uint> fifo_DataFeed0Engine2_config_out0;
  stream<uint> fifo_DataFeed0Engine2_config_out1;
#pragma HLS STREAM variable=fifo_DataFeed0Engine2_config_out0 depth=16
#pragma HLS STREAM variable=fifo_DataFeed0Engine2_config_out1 depth=16
  stream<uint> fifo_DataFeed0Engine3_config_out0;
  stream<uint> fifo_DataFeed0Engine3_config_out1;
#pragma HLS STREAM variable=fifo_DataFeed0Engine3_config_out0 depth=16
#pragma HLS STREAM variable=fifo_DataFeed0Engine3_config_out1 depth=16
  stream<uint> fifo_DataFeed0Engine4_config_out0;
  stream<uint> fifo_DataFeed0Engine4_config_out1;
#pragma HLS STREAM variable=fifo_DataFeed0Engine4_config_out0 depth=16
#pragma HLS STREAM variable=fifo_DataFeed0Engine4_config_out1 depth=16
  stream<uint> fifo_DataFeed0Engine5_config_out0;
  stream<uint> fifo_DataFeed0Engine5_config_out1;
#pragma HLS STREAM variable=fifo_DataFeed0Engine5_config_out0 depth=16
#pragma HLS STREAM variable=fifo_DataFeed0Engine5_config_out1 depth=16
  stream<uint> fifo_DataFeed0Engine6_config_out0;
  stream<uint> fifo_DataFeed0Engine6_config_out1;
#pragma HLS STREAM variable=fifo_DataFeed0Engine6_config_out0 depth=16
#pragma HLS STREAM variable=fifo_DataFeed0Engine6_config_out1 depth=16
  stream<uint> fifo_DataFeed0Engine7_config_out0;
  stream<uint> fifo_DataFeed0Engine7_config_out1;
#pragma HLS STREAM variable=fifo_DataFeed0Engine7_config_out0 depth=16
#pragma HLS STREAM variable=fifo_DataFeed0Engine7_config_out1 depth=16
  stream<uint> fifo_DataFeed0Engine8_config_out0;
  stream<uint> fifo_DataFeed0Engine8_config_out1;
#pragma HLS STREAM variable=fifo_DataFeed0Engine8_config_out0 depth=16
#pragma HLS STREAM variable=fifo_DataFeed0Engine8_config_out1 depth=16
  stream<uint> fifo_DataFeed0Engine9_config_out0;
  stream<uint> fifo_DataFeed0Engine9_config_out1;
#pragma HLS STREAM variable=fifo_DataFeed0Engine9_config_out0 depth=16
#pragma HLS STREAM variable=fifo_DataFeed0Engine9_config_out1 depth=16
  stream<uint> fifo_DataFeed0Engine10_config_out0;
  stream<uint> fifo_DataFeed0Engine10_config_out1;
#pragma HLS STREAM variable=fifo_DataFeed0Engine10_config_out0 depth=16
#pragma HLS STREAM variable=fifo_DataFeed0Engine10_config_out1 depth=16
  stream<uint> fifo_DataFeed0Engine11_config_out0;
  stream<uint> fifo_DataFeed0Engine11_config_out1;
#pragma HLS STREAM variable=fifo_DataFeed0Engine11_config_out0 depth=16
#pragma HLS STREAM variable=fifo_DataFeed0Engine11_config_out1 depth=16
  stream<uint> fifo_DataFeed0Engine12_config_out0;
  stream<uint> fifo_DataFeed0Engine12_config_out1;
#pragma HLS STREAM variable=fifo_DataFeed0Engine12_config_out0 depth=16
#pragma HLS STREAM variable=fifo_DataFeed0Engine12_config_out1 depth=16
  stream<uint> fifo_DataFeed0Engine13_config_out1;
#pragma HLS STREAM variable=fifo_DataFeed0Engine13_config_out1 depth=16

  stream<uint> fifo_DataFeed1Engine0_config_out0;
#pragma HLS STREAM variable=fifo_DataFeed1Engine0_config_out0 depth=16
  stream<uint> fifo_DataFeed1Engine1_config_out0;
#pragma HLS STREAM variable=fifo_DataFeed1Engine1_config_out0 depth=16
  stream<uint> fifo_DataFeed1Engine2_config_out0;
#pragma HLS STREAM variable=fifo_DataFeed1Engine2_config_out0 depth=16
  stream<uint> fifo_DataFeed1Engine3_config_out0;
#pragma HLS STREAM variable=fifo_DataFeed1Engine3_config_out0 depth=16
  stream<uint> fifo_DataFeed1Engine4_config_out0;
#pragma HLS STREAM variable=fifo_DataFeed1Engine4_config_out0 depth=16
  stream<uint> fifo_DataFeed1Engine5_config_out0;
#pragma HLS STREAM variable=fifo_DataFeed1Engine5_config_out0 depth=16
  stream<uint> fifo_DataFeed1Engine6_config_out0;
#pragma HLS STREAM variable=fifo_DataFeed1Engine6_config_out0 depth=16
  stream<uint> fifo_DataFeed1Engine7_config_out0;
#pragma HLS STREAM variable=fifo_DataFeed1Engine7_config_out0 depth=16
  stream<uint> fifo_DataFeed1Engine8_config_out0;
#pragma HLS STREAM variable=fifo_DataFeed1Engine8_config_out0 depth=16
  stream<uint> fifo_DataFeed1Engine9_config_out0;
#pragma HLS STREAM variable=fifo_DataFeed1Engine9_config_out0 depth=16
  stream<uint> fifo_DataFeed1Engine10_config_out0;
#pragma HLS STREAM variable=fifo_DataFeed1Engine10_config_out0 depth=16
  stream<uint> fifo_DataFeed1Engine11_config_out0;
#pragma HLS STREAM variable=fifo_DataFeed1Engine11_config_out0 depth=16
  stream<uint> fifo_DataFeed1Engine12_config_out0;
#pragma HLS STREAM variable=fifo_DataFeed1Engine12_config_out0 depth=16
  stream<uint> fifo_DataFeed1Engine13_config_out0;
#pragma HLS STREAM variable=fifo_DataFeed1Engine13_config_out0 depth=16
  stream<uint> fifo_DataFeed1Engine14_config_out0;
#pragma HLS STREAM variable=fifo_DataFeed1Engine14_config_out0 depth=16

  stream<uint> fifo_DataCollect2Engine0_config_out;
#pragma HLS STREAM variable=fifo_DataCollect2Engine0_config_out depth=16
  stream<uint> fifo_DataCollect2Engine1_config_out;
#pragma HLS STREAM variable=fifo_DataCollect2Engine1_config_out depth=16
  stream<uint> fifo_DataCollect2Engine2_config_out;
#pragma HLS STREAM variable=fifo_DataCollect2Engine2_config_out depth=16
  stream<uint> fifo_DataCollect2Engine3_config_out;
#pragma HLS STREAM variable=fifo_DataCollect2Engine3_config_out depth=16
  stream<uint> fifo_DataCollect2Engine4_config_out;
#pragma HLS STREAM variable=fifo_DataCollect2Engine4_config_out depth=16
  stream<uint> fifo_DataCollect2Engine5_config_out;
#pragma HLS STREAM variable=fifo_DataCollect2Engine5_config_out depth=16
  stream<uint> fifo_DataCollect2Engine6_config_out;
#pragma HLS STREAM variable=fifo_DataCollect2Engine6_config_out depth=16
  stream<uint> fifo_DataCollect2Engine7_config_out;
#pragma HLS STREAM variable=fifo_DataCollect2Engine7_config_out depth=16
  stream<uint> fifo_DataCollect2Engine8_config_out;
#pragma HLS STREAM variable=fifo_DataCollect2Engine8_config_out depth=16
  stream<uint> fifo_DataCollect2Engine9_config_out;
#pragma HLS STREAM variable=fifo_DataCollect2Engine9_config_out depth=16
  stream<uint> fifo_DataCollect2Engine10_config_out;
#pragma HLS STREAM variable=fifo_DataCollect2Engine10_config_out depth=16
  stream<uint> fifo_DataCollect2Engine11_config_out;
#pragma HLS STREAM variable=fifo_DataCollect2Engine11_config_out depth=16
  stream<uint> fifo_DataCollect2Engine12_config_out;
#pragma HLS STREAM variable=fifo_DataCollect2Engine12_config_out depth=16
  stream<uint> fifo_DataCollect2Engine13_config_out;
#pragma HLS STREAM variable=fifo_DataCollect2Engine13_config_out depth=16

  stream<uint> fifo_PE0_0_op0_config_out;
  stream<uint> fifo_PE0_0_op1_config_out;
  stream<uint> fifo_PE0_0_compute_config_out;
  stream<uint> fifo_PE0_0_res_config_out;
#pragma HLS STREAM variable=fifo_PE0_0_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_0_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_0_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_0_res_config_out depth=2
  stream<uint> fifo_PE0_1_op0_config_out;
  stream<uint> fifo_PE0_1_op1_config_out;
  stream<uint> fifo_PE0_1_compute_config_out;
  stream<uint> fifo_PE0_1_res_config_out;
#pragma HLS STREAM variable=fifo_PE0_1_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_1_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_1_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_1_res_config_out depth=2
  stream<uint> fifo_PE0_2_op0_config_out;
  stream<uint> fifo_PE0_2_op1_config_out;
  stream<uint> fifo_PE0_2_compute_config_out;
  stream<uint> fifo_PE0_2_res_config_out;
#pragma HLS STREAM variable=fifo_PE0_2_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_2_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_2_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_2_res_config_out depth=2
  stream<uint> fifo_PE0_3_op0_config_out;
  stream<uint> fifo_PE0_3_op1_config_out;
  stream<uint> fifo_PE0_3_compute_config_out;
  stream<uint> fifo_PE0_3_res_config_out;
#pragma HLS STREAM variable=fifo_PE0_3_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_3_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_3_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_3_res_config_out depth=2
  stream<uint> fifo_PE0_4_op0_config_out;
  stream<uint> fifo_PE0_4_op1_config_out;
  stream<uint> fifo_PE0_4_compute_config_out;
  stream<uint> fifo_PE0_4_res_config_out;
#pragma HLS STREAM variable=fifo_PE0_4_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_4_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_4_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_4_res_config_out depth=2
  stream<uint> fifo_PE0_5_op0_config_out;
  stream<uint> fifo_PE0_5_op1_config_out;
  stream<uint> fifo_PE0_5_compute_config_out;
  stream<uint> fifo_PE0_5_res_config_out;
#pragma HLS STREAM variable=fifo_PE0_5_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_5_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_5_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_5_res_config_out depth=2
  stream<uint> fifo_PE0_6_op0_config_out;
  stream<uint> fifo_PE0_6_op1_config_out;
  stream<uint> fifo_PE0_6_compute_config_out;
  stream<uint> fifo_PE0_6_res_config_out;
#pragma HLS STREAM variable=fifo_PE0_6_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_6_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_6_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_6_res_config_out depth=2
  stream<uint> fifo_PE0_7_op0_config_out;
  stream<uint> fifo_PE0_7_op1_config_out;
  stream<uint> fifo_PE0_7_compute_config_out;
  stream<uint> fifo_PE0_7_res_config_out;
#pragma HLS STREAM variable=fifo_PE0_7_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_7_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_7_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_7_res_config_out depth=2
  stream<uint> fifo_PE0_8_op0_config_out;
  stream<uint> fifo_PE0_8_op1_config_out;
  stream<uint> fifo_PE0_8_compute_config_out;
  stream<uint> fifo_PE0_8_res_config_out;
#pragma HLS STREAM variable=fifo_PE0_8_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_8_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_8_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_8_res_config_out depth=2
  stream<uint> fifo_PE0_9_op0_config_out;
  stream<uint> fifo_PE0_9_op1_config_out;
  stream<uint> fifo_PE0_9_compute_config_out;
  stream<uint> fifo_PE0_9_res_config_out;
#pragma HLS STREAM variable=fifo_PE0_9_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_9_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_9_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_9_res_config_out depth=2
  stream<uint> fifo_PE0_10_op0_config_out;
  stream<uint> fifo_PE0_10_op1_config_out;
  stream<uint> fifo_PE0_10_compute_config_out;
  stream<uint> fifo_PE0_10_res_config_out;
#pragma HLS STREAM variable=fifo_PE0_10_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_10_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_10_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_10_res_config_out depth=2
  stream<uint> fifo_PE0_11_op0_config_out;
  stream<uint> fifo_PE0_11_op1_config_out;
  stream<uint> fifo_PE0_11_compute_config_out;
  stream<uint> fifo_PE0_11_res_config_out;
#pragma HLS STREAM variable=fifo_PE0_11_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_11_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_11_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_11_res_config_out depth=2
  stream<uint> fifo_PE0_12_op0_config_out;
  stream<uint> fifo_PE0_12_op1_config_out;
  stream<uint> fifo_PE0_12_compute_config_out;
  stream<uint> fifo_PE0_12_res_config_out;
#pragma HLS STREAM variable=fifo_PE0_12_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_12_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_12_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_12_res_config_out depth=2
  stream<uint> fifo_PE0_13_op0_config_out;
  stream<uint> fifo_PE0_13_op1_config_out;
  stream<uint> fifo_PE0_13_compute_config_out;
  stream<uint> fifo_PE0_13_res_config_out;
#pragma HLS STREAM variable=fifo_PE0_13_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_13_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_13_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_13_res_config_out depth=2
  stream<uint> fifo_PE1_0_op0_config_out;
  stream<uint> fifo_PE1_0_op1_config_out;
  stream<uint> fifo_PE1_0_compute_config_out;
  stream<uint> fifo_PE1_0_res_config_out;
#pragma HLS STREAM variable=fifo_PE1_0_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_0_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_0_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_0_res_config_out depth=2
  stream<uint> fifo_PE1_1_op0_config_out;
  stream<uint> fifo_PE1_1_op1_config_out;
  stream<uint> fifo_PE1_1_compute_config_out;
  stream<uint> fifo_PE1_1_res_config_out;
#pragma HLS STREAM variable=fifo_PE1_1_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_1_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_1_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_1_res_config_out depth=2
  stream<uint> fifo_PE1_2_op0_config_out;
  stream<uint> fifo_PE1_2_op1_config_out;
  stream<uint> fifo_PE1_2_compute_config_out;
  stream<uint> fifo_PE1_2_res_config_out;
#pragma HLS STREAM variable=fifo_PE1_2_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_2_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_2_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_2_res_config_out depth=2
  stream<uint> fifo_PE1_3_op0_config_out;
  stream<uint> fifo_PE1_3_op1_config_out;
  stream<uint> fifo_PE1_3_compute_config_out;
  stream<uint> fifo_PE1_3_res_config_out;
#pragma HLS STREAM variable=fifo_PE1_3_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_3_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_3_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_3_res_config_out depth=2
  stream<uint> fifo_PE1_4_op0_config_out;
  stream<uint> fifo_PE1_4_op1_config_out;
  stream<uint> fifo_PE1_4_compute_config_out;
  stream<uint> fifo_PE1_4_res_config_out;
#pragma HLS STREAM variable=fifo_PE1_4_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_4_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_4_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_4_res_config_out depth=2
  stream<uint> fifo_PE1_5_op0_config_out;
  stream<uint> fifo_PE1_5_op1_config_out;
  stream<uint> fifo_PE1_5_compute_config_out;
  stream<uint> fifo_PE1_5_res_config_out;
#pragma HLS STREAM variable=fifo_PE1_5_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_5_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_5_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_5_res_config_out depth=2
  stream<uint> fifo_PE1_6_op0_config_out;
  stream<uint> fifo_PE1_6_op1_config_out;
  stream<uint> fifo_PE1_6_compute_config_out;
  stream<uint> fifo_PE1_6_res_config_out;
#pragma HLS STREAM variable=fifo_PE1_6_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_6_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_6_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_6_res_config_out depth=2
  stream<uint> fifo_PE1_7_op0_config_out;
  stream<uint> fifo_PE1_7_op1_config_out;
  stream<uint> fifo_PE1_7_compute_config_out;
  stream<uint> fifo_PE1_7_res_config_out;
#pragma HLS STREAM variable=fifo_PE1_7_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_7_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_7_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_7_res_config_out depth=2
  stream<uint> fifo_PE1_8_op0_config_out;
  stream<uint> fifo_PE1_8_op1_config_out;
  stream<uint> fifo_PE1_8_compute_config_out;
  stream<uint> fifo_PE1_8_res_config_out;
#pragma HLS STREAM variable=fifo_PE1_8_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_8_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_8_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_8_res_config_out depth=2
  stream<uint> fifo_PE1_9_op0_config_out;
  stream<uint> fifo_PE1_9_op1_config_out;
  stream<uint> fifo_PE1_9_compute_config_out;
  stream<uint> fifo_PE1_9_res_config_out;
#pragma HLS STREAM variable=fifo_PE1_9_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_9_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_9_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_9_res_config_out depth=2
  stream<uint> fifo_PE1_10_op0_config_out;
  stream<uint> fifo_PE1_10_op1_config_out;
  stream<uint> fifo_PE1_10_compute_config_out;
  stream<uint> fifo_PE1_10_res_config_out;
#pragma HLS STREAM variable=fifo_PE1_10_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_10_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_10_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_10_res_config_out depth=2
  stream<uint> fifo_PE1_11_op0_config_out;
  stream<uint> fifo_PE1_11_op1_config_out;
  stream<uint> fifo_PE1_11_compute_config_out;
  stream<uint> fifo_PE1_11_res_config_out;
#pragma HLS STREAM variable=fifo_PE1_11_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_11_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_11_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_11_res_config_out depth=2
  stream<uint> fifo_PE1_12_op0_config_out;
  stream<uint> fifo_PE1_12_op1_config_out;
  stream<uint> fifo_PE1_12_compute_config_out;
  stream<uint> fifo_PE1_12_res_config_out;
#pragma HLS STREAM variable=fifo_PE1_12_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_12_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_12_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_12_res_config_out depth=2
  stream<uint> fifo_PE1_13_op0_config_out;
  stream<uint> fifo_PE1_13_op1_config_out;
  stream<uint> fifo_PE1_13_compute_config_out;
  stream<uint> fifo_PE1_13_res_config_out;
#pragma HLS STREAM variable=fifo_PE1_13_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_13_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_13_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_13_res_config_out depth=2
  stream<uint> fifo_PE2_0_op0_config_out;
  stream<uint> fifo_PE2_0_op1_config_out;
  stream<uint> fifo_PE2_0_compute_config_out;
  stream<uint> fifo_PE2_0_res_config_out;
#pragma HLS STREAM variable=fifo_PE2_0_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_0_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_0_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_0_res_config_out depth=2
  stream<uint> fifo_PE2_1_op0_config_out;
  stream<uint> fifo_PE2_1_op1_config_out;
  stream<uint> fifo_PE2_1_compute_config_out;
  stream<uint> fifo_PE2_1_res_config_out;
#pragma HLS STREAM variable=fifo_PE2_1_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_1_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_1_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_1_res_config_out depth=2
  stream<uint> fifo_PE2_2_op0_config_out;
  stream<uint> fifo_PE2_2_op1_config_out;
  stream<uint> fifo_PE2_2_compute_config_out;
  stream<uint> fifo_PE2_2_res_config_out;
#pragma HLS STREAM variable=fifo_PE2_2_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_2_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_2_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_2_res_config_out depth=2
  stream<uint> fifo_PE2_3_op0_config_out;
  stream<uint> fifo_PE2_3_op1_config_out;
  stream<uint> fifo_PE2_3_compute_config_out;
  stream<uint> fifo_PE2_3_res_config_out;
#pragma HLS STREAM variable=fifo_PE2_3_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_3_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_3_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_3_res_config_out depth=2
  stream<uint> fifo_PE2_4_op0_config_out;
  stream<uint> fifo_PE2_4_op1_config_out;
  stream<uint> fifo_PE2_4_compute_config_out;
  stream<uint> fifo_PE2_4_res_config_out;
#pragma HLS STREAM variable=fifo_PE2_4_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_4_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_4_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_4_res_config_out depth=2
  stream<uint> fifo_PE2_5_op0_config_out;
  stream<uint> fifo_PE2_5_op1_config_out;
  stream<uint> fifo_PE2_5_compute_config_out;
  stream<uint> fifo_PE2_5_res_config_out;
#pragma HLS STREAM variable=fifo_PE2_5_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_5_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_5_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_5_res_config_out depth=2
  stream<uint> fifo_PE2_6_op0_config_out;
  stream<uint> fifo_PE2_6_op1_config_out;
  stream<uint> fifo_PE2_6_compute_config_out;
  stream<uint> fifo_PE2_6_res_config_out;
#pragma HLS STREAM variable=fifo_PE2_6_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_6_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_6_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_6_res_config_out depth=2
  stream<uint> fifo_PE2_7_op0_config_out;
  stream<uint> fifo_PE2_7_op1_config_out;
  stream<uint> fifo_PE2_7_compute_config_out;
  stream<uint> fifo_PE2_7_res_config_out;
#pragma HLS STREAM variable=fifo_PE2_7_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_7_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_7_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_7_res_config_out depth=2
  stream<uint> fifo_PE2_8_op0_config_out;
  stream<uint> fifo_PE2_8_op1_config_out;
  stream<uint> fifo_PE2_8_compute_config_out;
  stream<uint> fifo_PE2_8_res_config_out;
#pragma HLS STREAM variable=fifo_PE2_8_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_8_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_8_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_8_res_config_out depth=2
  stream<uint> fifo_PE2_9_op0_config_out;
  stream<uint> fifo_PE2_9_op1_config_out;
  stream<uint> fifo_PE2_9_compute_config_out;
  stream<uint> fifo_PE2_9_res_config_out;
#pragma HLS STREAM variable=fifo_PE2_9_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_9_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_9_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_9_res_config_out depth=2
  stream<uint> fifo_PE2_10_op0_config_out;
  stream<uint> fifo_PE2_10_op1_config_out;
  stream<uint> fifo_PE2_10_compute_config_out;
  stream<uint> fifo_PE2_10_res_config_out;
#pragma HLS STREAM variable=fifo_PE2_10_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_10_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_10_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_10_res_config_out depth=2
  stream<uint> fifo_PE2_11_op0_config_out;
  stream<uint> fifo_PE2_11_op1_config_out;
  stream<uint> fifo_PE2_11_compute_config_out;
  stream<uint> fifo_PE2_11_res_config_out;
#pragma HLS STREAM variable=fifo_PE2_11_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_11_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_11_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_11_res_config_out depth=2
  stream<uint> fifo_PE2_12_op0_config_out;
  stream<uint> fifo_PE2_12_op1_config_out;
  stream<uint> fifo_PE2_12_compute_config_out;
  stream<uint> fifo_PE2_12_res_config_out;
#pragma HLS STREAM variable=fifo_PE2_12_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_12_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_12_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_12_res_config_out depth=2
  stream<uint> fifo_PE2_13_op0_config_out;
  stream<uint> fifo_PE2_13_op1_config_out;
  stream<uint> fifo_PE2_13_compute_config_out;
  stream<uint> fifo_PE2_13_res_config_out;
#pragma HLS STREAM variable=fifo_PE2_13_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_13_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_13_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_13_res_config_out depth=2
  stream<uint> fifo_PE3_0_op0_config_out;
  stream<uint> fifo_PE3_0_op1_config_out;
  stream<uint> fifo_PE3_0_compute_config_out;
  stream<uint> fifo_PE3_0_res_config_out;
#pragma HLS STREAM variable=fifo_PE3_0_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_0_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_0_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_0_res_config_out depth=2
  stream<uint> fifo_PE3_1_op0_config_out;
  stream<uint> fifo_PE3_1_op1_config_out;
  stream<uint> fifo_PE3_1_compute_config_out;
  stream<uint> fifo_PE3_1_res_config_out;
#pragma HLS STREAM variable=fifo_PE3_1_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_1_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_1_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_1_res_config_out depth=2
  stream<uint> fifo_PE3_2_op0_config_out;
  stream<uint> fifo_PE3_2_op1_config_out;
  stream<uint> fifo_PE3_2_compute_config_out;
  stream<uint> fifo_PE3_2_res_config_out;
#pragma HLS STREAM variable=fifo_PE3_2_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_2_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_2_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_2_res_config_out depth=2
  stream<uint> fifo_PE3_3_op0_config_out;
  stream<uint> fifo_PE3_3_op1_config_out;
  stream<uint> fifo_PE3_3_compute_config_out;
  stream<uint> fifo_PE3_3_res_config_out;
#pragma HLS STREAM variable=fifo_PE3_3_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_3_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_3_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_3_res_config_out depth=2
  stream<uint> fifo_PE3_4_op0_config_out;
  stream<uint> fifo_PE3_4_op1_config_out;
  stream<uint> fifo_PE3_4_compute_config_out;
  stream<uint> fifo_PE3_4_res_config_out;
#pragma HLS STREAM variable=fifo_PE3_4_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_4_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_4_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_4_res_config_out depth=2
  stream<uint> fifo_PE3_5_op0_config_out;
  stream<uint> fifo_PE3_5_op1_config_out;
  stream<uint> fifo_PE3_5_compute_config_out;
  stream<uint> fifo_PE3_5_res_config_out;
#pragma HLS STREAM variable=fifo_PE3_5_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_5_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_5_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_5_res_config_out depth=2
  stream<uint> fifo_PE3_6_op0_config_out;
  stream<uint> fifo_PE3_6_op1_config_out;
  stream<uint> fifo_PE3_6_compute_config_out;
  stream<uint> fifo_PE3_6_res_config_out;
#pragma HLS STREAM variable=fifo_PE3_6_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_6_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_6_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_6_res_config_out depth=2
  stream<uint> fifo_PE3_7_op0_config_out;
  stream<uint> fifo_PE3_7_op1_config_out;
  stream<uint> fifo_PE3_7_compute_config_out;
  stream<uint> fifo_PE3_7_res_config_out;
#pragma HLS STREAM variable=fifo_PE3_7_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_7_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_7_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_7_res_config_out depth=2
  stream<uint> fifo_PE3_8_op0_config_out;
  stream<uint> fifo_PE3_8_op1_config_out;
  stream<uint> fifo_PE3_8_compute_config_out;
  stream<uint> fifo_PE3_8_res_config_out;
#pragma HLS STREAM variable=fifo_PE3_8_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_8_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_8_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_8_res_config_out depth=2
  stream<uint> fifo_PE3_9_op0_config_out;
  stream<uint> fifo_PE3_9_op1_config_out;
  stream<uint> fifo_PE3_9_compute_config_out;
  stream<uint> fifo_PE3_9_res_config_out;
#pragma HLS STREAM variable=fifo_PE3_9_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_9_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_9_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_9_res_config_out depth=2
  stream<uint> fifo_PE3_10_op0_config_out;
  stream<uint> fifo_PE3_10_op1_config_out;
  stream<uint> fifo_PE3_10_compute_config_out;
  stream<uint> fifo_PE3_10_res_config_out;
#pragma HLS STREAM variable=fifo_PE3_10_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_10_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_10_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_10_res_config_out depth=2
  stream<uint> fifo_PE3_11_op0_config_out;
  stream<uint> fifo_PE3_11_op1_config_out;
  stream<uint> fifo_PE3_11_compute_config_out;
  stream<uint> fifo_PE3_11_res_config_out;
#pragma HLS STREAM variable=fifo_PE3_11_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_11_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_11_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_11_res_config_out depth=2
  stream<uint> fifo_PE3_12_op0_config_out;
  stream<uint> fifo_PE3_12_op1_config_out;
  stream<uint> fifo_PE3_12_compute_config_out;
  stream<uint> fifo_PE3_12_res_config_out;
#pragma HLS STREAM variable=fifo_PE3_12_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_12_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_12_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_12_res_config_out depth=2
  stream<uint> fifo_PE3_13_op0_config_out;
  stream<uint> fifo_PE3_13_op1_config_out;
  stream<uint> fifo_PE3_13_compute_config_out;
  stream<uint> fifo_PE3_13_res_config_out;
#pragma HLS STREAM variable=fifo_PE3_13_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_13_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_13_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_13_res_config_out depth=2
  stream<uint> fifo_PE4_0_op0_config_out;
  stream<uint> fifo_PE4_0_op1_config_out;
  stream<uint> fifo_PE4_0_compute_config_out;
  stream<uint> fifo_PE4_0_res_config_out;
#pragma HLS STREAM variable=fifo_PE4_0_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_0_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_0_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_0_res_config_out depth=2
  stream<uint> fifo_PE4_1_op0_config_out;
  stream<uint> fifo_PE4_1_op1_config_out;
  stream<uint> fifo_PE4_1_compute_config_out;
  stream<uint> fifo_PE4_1_res_config_out;
#pragma HLS STREAM variable=fifo_PE4_1_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_1_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_1_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_1_res_config_out depth=2
  stream<uint> fifo_PE4_2_op0_config_out;
  stream<uint> fifo_PE4_2_op1_config_out;
  stream<uint> fifo_PE4_2_compute_config_out;
  stream<uint> fifo_PE4_2_res_config_out;
#pragma HLS STREAM variable=fifo_PE4_2_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_2_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_2_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_2_res_config_out depth=2
  stream<uint> fifo_PE4_3_op0_config_out;
  stream<uint> fifo_PE4_3_op1_config_out;
  stream<uint> fifo_PE4_3_compute_config_out;
  stream<uint> fifo_PE4_3_res_config_out;
#pragma HLS STREAM variable=fifo_PE4_3_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_3_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_3_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_3_res_config_out depth=2
  stream<uint> fifo_PE4_4_op0_config_out;
  stream<uint> fifo_PE4_4_op1_config_out;
  stream<uint> fifo_PE4_4_compute_config_out;
  stream<uint> fifo_PE4_4_res_config_out;
#pragma HLS STREAM variable=fifo_PE4_4_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_4_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_4_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_4_res_config_out depth=2
  stream<uint> fifo_PE4_5_op0_config_out;
  stream<uint> fifo_PE4_5_op1_config_out;
  stream<uint> fifo_PE4_5_compute_config_out;
  stream<uint> fifo_PE4_5_res_config_out;
#pragma HLS STREAM variable=fifo_PE4_5_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_5_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_5_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_5_res_config_out depth=2
  stream<uint> fifo_PE4_6_op0_config_out;
  stream<uint> fifo_PE4_6_op1_config_out;
  stream<uint> fifo_PE4_6_compute_config_out;
  stream<uint> fifo_PE4_6_res_config_out;
#pragma HLS STREAM variable=fifo_PE4_6_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_6_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_6_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_6_res_config_out depth=2
  stream<uint> fifo_PE4_7_op0_config_out;
  stream<uint> fifo_PE4_7_op1_config_out;
  stream<uint> fifo_PE4_7_compute_config_out;
  stream<uint> fifo_PE4_7_res_config_out;
#pragma HLS STREAM variable=fifo_PE4_7_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_7_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_7_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_7_res_config_out depth=2
  stream<uint> fifo_PE4_8_op0_config_out;
  stream<uint> fifo_PE4_8_op1_config_out;
  stream<uint> fifo_PE4_8_compute_config_out;
  stream<uint> fifo_PE4_8_res_config_out;
#pragma HLS STREAM variable=fifo_PE4_8_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_8_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_8_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_8_res_config_out depth=2
  stream<uint> fifo_PE4_9_op0_config_out;
  stream<uint> fifo_PE4_9_op1_config_out;
  stream<uint> fifo_PE4_9_compute_config_out;
  stream<uint> fifo_PE4_9_res_config_out;
#pragma HLS STREAM variable=fifo_PE4_9_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_9_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_9_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_9_res_config_out depth=2
  stream<uint> fifo_PE4_10_op0_config_out;
  stream<uint> fifo_PE4_10_op1_config_out;
  stream<uint> fifo_PE4_10_compute_config_out;
  stream<uint> fifo_PE4_10_res_config_out;
#pragma HLS STREAM variable=fifo_PE4_10_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_10_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_10_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_10_res_config_out depth=2
  stream<uint> fifo_PE4_11_op0_config_out;
  stream<uint> fifo_PE4_11_op1_config_out;
  stream<uint> fifo_PE4_11_compute_config_out;
  stream<uint> fifo_PE4_11_res_config_out;
#pragma HLS STREAM variable=fifo_PE4_11_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_11_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_11_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_11_res_config_out depth=2
  stream<uint> fifo_PE4_12_op0_config_out;
  stream<uint> fifo_PE4_12_op1_config_out;
  stream<uint> fifo_PE4_12_compute_config_out;
  stream<uint> fifo_PE4_12_res_config_out;
#pragma HLS STREAM variable=fifo_PE4_12_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_12_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_12_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_12_res_config_out depth=2
  stream<uint> fifo_PE4_13_op0_config_out;
  stream<uint> fifo_PE4_13_op1_config_out;
  stream<uint> fifo_PE4_13_compute_config_out;
  stream<uint> fifo_PE4_13_res_config_out;
#pragma HLS STREAM variable=fifo_PE4_13_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_13_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_13_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_13_res_config_out depth=2
  stream<uint> fifo_PE5_0_op0_config_out;
  stream<uint> fifo_PE5_0_op1_config_out;
  stream<uint> fifo_PE5_0_compute_config_out;
  stream<uint> fifo_PE5_0_res_config_out;
#pragma HLS STREAM variable=fifo_PE5_0_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_0_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_0_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_0_res_config_out depth=2
  stream<uint> fifo_PE5_1_op0_config_out;
  stream<uint> fifo_PE5_1_op1_config_out;
  stream<uint> fifo_PE5_1_compute_config_out;
  stream<uint> fifo_PE5_1_res_config_out;
#pragma HLS STREAM variable=fifo_PE5_1_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_1_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_1_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_1_res_config_out depth=2
  stream<uint> fifo_PE5_2_op0_config_out;
  stream<uint> fifo_PE5_2_op1_config_out;
  stream<uint> fifo_PE5_2_compute_config_out;
  stream<uint> fifo_PE5_2_res_config_out;
#pragma HLS STREAM variable=fifo_PE5_2_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_2_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_2_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_2_res_config_out depth=2
  stream<uint> fifo_PE5_3_op0_config_out;
  stream<uint> fifo_PE5_3_op1_config_out;
  stream<uint> fifo_PE5_3_compute_config_out;
  stream<uint> fifo_PE5_3_res_config_out;
#pragma HLS STREAM variable=fifo_PE5_3_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_3_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_3_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_3_res_config_out depth=2
  stream<uint> fifo_PE5_4_op0_config_out;
  stream<uint> fifo_PE5_4_op1_config_out;
  stream<uint> fifo_PE5_4_compute_config_out;
  stream<uint> fifo_PE5_4_res_config_out;
#pragma HLS STREAM variable=fifo_PE5_4_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_4_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_4_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_4_res_config_out depth=2
  stream<uint> fifo_PE5_5_op0_config_out;
  stream<uint> fifo_PE5_5_op1_config_out;
  stream<uint> fifo_PE5_5_compute_config_out;
  stream<uint> fifo_PE5_5_res_config_out;
#pragma HLS STREAM variable=fifo_PE5_5_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_5_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_5_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_5_res_config_out depth=2
  stream<uint> fifo_PE5_6_op0_config_out;
  stream<uint> fifo_PE5_6_op1_config_out;
  stream<uint> fifo_PE5_6_compute_config_out;
  stream<uint> fifo_PE5_6_res_config_out;
#pragma HLS STREAM variable=fifo_PE5_6_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_6_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_6_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_6_res_config_out depth=2
  stream<uint> fifo_PE5_7_op0_config_out;
  stream<uint> fifo_PE5_7_op1_config_out;
  stream<uint> fifo_PE5_7_compute_config_out;
  stream<uint> fifo_PE5_7_res_config_out;
#pragma HLS STREAM variable=fifo_PE5_7_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_7_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_7_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_7_res_config_out depth=2
  stream<uint> fifo_PE5_8_op0_config_out;
  stream<uint> fifo_PE5_8_op1_config_out;
  stream<uint> fifo_PE5_8_compute_config_out;
  stream<uint> fifo_PE5_8_res_config_out;
#pragma HLS STREAM variable=fifo_PE5_8_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_8_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_8_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_8_res_config_out depth=2
  stream<uint> fifo_PE5_9_op0_config_out;
  stream<uint> fifo_PE5_9_op1_config_out;
  stream<uint> fifo_PE5_9_compute_config_out;
  stream<uint> fifo_PE5_9_res_config_out;
#pragma HLS STREAM variable=fifo_PE5_9_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_9_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_9_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_9_res_config_out depth=2
  stream<uint> fifo_PE5_10_op0_config_out;
  stream<uint> fifo_PE5_10_op1_config_out;
  stream<uint> fifo_PE5_10_compute_config_out;
  stream<uint> fifo_PE5_10_res_config_out;
#pragma HLS STREAM variable=fifo_PE5_10_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_10_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_10_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_10_res_config_out depth=2
  stream<uint> fifo_PE5_11_op0_config_out;
  stream<uint> fifo_PE5_11_op1_config_out;
  stream<uint> fifo_PE5_11_compute_config_out;
  stream<uint> fifo_PE5_11_res_config_out;
#pragma HLS STREAM variable=fifo_PE5_11_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_11_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_11_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_11_res_config_out depth=2
  stream<uint> fifo_PE5_12_op0_config_out;
  stream<uint> fifo_PE5_12_op1_config_out;
  stream<uint> fifo_PE5_12_compute_config_out;
  stream<uint> fifo_PE5_12_res_config_out;
#pragma HLS STREAM variable=fifo_PE5_12_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_12_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_12_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_12_res_config_out depth=2
  stream<uint> fifo_PE5_13_op0_config_out;
  stream<uint> fifo_PE5_13_op1_config_out;
  stream<uint> fifo_PE5_13_compute_config_out;
  stream<uint> fifo_PE5_13_res_config_out;
#pragma HLS STREAM variable=fifo_PE5_13_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_13_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_13_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_13_res_config_out depth=2
  stream<uint> fifo_PE6_0_op0_config_out;
  stream<uint> fifo_PE6_0_op1_config_out;
  stream<uint> fifo_PE6_0_compute_config_out;
  stream<uint> fifo_PE6_0_res_config_out;
#pragma HLS STREAM variable=fifo_PE6_0_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_0_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_0_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_0_res_config_out depth=2
  stream<uint> fifo_PE6_1_op0_config_out;
  stream<uint> fifo_PE6_1_op1_config_out;
  stream<uint> fifo_PE6_1_compute_config_out;
  stream<uint> fifo_PE6_1_res_config_out;
#pragma HLS STREAM variable=fifo_PE6_1_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_1_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_1_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_1_res_config_out depth=2
  stream<uint> fifo_PE6_2_op0_config_out;
  stream<uint> fifo_PE6_2_op1_config_out;
  stream<uint> fifo_PE6_2_compute_config_out;
  stream<uint> fifo_PE6_2_res_config_out;
#pragma HLS STREAM variable=fifo_PE6_2_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_2_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_2_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_2_res_config_out depth=2
  stream<uint> fifo_PE6_3_op0_config_out;
  stream<uint> fifo_PE6_3_op1_config_out;
  stream<uint> fifo_PE6_3_compute_config_out;
  stream<uint> fifo_PE6_3_res_config_out;
#pragma HLS STREAM variable=fifo_PE6_3_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_3_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_3_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_3_res_config_out depth=2
  stream<uint> fifo_PE6_4_op0_config_out;
  stream<uint> fifo_PE6_4_op1_config_out;
  stream<uint> fifo_PE6_4_compute_config_out;
  stream<uint> fifo_PE6_4_res_config_out;
#pragma HLS STREAM variable=fifo_PE6_4_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_4_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_4_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_4_res_config_out depth=2
  stream<uint> fifo_PE6_5_op0_config_out;
  stream<uint> fifo_PE6_5_op1_config_out;
  stream<uint> fifo_PE6_5_compute_config_out;
  stream<uint> fifo_PE6_5_res_config_out;
#pragma HLS STREAM variable=fifo_PE6_5_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_5_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_5_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_5_res_config_out depth=2
  stream<uint> fifo_PE6_6_op0_config_out;
  stream<uint> fifo_PE6_6_op1_config_out;
  stream<uint> fifo_PE6_6_compute_config_out;
  stream<uint> fifo_PE6_6_res_config_out;
#pragma HLS STREAM variable=fifo_PE6_6_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_6_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_6_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_6_res_config_out depth=2
  stream<uint> fifo_PE6_7_op0_config_out;
  stream<uint> fifo_PE6_7_op1_config_out;
  stream<uint> fifo_PE6_7_compute_config_out;
  stream<uint> fifo_PE6_7_res_config_out;
#pragma HLS STREAM variable=fifo_PE6_7_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_7_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_7_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_7_res_config_out depth=2
  stream<uint> fifo_PE6_8_op0_config_out;
  stream<uint> fifo_PE6_8_op1_config_out;
  stream<uint> fifo_PE6_8_compute_config_out;
  stream<uint> fifo_PE6_8_res_config_out;
#pragma HLS STREAM variable=fifo_PE6_8_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_8_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_8_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_8_res_config_out depth=2
  stream<uint> fifo_PE6_9_op0_config_out;
  stream<uint> fifo_PE6_9_op1_config_out;
  stream<uint> fifo_PE6_9_compute_config_out;
  stream<uint> fifo_PE6_9_res_config_out;
#pragma HLS STREAM variable=fifo_PE6_9_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_9_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_9_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_9_res_config_out depth=2
  stream<uint> fifo_PE6_10_op0_config_out;
  stream<uint> fifo_PE6_10_op1_config_out;
  stream<uint> fifo_PE6_10_compute_config_out;
  stream<uint> fifo_PE6_10_res_config_out;
#pragma HLS STREAM variable=fifo_PE6_10_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_10_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_10_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_10_res_config_out depth=2
  stream<uint> fifo_PE6_11_op0_config_out;
  stream<uint> fifo_PE6_11_op1_config_out;
  stream<uint> fifo_PE6_11_compute_config_out;
  stream<uint> fifo_PE6_11_res_config_out;
#pragma HLS STREAM variable=fifo_PE6_11_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_11_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_11_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_11_res_config_out depth=2
  stream<uint> fifo_PE6_12_op0_config_out;
  stream<uint> fifo_PE6_12_op1_config_out;
  stream<uint> fifo_PE6_12_compute_config_out;
  stream<uint> fifo_PE6_12_res_config_out;
#pragma HLS STREAM variable=fifo_PE6_12_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_12_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_12_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_12_res_config_out depth=2
  stream<uint> fifo_PE6_13_op0_config_out;
  stream<uint> fifo_PE6_13_op1_config_out;
  stream<uint> fifo_PE6_13_compute_config_out;
  stream<uint> fifo_PE6_13_res_config_out;
#pragma HLS STREAM variable=fifo_PE6_13_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_13_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_13_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_13_res_config_out depth=2
  stream<uint> fifo_PE7_0_op0_config_out;
  stream<uint> fifo_PE7_0_op1_config_out;
  stream<uint> fifo_PE7_0_compute_config_out;
  stream<uint> fifo_PE7_0_res_config_out;
#pragma HLS STREAM variable=fifo_PE7_0_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_0_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_0_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_0_res_config_out depth=2
  stream<uint> fifo_PE7_1_op0_config_out;
  stream<uint> fifo_PE7_1_op1_config_out;
  stream<uint> fifo_PE7_1_compute_config_out;
  stream<uint> fifo_PE7_1_res_config_out;
#pragma HLS STREAM variable=fifo_PE7_1_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_1_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_1_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_1_res_config_out depth=2
  stream<uint> fifo_PE7_2_op0_config_out;
  stream<uint> fifo_PE7_2_op1_config_out;
  stream<uint> fifo_PE7_2_compute_config_out;
  stream<uint> fifo_PE7_2_res_config_out;
#pragma HLS STREAM variable=fifo_PE7_2_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_2_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_2_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_2_res_config_out depth=2
  stream<uint> fifo_PE7_3_op0_config_out;
  stream<uint> fifo_PE7_3_op1_config_out;
  stream<uint> fifo_PE7_3_compute_config_out;
  stream<uint> fifo_PE7_3_res_config_out;
#pragma HLS STREAM variable=fifo_PE7_3_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_3_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_3_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_3_res_config_out depth=2
  stream<uint> fifo_PE7_4_op0_config_out;
  stream<uint> fifo_PE7_4_op1_config_out;
  stream<uint> fifo_PE7_4_compute_config_out;
  stream<uint> fifo_PE7_4_res_config_out;
#pragma HLS STREAM variable=fifo_PE7_4_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_4_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_4_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_4_res_config_out depth=2
  stream<uint> fifo_PE7_5_op0_config_out;
  stream<uint> fifo_PE7_5_op1_config_out;
  stream<uint> fifo_PE7_5_compute_config_out;
  stream<uint> fifo_PE7_5_res_config_out;
#pragma HLS STREAM variable=fifo_PE7_5_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_5_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_5_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_5_res_config_out depth=2
  stream<uint> fifo_PE7_6_op0_config_out;
  stream<uint> fifo_PE7_6_op1_config_out;
  stream<uint> fifo_PE7_6_compute_config_out;
  stream<uint> fifo_PE7_6_res_config_out;
#pragma HLS STREAM variable=fifo_PE7_6_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_6_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_6_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_6_res_config_out depth=2
  stream<uint> fifo_PE7_7_op0_config_out;
  stream<uint> fifo_PE7_7_op1_config_out;
  stream<uint> fifo_PE7_7_compute_config_out;
  stream<uint> fifo_PE7_7_res_config_out;
#pragma HLS STREAM variable=fifo_PE7_7_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_7_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_7_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_7_res_config_out depth=2
  stream<uint> fifo_PE7_8_op0_config_out;
  stream<uint> fifo_PE7_8_op1_config_out;
  stream<uint> fifo_PE7_8_compute_config_out;
  stream<uint> fifo_PE7_8_res_config_out;
#pragma HLS STREAM variable=fifo_PE7_8_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_8_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_8_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_8_res_config_out depth=2
  stream<uint> fifo_PE7_9_op0_config_out;
  stream<uint> fifo_PE7_9_op1_config_out;
  stream<uint> fifo_PE7_9_compute_config_out;
  stream<uint> fifo_PE7_9_res_config_out;
#pragma HLS STREAM variable=fifo_PE7_9_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_9_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_9_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_9_res_config_out depth=2
  stream<uint> fifo_PE7_10_op0_config_out;
  stream<uint> fifo_PE7_10_op1_config_out;
  stream<uint> fifo_PE7_10_compute_config_out;
  stream<uint> fifo_PE7_10_res_config_out;
#pragma HLS STREAM variable=fifo_PE7_10_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_10_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_10_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_10_res_config_out depth=2
  stream<uint> fifo_PE7_11_op0_config_out;
  stream<uint> fifo_PE7_11_op1_config_out;
  stream<uint> fifo_PE7_11_compute_config_out;
  stream<uint> fifo_PE7_11_res_config_out;
#pragma HLS STREAM variable=fifo_PE7_11_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_11_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_11_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_11_res_config_out depth=2
  stream<uint> fifo_PE7_12_op0_config_out;
  stream<uint> fifo_PE7_12_op1_config_out;
  stream<uint> fifo_PE7_12_compute_config_out;
  stream<uint> fifo_PE7_12_res_config_out;
#pragma HLS STREAM variable=fifo_PE7_12_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_12_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_12_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_12_res_config_out depth=2
  stream<uint> fifo_PE7_13_op0_config_out;
  stream<uint> fifo_PE7_13_op1_config_out;
  stream<uint> fifo_PE7_13_compute_config_out;
  stream<uint> fifo_PE7_13_res_config_out;
#pragma HLS STREAM variable=fifo_PE7_13_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_13_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_13_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_13_res_config_out depth=2
  stream<uint> fifo_PE8_0_op0_config_out;
  stream<uint> fifo_PE8_0_op1_config_out;
  stream<uint> fifo_PE8_0_compute_config_out;
  stream<uint> fifo_PE8_0_res_config_out;
#pragma HLS STREAM variable=fifo_PE8_0_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_0_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_0_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_0_res_config_out depth=2
  stream<uint> fifo_PE8_1_op0_config_out;
  stream<uint> fifo_PE8_1_op1_config_out;
  stream<uint> fifo_PE8_1_compute_config_out;
  stream<uint> fifo_PE8_1_res_config_out;
#pragma HLS STREAM variable=fifo_PE8_1_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_1_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_1_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_1_res_config_out depth=2
  stream<uint> fifo_PE8_2_op0_config_out;
  stream<uint> fifo_PE8_2_op1_config_out;
  stream<uint> fifo_PE8_2_compute_config_out;
  stream<uint> fifo_PE8_2_res_config_out;
#pragma HLS STREAM variable=fifo_PE8_2_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_2_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_2_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_2_res_config_out depth=2
  stream<uint> fifo_PE8_3_op0_config_out;
  stream<uint> fifo_PE8_3_op1_config_out;
  stream<uint> fifo_PE8_3_compute_config_out;
  stream<uint> fifo_PE8_3_res_config_out;
#pragma HLS STREAM variable=fifo_PE8_3_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_3_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_3_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_3_res_config_out depth=2
  stream<uint> fifo_PE8_4_op0_config_out;
  stream<uint> fifo_PE8_4_op1_config_out;
  stream<uint> fifo_PE8_4_compute_config_out;
  stream<uint> fifo_PE8_4_res_config_out;
#pragma HLS STREAM variable=fifo_PE8_4_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_4_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_4_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_4_res_config_out depth=2
  stream<uint> fifo_PE8_5_op0_config_out;
  stream<uint> fifo_PE8_5_op1_config_out;
  stream<uint> fifo_PE8_5_compute_config_out;
  stream<uint> fifo_PE8_5_res_config_out;
#pragma HLS STREAM variable=fifo_PE8_5_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_5_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_5_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_5_res_config_out depth=2
  stream<uint> fifo_PE8_6_op0_config_out;
  stream<uint> fifo_PE8_6_op1_config_out;
  stream<uint> fifo_PE8_6_compute_config_out;
  stream<uint> fifo_PE8_6_res_config_out;
#pragma HLS STREAM variable=fifo_PE8_6_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_6_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_6_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_6_res_config_out depth=2
  stream<uint> fifo_PE8_7_op0_config_out;
  stream<uint> fifo_PE8_7_op1_config_out;
  stream<uint> fifo_PE8_7_compute_config_out;
  stream<uint> fifo_PE8_7_res_config_out;
#pragma HLS STREAM variable=fifo_PE8_7_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_7_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_7_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_7_res_config_out depth=2
  stream<uint> fifo_PE8_8_op0_config_out;
  stream<uint> fifo_PE8_8_op1_config_out;
  stream<uint> fifo_PE8_8_compute_config_out;
  stream<uint> fifo_PE8_8_res_config_out;
#pragma HLS STREAM variable=fifo_PE8_8_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_8_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_8_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_8_res_config_out depth=2
  stream<uint> fifo_PE8_9_op0_config_out;
  stream<uint> fifo_PE8_9_op1_config_out;
  stream<uint> fifo_PE8_9_compute_config_out;
  stream<uint> fifo_PE8_9_res_config_out;
#pragma HLS STREAM variable=fifo_PE8_9_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_9_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_9_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_9_res_config_out depth=2
  stream<uint> fifo_PE8_10_op0_config_out;
  stream<uint> fifo_PE8_10_op1_config_out;
  stream<uint> fifo_PE8_10_compute_config_out;
  stream<uint> fifo_PE8_10_res_config_out;
#pragma HLS STREAM variable=fifo_PE8_10_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_10_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_10_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_10_res_config_out depth=2
  stream<uint> fifo_PE8_11_op0_config_out;
  stream<uint> fifo_PE8_11_op1_config_out;
  stream<uint> fifo_PE8_11_compute_config_out;
  stream<uint> fifo_PE8_11_res_config_out;
#pragma HLS STREAM variable=fifo_PE8_11_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_11_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_11_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_11_res_config_out depth=2
  stream<uint> fifo_PE8_12_op0_config_out;
  stream<uint> fifo_PE8_12_op1_config_out;
  stream<uint> fifo_PE8_12_compute_config_out;
  stream<uint> fifo_PE8_12_res_config_out;
#pragma HLS STREAM variable=fifo_PE8_12_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_12_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_12_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_12_res_config_out depth=2
  stream<uint> fifo_PE8_13_op0_config_out;
  stream<uint> fifo_PE8_13_op1_config_out;
  stream<uint> fifo_PE8_13_compute_config_out;
  stream<uint> fifo_PE8_13_res_config_out;
#pragma HLS STREAM variable=fifo_PE8_13_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_13_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_13_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE8_13_res_config_out depth=2
  stream<uint> fifo_PE9_0_op0_config_out;
  stream<uint> fifo_PE9_0_op1_config_out;
  stream<uint> fifo_PE9_0_compute_config_out;
  stream<uint> fifo_PE9_0_res_config_out;
#pragma HLS STREAM variable=fifo_PE9_0_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_0_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_0_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_0_res_config_out depth=2
  stream<uint> fifo_PE9_1_op0_config_out;
  stream<uint> fifo_PE9_1_op1_config_out;
  stream<uint> fifo_PE9_1_compute_config_out;
  stream<uint> fifo_PE9_1_res_config_out;
#pragma HLS STREAM variable=fifo_PE9_1_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_1_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_1_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_1_res_config_out depth=2
  stream<uint> fifo_PE9_2_op0_config_out;
  stream<uint> fifo_PE9_2_op1_config_out;
  stream<uint> fifo_PE9_2_compute_config_out;
  stream<uint> fifo_PE9_2_res_config_out;
#pragma HLS STREAM variable=fifo_PE9_2_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_2_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_2_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_2_res_config_out depth=2
  stream<uint> fifo_PE9_3_op0_config_out;
  stream<uint> fifo_PE9_3_op1_config_out;
  stream<uint> fifo_PE9_3_compute_config_out;
  stream<uint> fifo_PE9_3_res_config_out;
#pragma HLS STREAM variable=fifo_PE9_3_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_3_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_3_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_3_res_config_out depth=2
  stream<uint> fifo_PE9_4_op0_config_out;
  stream<uint> fifo_PE9_4_op1_config_out;
  stream<uint> fifo_PE9_4_compute_config_out;
  stream<uint> fifo_PE9_4_res_config_out;
#pragma HLS STREAM variable=fifo_PE9_4_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_4_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_4_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_4_res_config_out depth=2
  stream<uint> fifo_PE9_5_op0_config_out;
  stream<uint> fifo_PE9_5_op1_config_out;
  stream<uint> fifo_PE9_5_compute_config_out;
  stream<uint> fifo_PE9_5_res_config_out;
#pragma HLS STREAM variable=fifo_PE9_5_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_5_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_5_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_5_res_config_out depth=2
  stream<uint> fifo_PE9_6_op0_config_out;
  stream<uint> fifo_PE9_6_op1_config_out;
  stream<uint> fifo_PE9_6_compute_config_out;
  stream<uint> fifo_PE9_6_res_config_out;
#pragma HLS STREAM variable=fifo_PE9_6_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_6_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_6_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_6_res_config_out depth=2
  stream<uint> fifo_PE9_7_op0_config_out;
  stream<uint> fifo_PE9_7_op1_config_out;
  stream<uint> fifo_PE9_7_compute_config_out;
  stream<uint> fifo_PE9_7_res_config_out;
#pragma HLS STREAM variable=fifo_PE9_7_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_7_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_7_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_7_res_config_out depth=2
  stream<uint> fifo_PE9_8_op0_config_out;
  stream<uint> fifo_PE9_8_op1_config_out;
  stream<uint> fifo_PE9_8_compute_config_out;
  stream<uint> fifo_PE9_8_res_config_out;
#pragma HLS STREAM variable=fifo_PE9_8_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_8_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_8_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_8_res_config_out depth=2
  stream<uint> fifo_PE9_9_op0_config_out;
  stream<uint> fifo_PE9_9_op1_config_out;
  stream<uint> fifo_PE9_9_compute_config_out;
  stream<uint> fifo_PE9_9_res_config_out;
#pragma HLS STREAM variable=fifo_PE9_9_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_9_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_9_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_9_res_config_out depth=2
  stream<uint> fifo_PE9_10_op0_config_out;
  stream<uint> fifo_PE9_10_op1_config_out;
  stream<uint> fifo_PE9_10_compute_config_out;
  stream<uint> fifo_PE9_10_res_config_out;
#pragma HLS STREAM variable=fifo_PE9_10_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_10_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_10_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_10_res_config_out depth=2
  stream<uint> fifo_PE9_11_op0_config_out;
  stream<uint> fifo_PE9_11_op1_config_out;
  stream<uint> fifo_PE9_11_compute_config_out;
  stream<uint> fifo_PE9_11_res_config_out;
#pragma HLS STREAM variable=fifo_PE9_11_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_11_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_11_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_11_res_config_out depth=2
  stream<uint> fifo_PE9_12_op0_config_out;
  stream<uint> fifo_PE9_12_op1_config_out;
  stream<uint> fifo_PE9_12_compute_config_out;
  stream<uint> fifo_PE9_12_res_config_out;
#pragma HLS STREAM variable=fifo_PE9_12_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_12_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_12_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_12_res_config_out depth=2
  stream<uint> fifo_PE9_13_op0_config_out;
  stream<uint> fifo_PE9_13_op1_config_out;
  stream<uint> fifo_PE9_13_compute_config_out;
  stream<uint> fifo_PE9_13_res_config_out;
#pragma HLS STREAM variable=fifo_PE9_13_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_13_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_13_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE9_13_res_config_out depth=2
  stream<uint> fifo_PE10_0_op0_config_out;
  stream<uint> fifo_PE10_0_op1_config_out;
  stream<uint> fifo_PE10_0_compute_config_out;
  stream<uint> fifo_PE10_0_res_config_out;
#pragma HLS STREAM variable=fifo_PE10_0_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_0_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_0_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_0_res_config_out depth=2
  stream<uint> fifo_PE10_1_op0_config_out;
  stream<uint> fifo_PE10_1_op1_config_out;
  stream<uint> fifo_PE10_1_compute_config_out;
  stream<uint> fifo_PE10_1_res_config_out;
#pragma HLS STREAM variable=fifo_PE10_1_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_1_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_1_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_1_res_config_out depth=2
  stream<uint> fifo_PE10_2_op0_config_out;
  stream<uint> fifo_PE10_2_op1_config_out;
  stream<uint> fifo_PE10_2_compute_config_out;
  stream<uint> fifo_PE10_2_res_config_out;
#pragma HLS STREAM variable=fifo_PE10_2_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_2_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_2_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_2_res_config_out depth=2
  stream<uint> fifo_PE10_3_op0_config_out;
  stream<uint> fifo_PE10_3_op1_config_out;
  stream<uint> fifo_PE10_3_compute_config_out;
  stream<uint> fifo_PE10_3_res_config_out;
#pragma HLS STREAM variable=fifo_PE10_3_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_3_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_3_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_3_res_config_out depth=2
  stream<uint> fifo_PE10_4_op0_config_out;
  stream<uint> fifo_PE10_4_op1_config_out;
  stream<uint> fifo_PE10_4_compute_config_out;
  stream<uint> fifo_PE10_4_res_config_out;
#pragma HLS STREAM variable=fifo_PE10_4_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_4_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_4_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_4_res_config_out depth=2
  stream<uint> fifo_PE10_5_op0_config_out;
  stream<uint> fifo_PE10_5_op1_config_out;
  stream<uint> fifo_PE10_5_compute_config_out;
  stream<uint> fifo_PE10_5_res_config_out;
#pragma HLS STREAM variable=fifo_PE10_5_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_5_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_5_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_5_res_config_out depth=2
  stream<uint> fifo_PE10_6_op0_config_out;
  stream<uint> fifo_PE10_6_op1_config_out;
  stream<uint> fifo_PE10_6_compute_config_out;
  stream<uint> fifo_PE10_6_res_config_out;
#pragma HLS STREAM variable=fifo_PE10_6_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_6_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_6_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_6_res_config_out depth=2
  stream<uint> fifo_PE10_7_op0_config_out;
  stream<uint> fifo_PE10_7_op1_config_out;
  stream<uint> fifo_PE10_7_compute_config_out;
  stream<uint> fifo_PE10_7_res_config_out;
#pragma HLS STREAM variable=fifo_PE10_7_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_7_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_7_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_7_res_config_out depth=2
  stream<uint> fifo_PE10_8_op0_config_out;
  stream<uint> fifo_PE10_8_op1_config_out;
  stream<uint> fifo_PE10_8_compute_config_out;
  stream<uint> fifo_PE10_8_res_config_out;
#pragma HLS STREAM variable=fifo_PE10_8_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_8_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_8_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_8_res_config_out depth=2
  stream<uint> fifo_PE10_9_op0_config_out;
  stream<uint> fifo_PE10_9_op1_config_out;
  stream<uint> fifo_PE10_9_compute_config_out;
  stream<uint> fifo_PE10_9_res_config_out;
#pragma HLS STREAM variable=fifo_PE10_9_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_9_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_9_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_9_res_config_out depth=2
  stream<uint> fifo_PE10_10_op0_config_out;
  stream<uint> fifo_PE10_10_op1_config_out;
  stream<uint> fifo_PE10_10_compute_config_out;
  stream<uint> fifo_PE10_10_res_config_out;
#pragma HLS STREAM variable=fifo_PE10_10_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_10_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_10_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_10_res_config_out depth=2
  stream<uint> fifo_PE10_11_op0_config_out;
  stream<uint> fifo_PE10_11_op1_config_out;
  stream<uint> fifo_PE10_11_compute_config_out;
  stream<uint> fifo_PE10_11_res_config_out;
#pragma HLS STREAM variable=fifo_PE10_11_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_11_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_11_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_11_res_config_out depth=2
  stream<uint> fifo_PE10_12_op0_config_out;
  stream<uint> fifo_PE10_12_op1_config_out;
  stream<uint> fifo_PE10_12_compute_config_out;
  stream<uint> fifo_PE10_12_res_config_out;
#pragma HLS STREAM variable=fifo_PE10_12_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_12_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_12_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_12_res_config_out depth=2
  stream<uint> fifo_PE10_13_op0_config_out;
  stream<uint> fifo_PE10_13_op1_config_out;
  stream<uint> fifo_PE10_13_compute_config_out;
  stream<uint> fifo_PE10_13_res_config_out;
#pragma HLS STREAM variable=fifo_PE10_13_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_13_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_13_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE10_13_res_config_out depth=2
  stream<uint> fifo_PE11_0_op0_config_out;
  stream<uint> fifo_PE11_0_op1_config_out;
  stream<uint> fifo_PE11_0_compute_config_out;
  stream<uint> fifo_PE11_0_res_config_out;
#pragma HLS STREAM variable=fifo_PE11_0_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_0_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_0_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_0_res_config_out depth=2
  stream<uint> fifo_PE11_1_op0_config_out;
  stream<uint> fifo_PE11_1_op1_config_out;
  stream<uint> fifo_PE11_1_compute_config_out;
  stream<uint> fifo_PE11_1_res_config_out;
#pragma HLS STREAM variable=fifo_PE11_1_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_1_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_1_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_1_res_config_out depth=2
  stream<uint> fifo_PE11_2_op0_config_out;
  stream<uint> fifo_PE11_2_op1_config_out;
  stream<uint> fifo_PE11_2_compute_config_out;
  stream<uint> fifo_PE11_2_res_config_out;
#pragma HLS STREAM variable=fifo_PE11_2_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_2_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_2_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_2_res_config_out depth=2
  stream<uint> fifo_PE11_3_op0_config_out;
  stream<uint> fifo_PE11_3_op1_config_out;
  stream<uint> fifo_PE11_3_compute_config_out;
  stream<uint> fifo_PE11_3_res_config_out;
#pragma HLS STREAM variable=fifo_PE11_3_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_3_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_3_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_3_res_config_out depth=2
  stream<uint> fifo_PE11_4_op0_config_out;
  stream<uint> fifo_PE11_4_op1_config_out;
  stream<uint> fifo_PE11_4_compute_config_out;
  stream<uint> fifo_PE11_4_res_config_out;
#pragma HLS STREAM variable=fifo_PE11_4_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_4_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_4_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_4_res_config_out depth=2
  stream<uint> fifo_PE11_5_op0_config_out;
  stream<uint> fifo_PE11_5_op1_config_out;
  stream<uint> fifo_PE11_5_compute_config_out;
  stream<uint> fifo_PE11_5_res_config_out;
#pragma HLS STREAM variable=fifo_PE11_5_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_5_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_5_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_5_res_config_out depth=2
  stream<uint> fifo_PE11_6_op0_config_out;
  stream<uint> fifo_PE11_6_op1_config_out;
  stream<uint> fifo_PE11_6_compute_config_out;
  stream<uint> fifo_PE11_6_res_config_out;
#pragma HLS STREAM variable=fifo_PE11_6_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_6_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_6_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_6_res_config_out depth=2
  stream<uint> fifo_PE11_7_op0_config_out;
  stream<uint> fifo_PE11_7_op1_config_out;
  stream<uint> fifo_PE11_7_compute_config_out;
  stream<uint> fifo_PE11_7_res_config_out;
#pragma HLS STREAM variable=fifo_PE11_7_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_7_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_7_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_7_res_config_out depth=2
  stream<uint> fifo_PE11_8_op0_config_out;
  stream<uint> fifo_PE11_8_op1_config_out;
  stream<uint> fifo_PE11_8_compute_config_out;
  stream<uint> fifo_PE11_8_res_config_out;
#pragma HLS STREAM variable=fifo_PE11_8_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_8_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_8_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_8_res_config_out depth=2
  stream<uint> fifo_PE11_9_op0_config_out;
  stream<uint> fifo_PE11_9_op1_config_out;
  stream<uint> fifo_PE11_9_compute_config_out;
  stream<uint> fifo_PE11_9_res_config_out;
#pragma HLS STREAM variable=fifo_PE11_9_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_9_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_9_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_9_res_config_out depth=2
  stream<uint> fifo_PE11_10_op0_config_out;
  stream<uint> fifo_PE11_10_op1_config_out;
  stream<uint> fifo_PE11_10_compute_config_out;
  stream<uint> fifo_PE11_10_res_config_out;
#pragma HLS STREAM variable=fifo_PE11_10_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_10_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_10_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_10_res_config_out depth=2
  stream<uint> fifo_PE11_11_op0_config_out;
  stream<uint> fifo_PE11_11_op1_config_out;
  stream<uint> fifo_PE11_11_compute_config_out;
  stream<uint> fifo_PE11_11_res_config_out;
#pragma HLS STREAM variable=fifo_PE11_11_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_11_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_11_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_11_res_config_out depth=2
  stream<uint> fifo_PE11_12_op0_config_out;
  stream<uint> fifo_PE11_12_op1_config_out;
  stream<uint> fifo_PE11_12_compute_config_out;
  stream<uint> fifo_PE11_12_res_config_out;
#pragma HLS STREAM variable=fifo_PE11_12_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_12_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_12_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_12_res_config_out depth=2
  stream<uint> fifo_PE11_13_op0_config_out;
  stream<uint> fifo_PE11_13_op1_config_out;
  stream<uint> fifo_PE11_13_compute_config_out;
  stream<uint> fifo_PE11_13_res_config_out;
#pragma HLS STREAM variable=fifo_PE11_13_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_13_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_13_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE11_13_res_config_out depth=2
  stream<uint> fifo_PE12_0_op0_config_out;
  stream<uint> fifo_PE12_0_op1_config_out;
  stream<uint> fifo_PE12_0_compute_config_out;
  stream<uint> fifo_PE12_0_res_config_out;
#pragma HLS STREAM variable=fifo_PE12_0_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_0_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_0_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_0_res_config_out depth=2
  stream<uint> fifo_PE12_1_op0_config_out;
  stream<uint> fifo_PE12_1_op1_config_out;
  stream<uint> fifo_PE12_1_compute_config_out;
  stream<uint> fifo_PE12_1_res_config_out;
#pragma HLS STREAM variable=fifo_PE12_1_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_1_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_1_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_1_res_config_out depth=2
  stream<uint> fifo_PE12_2_op0_config_out;
  stream<uint> fifo_PE12_2_op1_config_out;
  stream<uint> fifo_PE12_2_compute_config_out;
  stream<uint> fifo_PE12_2_res_config_out;
#pragma HLS STREAM variable=fifo_PE12_2_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_2_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_2_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_2_res_config_out depth=2
  stream<uint> fifo_PE12_3_op0_config_out;
  stream<uint> fifo_PE12_3_op1_config_out;
  stream<uint> fifo_PE12_3_compute_config_out;
  stream<uint> fifo_PE12_3_res_config_out;
#pragma HLS STREAM variable=fifo_PE12_3_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_3_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_3_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_3_res_config_out depth=2
  stream<uint> fifo_PE12_4_op0_config_out;
  stream<uint> fifo_PE12_4_op1_config_out;
  stream<uint> fifo_PE12_4_compute_config_out;
  stream<uint> fifo_PE12_4_res_config_out;
#pragma HLS STREAM variable=fifo_PE12_4_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_4_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_4_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_4_res_config_out depth=2
  stream<uint> fifo_PE12_5_op0_config_out;
  stream<uint> fifo_PE12_5_op1_config_out;
  stream<uint> fifo_PE12_5_compute_config_out;
  stream<uint> fifo_PE12_5_res_config_out;
#pragma HLS STREAM variable=fifo_PE12_5_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_5_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_5_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_5_res_config_out depth=2
  stream<uint> fifo_PE12_6_op0_config_out;
  stream<uint> fifo_PE12_6_op1_config_out;
  stream<uint> fifo_PE12_6_compute_config_out;
  stream<uint> fifo_PE12_6_res_config_out;
#pragma HLS STREAM variable=fifo_PE12_6_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_6_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_6_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_6_res_config_out depth=2
  stream<uint> fifo_PE12_7_op0_config_out;
  stream<uint> fifo_PE12_7_op1_config_out;
  stream<uint> fifo_PE12_7_compute_config_out;
  stream<uint> fifo_PE12_7_res_config_out;
#pragma HLS STREAM variable=fifo_PE12_7_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_7_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_7_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_7_res_config_out depth=2
  stream<uint> fifo_PE12_8_op0_config_out;
  stream<uint> fifo_PE12_8_op1_config_out;
  stream<uint> fifo_PE12_8_compute_config_out;
  stream<uint> fifo_PE12_8_res_config_out;
#pragma HLS STREAM variable=fifo_PE12_8_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_8_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_8_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_8_res_config_out depth=2
  stream<uint> fifo_PE12_9_op0_config_out;
  stream<uint> fifo_PE12_9_op1_config_out;
  stream<uint> fifo_PE12_9_compute_config_out;
  stream<uint> fifo_PE12_9_res_config_out;
#pragma HLS STREAM variable=fifo_PE12_9_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_9_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_9_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_9_res_config_out depth=2
  stream<uint> fifo_PE12_10_op0_config_out;
  stream<uint> fifo_PE12_10_op1_config_out;
  stream<uint> fifo_PE12_10_compute_config_out;
  stream<uint> fifo_PE12_10_res_config_out;
#pragma HLS STREAM variable=fifo_PE12_10_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_10_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_10_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_10_res_config_out depth=2
  stream<uint> fifo_PE12_11_op0_config_out;
  stream<uint> fifo_PE12_11_op1_config_out;
  stream<uint> fifo_PE12_11_compute_config_out;
  stream<uint> fifo_PE12_11_res_config_out;
#pragma HLS STREAM variable=fifo_PE12_11_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_11_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_11_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_11_res_config_out depth=2
  stream<uint> fifo_PE12_12_op0_config_out;
  stream<uint> fifo_PE12_12_op1_config_out;
  stream<uint> fifo_PE12_12_compute_config_out;
  stream<uint> fifo_PE12_12_res_config_out;
#pragma HLS STREAM variable=fifo_PE12_12_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_12_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_12_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_12_res_config_out depth=2
  stream<uint> fifo_PE12_13_op0_config_out;
  stream<uint> fifo_PE12_13_op1_config_out;
  stream<uint> fifo_PE12_13_compute_config_out;
  stream<uint> fifo_PE12_13_res_config_out;
#pragma HLS STREAM variable=fifo_PE12_13_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_13_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_13_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE12_13_res_config_out depth=2
  stream<uint> fifo_PE13_0_op0_config_out;
  stream<uint> fifo_PE13_0_op1_config_out;
  stream<uint> fifo_PE13_0_compute_config_out;
  stream<uint> fifo_PE13_0_res_config_out;
#pragma HLS STREAM variable=fifo_PE13_0_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_0_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_0_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_0_res_config_out depth=2
  stream<uint> fifo_PE13_1_op0_config_out;
  stream<uint> fifo_PE13_1_op1_config_out;
  stream<uint> fifo_PE13_1_compute_config_out;
  stream<uint> fifo_PE13_1_res_config_out;
#pragma HLS STREAM variable=fifo_PE13_1_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_1_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_1_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_1_res_config_out depth=2
  stream<uint> fifo_PE13_2_op0_config_out;
  stream<uint> fifo_PE13_2_op1_config_out;
  stream<uint> fifo_PE13_2_compute_config_out;
  stream<uint> fifo_PE13_2_res_config_out;
#pragma HLS STREAM variable=fifo_PE13_2_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_2_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_2_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_2_res_config_out depth=2
  stream<uint> fifo_PE13_3_op0_config_out;
  stream<uint> fifo_PE13_3_op1_config_out;
  stream<uint> fifo_PE13_3_compute_config_out;
  stream<uint> fifo_PE13_3_res_config_out;
#pragma HLS STREAM variable=fifo_PE13_3_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_3_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_3_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_3_res_config_out depth=2
  stream<uint> fifo_PE13_4_op0_config_out;
  stream<uint> fifo_PE13_4_op1_config_out;
  stream<uint> fifo_PE13_4_compute_config_out;
  stream<uint> fifo_PE13_4_res_config_out;
#pragma HLS STREAM variable=fifo_PE13_4_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_4_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_4_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_4_res_config_out depth=2
  stream<uint> fifo_PE13_5_op0_config_out;
  stream<uint> fifo_PE13_5_op1_config_out;
  stream<uint> fifo_PE13_5_compute_config_out;
  stream<uint> fifo_PE13_5_res_config_out;
#pragma HLS STREAM variable=fifo_PE13_5_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_5_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_5_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_5_res_config_out depth=2
  stream<uint> fifo_PE13_6_op0_config_out;
  stream<uint> fifo_PE13_6_op1_config_out;
  stream<uint> fifo_PE13_6_compute_config_out;
  stream<uint> fifo_PE13_6_res_config_out;
#pragma HLS STREAM variable=fifo_PE13_6_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_6_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_6_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_6_res_config_out depth=2
  stream<uint> fifo_PE13_7_op0_config_out;
  stream<uint> fifo_PE13_7_op1_config_out;
  stream<uint> fifo_PE13_7_compute_config_out;
  stream<uint> fifo_PE13_7_res_config_out;
#pragma HLS STREAM variable=fifo_PE13_7_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_7_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_7_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_7_res_config_out depth=2
  stream<uint> fifo_PE13_8_op0_config_out;
  stream<uint> fifo_PE13_8_op1_config_out;
  stream<uint> fifo_PE13_8_compute_config_out;
  stream<uint> fifo_PE13_8_res_config_out;
#pragma HLS STREAM variable=fifo_PE13_8_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_8_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_8_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_8_res_config_out depth=2
  stream<uint> fifo_PE13_9_op0_config_out;
  stream<uint> fifo_PE13_9_op1_config_out;
  stream<uint> fifo_PE13_9_compute_config_out;
  stream<uint> fifo_PE13_9_res_config_out;
#pragma HLS STREAM variable=fifo_PE13_9_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_9_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_9_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_9_res_config_out depth=2
  stream<uint> fifo_PE13_10_op0_config_out;
  stream<uint> fifo_PE13_10_op1_config_out;
  stream<uint> fifo_PE13_10_compute_config_out;
  stream<uint> fifo_PE13_10_res_config_out;
#pragma HLS STREAM variable=fifo_PE13_10_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_10_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_10_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_10_res_config_out depth=2
  stream<uint> fifo_PE13_11_op0_config_out;
  stream<uint> fifo_PE13_11_op1_config_out;
  stream<uint> fifo_PE13_11_compute_config_out;
  stream<uint> fifo_PE13_11_res_config_out;
#pragma HLS STREAM variable=fifo_PE13_11_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_11_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_11_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_11_res_config_out depth=2
  stream<uint> fifo_PE13_12_op0_config_out;
  stream<uint> fifo_PE13_12_op1_config_out;
  stream<uint> fifo_PE13_12_compute_config_out;
  stream<uint> fifo_PE13_12_res_config_out;
#pragma HLS STREAM variable=fifo_PE13_12_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_12_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_12_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_12_res_config_out depth=2
  stream<uint> fifo_PE13_13_op0_config_out;
  stream<uint> fifo_PE13_13_op1_config_out;
  stream<uint> fifo_PE13_13_compute_config_out;
  stream<uint> fifo_PE13_13_res_config_out;
#pragma HLS STREAM variable=fifo_PE13_13_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_13_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_13_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE13_13_res_config_out depth=2
  stream<uint> fifo_PE14_0_op0_config_out;
  stream<uint> fifo_PE14_0_op1_config_out;
  stream<uint> fifo_PE14_0_compute_config_out;
  stream<uint> fifo_PE14_0_res_config_out;
#pragma HLS STREAM variable=fifo_PE14_0_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_0_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_0_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_0_res_config_out depth=2
  stream<uint> fifo_PE14_1_op0_config_out;
  stream<uint> fifo_PE14_1_op1_config_out;
  stream<uint> fifo_PE14_1_compute_config_out;
  stream<uint> fifo_PE14_1_res_config_out;
#pragma HLS STREAM variable=fifo_PE14_1_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_1_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_1_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_1_res_config_out depth=2
  stream<uint> fifo_PE14_2_op0_config_out;
  stream<uint> fifo_PE14_2_op1_config_out;
  stream<uint> fifo_PE14_2_compute_config_out;
  stream<uint> fifo_PE14_2_res_config_out;
#pragma HLS STREAM variable=fifo_PE14_2_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_2_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_2_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_2_res_config_out depth=2
  stream<uint> fifo_PE14_3_op0_config_out;
  stream<uint> fifo_PE14_3_op1_config_out;
  stream<uint> fifo_PE14_3_compute_config_out;
  stream<uint> fifo_PE14_3_res_config_out;
#pragma HLS STREAM variable=fifo_PE14_3_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_3_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_3_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_3_res_config_out depth=2
  stream<uint> fifo_PE14_4_op0_config_out;
  stream<uint> fifo_PE14_4_op1_config_out;
  stream<uint> fifo_PE14_4_compute_config_out;
  stream<uint> fifo_PE14_4_res_config_out;
#pragma HLS STREAM variable=fifo_PE14_4_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_4_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_4_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_4_res_config_out depth=2
  stream<uint> fifo_PE14_5_op0_config_out;
  stream<uint> fifo_PE14_5_op1_config_out;
  stream<uint> fifo_PE14_5_compute_config_out;
  stream<uint> fifo_PE14_5_res_config_out;
#pragma HLS STREAM variable=fifo_PE14_5_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_5_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_5_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_5_res_config_out depth=2
  stream<uint> fifo_PE14_6_op0_config_out;
  stream<uint> fifo_PE14_6_op1_config_out;
  stream<uint> fifo_PE14_6_compute_config_out;
  stream<uint> fifo_PE14_6_res_config_out;
#pragma HLS STREAM variable=fifo_PE14_6_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_6_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_6_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_6_res_config_out depth=2
  stream<uint> fifo_PE14_7_op0_config_out;
  stream<uint> fifo_PE14_7_op1_config_out;
  stream<uint> fifo_PE14_7_compute_config_out;
  stream<uint> fifo_PE14_7_res_config_out;
#pragma HLS STREAM variable=fifo_PE14_7_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_7_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_7_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_7_res_config_out depth=2
  stream<uint> fifo_PE14_8_op0_config_out;
  stream<uint> fifo_PE14_8_op1_config_out;
  stream<uint> fifo_PE14_8_compute_config_out;
  stream<uint> fifo_PE14_8_res_config_out;
#pragma HLS STREAM variable=fifo_PE14_8_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_8_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_8_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_8_res_config_out depth=2
  stream<uint> fifo_PE14_9_op0_config_out;
  stream<uint> fifo_PE14_9_op1_config_out;
  stream<uint> fifo_PE14_9_compute_config_out;
  stream<uint> fifo_PE14_9_res_config_out;
#pragma HLS STREAM variable=fifo_PE14_9_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_9_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_9_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_9_res_config_out depth=2
  stream<uint> fifo_PE14_10_op0_config_out;
  stream<uint> fifo_PE14_10_op1_config_out;
  stream<uint> fifo_PE14_10_compute_config_out;
  stream<uint> fifo_PE14_10_res_config_out;
#pragma HLS STREAM variable=fifo_PE14_10_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_10_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_10_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_10_res_config_out depth=2
  stream<uint> fifo_PE14_11_op0_config_out;
  stream<uint> fifo_PE14_11_op1_config_out;
  stream<uint> fifo_PE14_11_compute_config_out;
  stream<uint> fifo_PE14_11_res_config_out;
#pragma HLS STREAM variable=fifo_PE14_11_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_11_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_11_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_11_res_config_out depth=2
  stream<uint> fifo_PE14_12_op0_config_out;
  stream<uint> fifo_PE14_12_op1_config_out;
  stream<uint> fifo_PE14_12_compute_config_out;
  stream<uint> fifo_PE14_12_res_config_out;
#pragma HLS STREAM variable=fifo_PE14_12_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_12_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_12_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_12_res_config_out depth=2
  stream<uint> fifo_PE14_13_op0_config_out;
  stream<uint> fifo_PE14_13_op1_config_out;
  stream<uint> fifo_PE14_13_compute_config_out;
  stream<uint> fifo_PE14_13_res_config_out;
#pragma HLS STREAM variable=fifo_PE14_13_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_13_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_13_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE14_13_res_config_out depth=2
  stream<uint> fifo_PE15_0_op0_config_out;
  stream<uint> fifo_PE15_0_op1_config_out;
  stream<uint> fifo_PE15_0_compute_config_out;
  stream<uint> fifo_PE15_0_res_config_out;
#pragma HLS STREAM variable=fifo_PE15_0_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_0_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_0_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_0_res_config_out depth=2
  stream<uint> fifo_PE15_1_op0_config_out;
  stream<uint> fifo_PE15_1_op1_config_out;
  stream<uint> fifo_PE15_1_compute_config_out;
  stream<uint> fifo_PE15_1_res_config_out;
#pragma HLS STREAM variable=fifo_PE15_1_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_1_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_1_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_1_res_config_out depth=2
  stream<uint> fifo_PE15_2_op0_config_out;
  stream<uint> fifo_PE15_2_op1_config_out;
  stream<uint> fifo_PE15_2_compute_config_out;
  stream<uint> fifo_PE15_2_res_config_out;
#pragma HLS STREAM variable=fifo_PE15_2_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_2_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_2_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_2_res_config_out depth=2
  stream<uint> fifo_PE15_3_op0_config_out;
  stream<uint> fifo_PE15_3_op1_config_out;
  stream<uint> fifo_PE15_3_compute_config_out;
  stream<uint> fifo_PE15_3_res_config_out;
#pragma HLS STREAM variable=fifo_PE15_3_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_3_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_3_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_3_res_config_out depth=2
  stream<uint> fifo_PE15_4_op0_config_out;
  stream<uint> fifo_PE15_4_op1_config_out;
  stream<uint> fifo_PE15_4_compute_config_out;
  stream<uint> fifo_PE15_4_res_config_out;
#pragma HLS STREAM variable=fifo_PE15_4_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_4_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_4_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_4_res_config_out depth=2
  stream<uint> fifo_PE15_5_op0_config_out;
  stream<uint> fifo_PE15_5_op1_config_out;
  stream<uint> fifo_PE15_5_compute_config_out;
  stream<uint> fifo_PE15_5_res_config_out;
#pragma HLS STREAM variable=fifo_PE15_5_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_5_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_5_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_5_res_config_out depth=2
  stream<uint> fifo_PE15_6_op0_config_out;
  stream<uint> fifo_PE15_6_op1_config_out;
  stream<uint> fifo_PE15_6_compute_config_out;
  stream<uint> fifo_PE15_6_res_config_out;
#pragma HLS STREAM variable=fifo_PE15_6_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_6_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_6_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_6_res_config_out depth=2
  stream<uint> fifo_PE15_7_op0_config_out;
  stream<uint> fifo_PE15_7_op1_config_out;
  stream<uint> fifo_PE15_7_compute_config_out;
  stream<uint> fifo_PE15_7_res_config_out;
#pragma HLS STREAM variable=fifo_PE15_7_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_7_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_7_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_7_res_config_out depth=2
  stream<uint> fifo_PE15_8_op0_config_out;
  stream<uint> fifo_PE15_8_op1_config_out;
  stream<uint> fifo_PE15_8_compute_config_out;
  stream<uint> fifo_PE15_8_res_config_out;
#pragma HLS STREAM variable=fifo_PE15_8_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_8_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_8_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_8_res_config_out depth=2
  stream<uint> fifo_PE15_9_op0_config_out;
  stream<uint> fifo_PE15_9_op1_config_out;
  stream<uint> fifo_PE15_9_compute_config_out;
  stream<uint> fifo_PE15_9_res_config_out;
#pragma HLS STREAM variable=fifo_PE15_9_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_9_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_9_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_9_res_config_out depth=2
  stream<uint> fifo_PE15_10_op0_config_out;
  stream<uint> fifo_PE15_10_op1_config_out;
  stream<uint> fifo_PE15_10_compute_config_out;
  stream<uint> fifo_PE15_10_res_config_out;
#pragma HLS STREAM variable=fifo_PE15_10_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_10_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_10_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_10_res_config_out depth=2
  stream<uint> fifo_PE15_11_op0_config_out;
  stream<uint> fifo_PE15_11_op1_config_out;
  stream<uint> fifo_PE15_11_compute_config_out;
  stream<uint> fifo_PE15_11_res_config_out;
#pragma HLS STREAM variable=fifo_PE15_11_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_11_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_11_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_11_res_config_out depth=2
  stream<uint> fifo_PE15_12_op0_config_out;
  stream<uint> fifo_PE15_12_op1_config_out;
  stream<uint> fifo_PE15_12_compute_config_out;
  stream<uint> fifo_PE15_12_res_config_out;
#pragma HLS STREAM variable=fifo_PE15_12_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_12_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_12_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_12_res_config_out depth=2
  stream<uint> fifo_PE15_13_op0_config_out;
  stream<uint> fifo_PE15_13_op1_config_out;
  stream<uint> fifo_PE15_13_compute_config_out;
  stream<uint> fifo_PE15_13_res_config_out;
#pragma HLS STREAM variable=fifo_PE15_13_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_13_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_13_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE15_13_res_config_out depth=2

  stream<U1_Data0PEChannelType> PE0_0_fifo0_local;
#pragma HLS STREAM variable=PE0_0_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE0_0_fifo1_local;
#pragma HLS STREAM variable=PE0_0_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE0_0_fifo2_local;
#pragma HLS STREAM variable=PE0_0_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE0_1_fifo0_local;
#pragma HLS STREAM variable=PE0_1_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE0_1_fifo1_local;
#pragma HLS STREAM variable=PE0_1_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE0_1_fifo2_local;
#pragma HLS STREAM variable=PE0_1_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE0_2_fifo0_local;
#pragma HLS STREAM variable=PE0_2_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE0_2_fifo1_local;
#pragma HLS STREAM variable=PE0_2_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE0_2_fifo2_local;
#pragma HLS STREAM variable=PE0_2_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE0_3_fifo0_local;
#pragma HLS STREAM variable=PE0_3_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE0_3_fifo1_local;
#pragma HLS STREAM variable=PE0_3_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE0_3_fifo2_local;
#pragma HLS STREAM variable=PE0_3_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE0_4_fifo0_local;
#pragma HLS STREAM variable=PE0_4_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE0_4_fifo1_local;
#pragma HLS STREAM variable=PE0_4_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE0_4_fifo2_local;
#pragma HLS STREAM variable=PE0_4_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE0_5_fifo0_local;
#pragma HLS STREAM variable=PE0_5_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE0_5_fifo1_local;
#pragma HLS STREAM variable=PE0_5_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE0_5_fifo2_local;
#pragma HLS STREAM variable=PE0_5_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE0_6_fifo0_local;
#pragma HLS STREAM variable=PE0_6_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE0_6_fifo1_local;
#pragma HLS STREAM variable=PE0_6_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE0_6_fifo2_local;
#pragma HLS STREAM variable=PE0_6_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE0_7_fifo0_local;
#pragma HLS STREAM variable=PE0_7_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE0_7_fifo1_local;
#pragma HLS STREAM variable=PE0_7_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE0_7_fifo2_local;
#pragma HLS STREAM variable=PE0_7_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE0_8_fifo0_local;
#pragma HLS STREAM variable=PE0_8_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE0_8_fifo1_local;
#pragma HLS STREAM variable=PE0_8_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE0_8_fifo2_local;
#pragma HLS STREAM variable=PE0_8_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE0_9_fifo0_local;
#pragma HLS STREAM variable=PE0_9_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE0_9_fifo1_local;
#pragma HLS STREAM variable=PE0_9_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE0_9_fifo2_local;
#pragma HLS STREAM variable=PE0_9_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE0_10_fifo0_local;
#pragma HLS STREAM variable=PE0_10_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE0_10_fifo1_local;
#pragma HLS STREAM variable=PE0_10_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE0_10_fifo2_local;
#pragma HLS STREAM variable=PE0_10_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE0_11_fifo0_local;
#pragma HLS STREAM variable=PE0_11_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE0_11_fifo1_local;
#pragma HLS STREAM variable=PE0_11_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE0_11_fifo2_local;
#pragma HLS STREAM variable=PE0_11_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE0_12_fifo0_local;
#pragma HLS STREAM variable=PE0_12_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE0_12_fifo1_local;
#pragma HLS STREAM variable=PE0_12_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE0_12_fifo2_local;
#pragma HLS STREAM variable=PE0_12_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE0_13_fifo0_local;
#pragma HLS STREAM variable=PE0_13_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE0_13_fifo1_local;
#pragma HLS STREAM variable=PE0_13_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE0_13_fifo2_local;
#pragma HLS STREAM variable=PE0_13_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE1_0_fifo0_local;
#pragma HLS STREAM variable=PE1_0_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE1_0_fifo1_local;
#pragma HLS STREAM variable=PE1_0_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE1_0_fifo2_local;
#pragma HLS STREAM variable=PE1_0_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE1_1_fifo0_local;
#pragma HLS STREAM variable=PE1_1_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE1_1_fifo1_local;
#pragma HLS STREAM variable=PE1_1_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE1_1_fifo2_local;
#pragma HLS STREAM variable=PE1_1_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE1_2_fifo0_local;
#pragma HLS STREAM variable=PE1_2_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE1_2_fifo1_local;
#pragma HLS STREAM variable=PE1_2_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE1_2_fifo2_local;
#pragma HLS STREAM variable=PE1_2_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE1_3_fifo0_local;
#pragma HLS STREAM variable=PE1_3_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE1_3_fifo1_local;
#pragma HLS STREAM variable=PE1_3_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE1_3_fifo2_local;
#pragma HLS STREAM variable=PE1_3_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE1_4_fifo0_local;
#pragma HLS STREAM variable=PE1_4_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE1_4_fifo1_local;
#pragma HLS STREAM variable=PE1_4_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE1_4_fifo2_local;
#pragma HLS STREAM variable=PE1_4_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE1_5_fifo0_local;
#pragma HLS STREAM variable=PE1_5_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE1_5_fifo1_local;
#pragma HLS STREAM variable=PE1_5_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE1_5_fifo2_local;
#pragma HLS STREAM variable=PE1_5_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE1_6_fifo0_local;
#pragma HLS STREAM variable=PE1_6_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE1_6_fifo1_local;
#pragma HLS STREAM variable=PE1_6_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE1_6_fifo2_local;
#pragma HLS STREAM variable=PE1_6_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE1_7_fifo0_local;
#pragma HLS STREAM variable=PE1_7_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE1_7_fifo1_local;
#pragma HLS STREAM variable=PE1_7_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE1_7_fifo2_local;
#pragma HLS STREAM variable=PE1_7_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE1_8_fifo0_local;
#pragma HLS STREAM variable=PE1_8_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE1_8_fifo1_local;
#pragma HLS STREAM variable=PE1_8_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE1_8_fifo2_local;
#pragma HLS STREAM variable=PE1_8_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE1_9_fifo0_local;
#pragma HLS STREAM variable=PE1_9_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE1_9_fifo1_local;
#pragma HLS STREAM variable=PE1_9_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE1_9_fifo2_local;
#pragma HLS STREAM variable=PE1_9_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE1_10_fifo0_local;
#pragma HLS STREAM variable=PE1_10_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE1_10_fifo1_local;
#pragma HLS STREAM variable=PE1_10_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE1_10_fifo2_local;
#pragma HLS STREAM variable=PE1_10_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE1_11_fifo0_local;
#pragma HLS STREAM variable=PE1_11_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE1_11_fifo1_local;
#pragma HLS STREAM variable=PE1_11_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE1_11_fifo2_local;
#pragma HLS STREAM variable=PE1_11_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE1_12_fifo0_local;
#pragma HLS STREAM variable=PE1_12_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE1_12_fifo1_local;
#pragma HLS STREAM variable=PE1_12_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE1_12_fifo2_local;
#pragma HLS STREAM variable=PE1_12_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE1_13_fifo0_local;
#pragma HLS STREAM variable=PE1_13_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE1_13_fifo1_local;
#pragma HLS STREAM variable=PE1_13_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE1_13_fifo2_local;
#pragma HLS STREAM variable=PE1_13_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE2_0_fifo0_local;
#pragma HLS STREAM variable=PE2_0_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE2_0_fifo1_local;
#pragma HLS STREAM variable=PE2_0_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE2_0_fifo2_local;
#pragma HLS STREAM variable=PE2_0_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE2_1_fifo0_local;
#pragma HLS STREAM variable=PE2_1_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE2_1_fifo1_local;
#pragma HLS STREAM variable=PE2_1_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE2_1_fifo2_local;
#pragma HLS STREAM variable=PE2_1_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE2_2_fifo0_local;
#pragma HLS STREAM variable=PE2_2_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE2_2_fifo1_local;
#pragma HLS STREAM variable=PE2_2_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE2_2_fifo2_local;
#pragma HLS STREAM variable=PE2_2_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE2_3_fifo0_local;
#pragma HLS STREAM variable=PE2_3_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE2_3_fifo1_local;
#pragma HLS STREAM variable=PE2_3_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE2_3_fifo2_local;
#pragma HLS STREAM variable=PE2_3_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE2_4_fifo0_local;
#pragma HLS STREAM variable=PE2_4_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE2_4_fifo1_local;
#pragma HLS STREAM variable=PE2_4_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE2_4_fifo2_local;
#pragma HLS STREAM variable=PE2_4_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE2_5_fifo0_local;
#pragma HLS STREAM variable=PE2_5_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE2_5_fifo1_local;
#pragma HLS STREAM variable=PE2_5_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE2_5_fifo2_local;
#pragma HLS STREAM variable=PE2_5_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE2_6_fifo0_local;
#pragma HLS STREAM variable=PE2_6_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE2_6_fifo1_local;
#pragma HLS STREAM variable=PE2_6_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE2_6_fifo2_local;
#pragma HLS STREAM variable=PE2_6_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE2_7_fifo0_local;
#pragma HLS STREAM variable=PE2_7_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE2_7_fifo1_local;
#pragma HLS STREAM variable=PE2_7_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE2_7_fifo2_local;
#pragma HLS STREAM variable=PE2_7_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE2_8_fifo0_local;
#pragma HLS STREAM variable=PE2_8_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE2_8_fifo1_local;
#pragma HLS STREAM variable=PE2_8_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE2_8_fifo2_local;
#pragma HLS STREAM variable=PE2_8_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE2_9_fifo0_local;
#pragma HLS STREAM variable=PE2_9_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE2_9_fifo1_local;
#pragma HLS STREAM variable=PE2_9_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE2_9_fifo2_local;
#pragma HLS STREAM variable=PE2_9_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE2_10_fifo0_local;
#pragma HLS STREAM variable=PE2_10_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE2_10_fifo1_local;
#pragma HLS STREAM variable=PE2_10_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE2_10_fifo2_local;
#pragma HLS STREAM variable=PE2_10_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE2_11_fifo0_local;
#pragma HLS STREAM variable=PE2_11_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE2_11_fifo1_local;
#pragma HLS STREAM variable=PE2_11_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE2_11_fifo2_local;
#pragma HLS STREAM variable=PE2_11_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE2_12_fifo0_local;
#pragma HLS STREAM variable=PE2_12_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE2_12_fifo1_local;
#pragma HLS STREAM variable=PE2_12_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE2_12_fifo2_local;
#pragma HLS STREAM variable=PE2_12_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE2_13_fifo0_local;
#pragma HLS STREAM variable=PE2_13_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE2_13_fifo1_local;
#pragma HLS STREAM variable=PE2_13_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE2_13_fifo2_local;
#pragma HLS STREAM variable=PE2_13_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE3_0_fifo0_local;
#pragma HLS STREAM variable=PE3_0_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE3_0_fifo1_local;
#pragma HLS STREAM variable=PE3_0_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE3_0_fifo2_local;
#pragma HLS STREAM variable=PE3_0_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE3_1_fifo0_local;
#pragma HLS STREAM variable=PE3_1_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE3_1_fifo1_local;
#pragma HLS STREAM variable=PE3_1_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE3_1_fifo2_local;
#pragma HLS STREAM variable=PE3_1_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE3_2_fifo0_local;
#pragma HLS STREAM variable=PE3_2_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE3_2_fifo1_local;
#pragma HLS STREAM variable=PE3_2_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE3_2_fifo2_local;
#pragma HLS STREAM variable=PE3_2_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE3_3_fifo0_local;
#pragma HLS STREAM variable=PE3_3_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE3_3_fifo1_local;
#pragma HLS STREAM variable=PE3_3_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE3_3_fifo2_local;
#pragma HLS STREAM variable=PE3_3_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE3_4_fifo0_local;
#pragma HLS STREAM variable=PE3_4_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE3_4_fifo1_local;
#pragma HLS STREAM variable=PE3_4_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE3_4_fifo2_local;
#pragma HLS STREAM variable=PE3_4_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE3_5_fifo0_local;
#pragma HLS STREAM variable=PE3_5_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE3_5_fifo1_local;
#pragma HLS STREAM variable=PE3_5_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE3_5_fifo2_local;
#pragma HLS STREAM variable=PE3_5_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE3_6_fifo0_local;
#pragma HLS STREAM variable=PE3_6_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE3_6_fifo1_local;
#pragma HLS STREAM variable=PE3_6_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE3_6_fifo2_local;
#pragma HLS STREAM variable=PE3_6_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE3_7_fifo0_local;
#pragma HLS STREAM variable=PE3_7_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE3_7_fifo1_local;
#pragma HLS STREAM variable=PE3_7_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE3_7_fifo2_local;
#pragma HLS STREAM variable=PE3_7_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE3_8_fifo0_local;
#pragma HLS STREAM variable=PE3_8_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE3_8_fifo1_local;
#pragma HLS STREAM variable=PE3_8_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE3_8_fifo2_local;
#pragma HLS STREAM variable=PE3_8_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE3_9_fifo0_local;
#pragma HLS STREAM variable=PE3_9_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE3_9_fifo1_local;
#pragma HLS STREAM variable=PE3_9_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE3_9_fifo2_local;
#pragma HLS STREAM variable=PE3_9_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE3_10_fifo0_local;
#pragma HLS STREAM variable=PE3_10_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE3_10_fifo1_local;
#pragma HLS STREAM variable=PE3_10_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE3_10_fifo2_local;
#pragma HLS STREAM variable=PE3_10_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE3_11_fifo0_local;
#pragma HLS STREAM variable=PE3_11_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE3_11_fifo1_local;
#pragma HLS STREAM variable=PE3_11_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE3_11_fifo2_local;
#pragma HLS STREAM variable=PE3_11_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE3_12_fifo0_local;
#pragma HLS STREAM variable=PE3_12_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE3_12_fifo1_local;
#pragma HLS STREAM variable=PE3_12_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE3_12_fifo2_local;
#pragma HLS STREAM variable=PE3_12_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE3_13_fifo0_local;
#pragma HLS STREAM variable=PE3_13_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE3_13_fifo1_local;
#pragma HLS STREAM variable=PE3_13_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE3_13_fifo2_local;
#pragma HLS STREAM variable=PE3_13_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE4_0_fifo0_local;
#pragma HLS STREAM variable=PE4_0_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE4_0_fifo1_local;
#pragma HLS STREAM variable=PE4_0_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE4_0_fifo2_local;
#pragma HLS STREAM variable=PE4_0_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE4_1_fifo0_local;
#pragma HLS STREAM variable=PE4_1_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE4_1_fifo1_local;
#pragma HLS STREAM variable=PE4_1_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE4_1_fifo2_local;
#pragma HLS STREAM variable=PE4_1_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE4_2_fifo0_local;
#pragma HLS STREAM variable=PE4_2_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE4_2_fifo1_local;
#pragma HLS STREAM variable=PE4_2_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE4_2_fifo2_local;
#pragma HLS STREAM variable=PE4_2_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE4_3_fifo0_local;
#pragma HLS STREAM variable=PE4_3_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE4_3_fifo1_local;
#pragma HLS STREAM variable=PE4_3_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE4_3_fifo2_local;
#pragma HLS STREAM variable=PE4_3_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE4_4_fifo0_local;
#pragma HLS STREAM variable=PE4_4_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE4_4_fifo1_local;
#pragma HLS STREAM variable=PE4_4_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE4_4_fifo2_local;
#pragma HLS STREAM variable=PE4_4_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE4_5_fifo0_local;
#pragma HLS STREAM variable=PE4_5_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE4_5_fifo1_local;
#pragma HLS STREAM variable=PE4_5_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE4_5_fifo2_local;
#pragma HLS STREAM variable=PE4_5_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE4_6_fifo0_local;
#pragma HLS STREAM variable=PE4_6_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE4_6_fifo1_local;
#pragma HLS STREAM variable=PE4_6_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE4_6_fifo2_local;
#pragma HLS STREAM variable=PE4_6_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE4_7_fifo0_local;
#pragma HLS STREAM variable=PE4_7_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE4_7_fifo1_local;
#pragma HLS STREAM variable=PE4_7_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE4_7_fifo2_local;
#pragma HLS STREAM variable=PE4_7_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE4_8_fifo0_local;
#pragma HLS STREAM variable=PE4_8_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE4_8_fifo1_local;
#pragma HLS STREAM variable=PE4_8_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE4_8_fifo2_local;
#pragma HLS STREAM variable=PE4_8_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE4_9_fifo0_local;
#pragma HLS STREAM variable=PE4_9_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE4_9_fifo1_local;
#pragma HLS STREAM variable=PE4_9_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE4_9_fifo2_local;
#pragma HLS STREAM variable=PE4_9_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE4_10_fifo0_local;
#pragma HLS STREAM variable=PE4_10_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE4_10_fifo1_local;
#pragma HLS STREAM variable=PE4_10_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE4_10_fifo2_local;
#pragma HLS STREAM variable=PE4_10_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE4_11_fifo0_local;
#pragma HLS STREAM variable=PE4_11_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE4_11_fifo1_local;
#pragma HLS STREAM variable=PE4_11_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE4_11_fifo2_local;
#pragma HLS STREAM variable=PE4_11_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE4_12_fifo0_local;
#pragma HLS STREAM variable=PE4_12_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE4_12_fifo1_local;
#pragma HLS STREAM variable=PE4_12_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE4_12_fifo2_local;
#pragma HLS STREAM variable=PE4_12_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE4_13_fifo0_local;
#pragma HLS STREAM variable=PE4_13_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE4_13_fifo1_local;
#pragma HLS STREAM variable=PE4_13_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE4_13_fifo2_local;
#pragma HLS STREAM variable=PE4_13_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE5_0_fifo0_local;
#pragma HLS STREAM variable=PE5_0_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE5_0_fifo1_local;
#pragma HLS STREAM variable=PE5_0_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE5_0_fifo2_local;
#pragma HLS STREAM variable=PE5_0_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE5_1_fifo0_local;
#pragma HLS STREAM variable=PE5_1_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE5_1_fifo1_local;
#pragma HLS STREAM variable=PE5_1_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE5_1_fifo2_local;
#pragma HLS STREAM variable=PE5_1_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE5_2_fifo0_local;
#pragma HLS STREAM variable=PE5_2_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE5_2_fifo1_local;
#pragma HLS STREAM variable=PE5_2_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE5_2_fifo2_local;
#pragma HLS STREAM variable=PE5_2_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE5_3_fifo0_local;
#pragma HLS STREAM variable=PE5_3_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE5_3_fifo1_local;
#pragma HLS STREAM variable=PE5_3_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE5_3_fifo2_local;
#pragma HLS STREAM variable=PE5_3_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE5_4_fifo0_local;
#pragma HLS STREAM variable=PE5_4_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE5_4_fifo1_local;
#pragma HLS STREAM variable=PE5_4_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE5_4_fifo2_local;
#pragma HLS STREAM variable=PE5_4_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE5_5_fifo0_local;
#pragma HLS STREAM variable=PE5_5_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE5_5_fifo1_local;
#pragma HLS STREAM variable=PE5_5_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE5_5_fifo2_local;
#pragma HLS STREAM variable=PE5_5_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE5_6_fifo0_local;
#pragma HLS STREAM variable=PE5_6_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE5_6_fifo1_local;
#pragma HLS STREAM variable=PE5_6_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE5_6_fifo2_local;
#pragma HLS STREAM variable=PE5_6_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE5_7_fifo0_local;
#pragma HLS STREAM variable=PE5_7_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE5_7_fifo1_local;
#pragma HLS STREAM variable=PE5_7_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE5_7_fifo2_local;
#pragma HLS STREAM variable=PE5_7_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE5_8_fifo0_local;
#pragma HLS STREAM variable=PE5_8_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE5_8_fifo1_local;
#pragma HLS STREAM variable=PE5_8_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE5_8_fifo2_local;
#pragma HLS STREAM variable=PE5_8_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE5_9_fifo0_local;
#pragma HLS STREAM variable=PE5_9_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE5_9_fifo1_local;
#pragma HLS STREAM variable=PE5_9_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE5_9_fifo2_local;
#pragma HLS STREAM variable=PE5_9_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE5_10_fifo0_local;
#pragma HLS STREAM variable=PE5_10_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE5_10_fifo1_local;
#pragma HLS STREAM variable=PE5_10_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE5_10_fifo2_local;
#pragma HLS STREAM variable=PE5_10_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE5_11_fifo0_local;
#pragma HLS STREAM variable=PE5_11_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE5_11_fifo1_local;
#pragma HLS STREAM variable=PE5_11_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE5_11_fifo2_local;
#pragma HLS STREAM variable=PE5_11_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE5_12_fifo0_local;
#pragma HLS STREAM variable=PE5_12_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE5_12_fifo1_local;
#pragma HLS STREAM variable=PE5_12_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE5_12_fifo2_local;
#pragma HLS STREAM variable=PE5_12_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE5_13_fifo0_local;
#pragma HLS STREAM variable=PE5_13_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE5_13_fifo1_local;
#pragma HLS STREAM variable=PE5_13_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE5_13_fifo2_local;
#pragma HLS STREAM variable=PE5_13_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE6_0_fifo0_local;
#pragma HLS STREAM variable=PE6_0_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE6_0_fifo1_local;
#pragma HLS STREAM variable=PE6_0_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE6_0_fifo2_local;
#pragma HLS STREAM variable=PE6_0_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE6_1_fifo0_local;
#pragma HLS STREAM variable=PE6_1_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE6_1_fifo1_local;
#pragma HLS STREAM variable=PE6_1_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE6_1_fifo2_local;
#pragma HLS STREAM variable=PE6_1_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE6_2_fifo0_local;
#pragma HLS STREAM variable=PE6_2_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE6_2_fifo1_local;
#pragma HLS STREAM variable=PE6_2_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE6_2_fifo2_local;
#pragma HLS STREAM variable=PE6_2_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE6_3_fifo0_local;
#pragma HLS STREAM variable=PE6_3_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE6_3_fifo1_local;
#pragma HLS STREAM variable=PE6_3_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE6_3_fifo2_local;
#pragma HLS STREAM variable=PE6_3_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE6_4_fifo0_local;
#pragma HLS STREAM variable=PE6_4_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE6_4_fifo1_local;
#pragma HLS STREAM variable=PE6_4_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE6_4_fifo2_local;
#pragma HLS STREAM variable=PE6_4_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE6_5_fifo0_local;
#pragma HLS STREAM variable=PE6_5_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE6_5_fifo1_local;
#pragma HLS STREAM variable=PE6_5_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE6_5_fifo2_local;
#pragma HLS STREAM variable=PE6_5_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE6_6_fifo0_local;
#pragma HLS STREAM variable=PE6_6_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE6_6_fifo1_local;
#pragma HLS STREAM variable=PE6_6_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE6_6_fifo2_local;
#pragma HLS STREAM variable=PE6_6_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE6_7_fifo0_local;
#pragma HLS STREAM variable=PE6_7_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE6_7_fifo1_local;
#pragma HLS STREAM variable=PE6_7_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE6_7_fifo2_local;
#pragma HLS STREAM variable=PE6_7_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE6_8_fifo0_local;
#pragma HLS STREAM variable=PE6_8_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE6_8_fifo1_local;
#pragma HLS STREAM variable=PE6_8_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE6_8_fifo2_local;
#pragma HLS STREAM variable=PE6_8_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE6_9_fifo0_local;
#pragma HLS STREAM variable=PE6_9_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE6_9_fifo1_local;
#pragma HLS STREAM variable=PE6_9_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE6_9_fifo2_local;
#pragma HLS STREAM variable=PE6_9_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE6_10_fifo0_local;
#pragma HLS STREAM variable=PE6_10_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE6_10_fifo1_local;
#pragma HLS STREAM variable=PE6_10_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE6_10_fifo2_local;
#pragma HLS STREAM variable=PE6_10_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE6_11_fifo0_local;
#pragma HLS STREAM variable=PE6_11_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE6_11_fifo1_local;
#pragma HLS STREAM variable=PE6_11_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE6_11_fifo2_local;
#pragma HLS STREAM variable=PE6_11_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE6_12_fifo0_local;
#pragma HLS STREAM variable=PE6_12_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE6_12_fifo1_local;
#pragma HLS STREAM variable=PE6_12_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE6_12_fifo2_local;
#pragma HLS STREAM variable=PE6_12_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE6_13_fifo0_local;
#pragma HLS STREAM variable=PE6_13_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE6_13_fifo1_local;
#pragma HLS STREAM variable=PE6_13_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE6_13_fifo2_local;
#pragma HLS STREAM variable=PE6_13_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE7_0_fifo0_local;
#pragma HLS STREAM variable=PE7_0_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE7_0_fifo1_local;
#pragma HLS STREAM variable=PE7_0_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE7_0_fifo2_local;
#pragma HLS STREAM variable=PE7_0_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE7_1_fifo0_local;
#pragma HLS STREAM variable=PE7_1_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE7_1_fifo1_local;
#pragma HLS STREAM variable=PE7_1_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE7_1_fifo2_local;
#pragma HLS STREAM variable=PE7_1_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE7_2_fifo0_local;
#pragma HLS STREAM variable=PE7_2_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE7_2_fifo1_local;
#pragma HLS STREAM variable=PE7_2_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE7_2_fifo2_local;
#pragma HLS STREAM variable=PE7_2_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE7_3_fifo0_local;
#pragma HLS STREAM variable=PE7_3_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE7_3_fifo1_local;
#pragma HLS STREAM variable=PE7_3_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE7_3_fifo2_local;
#pragma HLS STREAM variable=PE7_3_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE7_4_fifo0_local;
#pragma HLS STREAM variable=PE7_4_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE7_4_fifo1_local;
#pragma HLS STREAM variable=PE7_4_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE7_4_fifo2_local;
#pragma HLS STREAM variable=PE7_4_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE7_5_fifo0_local;
#pragma HLS STREAM variable=PE7_5_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE7_5_fifo1_local;
#pragma HLS STREAM variable=PE7_5_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE7_5_fifo2_local;
#pragma HLS STREAM variable=PE7_5_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE7_6_fifo0_local;
#pragma HLS STREAM variable=PE7_6_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE7_6_fifo1_local;
#pragma HLS STREAM variable=PE7_6_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE7_6_fifo2_local;
#pragma HLS STREAM variable=PE7_6_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE7_7_fifo0_local;
#pragma HLS STREAM variable=PE7_7_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE7_7_fifo1_local;
#pragma HLS STREAM variable=PE7_7_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE7_7_fifo2_local;
#pragma HLS STREAM variable=PE7_7_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE7_8_fifo0_local;
#pragma HLS STREAM variable=PE7_8_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE7_8_fifo1_local;
#pragma HLS STREAM variable=PE7_8_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE7_8_fifo2_local;
#pragma HLS STREAM variable=PE7_8_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE7_9_fifo0_local;
#pragma HLS STREAM variable=PE7_9_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE7_9_fifo1_local;
#pragma HLS STREAM variable=PE7_9_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE7_9_fifo2_local;
#pragma HLS STREAM variable=PE7_9_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE7_10_fifo0_local;
#pragma HLS STREAM variable=PE7_10_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE7_10_fifo1_local;
#pragma HLS STREAM variable=PE7_10_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE7_10_fifo2_local;
#pragma HLS STREAM variable=PE7_10_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE7_11_fifo0_local;
#pragma HLS STREAM variable=PE7_11_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE7_11_fifo1_local;
#pragma HLS STREAM variable=PE7_11_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE7_11_fifo2_local;
#pragma HLS STREAM variable=PE7_11_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE7_12_fifo0_local;
#pragma HLS STREAM variable=PE7_12_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE7_12_fifo1_local;
#pragma HLS STREAM variable=PE7_12_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE7_12_fifo2_local;
#pragma HLS STREAM variable=PE7_12_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE7_13_fifo0_local;
#pragma HLS STREAM variable=PE7_13_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE7_13_fifo1_local;
#pragma HLS STREAM variable=PE7_13_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE7_13_fifo2_local;
#pragma HLS STREAM variable=PE7_13_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE8_0_fifo0_local;
#pragma HLS STREAM variable=PE8_0_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE8_0_fifo1_local;
#pragma HLS STREAM variable=PE8_0_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE8_0_fifo2_local;
#pragma HLS STREAM variable=PE8_0_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE8_1_fifo0_local;
#pragma HLS STREAM variable=PE8_1_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE8_1_fifo1_local;
#pragma HLS STREAM variable=PE8_1_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE8_1_fifo2_local;
#pragma HLS STREAM variable=PE8_1_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE8_2_fifo0_local;
#pragma HLS STREAM variable=PE8_2_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE8_2_fifo1_local;
#pragma HLS STREAM variable=PE8_2_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE8_2_fifo2_local;
#pragma HLS STREAM variable=PE8_2_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE8_3_fifo0_local;
#pragma HLS STREAM variable=PE8_3_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE8_3_fifo1_local;
#pragma HLS STREAM variable=PE8_3_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE8_3_fifo2_local;
#pragma HLS STREAM variable=PE8_3_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE8_4_fifo0_local;
#pragma HLS STREAM variable=PE8_4_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE8_4_fifo1_local;
#pragma HLS STREAM variable=PE8_4_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE8_4_fifo2_local;
#pragma HLS STREAM variable=PE8_4_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE8_5_fifo0_local;
#pragma HLS STREAM variable=PE8_5_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE8_5_fifo1_local;
#pragma HLS STREAM variable=PE8_5_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE8_5_fifo2_local;
#pragma HLS STREAM variable=PE8_5_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE8_6_fifo0_local;
#pragma HLS STREAM variable=PE8_6_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE8_6_fifo1_local;
#pragma HLS STREAM variable=PE8_6_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE8_6_fifo2_local;
#pragma HLS STREAM variable=PE8_6_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE8_7_fifo0_local;
#pragma HLS STREAM variable=PE8_7_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE8_7_fifo1_local;
#pragma HLS STREAM variable=PE8_7_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE8_7_fifo2_local;
#pragma HLS STREAM variable=PE8_7_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE8_8_fifo0_local;
#pragma HLS STREAM variable=PE8_8_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE8_8_fifo1_local;
#pragma HLS STREAM variable=PE8_8_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE8_8_fifo2_local;
#pragma HLS STREAM variable=PE8_8_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE8_9_fifo0_local;
#pragma HLS STREAM variable=PE8_9_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE8_9_fifo1_local;
#pragma HLS STREAM variable=PE8_9_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE8_9_fifo2_local;
#pragma HLS STREAM variable=PE8_9_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE8_10_fifo0_local;
#pragma HLS STREAM variable=PE8_10_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE8_10_fifo1_local;
#pragma HLS STREAM variable=PE8_10_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE8_10_fifo2_local;
#pragma HLS STREAM variable=PE8_10_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE8_11_fifo0_local;
#pragma HLS STREAM variable=PE8_11_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE8_11_fifo1_local;
#pragma HLS STREAM variable=PE8_11_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE8_11_fifo2_local;
#pragma HLS STREAM variable=PE8_11_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE8_12_fifo0_local;
#pragma HLS STREAM variable=PE8_12_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE8_12_fifo1_local;
#pragma HLS STREAM variable=PE8_12_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE8_12_fifo2_local;
#pragma HLS STREAM variable=PE8_12_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE8_13_fifo0_local;
#pragma HLS STREAM variable=PE8_13_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE8_13_fifo1_local;
#pragma HLS STREAM variable=PE8_13_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE8_13_fifo2_local;
#pragma HLS STREAM variable=PE8_13_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE9_0_fifo0_local;
#pragma HLS STREAM variable=PE9_0_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE9_0_fifo1_local;
#pragma HLS STREAM variable=PE9_0_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE9_0_fifo2_local;
#pragma HLS STREAM variable=PE9_0_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE9_1_fifo0_local;
#pragma HLS STREAM variable=PE9_1_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE9_1_fifo1_local;
#pragma HLS STREAM variable=PE9_1_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE9_1_fifo2_local;
#pragma HLS STREAM variable=PE9_1_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE9_2_fifo0_local;
#pragma HLS STREAM variable=PE9_2_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE9_2_fifo1_local;
#pragma HLS STREAM variable=PE9_2_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE9_2_fifo2_local;
#pragma HLS STREAM variable=PE9_2_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE9_3_fifo0_local;
#pragma HLS STREAM variable=PE9_3_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE9_3_fifo1_local;
#pragma HLS STREAM variable=PE9_3_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE9_3_fifo2_local;
#pragma HLS STREAM variable=PE9_3_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE9_4_fifo0_local;
#pragma HLS STREAM variable=PE9_4_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE9_4_fifo1_local;
#pragma HLS STREAM variable=PE9_4_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE9_4_fifo2_local;
#pragma HLS STREAM variable=PE9_4_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE9_5_fifo0_local;
#pragma HLS STREAM variable=PE9_5_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE9_5_fifo1_local;
#pragma HLS STREAM variable=PE9_5_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE9_5_fifo2_local;
#pragma HLS STREAM variable=PE9_5_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE9_6_fifo0_local;
#pragma HLS STREAM variable=PE9_6_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE9_6_fifo1_local;
#pragma HLS STREAM variable=PE9_6_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE9_6_fifo2_local;
#pragma HLS STREAM variable=PE9_6_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE9_7_fifo0_local;
#pragma HLS STREAM variable=PE9_7_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE9_7_fifo1_local;
#pragma HLS STREAM variable=PE9_7_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE9_7_fifo2_local;
#pragma HLS STREAM variable=PE9_7_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE9_8_fifo0_local;
#pragma HLS STREAM variable=PE9_8_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE9_8_fifo1_local;
#pragma HLS STREAM variable=PE9_8_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE9_8_fifo2_local;
#pragma HLS STREAM variable=PE9_8_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE9_9_fifo0_local;
#pragma HLS STREAM variable=PE9_9_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE9_9_fifo1_local;
#pragma HLS STREAM variable=PE9_9_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE9_9_fifo2_local;
#pragma HLS STREAM variable=PE9_9_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE9_10_fifo0_local;
#pragma HLS STREAM variable=PE9_10_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE9_10_fifo1_local;
#pragma HLS STREAM variable=PE9_10_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE9_10_fifo2_local;
#pragma HLS STREAM variable=PE9_10_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE9_11_fifo0_local;
#pragma HLS STREAM variable=PE9_11_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE9_11_fifo1_local;
#pragma HLS STREAM variable=PE9_11_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE9_11_fifo2_local;
#pragma HLS STREAM variable=PE9_11_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE9_12_fifo0_local;
#pragma HLS STREAM variable=PE9_12_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE9_12_fifo1_local;
#pragma HLS STREAM variable=PE9_12_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE9_12_fifo2_local;
#pragma HLS STREAM variable=PE9_12_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE9_13_fifo0_local;
#pragma HLS STREAM variable=PE9_13_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE9_13_fifo1_local;
#pragma HLS STREAM variable=PE9_13_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE9_13_fifo2_local;
#pragma HLS STREAM variable=PE9_13_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE10_0_fifo0_local;
#pragma HLS STREAM variable=PE10_0_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE10_0_fifo1_local;
#pragma HLS STREAM variable=PE10_0_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE10_0_fifo2_local;
#pragma HLS STREAM variable=PE10_0_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE10_1_fifo0_local;
#pragma HLS STREAM variable=PE10_1_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE10_1_fifo1_local;
#pragma HLS STREAM variable=PE10_1_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE10_1_fifo2_local;
#pragma HLS STREAM variable=PE10_1_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE10_2_fifo0_local;
#pragma HLS STREAM variable=PE10_2_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE10_2_fifo1_local;
#pragma HLS STREAM variable=PE10_2_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE10_2_fifo2_local;
#pragma HLS STREAM variable=PE10_2_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE10_3_fifo0_local;
#pragma HLS STREAM variable=PE10_3_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE10_3_fifo1_local;
#pragma HLS STREAM variable=PE10_3_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE10_3_fifo2_local;
#pragma HLS STREAM variable=PE10_3_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE10_4_fifo0_local;
#pragma HLS STREAM variable=PE10_4_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE10_4_fifo1_local;
#pragma HLS STREAM variable=PE10_4_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE10_4_fifo2_local;
#pragma HLS STREAM variable=PE10_4_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE10_5_fifo0_local;
#pragma HLS STREAM variable=PE10_5_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE10_5_fifo1_local;
#pragma HLS STREAM variable=PE10_5_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE10_5_fifo2_local;
#pragma HLS STREAM variable=PE10_5_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE10_6_fifo0_local;
#pragma HLS STREAM variable=PE10_6_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE10_6_fifo1_local;
#pragma HLS STREAM variable=PE10_6_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE10_6_fifo2_local;
#pragma HLS STREAM variable=PE10_6_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE10_7_fifo0_local;
#pragma HLS STREAM variable=PE10_7_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE10_7_fifo1_local;
#pragma HLS STREAM variable=PE10_7_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE10_7_fifo2_local;
#pragma HLS STREAM variable=PE10_7_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE10_8_fifo0_local;
#pragma HLS STREAM variable=PE10_8_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE10_8_fifo1_local;
#pragma HLS STREAM variable=PE10_8_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE10_8_fifo2_local;
#pragma HLS STREAM variable=PE10_8_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE10_9_fifo0_local;
#pragma HLS STREAM variable=PE10_9_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE10_9_fifo1_local;
#pragma HLS STREAM variable=PE10_9_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE10_9_fifo2_local;
#pragma HLS STREAM variable=PE10_9_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE10_10_fifo0_local;
#pragma HLS STREAM variable=PE10_10_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE10_10_fifo1_local;
#pragma HLS STREAM variable=PE10_10_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE10_10_fifo2_local;
#pragma HLS STREAM variable=PE10_10_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE10_11_fifo0_local;
#pragma HLS STREAM variable=PE10_11_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE10_11_fifo1_local;
#pragma HLS STREAM variable=PE10_11_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE10_11_fifo2_local;
#pragma HLS STREAM variable=PE10_11_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE10_12_fifo0_local;
#pragma HLS STREAM variable=PE10_12_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE10_12_fifo1_local;
#pragma HLS STREAM variable=PE10_12_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE10_12_fifo2_local;
#pragma HLS STREAM variable=PE10_12_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE10_13_fifo0_local;
#pragma HLS STREAM variable=PE10_13_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE10_13_fifo1_local;
#pragma HLS STREAM variable=PE10_13_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE10_13_fifo2_local;
#pragma HLS STREAM variable=PE10_13_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE11_0_fifo0_local;
#pragma HLS STREAM variable=PE11_0_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE11_0_fifo1_local;
#pragma HLS STREAM variable=PE11_0_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE11_0_fifo2_local;
#pragma HLS STREAM variable=PE11_0_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE11_1_fifo0_local;
#pragma HLS STREAM variable=PE11_1_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE11_1_fifo1_local;
#pragma HLS STREAM variable=PE11_1_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE11_1_fifo2_local;
#pragma HLS STREAM variable=PE11_1_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE11_2_fifo0_local;
#pragma HLS STREAM variable=PE11_2_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE11_2_fifo1_local;
#pragma HLS STREAM variable=PE11_2_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE11_2_fifo2_local;
#pragma HLS STREAM variable=PE11_2_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE11_3_fifo0_local;
#pragma HLS STREAM variable=PE11_3_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE11_3_fifo1_local;
#pragma HLS STREAM variable=PE11_3_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE11_3_fifo2_local;
#pragma HLS STREAM variable=PE11_3_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE11_4_fifo0_local;
#pragma HLS STREAM variable=PE11_4_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE11_4_fifo1_local;
#pragma HLS STREAM variable=PE11_4_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE11_4_fifo2_local;
#pragma HLS STREAM variable=PE11_4_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE11_5_fifo0_local;
#pragma HLS STREAM variable=PE11_5_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE11_5_fifo1_local;
#pragma HLS STREAM variable=PE11_5_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE11_5_fifo2_local;
#pragma HLS STREAM variable=PE11_5_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE11_6_fifo0_local;
#pragma HLS STREAM variable=PE11_6_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE11_6_fifo1_local;
#pragma HLS STREAM variable=PE11_6_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE11_6_fifo2_local;
#pragma HLS STREAM variable=PE11_6_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE11_7_fifo0_local;
#pragma HLS STREAM variable=PE11_7_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE11_7_fifo1_local;
#pragma HLS STREAM variable=PE11_7_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE11_7_fifo2_local;
#pragma HLS STREAM variable=PE11_7_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE11_8_fifo0_local;
#pragma HLS STREAM variable=PE11_8_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE11_8_fifo1_local;
#pragma HLS STREAM variable=PE11_8_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE11_8_fifo2_local;
#pragma HLS STREAM variable=PE11_8_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE11_9_fifo0_local;
#pragma HLS STREAM variable=PE11_9_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE11_9_fifo1_local;
#pragma HLS STREAM variable=PE11_9_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE11_9_fifo2_local;
#pragma HLS STREAM variable=PE11_9_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE11_10_fifo0_local;
#pragma HLS STREAM variable=PE11_10_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE11_10_fifo1_local;
#pragma HLS STREAM variable=PE11_10_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE11_10_fifo2_local;
#pragma HLS STREAM variable=PE11_10_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE11_11_fifo0_local;
#pragma HLS STREAM variable=PE11_11_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE11_11_fifo1_local;
#pragma HLS STREAM variable=PE11_11_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE11_11_fifo2_local;
#pragma HLS STREAM variable=PE11_11_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE11_12_fifo0_local;
#pragma HLS STREAM variable=PE11_12_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE11_12_fifo1_local;
#pragma HLS STREAM variable=PE11_12_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE11_12_fifo2_local;
#pragma HLS STREAM variable=PE11_12_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE11_13_fifo0_local;
#pragma HLS STREAM variable=PE11_13_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE11_13_fifo1_local;
#pragma HLS STREAM variable=PE11_13_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE11_13_fifo2_local;
#pragma HLS STREAM variable=PE11_13_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE12_0_fifo0_local;
#pragma HLS STREAM variable=PE12_0_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE12_0_fifo1_local;
#pragma HLS STREAM variable=PE12_0_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE12_0_fifo2_local;
#pragma HLS STREAM variable=PE12_0_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE12_1_fifo0_local;
#pragma HLS STREAM variable=PE12_1_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE12_1_fifo1_local;
#pragma HLS STREAM variable=PE12_1_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE12_1_fifo2_local;
#pragma HLS STREAM variable=PE12_1_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE12_2_fifo0_local;
#pragma HLS STREAM variable=PE12_2_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE12_2_fifo1_local;
#pragma HLS STREAM variable=PE12_2_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE12_2_fifo2_local;
#pragma HLS STREAM variable=PE12_2_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE12_3_fifo0_local;
#pragma HLS STREAM variable=PE12_3_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE12_3_fifo1_local;
#pragma HLS STREAM variable=PE12_3_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE12_3_fifo2_local;
#pragma HLS STREAM variable=PE12_3_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE12_4_fifo0_local;
#pragma HLS STREAM variable=PE12_4_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE12_4_fifo1_local;
#pragma HLS STREAM variable=PE12_4_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE12_4_fifo2_local;
#pragma HLS STREAM variable=PE12_4_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE12_5_fifo0_local;
#pragma HLS STREAM variable=PE12_5_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE12_5_fifo1_local;
#pragma HLS STREAM variable=PE12_5_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE12_5_fifo2_local;
#pragma HLS STREAM variable=PE12_5_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE12_6_fifo0_local;
#pragma HLS STREAM variable=PE12_6_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE12_6_fifo1_local;
#pragma HLS STREAM variable=PE12_6_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE12_6_fifo2_local;
#pragma HLS STREAM variable=PE12_6_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE12_7_fifo0_local;
#pragma HLS STREAM variable=PE12_7_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE12_7_fifo1_local;
#pragma HLS STREAM variable=PE12_7_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE12_7_fifo2_local;
#pragma HLS STREAM variable=PE12_7_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE12_8_fifo0_local;
#pragma HLS STREAM variable=PE12_8_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE12_8_fifo1_local;
#pragma HLS STREAM variable=PE12_8_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE12_8_fifo2_local;
#pragma HLS STREAM variable=PE12_8_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE12_9_fifo0_local;
#pragma HLS STREAM variable=PE12_9_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE12_9_fifo1_local;
#pragma HLS STREAM variable=PE12_9_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE12_9_fifo2_local;
#pragma HLS STREAM variable=PE12_9_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE12_10_fifo0_local;
#pragma HLS STREAM variable=PE12_10_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE12_10_fifo1_local;
#pragma HLS STREAM variable=PE12_10_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE12_10_fifo2_local;
#pragma HLS STREAM variable=PE12_10_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE12_11_fifo0_local;
#pragma HLS STREAM variable=PE12_11_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE12_11_fifo1_local;
#pragma HLS STREAM variable=PE12_11_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE12_11_fifo2_local;
#pragma HLS STREAM variable=PE12_11_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE12_12_fifo0_local;
#pragma HLS STREAM variable=PE12_12_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE12_12_fifo1_local;
#pragma HLS STREAM variable=PE12_12_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE12_12_fifo2_local;
#pragma HLS STREAM variable=PE12_12_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE12_13_fifo0_local;
#pragma HLS STREAM variable=PE12_13_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE12_13_fifo1_local;
#pragma HLS STREAM variable=PE12_13_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE12_13_fifo2_local;
#pragma HLS STREAM variable=PE12_13_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE13_0_fifo0_local;
#pragma HLS STREAM variable=PE13_0_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE13_0_fifo1_local;
#pragma HLS STREAM variable=PE13_0_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE13_0_fifo2_local;
#pragma HLS STREAM variable=PE13_0_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE13_1_fifo0_local;
#pragma HLS STREAM variable=PE13_1_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE13_1_fifo1_local;
#pragma HLS STREAM variable=PE13_1_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE13_1_fifo2_local;
#pragma HLS STREAM variable=PE13_1_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE13_2_fifo0_local;
#pragma HLS STREAM variable=PE13_2_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE13_2_fifo1_local;
#pragma HLS STREAM variable=PE13_2_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE13_2_fifo2_local;
#pragma HLS STREAM variable=PE13_2_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE13_3_fifo0_local;
#pragma HLS STREAM variable=PE13_3_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE13_3_fifo1_local;
#pragma HLS STREAM variable=PE13_3_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE13_3_fifo2_local;
#pragma HLS STREAM variable=PE13_3_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE13_4_fifo0_local;
#pragma HLS STREAM variable=PE13_4_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE13_4_fifo1_local;
#pragma HLS STREAM variable=PE13_4_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE13_4_fifo2_local;
#pragma HLS STREAM variable=PE13_4_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE13_5_fifo0_local;
#pragma HLS STREAM variable=PE13_5_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE13_5_fifo1_local;
#pragma HLS STREAM variable=PE13_5_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE13_5_fifo2_local;
#pragma HLS STREAM variable=PE13_5_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE13_6_fifo0_local;
#pragma HLS STREAM variable=PE13_6_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE13_6_fifo1_local;
#pragma HLS STREAM variable=PE13_6_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE13_6_fifo2_local;
#pragma HLS STREAM variable=PE13_6_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE13_7_fifo0_local;
#pragma HLS STREAM variable=PE13_7_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE13_7_fifo1_local;
#pragma HLS STREAM variable=PE13_7_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE13_7_fifo2_local;
#pragma HLS STREAM variable=PE13_7_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE13_8_fifo0_local;
#pragma HLS STREAM variable=PE13_8_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE13_8_fifo1_local;
#pragma HLS STREAM variable=PE13_8_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE13_8_fifo2_local;
#pragma HLS STREAM variable=PE13_8_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE13_9_fifo0_local;
#pragma HLS STREAM variable=PE13_9_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE13_9_fifo1_local;
#pragma HLS STREAM variable=PE13_9_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE13_9_fifo2_local;
#pragma HLS STREAM variable=PE13_9_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE13_10_fifo0_local;
#pragma HLS STREAM variable=PE13_10_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE13_10_fifo1_local;
#pragma HLS STREAM variable=PE13_10_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE13_10_fifo2_local;
#pragma HLS STREAM variable=PE13_10_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE13_11_fifo0_local;
#pragma HLS STREAM variable=PE13_11_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE13_11_fifo1_local;
#pragma HLS STREAM variable=PE13_11_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE13_11_fifo2_local;
#pragma HLS STREAM variable=PE13_11_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE13_12_fifo0_local;
#pragma HLS STREAM variable=PE13_12_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE13_12_fifo1_local;
#pragma HLS STREAM variable=PE13_12_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE13_12_fifo2_local;
#pragma HLS STREAM variable=PE13_12_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE13_13_fifo0_local;
#pragma HLS STREAM variable=PE13_13_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE13_13_fifo1_local;
#pragma HLS STREAM variable=PE13_13_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE13_13_fifo2_local;
#pragma HLS STREAM variable=PE13_13_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE14_0_fifo0_local;
#pragma HLS STREAM variable=PE14_0_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE14_0_fifo1_local;
#pragma HLS STREAM variable=PE14_0_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE14_0_fifo2_local;
#pragma HLS STREAM variable=PE14_0_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE14_1_fifo0_local;
#pragma HLS STREAM variable=PE14_1_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE14_1_fifo1_local;
#pragma HLS STREAM variable=PE14_1_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE14_1_fifo2_local;
#pragma HLS STREAM variable=PE14_1_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE14_2_fifo0_local;
#pragma HLS STREAM variable=PE14_2_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE14_2_fifo1_local;
#pragma HLS STREAM variable=PE14_2_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE14_2_fifo2_local;
#pragma HLS STREAM variable=PE14_2_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE14_3_fifo0_local;
#pragma HLS STREAM variable=PE14_3_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE14_3_fifo1_local;
#pragma HLS STREAM variable=PE14_3_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE14_3_fifo2_local;
#pragma HLS STREAM variable=PE14_3_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE14_4_fifo0_local;
#pragma HLS STREAM variable=PE14_4_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE14_4_fifo1_local;
#pragma HLS STREAM variable=PE14_4_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE14_4_fifo2_local;
#pragma HLS STREAM variable=PE14_4_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE14_5_fifo0_local;
#pragma HLS STREAM variable=PE14_5_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE14_5_fifo1_local;
#pragma HLS STREAM variable=PE14_5_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE14_5_fifo2_local;
#pragma HLS STREAM variable=PE14_5_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE14_6_fifo0_local;
#pragma HLS STREAM variable=PE14_6_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE14_6_fifo1_local;
#pragma HLS STREAM variable=PE14_6_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE14_6_fifo2_local;
#pragma HLS STREAM variable=PE14_6_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE14_7_fifo0_local;
#pragma HLS STREAM variable=PE14_7_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE14_7_fifo1_local;
#pragma HLS STREAM variable=PE14_7_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE14_7_fifo2_local;
#pragma HLS STREAM variable=PE14_7_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE14_8_fifo0_local;
#pragma HLS STREAM variable=PE14_8_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE14_8_fifo1_local;
#pragma HLS STREAM variable=PE14_8_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE14_8_fifo2_local;
#pragma HLS STREAM variable=PE14_8_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE14_9_fifo0_local;
#pragma HLS STREAM variable=PE14_9_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE14_9_fifo1_local;
#pragma HLS STREAM variable=PE14_9_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE14_9_fifo2_local;
#pragma HLS STREAM variable=PE14_9_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE14_10_fifo0_local;
#pragma HLS STREAM variable=PE14_10_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE14_10_fifo1_local;
#pragma HLS STREAM variable=PE14_10_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE14_10_fifo2_local;
#pragma HLS STREAM variable=PE14_10_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE14_11_fifo0_local;
#pragma HLS STREAM variable=PE14_11_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE14_11_fifo1_local;
#pragma HLS STREAM variable=PE14_11_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE14_11_fifo2_local;
#pragma HLS STREAM variable=PE14_11_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE14_12_fifo0_local;
#pragma HLS STREAM variable=PE14_12_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE14_12_fifo1_local;
#pragma HLS STREAM variable=PE14_12_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE14_12_fifo2_local;
#pragma HLS STREAM variable=PE14_12_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE14_13_fifo0_local;
#pragma HLS STREAM variable=PE14_13_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE14_13_fifo1_local;
#pragma HLS STREAM variable=PE14_13_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE14_13_fifo2_local;
#pragma HLS STREAM variable=PE14_13_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE15_0_fifo0_local;
#pragma HLS STREAM variable=PE15_0_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE15_0_fifo1_local;
#pragma HLS STREAM variable=PE15_0_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE15_0_fifo2_local;
#pragma HLS STREAM variable=PE15_0_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE15_1_fifo0_local;
#pragma HLS STREAM variable=PE15_1_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE15_1_fifo1_local;
#pragma HLS STREAM variable=PE15_1_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE15_1_fifo2_local;
#pragma HLS STREAM variable=PE15_1_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE15_2_fifo0_local;
#pragma HLS STREAM variable=PE15_2_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE15_2_fifo1_local;
#pragma HLS STREAM variable=PE15_2_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE15_2_fifo2_local;
#pragma HLS STREAM variable=PE15_2_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE15_3_fifo0_local;
#pragma HLS STREAM variable=PE15_3_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE15_3_fifo1_local;
#pragma HLS STREAM variable=PE15_3_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE15_3_fifo2_local;
#pragma HLS STREAM variable=PE15_3_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE15_4_fifo0_local;
#pragma HLS STREAM variable=PE15_4_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE15_4_fifo1_local;
#pragma HLS STREAM variable=PE15_4_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE15_4_fifo2_local;
#pragma HLS STREAM variable=PE15_4_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE15_5_fifo0_local;
#pragma HLS STREAM variable=PE15_5_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE15_5_fifo1_local;
#pragma HLS STREAM variable=PE15_5_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE15_5_fifo2_local;
#pragma HLS STREAM variable=PE15_5_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE15_6_fifo0_local;
#pragma HLS STREAM variable=PE15_6_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE15_6_fifo1_local;
#pragma HLS STREAM variable=PE15_6_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE15_6_fifo2_local;
#pragma HLS STREAM variable=PE15_6_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE15_7_fifo0_local;
#pragma HLS STREAM variable=PE15_7_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE15_7_fifo1_local;
#pragma HLS STREAM variable=PE15_7_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE15_7_fifo2_local;
#pragma HLS STREAM variable=PE15_7_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE15_8_fifo0_local;
#pragma HLS STREAM variable=PE15_8_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE15_8_fifo1_local;
#pragma HLS STREAM variable=PE15_8_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE15_8_fifo2_local;
#pragma HLS STREAM variable=PE15_8_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE15_9_fifo0_local;
#pragma HLS STREAM variable=PE15_9_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE15_9_fifo1_local;
#pragma HLS STREAM variable=PE15_9_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE15_9_fifo2_local;
#pragma HLS STREAM variable=PE15_9_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE15_10_fifo0_local;
#pragma HLS STREAM variable=PE15_10_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE15_10_fifo1_local;
#pragma HLS STREAM variable=PE15_10_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE15_10_fifo2_local;
#pragma HLS STREAM variable=PE15_10_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE15_11_fifo0_local;
#pragma HLS STREAM variable=PE15_11_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE15_11_fifo1_local;
#pragma HLS STREAM variable=PE15_11_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE15_11_fifo2_local;
#pragma HLS STREAM variable=PE15_11_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE15_12_fifo0_local;
#pragma HLS STREAM variable=PE15_12_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE15_12_fifo1_local;
#pragma HLS STREAM variable=PE15_12_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE15_12_fifo2_local;
#pragma HLS STREAM variable=PE15_12_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE15_13_fifo0_local;
#pragma HLS STREAM variable=PE15_13_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE15_13_fifo1_local;
#pragma HLS STREAM variable=PE15_13_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE15_13_fifo2_local;
#pragma HLS STREAM variable=PE15_13_fifo2_local depth=2

  // modules
  U1_DataFeed0Head(
    fifo_cin,
    fifo0_transfer0,
    fifo_kernel_config_in,
    fifo_kernel_config_out,
    fifo_DataFeed0Head_config_out0, fifo_DataFeed0Head_config_out1
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed0Head"<<endl;
#endif
  U1_DataFeed0Engine0_wrapper(
    fifo0_transfer0,
    fifo0_transfer1,
    fifo0_feed0_0,
    0,
    fifo_DataFeed0Head_config_out0,
    fifo_DataFeed0Engine0_config_out0,
    fifo_DataFeed0Engine0_config_out1
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed0Engine0_wrapper 1"<<endl;
#endif
  U1_DataFeed0Engine0_wrapper(
    fifo0_transfer1,
    fifo0_transfer2,
    fifo0_feed0_1,
    1,
    fifo_DataFeed0Engine0_config_out0,
    fifo_DataFeed0Engine1_config_out0,
    fifo_DataFeed0Engine1_config_out1
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed0Engine0_wrapper 2"<<endl;
#endif
  U1_DataFeed0Engine0_wrapper(
    fifo0_transfer2,
    fifo0_transfer3,
    fifo0_feed0_2,
    2,
    fifo_DataFeed0Engine1_config_out0,
    fifo_DataFeed0Engine2_config_out0,
    fifo_DataFeed0Engine2_config_out1
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed0Engine0_wrapper 3"<<endl;
#endif
  U1_DataFeed0Engine0_wrapper(
    fifo0_transfer3,
    fifo0_transfer4,
    fifo0_feed0_3,
    3,
    fifo_DataFeed0Engine2_config_out0,
    fifo_DataFeed0Engine3_config_out0,
    fifo_DataFeed0Engine3_config_out1
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed0Engine0_wrapper 4"<<endl;
#endif
  U1_DataFeed0Engine0_wrapper(
    fifo0_transfer4,
    fifo0_transfer5,
    fifo0_feed0_4,
    4,
    fifo_DataFeed0Engine3_config_out0,
    fifo_DataFeed0Engine4_config_out0,
    fifo_DataFeed0Engine4_config_out1
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed0Engine0_wrapper 5"<<endl;
#endif
  U1_DataFeed0Engine0_wrapper(
    fifo0_transfer5,
    fifo0_transfer6,
    fifo0_feed0_5,
    5,
    fifo_DataFeed0Engine4_config_out0,
    fifo_DataFeed0Engine5_config_out0,
    fifo_DataFeed0Engine5_config_out1
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed0Engine0_wrapper 6"<<endl;
#endif
  U1_DataFeed0Engine0_wrapper(
    fifo0_transfer6,
    fifo0_transfer7,
    fifo0_feed0_6,
    6,
    fifo_DataFeed0Engine5_config_out0,
    fifo_DataFeed0Engine6_config_out0,
    fifo_DataFeed0Engine6_config_out1
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed0Engine0_wrapper 7"<<endl;
#endif
  U1_DataFeed0Engine0_wrapper(
    fifo0_transfer7,
    fifo0_transfer8,
    fifo0_feed0_7,
    7,
    fifo_DataFeed0Engine6_config_out0,
    fifo_DataFeed0Engine7_config_out0,
    fifo_DataFeed0Engine7_config_out1
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed0Engine0_wrapper 8"<<endl;
#endif
  U1_DataFeed0Engine0_wrapper(
    fifo0_transfer8,
    fifo0_transfer9,
    fifo0_feed0_8,
    8,
    fifo_DataFeed0Engine7_config_out0,
    fifo_DataFeed0Engine8_config_out0,
    fifo_DataFeed0Engine8_config_out1
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed0Engine0_wrapper 9"<<endl;
#endif
  U1_DataFeed0Engine0_wrapper(
    fifo0_transfer9,
    fifo0_transfer10,
    fifo0_feed0_9,
    9,
    fifo_DataFeed0Engine8_config_out0,
    fifo_DataFeed0Engine9_config_out0,
    fifo_DataFeed0Engine9_config_out1
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed0Engine0_wrapper 10"<<endl;
#endif
  U1_DataFeed0Engine0_wrapper(
    fifo0_transfer10,
    fifo0_transfer11,
    fifo0_feed0_10,
    10,
    fifo_DataFeed0Engine9_config_out0,
    fifo_DataFeed0Engine10_config_out0,
    fifo_DataFeed0Engine10_config_out1
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed0Engine0_wrapper 11"<<endl;
#endif
  U1_DataFeed0Engine0_wrapper(
    fifo0_transfer11,
    fifo0_transfer12,
    fifo0_feed0_11,
    11,
    fifo_DataFeed0Engine10_config_out0,
    fifo_DataFeed0Engine11_config_out0,
    fifo_DataFeed0Engine11_config_out1
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed0Engine0_wrapper 12"<<endl;
#endif
  U1_DataFeed0Engine0_wrapper(
    fifo0_transfer12,
    fifo0_transfer13,
    fifo0_feed0_12,
    12,
    fifo_DataFeed0Engine11_config_out0,
    fifo_DataFeed0Engine12_config_out0,
    fifo_DataFeed0Engine12_config_out1
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed0Engine0_wrapper 13"<<endl;
#endif
  U1_DataFeed0EngineLast(
    fifo0_transfer13,
    fifo0_feed0_13,
    13,
    fifo_DataFeed0Engine12_config_out0,
    fifo_DataFeed0Engine13_config_out1
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed0EngineLast"<<endl;
#endif
  U1_DataFeed1Head(
    fifo_weight,
    fifo1_transfer0,
    fifo_DataFeed0Head_config_out1, fifo_DataFeed1Head_config_out0
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed1Head"<<endl;
#endif
  U1_DataFeed1Engine0_wrapper(
    fifo1_transfer0,
    fifo1_transfer1,
    fifo1_feed0_0,
    0,
    fifo_DataFeed1Head_config_out0,
    fifo_DataFeed1Engine0_config_out0
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed1Engine0_wrapper 1"<<endl;
#endif
  U1_DataFeed1Engine0_wrapper(
    fifo1_transfer1,
    fifo1_transfer2,
    fifo1_feed1_0,
    1,
    fifo_DataFeed1Engine0_config_out0,
    fifo_DataFeed1Engine1_config_out0
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed1Engine0_wrapper 2"<<endl;
#endif
  U1_DataFeed1Engine0_wrapper(
    fifo1_transfer2,
    fifo1_transfer3,
    fifo1_feed2_0,
    2,
    fifo_DataFeed1Engine1_config_out0,
    fifo_DataFeed1Engine2_config_out0
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed1Engine0_wrapper 3"<<endl;
#endif
  U1_DataFeed1Engine0_wrapper(
    fifo1_transfer3,
    fifo1_transfer4,
    fifo1_feed3_0,
    3,
    fifo_DataFeed1Engine2_config_out0,
    fifo_DataFeed1Engine3_config_out0
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed1Engine0_wrapper 4"<<endl;
#endif
  U1_DataFeed1Engine0_wrapper(
    fifo1_transfer4,
    fifo1_transfer5,
    fifo1_feed4_0,
    4,
    fifo_DataFeed1Engine3_config_out0,
    fifo_DataFeed1Engine4_config_out0
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed1Engine0_wrapper 5"<<endl;
#endif
  U1_DataFeed1Engine0_wrapper(
    fifo1_transfer5,
    fifo1_transfer6,
    fifo1_feed5_0,
    5,
    fifo_DataFeed1Engine4_config_out0,
    fifo_DataFeed1Engine5_config_out0
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed1Engine0_wrapper 6"<<endl;
#endif
  U1_DataFeed1Engine0_wrapper(
    fifo1_transfer6,
    fifo1_transfer7,
    fifo1_feed6_0,
    6,
    fifo_DataFeed1Engine5_config_out0,
    fifo_DataFeed1Engine6_config_out0
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed1Engine0_wrapper 7"<<endl;
#endif
  U1_DataFeed1Engine0_wrapper(
    fifo1_transfer7,
    fifo1_transfer8,
    fifo1_feed7_0,
    7,
    fifo_DataFeed1Engine6_config_out0,
    fifo_DataFeed1Engine7_config_out0
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed1Engine0_wrapper 8"<<endl;
#endif
  U1_DataFeed1Engine0_wrapper(
    fifo1_transfer8,
    fifo1_transfer9,
    fifo1_feed8_0,
    8,
    fifo_DataFeed1Engine7_config_out0,
    fifo_DataFeed1Engine8_config_out0
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed1Engine0_wrapper 9"<<endl;
#endif
  U1_DataFeed1Engine0_wrapper(
    fifo1_transfer9,
    fifo1_transfer10,
    fifo1_feed9_0,
    9,
    fifo_DataFeed1Engine8_config_out0,
    fifo_DataFeed1Engine9_config_out0
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed1Engine0_wrapper 10"<<endl;
#endif
  U1_DataFeed1Engine0_wrapper(
    fifo1_transfer10,
    fifo1_transfer11,
    fifo1_feed10_0,
    10,
    fifo_DataFeed1Engine9_config_out0,
    fifo_DataFeed1Engine10_config_out0
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed1Engine0_wrapper 11"<<endl;
#endif
  U1_DataFeed1Engine0_wrapper(
    fifo1_transfer11,
    fifo1_transfer12,
    fifo1_feed11_0,
    11,
    fifo_DataFeed1Engine10_config_out0,
    fifo_DataFeed1Engine11_config_out0
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed1Engine0_wrapper 12"<<endl;
#endif
  U1_DataFeed1Engine0_wrapper(
    fifo1_transfer12,
    fifo1_transfer13,
    fifo1_feed12_0,
    12,
    fifo_DataFeed1Engine11_config_out0,
    fifo_DataFeed1Engine12_config_out0
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed1Engine0_wrapper 13"<<endl;
#endif
  U1_DataFeed1Engine0_wrapper(
    fifo1_transfer13,
    fifo1_transfer14,
    fifo1_feed13_0,
    13,
    fifo_DataFeed1Engine12_config_out0,
    fifo_DataFeed1Engine13_config_out0
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed1Engine0_wrapper 14"<<endl;
#endif
  U1_DataFeed1Engine0_wrapper(
    fifo1_transfer14,
    fifo1_transfer15,
    fifo1_feed14_0,
    14,
    fifo_DataFeed1Engine13_config_out0,
    fifo_DataFeed1Engine14_config_out0
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed1Engine0_wrapper 15"<<endl;
#endif
  U1_DataFeed1EngineLast(
    fifo1_transfer15,
    fifo1_feed15_0,
    15,
    fifo_DataFeed1Engine14_config_out0
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_DataFeed1EngineLast"<<endl;
#endif
  // PE modules
  U1_op0_transfer_wrapper(
    fifo0_feed0_0,
    fifo0_feed1_0,
    PE0_0_fifo0_local,
    fifo_DataFeed0Engine0_config_out1,
    fifo_PE0_0_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op0_transfer_wrapper 0 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed0_0,
    fifo1_feed0_1,
    PE0_0_fifo1_local,
    fifo_PE0_0_op0_config_out,
    fifo_PE0_0_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op0_transfer_wrapper 0 1"<<endl;
#endif
  U1_compute_wrapper(
    PE0_0_fifo0_local,
    PE0_0_fifo1_local,
    PE0_0_fifo2_local,
    fifo_PE0_0_op1_config_out,
    fifo_PE0_0_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 0 0"<<endl;
#endif
  U1_res_transfer_first_wrapper(
    PE0_0_fifo2_local,
    fifo2_collect0_0,
    0,
    0,
    fifo_PE0_0_compute_config_out,
    fifo_PE0_0_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed0_1,
    fifo0_feed1_1,
    PE0_1_fifo0_local,
    fifo_DataFeed0Engine1_config_out1,
    fifo_PE0_1_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op0_transfer_wrapper 1 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed0_1,
    fifo1_feed0_2,
    PE0_1_fifo1_local,
    fifo_PE0_1_op0_config_out,
    fifo_PE0_1_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op0_transfer_wrapper 1 1"<<endl;
#endif
  U1_compute_wrapper(
    PE0_1_fifo0_local,
    PE0_1_fifo1_local,
    PE0_1_fifo2_local,
    fifo_PE0_1_op1_config_out,
    fifo_PE0_1_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 0 1"<<endl;
#endif
  U1_res_transfer_first_wrapper(
    PE0_1_fifo2_local,
    fifo2_collect0_1,
    0,
    1,
    fifo_PE0_1_compute_config_out,
    fifo_PE0_1_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed0_2,
    fifo0_feed1_2,
    PE0_2_fifo0_local,
    fifo_DataFeed0Engine2_config_out1,
    fifo_PE0_2_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op0_transfer_wrapper 2 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed0_2,
    fifo1_feed0_3,
    PE0_2_fifo1_local,
    fifo_PE0_2_op0_config_out,
    fifo_PE0_2_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op0_transfer_wrapper 2 1"<<endl;
#endif
  U1_compute_wrapper(
    PE0_2_fifo0_local,
    PE0_2_fifo1_local,
    PE0_2_fifo2_local,
    fifo_PE0_2_op1_config_out,
    fifo_PE0_2_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 0 2"<<endl;
#endif
  U1_res_transfer_first_wrapper(
    PE0_2_fifo2_local,
    fifo2_collect0_2,
    0,
    2,
    fifo_PE0_2_compute_config_out,
    fifo_PE0_2_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed0_3,
    fifo0_feed1_3,
    PE0_3_fifo0_local,
    fifo_DataFeed0Engine3_config_out1,
    fifo_PE0_3_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op0_transfer_wrapper 3 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed0_3,
    fifo1_feed0_4,
    PE0_3_fifo1_local,
    fifo_PE0_3_op0_config_out,
    fifo_PE0_3_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op0_transfer_wrapper 3 1"<<endl;
#endif
  U1_compute_wrapper(
    PE0_3_fifo0_local,
    PE0_3_fifo1_local,
    PE0_3_fifo2_local,
    fifo_PE0_3_op1_config_out,
    fifo_PE0_3_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 0 3"<<endl;
#endif
  U1_res_transfer_first_wrapper(
    PE0_3_fifo2_local,
    fifo2_collect0_3,
    0,
    3,
    fifo_PE0_3_compute_config_out,
    fifo_PE0_3_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed0_4,
    fifo0_feed1_4,
    PE0_4_fifo0_local,
    fifo_DataFeed0Engine4_config_out1,
    fifo_PE0_4_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op0_transfer_wrapper 4 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed0_4,
    fifo1_feed0_5,
    PE0_4_fifo1_local,
    fifo_PE0_4_op0_config_out,
    fifo_PE0_4_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op0_transfer_wrapper 4 1"<<endl;
#endif
  U1_compute_wrapper(
    PE0_4_fifo0_local,
    PE0_4_fifo1_local,
    PE0_4_fifo2_local,
    fifo_PE0_4_op1_config_out,
    fifo_PE0_4_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 0 4"<<endl;
#endif
  U1_res_transfer_first_wrapper(
    PE0_4_fifo2_local,
    fifo2_collect0_4,
    0,
    4,
    fifo_PE0_4_compute_config_out,
    fifo_PE0_4_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed0_5,
    fifo0_feed1_5,
    PE0_5_fifo0_local,
    fifo_DataFeed0Engine5_config_out1,
    fifo_PE0_5_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op0_transfer_wrapper 5 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed0_5,
    fifo1_feed0_6,
    PE0_5_fifo1_local,
    fifo_PE0_5_op0_config_out,
    fifo_PE0_5_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op0_transfer_wrapper 5 1"<<endl;
#endif
  U1_compute_wrapper(
    PE0_5_fifo0_local,
    PE0_5_fifo1_local,
    PE0_5_fifo2_local,
    fifo_PE0_5_op1_config_out,
    fifo_PE0_5_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 0 5"<<endl;
#endif
  U1_res_transfer_first_wrapper(
    PE0_5_fifo2_local,
    fifo2_collect0_5,
    0,
    5,
    fifo_PE0_5_compute_config_out,
    fifo_PE0_5_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed0_6,
    fifo0_feed1_6,
    PE0_6_fifo0_local,
    fifo_DataFeed0Engine6_config_out1,
    fifo_PE0_6_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op0_transfer_wrapper 6 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed0_6,
    fifo1_feed0_7,
    PE0_6_fifo1_local,
    fifo_PE0_6_op0_config_out,
    fifo_PE0_6_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op0_transfer_wrapper 6 1"<<endl;
#endif
  U1_compute_wrapper(
    PE0_6_fifo0_local,
    PE0_6_fifo1_local,
    PE0_6_fifo2_local,
    fifo_PE0_6_op1_config_out,
    fifo_PE0_6_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 0 6"<<endl;
#endif
  U1_res_transfer_first_wrapper(
    PE0_6_fifo2_local,
    fifo2_collect0_6,
    0,
    6,
    fifo_PE0_6_compute_config_out,
    fifo_PE0_6_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed0_7,
    fifo0_feed1_7,
    PE0_7_fifo0_local,
    fifo_DataFeed0Engine7_config_out1,
    fifo_PE0_7_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op0_transfer_wrapper 7 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed0_7,
    fifo1_feed0_8,
    PE0_7_fifo1_local,
    fifo_PE0_7_op0_config_out,
    fifo_PE0_7_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op0_transfer_wrapper 7 1"<<endl;
#endif
  U1_compute_wrapper(
    PE0_7_fifo0_local,
    PE0_7_fifo1_local,
    PE0_7_fifo2_local,
    fifo_PE0_7_op1_config_out,
    fifo_PE0_7_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 0 7"<<endl;
#endif
  U1_res_transfer_first_wrapper(
    PE0_7_fifo2_local,
    fifo2_collect0_7,
    0,
    7,
    fifo_PE0_7_compute_config_out,
    fifo_PE0_7_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed0_8,
    fifo0_feed1_8,
    PE0_8_fifo0_local,
    fifo_DataFeed0Engine8_config_out1,
    fifo_PE0_8_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op0_transfer_wrapper 8 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed0_8,
    fifo1_feed0_9,
    PE0_8_fifo1_local,
    fifo_PE0_8_op0_config_out,
    fifo_PE0_8_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op0_transfer_wrapper 8 1"<<endl;
#endif
  U1_compute_wrapper(
    PE0_8_fifo0_local,
    PE0_8_fifo1_local,
    PE0_8_fifo2_local,
    fifo_PE0_8_op1_config_out,
    fifo_PE0_8_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 0 8"<<endl;
#endif
  U1_res_transfer_first_wrapper(
    PE0_8_fifo2_local,
    fifo2_collect0_8,
    0,
    8,
    fifo_PE0_8_compute_config_out,
    fifo_PE0_8_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed0_9,
    fifo0_feed1_9,
    PE0_9_fifo0_local,
    fifo_DataFeed0Engine9_config_out1,
    fifo_PE0_9_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op0_transfer_wrapper 9 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed0_9,
    fifo1_feed0_10,
    PE0_9_fifo1_local,
    fifo_PE0_9_op0_config_out,
    fifo_PE0_9_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op0_transfer_wrapper 9 1"<<endl;
#endif
  U1_compute_wrapper(
    PE0_9_fifo0_local,
    PE0_9_fifo1_local,
    PE0_9_fifo2_local,
    fifo_PE0_9_op1_config_out,
    fifo_PE0_9_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 0 9"<<endl;
#endif
  U1_res_transfer_first_wrapper(
    PE0_9_fifo2_local,
    fifo2_collect0_9,
    0,
    9,
    fifo_PE0_9_compute_config_out,
    fifo_PE0_9_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed0_10,
    fifo0_feed1_10,
    PE0_10_fifo0_local,
    fifo_DataFeed0Engine10_config_out1,
    fifo_PE0_10_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op0_transfer_wrapper 10 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed0_10,
    fifo1_feed0_11,
    PE0_10_fifo1_local,
    fifo_PE0_10_op0_config_out,
    fifo_PE0_10_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op0_transfer_wrapper 10 1"<<endl;
#endif
  U1_compute_wrapper(
    PE0_10_fifo0_local,
    PE0_10_fifo1_local,
    PE0_10_fifo2_local,
    fifo_PE0_10_op1_config_out,
    fifo_PE0_10_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 0 10"<<endl;
#endif
  U1_res_transfer_first_wrapper(
    PE0_10_fifo2_local,
    fifo2_collect0_10,
    0,
    10,
    fifo_PE0_10_compute_config_out,
    fifo_PE0_10_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed0_11,
    fifo0_feed1_11,
    PE0_11_fifo0_local,
    fifo_DataFeed0Engine11_config_out1,
    fifo_PE0_11_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op0_transfer_wrapper 11 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed0_11,
    fifo1_feed0_12,
    PE0_11_fifo1_local,
    fifo_PE0_11_op0_config_out,
    fifo_PE0_11_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op0_transfer_wrapper 11 1"<<endl;
#endif
  U1_compute_wrapper(
    PE0_11_fifo0_local,
    PE0_11_fifo1_local,
    PE0_11_fifo2_local,
    fifo_PE0_11_op1_config_out,
    fifo_PE0_11_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 0 11"<<endl;
#endif
  U1_res_transfer_first_wrapper(
    PE0_11_fifo2_local,
    fifo2_collect0_11,
    0,
    11,
    fifo_PE0_11_compute_config_out,
    fifo_PE0_11_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed0_12,
    fifo0_feed1_12,
    PE0_12_fifo0_local,
    fifo_DataFeed0Engine12_config_out1,
    fifo_PE0_12_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op0_transfer_wrapper 12 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed0_12,
    fifo1_feed0_13,
    PE0_12_fifo1_local,
    fifo_PE0_12_op0_config_out,
    fifo_PE0_12_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op0_transfer_wrapper 12 1"<<endl;
#endif
  U1_compute_wrapper(
    PE0_12_fifo0_local,
    PE0_12_fifo1_local,
    PE0_12_fifo2_local,
    fifo_PE0_12_op1_config_out,
    fifo_PE0_12_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 0 12"<<endl;
#endif
  U1_res_transfer_first_wrapper(
    PE0_12_fifo2_local,
    fifo2_collect0_12,
    0,
    12,
    fifo_PE0_12_compute_config_out,
    fifo_PE0_12_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed0_13,
    fifo0_feed1_13,
    PE0_13_fifo0_local,
    fifo_DataFeed0Engine13_config_out1,
    fifo_PE0_13_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op0_transfer_wrapper 13 0"<<endl;
#endif
  U1_op1_transfer_last_wrapper(
    fifo1_feed0_13,
    PE0_13_fifo1_local,
    fifo_PE0_13_op0_config_out,
    fifo_PE0_13_op1_config_out
  );

  U1_compute_wrapper(
    PE0_13_fifo0_local,
    PE0_13_fifo1_local,
    PE0_13_fifo2_local,
    fifo_PE0_13_op1_config_out,
    fifo_PE0_13_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 0 13"<<endl;
#endif
  U1_res_transfer_first_wrapper(
    PE0_13_fifo2_local,
    fifo2_collect0_13,
    0,
    13,
    fifo_PE0_13_compute_config_out,
    fifo_PE0_13_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed1_0,
    fifo0_feed2_0,
    PE1_0_fifo0_local,
    fifo_PE0_0_res_config_out,
    fifo_PE1_0_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op1_transfer_wrapper 0 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed1_0,
    fifo1_feed1_1,
    PE1_0_fifo1_local,
    fifo_PE1_0_op0_config_out,
    fifo_PE1_0_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op1_transfer_wrapper 0 1"<<endl;
#endif
  U1_compute_wrapper(
    PE1_0_fifo0_local,
    PE1_0_fifo1_local,
    PE1_0_fifo2_local,
    fifo_PE1_0_op1_config_out,
    fifo_PE1_0_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 1 0"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE1_0_fifo2_local,
    fifo2_collect0_0,
    fifo2_collect1_0,
    1,
    0,
    fifo_PE1_0_compute_config_out,
    fifo_PE1_0_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed1_1,
    fifo0_feed2_1,
    PE1_1_fifo0_local,
    fifo_PE0_1_res_config_out,
    fifo_PE1_1_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op1_transfer_wrapper 1 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed1_1,
    fifo1_feed1_2,
    PE1_1_fifo1_local,
    fifo_PE1_1_op0_config_out,
    fifo_PE1_1_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op1_transfer_wrapper 1 1"<<endl;
#endif
  U1_compute_wrapper(
    PE1_1_fifo0_local,
    PE1_1_fifo1_local,
    PE1_1_fifo2_local,
    fifo_PE1_1_op1_config_out,
    fifo_PE1_1_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 1 1"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE1_1_fifo2_local,
    fifo2_collect0_1,
    fifo2_collect1_1,
    1,
    1,
    fifo_PE1_1_compute_config_out,
    fifo_PE1_1_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed1_2,
    fifo0_feed2_2,
    PE1_2_fifo0_local,
    fifo_PE0_2_res_config_out,
    fifo_PE1_2_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op1_transfer_wrapper 2 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed1_2,
    fifo1_feed1_3,
    PE1_2_fifo1_local,
    fifo_PE1_2_op0_config_out,
    fifo_PE1_2_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op1_transfer_wrapper 2 1"<<endl;
#endif
  U1_compute_wrapper(
    PE1_2_fifo0_local,
    PE1_2_fifo1_local,
    PE1_2_fifo2_local,
    fifo_PE1_2_op1_config_out,
    fifo_PE1_2_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 1 2"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE1_2_fifo2_local,
    fifo2_collect0_2,
    fifo2_collect1_2,
    1,
    2,
    fifo_PE1_2_compute_config_out,
    fifo_PE1_2_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed1_3,
    fifo0_feed2_3,
    PE1_3_fifo0_local,
    fifo_PE0_3_res_config_out,
    fifo_PE1_3_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op1_transfer_wrapper 3 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed1_3,
    fifo1_feed1_4,
    PE1_3_fifo1_local,
    fifo_PE1_3_op0_config_out,
    fifo_PE1_3_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op1_transfer_wrapper 3 1"<<endl;
#endif
  U1_compute_wrapper(
    PE1_3_fifo0_local,
    PE1_3_fifo1_local,
    PE1_3_fifo2_local,
    fifo_PE1_3_op1_config_out,
    fifo_PE1_3_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 1 3"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE1_3_fifo2_local,
    fifo2_collect0_3,
    fifo2_collect1_3,
    1,
    3,
    fifo_PE1_3_compute_config_out,
    fifo_PE1_3_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed1_4,
    fifo0_feed2_4,
    PE1_4_fifo0_local,
    fifo_PE0_4_res_config_out,
    fifo_PE1_4_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op1_transfer_wrapper 4 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed1_4,
    fifo1_feed1_5,
    PE1_4_fifo1_local,
    fifo_PE1_4_op0_config_out,
    fifo_PE1_4_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op1_transfer_wrapper 4 1"<<endl;
#endif
  U1_compute_wrapper(
    PE1_4_fifo0_local,
    PE1_4_fifo1_local,
    PE1_4_fifo2_local,
    fifo_PE1_4_op1_config_out,
    fifo_PE1_4_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 1 4"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE1_4_fifo2_local,
    fifo2_collect0_4,
    fifo2_collect1_4,
    1,
    4,
    fifo_PE1_4_compute_config_out,
    fifo_PE1_4_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed1_5,
    fifo0_feed2_5,
    PE1_5_fifo0_local,
    fifo_PE0_5_res_config_out,
    fifo_PE1_5_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op1_transfer_wrapper 5 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed1_5,
    fifo1_feed1_6,
    PE1_5_fifo1_local,
    fifo_PE1_5_op0_config_out,
    fifo_PE1_5_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op1_transfer_wrapper 5 1"<<endl;
#endif
  U1_compute_wrapper(
    PE1_5_fifo0_local,
    PE1_5_fifo1_local,
    PE1_5_fifo2_local,
    fifo_PE1_5_op1_config_out,
    fifo_PE1_5_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 1 5"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE1_5_fifo2_local,
    fifo2_collect0_5,
    fifo2_collect1_5,
    1,
    5,
    fifo_PE1_5_compute_config_out,
    fifo_PE1_5_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed1_6,
    fifo0_feed2_6,
    PE1_6_fifo0_local,
    fifo_PE0_6_res_config_out,
    fifo_PE1_6_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op1_transfer_wrapper 6 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed1_6,
    fifo1_feed1_7,
    PE1_6_fifo1_local,
    fifo_PE1_6_op0_config_out,
    fifo_PE1_6_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op1_transfer_wrapper 6 1"<<endl;
#endif
  U1_compute_wrapper(
    PE1_6_fifo0_local,
    PE1_6_fifo1_local,
    PE1_6_fifo2_local,
    fifo_PE1_6_op1_config_out,
    fifo_PE1_6_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 1 6"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE1_6_fifo2_local,
    fifo2_collect0_6,
    fifo2_collect1_6,
    1,
    6,
    fifo_PE1_6_compute_config_out,
    fifo_PE1_6_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed1_7,
    fifo0_feed2_7,
    PE1_7_fifo0_local,
    fifo_PE0_7_res_config_out,
    fifo_PE1_7_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op1_transfer_wrapper 7 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed1_7,
    fifo1_feed1_8,
    PE1_7_fifo1_local,
    fifo_PE1_7_op0_config_out,
    fifo_PE1_7_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op1_transfer_wrapper 7 1"<<endl;
#endif
  U1_compute_wrapper(
    PE1_7_fifo0_local,
    PE1_7_fifo1_local,
    PE1_7_fifo2_local,
    fifo_PE1_7_op1_config_out,
    fifo_PE1_7_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 1 7"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE1_7_fifo2_local,
    fifo2_collect0_7,
    fifo2_collect1_7,
    1,
    7,
    fifo_PE1_7_compute_config_out,
    fifo_PE1_7_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed1_8,
    fifo0_feed2_8,
    PE1_8_fifo0_local,
    fifo_PE0_8_res_config_out,
    fifo_PE1_8_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op1_transfer_wrapper 8 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed1_8,
    fifo1_feed1_9,
    PE1_8_fifo1_local,
    fifo_PE1_8_op0_config_out,
    fifo_PE1_8_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op1_transfer_wrapper 8 1"<<endl;
#endif
  U1_compute_wrapper(
    PE1_8_fifo0_local,
    PE1_8_fifo1_local,
    PE1_8_fifo2_local,
    fifo_PE1_8_op1_config_out,
    fifo_PE1_8_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 1 8"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE1_8_fifo2_local,
    fifo2_collect0_8,
    fifo2_collect1_8,
    1,
    8,
    fifo_PE1_8_compute_config_out,
    fifo_PE1_8_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed1_9,
    fifo0_feed2_9,
    PE1_9_fifo0_local,
    fifo_PE0_9_res_config_out,
    fifo_PE1_9_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op1_transfer_wrapper 9 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed1_9,
    fifo1_feed1_10,
    PE1_9_fifo1_local,
    fifo_PE1_9_op0_config_out,
    fifo_PE1_9_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op1_transfer_wrapper 9 1"<<endl;
#endif
  U1_compute_wrapper(
    PE1_9_fifo0_local,
    PE1_9_fifo1_local,
    PE1_9_fifo2_local,
    fifo_PE1_9_op1_config_out,
    fifo_PE1_9_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 1 9"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE1_9_fifo2_local,
    fifo2_collect0_9,
    fifo2_collect1_9,
    1,
    9,
    fifo_PE1_9_compute_config_out,
    fifo_PE1_9_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed1_10,
    fifo0_feed2_10,
    PE1_10_fifo0_local,
    fifo_PE0_10_res_config_out,
    fifo_PE1_10_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op1_transfer_wrapper 10 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed1_10,
    fifo1_feed1_11,
    PE1_10_fifo1_local,
    fifo_PE1_10_op0_config_out,
    fifo_PE1_10_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op1_transfer_wrapper 10 1"<<endl;
#endif
  U1_compute_wrapper(
    PE1_10_fifo0_local,
    PE1_10_fifo1_local,
    PE1_10_fifo2_local,
    fifo_PE1_10_op1_config_out,
    fifo_PE1_10_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 1 10"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE1_10_fifo2_local,
    fifo2_collect0_10,
    fifo2_collect1_10,
    1,
    10,
    fifo_PE1_10_compute_config_out,
    fifo_PE1_10_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed1_11,
    fifo0_feed2_11,
    PE1_11_fifo0_local,
    fifo_PE0_11_res_config_out,
    fifo_PE1_11_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op1_transfer_wrapper 11 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed1_11,
    fifo1_feed1_12,
    PE1_11_fifo1_local,
    fifo_PE1_11_op0_config_out,
    fifo_PE1_11_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op1_transfer_wrapper 11 1"<<endl;
#endif
  U1_compute_wrapper(
    PE1_11_fifo0_local,
    PE1_11_fifo1_local,
    PE1_11_fifo2_local,
    fifo_PE1_11_op1_config_out,
    fifo_PE1_11_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 1 11"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE1_11_fifo2_local,
    fifo2_collect0_11,
    fifo2_collect1_11,
    1,
    11,
    fifo_PE1_11_compute_config_out,
    fifo_PE1_11_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed1_12,
    fifo0_feed2_12,
    PE1_12_fifo0_local,
    fifo_PE0_12_res_config_out,
    fifo_PE1_12_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op1_transfer_wrapper 12 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed1_12,
    fifo1_feed1_13,
    PE1_12_fifo1_local,
    fifo_PE1_12_op0_config_out,
    fifo_PE1_12_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op1_transfer_wrapper 12 1"<<endl;
#endif
  U1_compute_wrapper(
    PE1_12_fifo0_local,
    PE1_12_fifo1_local,
    PE1_12_fifo2_local,
    fifo_PE1_12_op1_config_out,
    fifo_PE1_12_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 1 12"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE1_12_fifo2_local,
    fifo2_collect0_12,
    fifo2_collect1_12,
    1,
    12,
    fifo_PE1_12_compute_config_out,
    fifo_PE1_12_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed1_13,
    fifo0_feed2_13,
    PE1_13_fifo0_local,
    fifo_PE0_13_res_config_out,
    fifo_PE1_13_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op1_transfer_wrapper 13 0"<<endl;
#endif
  U1_op1_transfer_last_wrapper(
    fifo1_feed1_13,
    PE1_13_fifo1_local,
    fifo_PE1_13_op0_config_out,
    fifo_PE1_13_op1_config_out
  );

  U1_compute_wrapper(
    PE1_13_fifo0_local,
    PE1_13_fifo1_local,
    PE1_13_fifo2_local,
    fifo_PE1_13_op1_config_out,
    fifo_PE1_13_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 1 13"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE1_13_fifo2_local,
    fifo2_collect0_13,
    fifo2_collect1_13,
    1,
    13,
    fifo_PE1_13_compute_config_out,
    fifo_PE1_13_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed2_0,
    fifo0_feed3_0,
    PE2_0_fifo0_local,
    fifo_PE1_0_res_config_out,
    fifo_PE2_0_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op2_transfer_wrapper 0 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed2_0,
    fifo1_feed2_1,
    PE2_0_fifo1_local,
    fifo_PE2_0_op0_config_out,
    fifo_PE2_0_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op2_transfer_wrapper 0 1"<<endl;
#endif
  U1_compute_wrapper(
    PE2_0_fifo0_local,
    PE2_0_fifo1_local,
    PE2_0_fifo2_local,
    fifo_PE2_0_op1_config_out,
    fifo_PE2_0_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 2 0"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE2_0_fifo2_local,
    fifo2_collect1_0,
    fifo2_collect2_0,
    2,
    0,
    fifo_PE2_0_compute_config_out,
    fifo_PE2_0_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed2_1,
    fifo0_feed3_1,
    PE2_1_fifo0_local,
    fifo_PE1_1_res_config_out,
    fifo_PE2_1_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op2_transfer_wrapper 1 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed2_1,
    fifo1_feed2_2,
    PE2_1_fifo1_local,
    fifo_PE2_1_op0_config_out,
    fifo_PE2_1_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op2_transfer_wrapper 1 1"<<endl;
#endif
  U1_compute_wrapper(
    PE2_1_fifo0_local,
    PE2_1_fifo1_local,
    PE2_1_fifo2_local,
    fifo_PE2_1_op1_config_out,
    fifo_PE2_1_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 2 1"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE2_1_fifo2_local,
    fifo2_collect1_1,
    fifo2_collect2_1,
    2,
    1,
    fifo_PE2_1_compute_config_out,
    fifo_PE2_1_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed2_2,
    fifo0_feed3_2,
    PE2_2_fifo0_local,
    fifo_PE1_2_res_config_out,
    fifo_PE2_2_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op2_transfer_wrapper 2 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed2_2,
    fifo1_feed2_3,
    PE2_2_fifo1_local,
    fifo_PE2_2_op0_config_out,
    fifo_PE2_2_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op2_transfer_wrapper 2 1"<<endl;
#endif
  U1_compute_wrapper(
    PE2_2_fifo0_local,
    PE2_2_fifo1_local,
    PE2_2_fifo2_local,
    fifo_PE2_2_op1_config_out,
    fifo_PE2_2_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 2 2"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE2_2_fifo2_local,
    fifo2_collect1_2,
    fifo2_collect2_2,
    2,
    2,
    fifo_PE2_2_compute_config_out,
    fifo_PE2_2_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed2_3,
    fifo0_feed3_3,
    PE2_3_fifo0_local,
    fifo_PE1_3_res_config_out,
    fifo_PE2_3_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op2_transfer_wrapper 3 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed2_3,
    fifo1_feed2_4,
    PE2_3_fifo1_local,
    fifo_PE2_3_op0_config_out,
    fifo_PE2_3_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op2_transfer_wrapper 3 1"<<endl;
#endif
  U1_compute_wrapper(
    PE2_3_fifo0_local,
    PE2_3_fifo1_local,
    PE2_3_fifo2_local,
    fifo_PE2_3_op1_config_out,
    fifo_PE2_3_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 2 3"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE2_3_fifo2_local,
    fifo2_collect1_3,
    fifo2_collect2_3,
    2,
    3,
    fifo_PE2_3_compute_config_out,
    fifo_PE2_3_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed2_4,
    fifo0_feed3_4,
    PE2_4_fifo0_local,
    fifo_PE1_4_res_config_out,
    fifo_PE2_4_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op2_transfer_wrapper 4 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed2_4,
    fifo1_feed2_5,
    PE2_4_fifo1_local,
    fifo_PE2_4_op0_config_out,
    fifo_PE2_4_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op2_transfer_wrapper 4 1"<<endl;
#endif
  U1_compute_wrapper(
    PE2_4_fifo0_local,
    PE2_4_fifo1_local,
    PE2_4_fifo2_local,
    fifo_PE2_4_op1_config_out,
    fifo_PE2_4_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 2 4"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE2_4_fifo2_local,
    fifo2_collect1_4,
    fifo2_collect2_4,
    2,
    4,
    fifo_PE2_4_compute_config_out,
    fifo_PE2_4_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed2_5,
    fifo0_feed3_5,
    PE2_5_fifo0_local,
    fifo_PE1_5_res_config_out,
    fifo_PE2_5_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op2_transfer_wrapper 5 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed2_5,
    fifo1_feed2_6,
    PE2_5_fifo1_local,
    fifo_PE2_5_op0_config_out,
    fifo_PE2_5_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op2_transfer_wrapper 5 1"<<endl;
#endif
  U1_compute_wrapper(
    PE2_5_fifo0_local,
    PE2_5_fifo1_local,
    PE2_5_fifo2_local,
    fifo_PE2_5_op1_config_out,
    fifo_PE2_5_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 2 5"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE2_5_fifo2_local,
    fifo2_collect1_5,
    fifo2_collect2_5,
    2,
    5,
    fifo_PE2_5_compute_config_out,
    fifo_PE2_5_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed2_6,
    fifo0_feed3_6,
    PE2_6_fifo0_local,
    fifo_PE1_6_res_config_out,
    fifo_PE2_6_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op2_transfer_wrapper 6 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed2_6,
    fifo1_feed2_7,
    PE2_6_fifo1_local,
    fifo_PE2_6_op0_config_out,
    fifo_PE2_6_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op2_transfer_wrapper 6 1"<<endl;
#endif
  U1_compute_wrapper(
    PE2_6_fifo0_local,
    PE2_6_fifo1_local,
    PE2_6_fifo2_local,
    fifo_PE2_6_op1_config_out,
    fifo_PE2_6_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 2 6"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE2_6_fifo2_local,
    fifo2_collect1_6,
    fifo2_collect2_6,
    2,
    6,
    fifo_PE2_6_compute_config_out,
    fifo_PE2_6_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed2_7,
    fifo0_feed3_7,
    PE2_7_fifo0_local,
    fifo_PE1_7_res_config_out,
    fifo_PE2_7_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op2_transfer_wrapper 7 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed2_7,
    fifo1_feed2_8,
    PE2_7_fifo1_local,
    fifo_PE2_7_op0_config_out,
    fifo_PE2_7_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op2_transfer_wrapper 7 1"<<endl;
#endif
  U1_compute_wrapper(
    PE2_7_fifo0_local,
    PE2_7_fifo1_local,
    PE2_7_fifo2_local,
    fifo_PE2_7_op1_config_out,
    fifo_PE2_7_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 2 7"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE2_7_fifo2_local,
    fifo2_collect1_7,
    fifo2_collect2_7,
    2,
    7,
    fifo_PE2_7_compute_config_out,
    fifo_PE2_7_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed2_8,
    fifo0_feed3_8,
    PE2_8_fifo0_local,
    fifo_PE1_8_res_config_out,
    fifo_PE2_8_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op2_transfer_wrapper 8 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed2_8,
    fifo1_feed2_9,
    PE2_8_fifo1_local,
    fifo_PE2_8_op0_config_out,
    fifo_PE2_8_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op2_transfer_wrapper 8 1"<<endl;
#endif
  U1_compute_wrapper(
    PE2_8_fifo0_local,
    PE2_8_fifo1_local,
    PE2_8_fifo2_local,
    fifo_PE2_8_op1_config_out,
    fifo_PE2_8_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 2 8"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE2_8_fifo2_local,
    fifo2_collect1_8,
    fifo2_collect2_8,
    2,
    8,
    fifo_PE2_8_compute_config_out,
    fifo_PE2_8_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed2_9,
    fifo0_feed3_9,
    PE2_9_fifo0_local,
    fifo_PE1_9_res_config_out,
    fifo_PE2_9_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op2_transfer_wrapper 9 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed2_9,
    fifo1_feed2_10,
    PE2_9_fifo1_local,
    fifo_PE2_9_op0_config_out,
    fifo_PE2_9_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op2_transfer_wrapper 9 1"<<endl;
#endif
  U1_compute_wrapper(
    PE2_9_fifo0_local,
    PE2_9_fifo1_local,
    PE2_9_fifo2_local,
    fifo_PE2_9_op1_config_out,
    fifo_PE2_9_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 2 9"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE2_9_fifo2_local,
    fifo2_collect1_9,
    fifo2_collect2_9,
    2,
    9,
    fifo_PE2_9_compute_config_out,
    fifo_PE2_9_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed2_10,
    fifo0_feed3_10,
    PE2_10_fifo0_local,
    fifo_PE1_10_res_config_out,
    fifo_PE2_10_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op2_transfer_wrapper 10 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed2_10,
    fifo1_feed2_11,
    PE2_10_fifo1_local,
    fifo_PE2_10_op0_config_out,
    fifo_PE2_10_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op2_transfer_wrapper 10 1"<<endl;
#endif
  U1_compute_wrapper(
    PE2_10_fifo0_local,
    PE2_10_fifo1_local,
    PE2_10_fifo2_local,
    fifo_PE2_10_op1_config_out,
    fifo_PE2_10_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 2 10"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE2_10_fifo2_local,
    fifo2_collect1_10,
    fifo2_collect2_10,
    2,
    10,
    fifo_PE2_10_compute_config_out,
    fifo_PE2_10_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed2_11,
    fifo0_feed3_11,
    PE2_11_fifo0_local,
    fifo_PE1_11_res_config_out,
    fifo_PE2_11_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op2_transfer_wrapper 11 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed2_11,
    fifo1_feed2_12,
    PE2_11_fifo1_local,
    fifo_PE2_11_op0_config_out,
    fifo_PE2_11_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op2_transfer_wrapper 11 1"<<endl;
#endif
  U1_compute_wrapper(
    PE2_11_fifo0_local,
    PE2_11_fifo1_local,
    PE2_11_fifo2_local,
    fifo_PE2_11_op1_config_out,
    fifo_PE2_11_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 2 11"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE2_11_fifo2_local,
    fifo2_collect1_11,
    fifo2_collect2_11,
    2,
    11,
    fifo_PE2_11_compute_config_out,
    fifo_PE2_11_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed2_12,
    fifo0_feed3_12,
    PE2_12_fifo0_local,
    fifo_PE1_12_res_config_out,
    fifo_PE2_12_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op2_transfer_wrapper 12 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed2_12,
    fifo1_feed2_13,
    PE2_12_fifo1_local,
    fifo_PE2_12_op0_config_out,
    fifo_PE2_12_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op2_transfer_wrapper 12 1"<<endl;
#endif
  U1_compute_wrapper(
    PE2_12_fifo0_local,
    PE2_12_fifo1_local,
    PE2_12_fifo2_local,
    fifo_PE2_12_op1_config_out,
    fifo_PE2_12_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 2 12"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE2_12_fifo2_local,
    fifo2_collect1_12,
    fifo2_collect2_12,
    2,
    12,
    fifo_PE2_12_compute_config_out,
    fifo_PE2_12_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed2_13,
    fifo0_feed3_13,
    PE2_13_fifo0_local,
    fifo_PE1_13_res_config_out,
    fifo_PE2_13_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op2_transfer_wrapper 13 0"<<endl;
#endif
  U1_op1_transfer_last_wrapper(
    fifo1_feed2_13,
    PE2_13_fifo1_local,
    fifo_PE2_13_op0_config_out,
    fifo_PE2_13_op1_config_out
  );

  U1_compute_wrapper(
    PE2_13_fifo0_local,
    PE2_13_fifo1_local,
    PE2_13_fifo2_local,
    fifo_PE2_13_op1_config_out,
    fifo_PE2_13_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 2 13"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE2_13_fifo2_local,
    fifo2_collect1_13,
    fifo2_collect2_13,
    2,
    13,
    fifo_PE2_13_compute_config_out,
    fifo_PE2_13_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed3_0,
    fifo0_feed4_0,
    PE3_0_fifo0_local,
    fifo_PE2_0_res_config_out,
    fifo_PE3_0_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op3_transfer_wrapper 0 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed3_0,
    fifo1_feed3_1,
    PE3_0_fifo1_local,
    fifo_PE3_0_op0_config_out,
    fifo_PE3_0_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op3_transfer_wrapper 0 1"<<endl;
#endif
  U1_compute_wrapper(
    PE3_0_fifo0_local,
    PE3_0_fifo1_local,
    PE3_0_fifo2_local,
    fifo_PE3_0_op1_config_out,
    fifo_PE3_0_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 3 0"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE3_0_fifo2_local,
    fifo2_collect2_0,
    fifo2_collect3_0,
    3,
    0,
    fifo_PE3_0_compute_config_out,
    fifo_PE3_0_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed3_1,
    fifo0_feed4_1,
    PE3_1_fifo0_local,
    fifo_PE2_1_res_config_out,
    fifo_PE3_1_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op3_transfer_wrapper 1 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed3_1,
    fifo1_feed3_2,
    PE3_1_fifo1_local,
    fifo_PE3_1_op0_config_out,
    fifo_PE3_1_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op3_transfer_wrapper 1 1"<<endl;
#endif
  U1_compute_wrapper(
    PE3_1_fifo0_local,
    PE3_1_fifo1_local,
    PE3_1_fifo2_local,
    fifo_PE3_1_op1_config_out,
    fifo_PE3_1_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 3 1"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE3_1_fifo2_local,
    fifo2_collect2_1,
    fifo2_collect3_1,
    3,
    1,
    fifo_PE3_1_compute_config_out,
    fifo_PE3_1_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed3_2,
    fifo0_feed4_2,
    PE3_2_fifo0_local,
    fifo_PE2_2_res_config_out,
    fifo_PE3_2_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op3_transfer_wrapper 2 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed3_2,
    fifo1_feed3_3,
    PE3_2_fifo1_local,
    fifo_PE3_2_op0_config_out,
    fifo_PE3_2_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op3_transfer_wrapper 2 1"<<endl;
#endif
  U1_compute_wrapper(
    PE3_2_fifo0_local,
    PE3_2_fifo1_local,
    PE3_2_fifo2_local,
    fifo_PE3_2_op1_config_out,
    fifo_PE3_2_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 3 2"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE3_2_fifo2_local,
    fifo2_collect2_2,
    fifo2_collect3_2,
    3,
    2,
    fifo_PE3_2_compute_config_out,
    fifo_PE3_2_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed3_3,
    fifo0_feed4_3,
    PE3_3_fifo0_local,
    fifo_PE2_3_res_config_out,
    fifo_PE3_3_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op3_transfer_wrapper 3 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed3_3,
    fifo1_feed3_4,
    PE3_3_fifo1_local,
    fifo_PE3_3_op0_config_out,
    fifo_PE3_3_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op3_transfer_wrapper 3 1"<<endl;
#endif
  U1_compute_wrapper(
    PE3_3_fifo0_local,
    PE3_3_fifo1_local,
    PE3_3_fifo2_local,
    fifo_PE3_3_op1_config_out,
    fifo_PE3_3_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 3 3"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE3_3_fifo2_local,
    fifo2_collect2_3,
    fifo2_collect3_3,
    3,
    3,
    fifo_PE3_3_compute_config_out,
    fifo_PE3_3_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed3_4,
    fifo0_feed4_4,
    PE3_4_fifo0_local,
    fifo_PE2_4_res_config_out,
    fifo_PE3_4_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op3_transfer_wrapper 4 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed3_4,
    fifo1_feed3_5,
    PE3_4_fifo1_local,
    fifo_PE3_4_op0_config_out,
    fifo_PE3_4_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op3_transfer_wrapper 4 1"<<endl;
#endif
  U1_compute_wrapper(
    PE3_4_fifo0_local,
    PE3_4_fifo1_local,
    PE3_4_fifo2_local,
    fifo_PE3_4_op1_config_out,
    fifo_PE3_4_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 3 4"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE3_4_fifo2_local,
    fifo2_collect2_4,
    fifo2_collect3_4,
    3,
    4,
    fifo_PE3_4_compute_config_out,
    fifo_PE3_4_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed3_5,
    fifo0_feed4_5,
    PE3_5_fifo0_local,
    fifo_PE2_5_res_config_out,
    fifo_PE3_5_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op3_transfer_wrapper 5 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed3_5,
    fifo1_feed3_6,
    PE3_5_fifo1_local,
    fifo_PE3_5_op0_config_out,
    fifo_PE3_5_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op3_transfer_wrapper 5 1"<<endl;
#endif
  U1_compute_wrapper(
    PE3_5_fifo0_local,
    PE3_5_fifo1_local,
    PE3_5_fifo2_local,
    fifo_PE3_5_op1_config_out,
    fifo_PE3_5_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 3 5"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE3_5_fifo2_local,
    fifo2_collect2_5,
    fifo2_collect3_5,
    3,
    5,
    fifo_PE3_5_compute_config_out,
    fifo_PE3_5_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed3_6,
    fifo0_feed4_6,
    PE3_6_fifo0_local,
    fifo_PE2_6_res_config_out,
    fifo_PE3_6_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op3_transfer_wrapper 6 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed3_6,
    fifo1_feed3_7,
    PE3_6_fifo1_local,
    fifo_PE3_6_op0_config_out,
    fifo_PE3_6_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op3_transfer_wrapper 6 1"<<endl;
#endif
  U1_compute_wrapper(
    PE3_6_fifo0_local,
    PE3_6_fifo1_local,
    PE3_6_fifo2_local,
    fifo_PE3_6_op1_config_out,
    fifo_PE3_6_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 3 6"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE3_6_fifo2_local,
    fifo2_collect2_6,
    fifo2_collect3_6,
    3,
    6,
    fifo_PE3_6_compute_config_out,
    fifo_PE3_6_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed3_7,
    fifo0_feed4_7,
    PE3_7_fifo0_local,
    fifo_PE2_7_res_config_out,
    fifo_PE3_7_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op3_transfer_wrapper 7 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed3_7,
    fifo1_feed3_8,
    PE3_7_fifo1_local,
    fifo_PE3_7_op0_config_out,
    fifo_PE3_7_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op3_transfer_wrapper 7 1"<<endl;
#endif
  U1_compute_wrapper(
    PE3_7_fifo0_local,
    PE3_7_fifo1_local,
    PE3_7_fifo2_local,
    fifo_PE3_7_op1_config_out,
    fifo_PE3_7_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 3 7"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE3_7_fifo2_local,
    fifo2_collect2_7,
    fifo2_collect3_7,
    3,
    7,
    fifo_PE3_7_compute_config_out,
    fifo_PE3_7_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed3_8,
    fifo0_feed4_8,
    PE3_8_fifo0_local,
    fifo_PE2_8_res_config_out,
    fifo_PE3_8_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op3_transfer_wrapper 8 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed3_8,
    fifo1_feed3_9,
    PE3_8_fifo1_local,
    fifo_PE3_8_op0_config_out,
    fifo_PE3_8_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op3_transfer_wrapper 8 1"<<endl;
#endif
  U1_compute_wrapper(
    PE3_8_fifo0_local,
    PE3_8_fifo1_local,
    PE3_8_fifo2_local,
    fifo_PE3_8_op1_config_out,
    fifo_PE3_8_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 3 8"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE3_8_fifo2_local,
    fifo2_collect2_8,
    fifo2_collect3_8,
    3,
    8,
    fifo_PE3_8_compute_config_out,
    fifo_PE3_8_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed3_9,
    fifo0_feed4_9,
    PE3_9_fifo0_local,
    fifo_PE2_9_res_config_out,
    fifo_PE3_9_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op3_transfer_wrapper 9 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed3_9,
    fifo1_feed3_10,
    PE3_9_fifo1_local,
    fifo_PE3_9_op0_config_out,
    fifo_PE3_9_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op3_transfer_wrapper 9 1"<<endl;
#endif
  U1_compute_wrapper(
    PE3_9_fifo0_local,
    PE3_9_fifo1_local,
    PE3_9_fifo2_local,
    fifo_PE3_9_op1_config_out,
    fifo_PE3_9_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 3 9"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE3_9_fifo2_local,
    fifo2_collect2_9,
    fifo2_collect3_9,
    3,
    9,
    fifo_PE3_9_compute_config_out,
    fifo_PE3_9_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed3_10,
    fifo0_feed4_10,
    PE3_10_fifo0_local,
    fifo_PE2_10_res_config_out,
    fifo_PE3_10_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op3_transfer_wrapper 10 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed3_10,
    fifo1_feed3_11,
    PE3_10_fifo1_local,
    fifo_PE3_10_op0_config_out,
    fifo_PE3_10_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op3_transfer_wrapper 10 1"<<endl;
#endif
  U1_compute_wrapper(
    PE3_10_fifo0_local,
    PE3_10_fifo1_local,
    PE3_10_fifo2_local,
    fifo_PE3_10_op1_config_out,
    fifo_PE3_10_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 3 10"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE3_10_fifo2_local,
    fifo2_collect2_10,
    fifo2_collect3_10,
    3,
    10,
    fifo_PE3_10_compute_config_out,
    fifo_PE3_10_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed3_11,
    fifo0_feed4_11,
    PE3_11_fifo0_local,
    fifo_PE2_11_res_config_out,
    fifo_PE3_11_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op3_transfer_wrapper 11 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed3_11,
    fifo1_feed3_12,
    PE3_11_fifo1_local,
    fifo_PE3_11_op0_config_out,
    fifo_PE3_11_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op3_transfer_wrapper 11 1"<<endl;
#endif
  U1_compute_wrapper(
    PE3_11_fifo0_local,
    PE3_11_fifo1_local,
    PE3_11_fifo2_local,
    fifo_PE3_11_op1_config_out,
    fifo_PE3_11_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 3 11"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE3_11_fifo2_local,
    fifo2_collect2_11,
    fifo2_collect3_11,
    3,
    11,
    fifo_PE3_11_compute_config_out,
    fifo_PE3_11_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed3_12,
    fifo0_feed4_12,
    PE3_12_fifo0_local,
    fifo_PE2_12_res_config_out,
    fifo_PE3_12_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op3_transfer_wrapper 12 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed3_12,
    fifo1_feed3_13,
    PE3_12_fifo1_local,
    fifo_PE3_12_op0_config_out,
    fifo_PE3_12_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op3_transfer_wrapper 12 1"<<endl;
#endif
  U1_compute_wrapper(
    PE3_12_fifo0_local,
    PE3_12_fifo1_local,
    PE3_12_fifo2_local,
    fifo_PE3_12_op1_config_out,
    fifo_PE3_12_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 3 12"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE3_12_fifo2_local,
    fifo2_collect2_12,
    fifo2_collect3_12,
    3,
    12,
    fifo_PE3_12_compute_config_out,
    fifo_PE3_12_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed3_13,
    fifo0_feed4_13,
    PE3_13_fifo0_local,
    fifo_PE2_13_res_config_out,
    fifo_PE3_13_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op3_transfer_wrapper 13 0"<<endl;
#endif
  U1_op1_transfer_last_wrapper(
    fifo1_feed3_13,
    PE3_13_fifo1_local,
    fifo_PE3_13_op0_config_out,
    fifo_PE3_13_op1_config_out
  );

  U1_compute_wrapper(
    PE3_13_fifo0_local,
    PE3_13_fifo1_local,
    PE3_13_fifo2_local,
    fifo_PE3_13_op1_config_out,
    fifo_PE3_13_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 3 13"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE3_13_fifo2_local,
    fifo2_collect2_13,
    fifo2_collect3_13,
    3,
    13,
    fifo_PE3_13_compute_config_out,
    fifo_PE3_13_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed4_0,
    fifo0_feed5_0,
    PE4_0_fifo0_local,
    fifo_PE3_0_res_config_out,
    fifo_PE4_0_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op4_transfer_wrapper 0 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed4_0,
    fifo1_feed4_1,
    PE4_0_fifo1_local,
    fifo_PE4_0_op0_config_out,
    fifo_PE4_0_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op4_transfer_wrapper 0 1"<<endl;
#endif
  U1_compute_wrapper(
    PE4_0_fifo0_local,
    PE4_0_fifo1_local,
    PE4_0_fifo2_local,
    fifo_PE4_0_op1_config_out,
    fifo_PE4_0_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 4 0"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE4_0_fifo2_local,
    fifo2_collect3_0,
    fifo2_collect4_0,
    4,
    0,
    fifo_PE4_0_compute_config_out,
    fifo_PE4_0_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed4_1,
    fifo0_feed5_1,
    PE4_1_fifo0_local,
    fifo_PE3_1_res_config_out,
    fifo_PE4_1_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op4_transfer_wrapper 1 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed4_1,
    fifo1_feed4_2,
    PE4_1_fifo1_local,
    fifo_PE4_1_op0_config_out,
    fifo_PE4_1_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op4_transfer_wrapper 1 1"<<endl;
#endif
  U1_compute_wrapper(
    PE4_1_fifo0_local,
    PE4_1_fifo1_local,
    PE4_1_fifo2_local,
    fifo_PE4_1_op1_config_out,
    fifo_PE4_1_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 4 1"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE4_1_fifo2_local,
    fifo2_collect3_1,
    fifo2_collect4_1,
    4,
    1,
    fifo_PE4_1_compute_config_out,
    fifo_PE4_1_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed4_2,
    fifo0_feed5_2,
    PE4_2_fifo0_local,
    fifo_PE3_2_res_config_out,
    fifo_PE4_2_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op4_transfer_wrapper 2 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed4_2,
    fifo1_feed4_3,
    PE4_2_fifo1_local,
    fifo_PE4_2_op0_config_out,
    fifo_PE4_2_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op4_transfer_wrapper 2 1"<<endl;
#endif
  U1_compute_wrapper(
    PE4_2_fifo0_local,
    PE4_2_fifo1_local,
    PE4_2_fifo2_local,
    fifo_PE4_2_op1_config_out,
    fifo_PE4_2_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 4 2"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE4_2_fifo2_local,
    fifo2_collect3_2,
    fifo2_collect4_2,
    4,
    2,
    fifo_PE4_2_compute_config_out,
    fifo_PE4_2_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed4_3,
    fifo0_feed5_3,
    PE4_3_fifo0_local,
    fifo_PE3_3_res_config_out,
    fifo_PE4_3_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op4_transfer_wrapper 3 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed4_3,
    fifo1_feed4_4,
    PE4_3_fifo1_local,
    fifo_PE4_3_op0_config_out,
    fifo_PE4_3_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op4_transfer_wrapper 3 1"<<endl;
#endif
  U1_compute_wrapper(
    PE4_3_fifo0_local,
    PE4_3_fifo1_local,
    PE4_3_fifo2_local,
    fifo_PE4_3_op1_config_out,
    fifo_PE4_3_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 4 3"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE4_3_fifo2_local,
    fifo2_collect3_3,
    fifo2_collect4_3,
    4,
    3,
    fifo_PE4_3_compute_config_out,
    fifo_PE4_3_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed4_4,
    fifo0_feed5_4,
    PE4_4_fifo0_local,
    fifo_PE3_4_res_config_out,
    fifo_PE4_4_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op4_transfer_wrapper 4 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed4_4,
    fifo1_feed4_5,
    PE4_4_fifo1_local,
    fifo_PE4_4_op0_config_out,
    fifo_PE4_4_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op4_transfer_wrapper 4 1"<<endl;
#endif
  U1_compute_wrapper(
    PE4_4_fifo0_local,
    PE4_4_fifo1_local,
    PE4_4_fifo2_local,
    fifo_PE4_4_op1_config_out,
    fifo_PE4_4_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 4 4"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE4_4_fifo2_local,
    fifo2_collect3_4,
    fifo2_collect4_4,
    4,
    4,
    fifo_PE4_4_compute_config_out,
    fifo_PE4_4_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed4_5,
    fifo0_feed5_5,
    PE4_5_fifo0_local,
    fifo_PE3_5_res_config_out,
    fifo_PE4_5_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op4_transfer_wrapper 5 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed4_5,
    fifo1_feed4_6,
    PE4_5_fifo1_local,
    fifo_PE4_5_op0_config_out,
    fifo_PE4_5_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op4_transfer_wrapper 5 1"<<endl;
#endif
  U1_compute_wrapper(
    PE4_5_fifo0_local,
    PE4_5_fifo1_local,
    PE4_5_fifo2_local,
    fifo_PE4_5_op1_config_out,
    fifo_PE4_5_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 4 5"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE4_5_fifo2_local,
    fifo2_collect3_5,
    fifo2_collect4_5,
    4,
    5,
    fifo_PE4_5_compute_config_out,
    fifo_PE4_5_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed4_6,
    fifo0_feed5_6,
    PE4_6_fifo0_local,
    fifo_PE3_6_res_config_out,
    fifo_PE4_6_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op4_transfer_wrapper 6 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed4_6,
    fifo1_feed4_7,
    PE4_6_fifo1_local,
    fifo_PE4_6_op0_config_out,
    fifo_PE4_6_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op4_transfer_wrapper 6 1"<<endl;
#endif
  U1_compute_wrapper(
    PE4_6_fifo0_local,
    PE4_6_fifo1_local,
    PE4_6_fifo2_local,
    fifo_PE4_6_op1_config_out,
    fifo_PE4_6_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 4 6"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE4_6_fifo2_local,
    fifo2_collect3_6,
    fifo2_collect4_6,
    4,
    6,
    fifo_PE4_6_compute_config_out,
    fifo_PE4_6_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed4_7,
    fifo0_feed5_7,
    PE4_7_fifo0_local,
    fifo_PE3_7_res_config_out,
    fifo_PE4_7_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op4_transfer_wrapper 7 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed4_7,
    fifo1_feed4_8,
    PE4_7_fifo1_local,
    fifo_PE4_7_op0_config_out,
    fifo_PE4_7_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op4_transfer_wrapper 7 1"<<endl;
#endif
  U1_compute_wrapper(
    PE4_7_fifo0_local,
    PE4_7_fifo1_local,
    PE4_7_fifo2_local,
    fifo_PE4_7_op1_config_out,
    fifo_PE4_7_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 4 7"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE4_7_fifo2_local,
    fifo2_collect3_7,
    fifo2_collect4_7,
    4,
    7,
    fifo_PE4_7_compute_config_out,
    fifo_PE4_7_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed4_8,
    fifo0_feed5_8,
    PE4_8_fifo0_local,
    fifo_PE3_8_res_config_out,
    fifo_PE4_8_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op4_transfer_wrapper 8 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed4_8,
    fifo1_feed4_9,
    PE4_8_fifo1_local,
    fifo_PE4_8_op0_config_out,
    fifo_PE4_8_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op4_transfer_wrapper 8 1"<<endl;
#endif
  U1_compute_wrapper(
    PE4_8_fifo0_local,
    PE4_8_fifo1_local,
    PE4_8_fifo2_local,
    fifo_PE4_8_op1_config_out,
    fifo_PE4_8_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 4 8"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE4_8_fifo2_local,
    fifo2_collect3_8,
    fifo2_collect4_8,
    4,
    8,
    fifo_PE4_8_compute_config_out,
    fifo_PE4_8_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed4_9,
    fifo0_feed5_9,
    PE4_9_fifo0_local,
    fifo_PE3_9_res_config_out,
    fifo_PE4_9_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op4_transfer_wrapper 9 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed4_9,
    fifo1_feed4_10,
    PE4_9_fifo1_local,
    fifo_PE4_9_op0_config_out,
    fifo_PE4_9_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op4_transfer_wrapper 9 1"<<endl;
#endif
  U1_compute_wrapper(
    PE4_9_fifo0_local,
    PE4_9_fifo1_local,
    PE4_9_fifo2_local,
    fifo_PE4_9_op1_config_out,
    fifo_PE4_9_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 4 9"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE4_9_fifo2_local,
    fifo2_collect3_9,
    fifo2_collect4_9,
    4,
    9,
    fifo_PE4_9_compute_config_out,
    fifo_PE4_9_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed4_10,
    fifo0_feed5_10,
    PE4_10_fifo0_local,
    fifo_PE3_10_res_config_out,
    fifo_PE4_10_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op4_transfer_wrapper 10 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed4_10,
    fifo1_feed4_11,
    PE4_10_fifo1_local,
    fifo_PE4_10_op0_config_out,
    fifo_PE4_10_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op4_transfer_wrapper 10 1"<<endl;
#endif
  U1_compute_wrapper(
    PE4_10_fifo0_local,
    PE4_10_fifo1_local,
    PE4_10_fifo2_local,
    fifo_PE4_10_op1_config_out,
    fifo_PE4_10_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 4 10"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE4_10_fifo2_local,
    fifo2_collect3_10,
    fifo2_collect4_10,
    4,
    10,
    fifo_PE4_10_compute_config_out,
    fifo_PE4_10_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed4_11,
    fifo0_feed5_11,
    PE4_11_fifo0_local,
    fifo_PE3_11_res_config_out,
    fifo_PE4_11_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op4_transfer_wrapper 11 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed4_11,
    fifo1_feed4_12,
    PE4_11_fifo1_local,
    fifo_PE4_11_op0_config_out,
    fifo_PE4_11_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op4_transfer_wrapper 11 1"<<endl;
#endif
  U1_compute_wrapper(
    PE4_11_fifo0_local,
    PE4_11_fifo1_local,
    PE4_11_fifo2_local,
    fifo_PE4_11_op1_config_out,
    fifo_PE4_11_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 4 11"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE4_11_fifo2_local,
    fifo2_collect3_11,
    fifo2_collect4_11,
    4,
    11,
    fifo_PE4_11_compute_config_out,
    fifo_PE4_11_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed4_12,
    fifo0_feed5_12,
    PE4_12_fifo0_local,
    fifo_PE3_12_res_config_out,
    fifo_PE4_12_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op4_transfer_wrapper 12 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed4_12,
    fifo1_feed4_13,
    PE4_12_fifo1_local,
    fifo_PE4_12_op0_config_out,
    fifo_PE4_12_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op4_transfer_wrapper 12 1"<<endl;
#endif
  U1_compute_wrapper(
    PE4_12_fifo0_local,
    PE4_12_fifo1_local,
    PE4_12_fifo2_local,
    fifo_PE4_12_op1_config_out,
    fifo_PE4_12_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 4 12"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE4_12_fifo2_local,
    fifo2_collect3_12,
    fifo2_collect4_12,
    4,
    12,
    fifo_PE4_12_compute_config_out,
    fifo_PE4_12_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed4_13,
    fifo0_feed5_13,
    PE4_13_fifo0_local,
    fifo_PE3_13_res_config_out,
    fifo_PE4_13_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op4_transfer_wrapper 13 0"<<endl;
#endif
  U1_op1_transfer_last_wrapper(
    fifo1_feed4_13,
    PE4_13_fifo1_local,
    fifo_PE4_13_op0_config_out,
    fifo_PE4_13_op1_config_out
  );

  U1_compute_wrapper(
    PE4_13_fifo0_local,
    PE4_13_fifo1_local,
    PE4_13_fifo2_local,
    fifo_PE4_13_op1_config_out,
    fifo_PE4_13_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 4 13"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE4_13_fifo2_local,
    fifo2_collect3_13,
    fifo2_collect4_13,
    4,
    13,
    fifo_PE4_13_compute_config_out,
    fifo_PE4_13_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed5_0,
    fifo0_feed6_0,
    PE5_0_fifo0_local,
    fifo_PE4_0_res_config_out,
    fifo_PE5_0_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op5_transfer_wrapper 0 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed5_0,
    fifo1_feed5_1,
    PE5_0_fifo1_local,
    fifo_PE5_0_op0_config_out,
    fifo_PE5_0_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op5_transfer_wrapper 0 1"<<endl;
#endif
  U1_compute_wrapper(
    PE5_0_fifo0_local,
    PE5_0_fifo1_local,
    PE5_0_fifo2_local,
    fifo_PE5_0_op1_config_out,
    fifo_PE5_0_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 5 0"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE5_0_fifo2_local,
    fifo2_collect4_0,
    fifo2_collect5_0,
    5,
    0,
    fifo_PE5_0_compute_config_out,
    fifo_PE5_0_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed5_1,
    fifo0_feed6_1,
    PE5_1_fifo0_local,
    fifo_PE4_1_res_config_out,
    fifo_PE5_1_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op5_transfer_wrapper 1 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed5_1,
    fifo1_feed5_2,
    PE5_1_fifo1_local,
    fifo_PE5_1_op0_config_out,
    fifo_PE5_1_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op5_transfer_wrapper 1 1"<<endl;
#endif
  U1_compute_wrapper(
    PE5_1_fifo0_local,
    PE5_1_fifo1_local,
    PE5_1_fifo2_local,
    fifo_PE5_1_op1_config_out,
    fifo_PE5_1_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 5 1"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE5_1_fifo2_local,
    fifo2_collect4_1,
    fifo2_collect5_1,
    5,
    1,
    fifo_PE5_1_compute_config_out,
    fifo_PE5_1_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed5_2,
    fifo0_feed6_2,
    PE5_2_fifo0_local,
    fifo_PE4_2_res_config_out,
    fifo_PE5_2_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op5_transfer_wrapper 2 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed5_2,
    fifo1_feed5_3,
    PE5_2_fifo1_local,
    fifo_PE5_2_op0_config_out,
    fifo_PE5_2_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op5_transfer_wrapper 2 1"<<endl;
#endif
  U1_compute_wrapper(
    PE5_2_fifo0_local,
    PE5_2_fifo1_local,
    PE5_2_fifo2_local,
    fifo_PE5_2_op1_config_out,
    fifo_PE5_2_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 5 2"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE5_2_fifo2_local,
    fifo2_collect4_2,
    fifo2_collect5_2,
    5,
    2,
    fifo_PE5_2_compute_config_out,
    fifo_PE5_2_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed5_3,
    fifo0_feed6_3,
    PE5_3_fifo0_local,
    fifo_PE4_3_res_config_out,
    fifo_PE5_3_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op5_transfer_wrapper 3 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed5_3,
    fifo1_feed5_4,
    PE5_3_fifo1_local,
    fifo_PE5_3_op0_config_out,
    fifo_PE5_3_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op5_transfer_wrapper 3 1"<<endl;
#endif
  U1_compute_wrapper(
    PE5_3_fifo0_local,
    PE5_3_fifo1_local,
    PE5_3_fifo2_local,
    fifo_PE5_3_op1_config_out,
    fifo_PE5_3_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 5 3"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE5_3_fifo2_local,
    fifo2_collect4_3,
    fifo2_collect5_3,
    5,
    3,
    fifo_PE5_3_compute_config_out,
    fifo_PE5_3_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed5_4,
    fifo0_feed6_4,
    PE5_4_fifo0_local,
    fifo_PE4_4_res_config_out,
    fifo_PE5_4_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op5_transfer_wrapper 4 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed5_4,
    fifo1_feed5_5,
    PE5_4_fifo1_local,
    fifo_PE5_4_op0_config_out,
    fifo_PE5_4_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op5_transfer_wrapper 4 1"<<endl;
#endif
  U1_compute_wrapper(
    PE5_4_fifo0_local,
    PE5_4_fifo1_local,
    PE5_4_fifo2_local,
    fifo_PE5_4_op1_config_out,
    fifo_PE5_4_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 5 4"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE5_4_fifo2_local,
    fifo2_collect4_4,
    fifo2_collect5_4,
    5,
    4,
    fifo_PE5_4_compute_config_out,
    fifo_PE5_4_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed5_5,
    fifo0_feed6_5,
    PE5_5_fifo0_local,
    fifo_PE4_5_res_config_out,
    fifo_PE5_5_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op5_transfer_wrapper 5 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed5_5,
    fifo1_feed5_6,
    PE5_5_fifo1_local,
    fifo_PE5_5_op0_config_out,
    fifo_PE5_5_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op5_transfer_wrapper 5 1"<<endl;
#endif
  U1_compute_wrapper(
    PE5_5_fifo0_local,
    PE5_5_fifo1_local,
    PE5_5_fifo2_local,
    fifo_PE5_5_op1_config_out,
    fifo_PE5_5_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 5 5"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE5_5_fifo2_local,
    fifo2_collect4_5,
    fifo2_collect5_5,
    5,
    5,
    fifo_PE5_5_compute_config_out,
    fifo_PE5_5_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed5_6,
    fifo0_feed6_6,
    PE5_6_fifo0_local,
    fifo_PE4_6_res_config_out,
    fifo_PE5_6_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op5_transfer_wrapper 6 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed5_6,
    fifo1_feed5_7,
    PE5_6_fifo1_local,
    fifo_PE5_6_op0_config_out,
    fifo_PE5_6_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op5_transfer_wrapper 6 1"<<endl;
#endif
  U1_compute_wrapper(
    PE5_6_fifo0_local,
    PE5_6_fifo1_local,
    PE5_6_fifo2_local,
    fifo_PE5_6_op1_config_out,
    fifo_PE5_6_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 5 6"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE5_6_fifo2_local,
    fifo2_collect4_6,
    fifo2_collect5_6,
    5,
    6,
    fifo_PE5_6_compute_config_out,
    fifo_PE5_6_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed5_7,
    fifo0_feed6_7,
    PE5_7_fifo0_local,
    fifo_PE4_7_res_config_out,
    fifo_PE5_7_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op5_transfer_wrapper 7 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed5_7,
    fifo1_feed5_8,
    PE5_7_fifo1_local,
    fifo_PE5_7_op0_config_out,
    fifo_PE5_7_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op5_transfer_wrapper 7 1"<<endl;
#endif
  U1_compute_wrapper(
    PE5_7_fifo0_local,
    PE5_7_fifo1_local,
    PE5_7_fifo2_local,
    fifo_PE5_7_op1_config_out,
    fifo_PE5_7_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 5 7"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE5_7_fifo2_local,
    fifo2_collect4_7,
    fifo2_collect5_7,
    5,
    7,
    fifo_PE5_7_compute_config_out,
    fifo_PE5_7_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed5_8,
    fifo0_feed6_8,
    PE5_8_fifo0_local,
    fifo_PE4_8_res_config_out,
    fifo_PE5_8_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op5_transfer_wrapper 8 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed5_8,
    fifo1_feed5_9,
    PE5_8_fifo1_local,
    fifo_PE5_8_op0_config_out,
    fifo_PE5_8_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op5_transfer_wrapper 8 1"<<endl;
#endif
  U1_compute_wrapper(
    PE5_8_fifo0_local,
    PE5_8_fifo1_local,
    PE5_8_fifo2_local,
    fifo_PE5_8_op1_config_out,
    fifo_PE5_8_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 5 8"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE5_8_fifo2_local,
    fifo2_collect4_8,
    fifo2_collect5_8,
    5,
    8,
    fifo_PE5_8_compute_config_out,
    fifo_PE5_8_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed5_9,
    fifo0_feed6_9,
    PE5_9_fifo0_local,
    fifo_PE4_9_res_config_out,
    fifo_PE5_9_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op5_transfer_wrapper 9 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed5_9,
    fifo1_feed5_10,
    PE5_9_fifo1_local,
    fifo_PE5_9_op0_config_out,
    fifo_PE5_9_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op5_transfer_wrapper 9 1"<<endl;
#endif
  U1_compute_wrapper(
    PE5_9_fifo0_local,
    PE5_9_fifo1_local,
    PE5_9_fifo2_local,
    fifo_PE5_9_op1_config_out,
    fifo_PE5_9_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 5 9"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE5_9_fifo2_local,
    fifo2_collect4_9,
    fifo2_collect5_9,
    5,
    9,
    fifo_PE5_9_compute_config_out,
    fifo_PE5_9_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed5_10,
    fifo0_feed6_10,
    PE5_10_fifo0_local,
    fifo_PE4_10_res_config_out,
    fifo_PE5_10_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op5_transfer_wrapper 10 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed5_10,
    fifo1_feed5_11,
    PE5_10_fifo1_local,
    fifo_PE5_10_op0_config_out,
    fifo_PE5_10_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op5_transfer_wrapper 10 1"<<endl;
#endif
  U1_compute_wrapper(
    PE5_10_fifo0_local,
    PE5_10_fifo1_local,
    PE5_10_fifo2_local,
    fifo_PE5_10_op1_config_out,
    fifo_PE5_10_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 5 10"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE5_10_fifo2_local,
    fifo2_collect4_10,
    fifo2_collect5_10,
    5,
    10,
    fifo_PE5_10_compute_config_out,
    fifo_PE5_10_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed5_11,
    fifo0_feed6_11,
    PE5_11_fifo0_local,
    fifo_PE4_11_res_config_out,
    fifo_PE5_11_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op5_transfer_wrapper 11 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed5_11,
    fifo1_feed5_12,
    PE5_11_fifo1_local,
    fifo_PE5_11_op0_config_out,
    fifo_PE5_11_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op5_transfer_wrapper 11 1"<<endl;
#endif
  U1_compute_wrapper(
    PE5_11_fifo0_local,
    PE5_11_fifo1_local,
    PE5_11_fifo2_local,
    fifo_PE5_11_op1_config_out,
    fifo_PE5_11_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 5 11"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE5_11_fifo2_local,
    fifo2_collect4_11,
    fifo2_collect5_11,
    5,
    11,
    fifo_PE5_11_compute_config_out,
    fifo_PE5_11_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed5_12,
    fifo0_feed6_12,
    PE5_12_fifo0_local,
    fifo_PE4_12_res_config_out,
    fifo_PE5_12_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op5_transfer_wrapper 12 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed5_12,
    fifo1_feed5_13,
    PE5_12_fifo1_local,
    fifo_PE5_12_op0_config_out,
    fifo_PE5_12_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op5_transfer_wrapper 12 1"<<endl;
#endif
  U1_compute_wrapper(
    PE5_12_fifo0_local,
    PE5_12_fifo1_local,
    PE5_12_fifo2_local,
    fifo_PE5_12_op1_config_out,
    fifo_PE5_12_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 5 12"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE5_12_fifo2_local,
    fifo2_collect4_12,
    fifo2_collect5_12,
    5,
    12,
    fifo_PE5_12_compute_config_out,
    fifo_PE5_12_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed5_13,
    fifo0_feed6_13,
    PE5_13_fifo0_local,
    fifo_PE4_13_res_config_out,
    fifo_PE5_13_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op5_transfer_wrapper 13 0"<<endl;
#endif
  U1_op1_transfer_last_wrapper(
    fifo1_feed5_13,
    PE5_13_fifo1_local,
    fifo_PE5_13_op0_config_out,
    fifo_PE5_13_op1_config_out
  );

  U1_compute_wrapper(
    PE5_13_fifo0_local,
    PE5_13_fifo1_local,
    PE5_13_fifo2_local,
    fifo_PE5_13_op1_config_out,
    fifo_PE5_13_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 5 13"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE5_13_fifo2_local,
    fifo2_collect4_13,
    fifo2_collect5_13,
    5,
    13,
    fifo_PE5_13_compute_config_out,
    fifo_PE5_13_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed6_0,
    fifo0_feed7_0,
    PE6_0_fifo0_local,
    fifo_PE5_0_res_config_out,
    fifo_PE6_0_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op6_transfer_wrapper 0 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed6_0,
    fifo1_feed6_1,
    PE6_0_fifo1_local,
    fifo_PE6_0_op0_config_out,
    fifo_PE6_0_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op6_transfer_wrapper 0 1"<<endl;
#endif
  U1_compute_wrapper(
    PE6_0_fifo0_local,
    PE6_0_fifo1_local,
    PE6_0_fifo2_local,
    fifo_PE6_0_op1_config_out,
    fifo_PE6_0_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 6 0"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE6_0_fifo2_local,
    fifo2_collect5_0,
    fifo2_collect6_0,
    6,
    0,
    fifo_PE6_0_compute_config_out,
    fifo_PE6_0_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed6_1,
    fifo0_feed7_1,
    PE6_1_fifo0_local,
    fifo_PE5_1_res_config_out,
    fifo_PE6_1_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op6_transfer_wrapper 1 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed6_1,
    fifo1_feed6_2,
    PE6_1_fifo1_local,
    fifo_PE6_1_op0_config_out,
    fifo_PE6_1_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op6_transfer_wrapper 1 1"<<endl;
#endif
  U1_compute_wrapper(
    PE6_1_fifo0_local,
    PE6_1_fifo1_local,
    PE6_1_fifo2_local,
    fifo_PE6_1_op1_config_out,
    fifo_PE6_1_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 6 1"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE6_1_fifo2_local,
    fifo2_collect5_1,
    fifo2_collect6_1,
    6,
    1,
    fifo_PE6_1_compute_config_out,
    fifo_PE6_1_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed6_2,
    fifo0_feed7_2,
    PE6_2_fifo0_local,
    fifo_PE5_2_res_config_out,
    fifo_PE6_2_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op6_transfer_wrapper 2 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed6_2,
    fifo1_feed6_3,
    PE6_2_fifo1_local,
    fifo_PE6_2_op0_config_out,
    fifo_PE6_2_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op6_transfer_wrapper 2 1"<<endl;
#endif
  U1_compute_wrapper(
    PE6_2_fifo0_local,
    PE6_2_fifo1_local,
    PE6_2_fifo2_local,
    fifo_PE6_2_op1_config_out,
    fifo_PE6_2_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 6 2"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE6_2_fifo2_local,
    fifo2_collect5_2,
    fifo2_collect6_2,
    6,
    2,
    fifo_PE6_2_compute_config_out,
    fifo_PE6_2_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed6_3,
    fifo0_feed7_3,
    PE6_3_fifo0_local,
    fifo_PE5_3_res_config_out,
    fifo_PE6_3_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op6_transfer_wrapper 3 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed6_3,
    fifo1_feed6_4,
    PE6_3_fifo1_local,
    fifo_PE6_3_op0_config_out,
    fifo_PE6_3_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op6_transfer_wrapper 3 1"<<endl;
#endif
  U1_compute_wrapper(
    PE6_3_fifo0_local,
    PE6_3_fifo1_local,
    PE6_3_fifo2_local,
    fifo_PE6_3_op1_config_out,
    fifo_PE6_3_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 6 3"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE6_3_fifo2_local,
    fifo2_collect5_3,
    fifo2_collect6_3,
    6,
    3,
    fifo_PE6_3_compute_config_out,
    fifo_PE6_3_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed6_4,
    fifo0_feed7_4,
    PE6_4_fifo0_local,
    fifo_PE5_4_res_config_out,
    fifo_PE6_4_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op6_transfer_wrapper 4 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed6_4,
    fifo1_feed6_5,
    PE6_4_fifo1_local,
    fifo_PE6_4_op0_config_out,
    fifo_PE6_4_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op6_transfer_wrapper 4 1"<<endl;
#endif
  U1_compute_wrapper(
    PE6_4_fifo0_local,
    PE6_4_fifo1_local,
    PE6_4_fifo2_local,
    fifo_PE6_4_op1_config_out,
    fifo_PE6_4_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 6 4"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE6_4_fifo2_local,
    fifo2_collect5_4,
    fifo2_collect6_4,
    6,
    4,
    fifo_PE6_4_compute_config_out,
    fifo_PE6_4_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed6_5,
    fifo0_feed7_5,
    PE6_5_fifo0_local,
    fifo_PE5_5_res_config_out,
    fifo_PE6_5_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op6_transfer_wrapper 5 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed6_5,
    fifo1_feed6_6,
    PE6_5_fifo1_local,
    fifo_PE6_5_op0_config_out,
    fifo_PE6_5_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op6_transfer_wrapper 5 1"<<endl;
#endif
  U1_compute_wrapper(
    PE6_5_fifo0_local,
    PE6_5_fifo1_local,
    PE6_5_fifo2_local,
    fifo_PE6_5_op1_config_out,
    fifo_PE6_5_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 6 5"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE6_5_fifo2_local,
    fifo2_collect5_5,
    fifo2_collect6_5,
    6,
    5,
    fifo_PE6_5_compute_config_out,
    fifo_PE6_5_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed6_6,
    fifo0_feed7_6,
    PE6_6_fifo0_local,
    fifo_PE5_6_res_config_out,
    fifo_PE6_6_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op6_transfer_wrapper 6 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed6_6,
    fifo1_feed6_7,
    PE6_6_fifo1_local,
    fifo_PE6_6_op0_config_out,
    fifo_PE6_6_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op6_transfer_wrapper 6 1"<<endl;
#endif
  U1_compute_wrapper(
    PE6_6_fifo0_local,
    PE6_6_fifo1_local,
    PE6_6_fifo2_local,
    fifo_PE6_6_op1_config_out,
    fifo_PE6_6_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 6 6"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE6_6_fifo2_local,
    fifo2_collect5_6,
    fifo2_collect6_6,
    6,
    6,
    fifo_PE6_6_compute_config_out,
    fifo_PE6_6_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed6_7,
    fifo0_feed7_7,
    PE6_7_fifo0_local,
    fifo_PE5_7_res_config_out,
    fifo_PE6_7_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op6_transfer_wrapper 7 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed6_7,
    fifo1_feed6_8,
    PE6_7_fifo1_local,
    fifo_PE6_7_op0_config_out,
    fifo_PE6_7_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op6_transfer_wrapper 7 1"<<endl;
#endif
  U1_compute_wrapper(
    PE6_7_fifo0_local,
    PE6_7_fifo1_local,
    PE6_7_fifo2_local,
    fifo_PE6_7_op1_config_out,
    fifo_PE6_7_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 6 7"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE6_7_fifo2_local,
    fifo2_collect5_7,
    fifo2_collect6_7,
    6,
    7,
    fifo_PE6_7_compute_config_out,
    fifo_PE6_7_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed6_8,
    fifo0_feed7_8,
    PE6_8_fifo0_local,
    fifo_PE5_8_res_config_out,
    fifo_PE6_8_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op6_transfer_wrapper 8 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed6_8,
    fifo1_feed6_9,
    PE6_8_fifo1_local,
    fifo_PE6_8_op0_config_out,
    fifo_PE6_8_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op6_transfer_wrapper 8 1"<<endl;
#endif
  U1_compute_wrapper(
    PE6_8_fifo0_local,
    PE6_8_fifo1_local,
    PE6_8_fifo2_local,
    fifo_PE6_8_op1_config_out,
    fifo_PE6_8_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 6 8"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE6_8_fifo2_local,
    fifo2_collect5_8,
    fifo2_collect6_8,
    6,
    8,
    fifo_PE6_8_compute_config_out,
    fifo_PE6_8_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed6_9,
    fifo0_feed7_9,
    PE6_9_fifo0_local,
    fifo_PE5_9_res_config_out,
    fifo_PE6_9_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op6_transfer_wrapper 9 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed6_9,
    fifo1_feed6_10,
    PE6_9_fifo1_local,
    fifo_PE6_9_op0_config_out,
    fifo_PE6_9_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op6_transfer_wrapper 9 1"<<endl;
#endif
  U1_compute_wrapper(
    PE6_9_fifo0_local,
    PE6_9_fifo1_local,
    PE6_9_fifo2_local,
    fifo_PE6_9_op1_config_out,
    fifo_PE6_9_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 6 9"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE6_9_fifo2_local,
    fifo2_collect5_9,
    fifo2_collect6_9,
    6,
    9,
    fifo_PE6_9_compute_config_out,
    fifo_PE6_9_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed6_10,
    fifo0_feed7_10,
    PE6_10_fifo0_local,
    fifo_PE5_10_res_config_out,
    fifo_PE6_10_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op6_transfer_wrapper 10 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed6_10,
    fifo1_feed6_11,
    PE6_10_fifo1_local,
    fifo_PE6_10_op0_config_out,
    fifo_PE6_10_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op6_transfer_wrapper 10 1"<<endl;
#endif
  U1_compute_wrapper(
    PE6_10_fifo0_local,
    PE6_10_fifo1_local,
    PE6_10_fifo2_local,
    fifo_PE6_10_op1_config_out,
    fifo_PE6_10_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 6 10"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE6_10_fifo2_local,
    fifo2_collect5_10,
    fifo2_collect6_10,
    6,
    10,
    fifo_PE6_10_compute_config_out,
    fifo_PE6_10_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed6_11,
    fifo0_feed7_11,
    PE6_11_fifo0_local,
    fifo_PE5_11_res_config_out,
    fifo_PE6_11_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op6_transfer_wrapper 11 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed6_11,
    fifo1_feed6_12,
    PE6_11_fifo1_local,
    fifo_PE6_11_op0_config_out,
    fifo_PE6_11_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op6_transfer_wrapper 11 1"<<endl;
#endif
  U1_compute_wrapper(
    PE6_11_fifo0_local,
    PE6_11_fifo1_local,
    PE6_11_fifo2_local,
    fifo_PE6_11_op1_config_out,
    fifo_PE6_11_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 6 11"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE6_11_fifo2_local,
    fifo2_collect5_11,
    fifo2_collect6_11,
    6,
    11,
    fifo_PE6_11_compute_config_out,
    fifo_PE6_11_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed6_12,
    fifo0_feed7_12,
    PE6_12_fifo0_local,
    fifo_PE5_12_res_config_out,
    fifo_PE6_12_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op6_transfer_wrapper 12 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed6_12,
    fifo1_feed6_13,
    PE6_12_fifo1_local,
    fifo_PE6_12_op0_config_out,
    fifo_PE6_12_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op6_transfer_wrapper 12 1"<<endl;
#endif
  U1_compute_wrapper(
    PE6_12_fifo0_local,
    PE6_12_fifo1_local,
    PE6_12_fifo2_local,
    fifo_PE6_12_op1_config_out,
    fifo_PE6_12_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 6 12"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE6_12_fifo2_local,
    fifo2_collect5_12,
    fifo2_collect6_12,
    6,
    12,
    fifo_PE6_12_compute_config_out,
    fifo_PE6_12_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed6_13,
    fifo0_feed7_13,
    PE6_13_fifo0_local,
    fifo_PE5_13_res_config_out,
    fifo_PE6_13_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op6_transfer_wrapper 13 0"<<endl;
#endif
  U1_op1_transfer_last_wrapper(
    fifo1_feed6_13,
    PE6_13_fifo1_local,
    fifo_PE6_13_op0_config_out,
    fifo_PE6_13_op1_config_out
  );

  U1_compute_wrapper(
    PE6_13_fifo0_local,
    PE6_13_fifo1_local,
    PE6_13_fifo2_local,
    fifo_PE6_13_op1_config_out,
    fifo_PE6_13_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 6 13"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE6_13_fifo2_local,
    fifo2_collect5_13,
    fifo2_collect6_13,
    6,
    13,
    fifo_PE6_13_compute_config_out,
    fifo_PE6_13_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed7_0,
    fifo0_feed8_0,
    PE7_0_fifo0_local,
    fifo_PE6_0_res_config_out,
    fifo_PE7_0_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op7_transfer_wrapper 0 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed7_0,
    fifo1_feed7_1,
    PE7_0_fifo1_local,
    fifo_PE7_0_op0_config_out,
    fifo_PE7_0_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op7_transfer_wrapper 0 1"<<endl;
#endif
  U1_compute_wrapper(
    PE7_0_fifo0_local,
    PE7_0_fifo1_local,
    PE7_0_fifo2_local,
    fifo_PE7_0_op1_config_out,
    fifo_PE7_0_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 7 0"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE7_0_fifo2_local,
    fifo2_collect6_0,
    fifo2_collect7_0,
    7,
    0,
    fifo_PE7_0_compute_config_out,
    fifo_PE7_0_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed7_1,
    fifo0_feed8_1,
    PE7_1_fifo0_local,
    fifo_PE6_1_res_config_out,
    fifo_PE7_1_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op7_transfer_wrapper 1 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed7_1,
    fifo1_feed7_2,
    PE7_1_fifo1_local,
    fifo_PE7_1_op0_config_out,
    fifo_PE7_1_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op7_transfer_wrapper 1 1"<<endl;
#endif
  U1_compute_wrapper(
    PE7_1_fifo0_local,
    PE7_1_fifo1_local,
    PE7_1_fifo2_local,
    fifo_PE7_1_op1_config_out,
    fifo_PE7_1_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 7 1"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE7_1_fifo2_local,
    fifo2_collect6_1,
    fifo2_collect7_1,
    7,
    1,
    fifo_PE7_1_compute_config_out,
    fifo_PE7_1_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed7_2,
    fifo0_feed8_2,
    PE7_2_fifo0_local,
    fifo_PE6_2_res_config_out,
    fifo_PE7_2_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op7_transfer_wrapper 2 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed7_2,
    fifo1_feed7_3,
    PE7_2_fifo1_local,
    fifo_PE7_2_op0_config_out,
    fifo_PE7_2_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op7_transfer_wrapper 2 1"<<endl;
#endif
  U1_compute_wrapper(
    PE7_2_fifo0_local,
    PE7_2_fifo1_local,
    PE7_2_fifo2_local,
    fifo_PE7_2_op1_config_out,
    fifo_PE7_2_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 7 2"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE7_2_fifo2_local,
    fifo2_collect6_2,
    fifo2_collect7_2,
    7,
    2,
    fifo_PE7_2_compute_config_out,
    fifo_PE7_2_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed7_3,
    fifo0_feed8_3,
    PE7_3_fifo0_local,
    fifo_PE6_3_res_config_out,
    fifo_PE7_3_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op7_transfer_wrapper 3 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed7_3,
    fifo1_feed7_4,
    PE7_3_fifo1_local,
    fifo_PE7_3_op0_config_out,
    fifo_PE7_3_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op7_transfer_wrapper 3 1"<<endl;
#endif
  U1_compute_wrapper(
    PE7_3_fifo0_local,
    PE7_3_fifo1_local,
    PE7_3_fifo2_local,
    fifo_PE7_3_op1_config_out,
    fifo_PE7_3_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 7 3"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE7_3_fifo2_local,
    fifo2_collect6_3,
    fifo2_collect7_3,
    7,
    3,
    fifo_PE7_3_compute_config_out,
    fifo_PE7_3_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed7_4,
    fifo0_feed8_4,
    PE7_4_fifo0_local,
    fifo_PE6_4_res_config_out,
    fifo_PE7_4_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op7_transfer_wrapper 4 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed7_4,
    fifo1_feed7_5,
    PE7_4_fifo1_local,
    fifo_PE7_4_op0_config_out,
    fifo_PE7_4_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op7_transfer_wrapper 4 1"<<endl;
#endif
  U1_compute_wrapper(
    PE7_4_fifo0_local,
    PE7_4_fifo1_local,
    PE7_4_fifo2_local,
    fifo_PE7_4_op1_config_out,
    fifo_PE7_4_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 7 4"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE7_4_fifo2_local,
    fifo2_collect6_4,
    fifo2_collect7_4,
    7,
    4,
    fifo_PE7_4_compute_config_out,
    fifo_PE7_4_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed7_5,
    fifo0_feed8_5,
    PE7_5_fifo0_local,
    fifo_PE6_5_res_config_out,
    fifo_PE7_5_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op7_transfer_wrapper 5 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed7_5,
    fifo1_feed7_6,
    PE7_5_fifo1_local,
    fifo_PE7_5_op0_config_out,
    fifo_PE7_5_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op7_transfer_wrapper 5 1"<<endl;
#endif
  U1_compute_wrapper(
    PE7_5_fifo0_local,
    PE7_5_fifo1_local,
    PE7_5_fifo2_local,
    fifo_PE7_5_op1_config_out,
    fifo_PE7_5_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 7 5"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE7_5_fifo2_local,
    fifo2_collect6_5,
    fifo2_collect7_5,
    7,
    5,
    fifo_PE7_5_compute_config_out,
    fifo_PE7_5_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed7_6,
    fifo0_feed8_6,
    PE7_6_fifo0_local,
    fifo_PE6_6_res_config_out,
    fifo_PE7_6_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op7_transfer_wrapper 6 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed7_6,
    fifo1_feed7_7,
    PE7_6_fifo1_local,
    fifo_PE7_6_op0_config_out,
    fifo_PE7_6_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op7_transfer_wrapper 6 1"<<endl;
#endif
  U1_compute_wrapper(
    PE7_6_fifo0_local,
    PE7_6_fifo1_local,
    PE7_6_fifo2_local,
    fifo_PE7_6_op1_config_out,
    fifo_PE7_6_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 7 6"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE7_6_fifo2_local,
    fifo2_collect6_6,
    fifo2_collect7_6,
    7,
    6,
    fifo_PE7_6_compute_config_out,
    fifo_PE7_6_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed7_7,
    fifo0_feed8_7,
    PE7_7_fifo0_local,
    fifo_PE6_7_res_config_out,
    fifo_PE7_7_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op7_transfer_wrapper 7 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed7_7,
    fifo1_feed7_8,
    PE7_7_fifo1_local,
    fifo_PE7_7_op0_config_out,
    fifo_PE7_7_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op7_transfer_wrapper 7 1"<<endl;
#endif
  U1_compute_wrapper(
    PE7_7_fifo0_local,
    PE7_7_fifo1_local,
    PE7_7_fifo2_local,
    fifo_PE7_7_op1_config_out,
    fifo_PE7_7_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 7 7"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE7_7_fifo2_local,
    fifo2_collect6_7,
    fifo2_collect7_7,
    7,
    7,
    fifo_PE7_7_compute_config_out,
    fifo_PE7_7_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed7_8,
    fifo0_feed8_8,
    PE7_8_fifo0_local,
    fifo_PE6_8_res_config_out,
    fifo_PE7_8_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op7_transfer_wrapper 8 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed7_8,
    fifo1_feed7_9,
    PE7_8_fifo1_local,
    fifo_PE7_8_op0_config_out,
    fifo_PE7_8_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op7_transfer_wrapper 8 1"<<endl;
#endif
  U1_compute_wrapper(
    PE7_8_fifo0_local,
    PE7_8_fifo1_local,
    PE7_8_fifo2_local,
    fifo_PE7_8_op1_config_out,
    fifo_PE7_8_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 7 8"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE7_8_fifo2_local,
    fifo2_collect6_8,
    fifo2_collect7_8,
    7,
    8,
    fifo_PE7_8_compute_config_out,
    fifo_PE7_8_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed7_9,
    fifo0_feed8_9,
    PE7_9_fifo0_local,
    fifo_PE6_9_res_config_out,
    fifo_PE7_9_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op7_transfer_wrapper 9 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed7_9,
    fifo1_feed7_10,
    PE7_9_fifo1_local,
    fifo_PE7_9_op0_config_out,
    fifo_PE7_9_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op7_transfer_wrapper 9 1"<<endl;
#endif
  U1_compute_wrapper(
    PE7_9_fifo0_local,
    PE7_9_fifo1_local,
    PE7_9_fifo2_local,
    fifo_PE7_9_op1_config_out,
    fifo_PE7_9_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 7 9"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE7_9_fifo2_local,
    fifo2_collect6_9,
    fifo2_collect7_9,
    7,
    9,
    fifo_PE7_9_compute_config_out,
    fifo_PE7_9_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed7_10,
    fifo0_feed8_10,
    PE7_10_fifo0_local,
    fifo_PE6_10_res_config_out,
    fifo_PE7_10_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op7_transfer_wrapper 10 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed7_10,
    fifo1_feed7_11,
    PE7_10_fifo1_local,
    fifo_PE7_10_op0_config_out,
    fifo_PE7_10_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op7_transfer_wrapper 10 1"<<endl;
#endif
  U1_compute_wrapper(
    PE7_10_fifo0_local,
    PE7_10_fifo1_local,
    PE7_10_fifo2_local,
    fifo_PE7_10_op1_config_out,
    fifo_PE7_10_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 7 10"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE7_10_fifo2_local,
    fifo2_collect6_10,
    fifo2_collect7_10,
    7,
    10,
    fifo_PE7_10_compute_config_out,
    fifo_PE7_10_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed7_11,
    fifo0_feed8_11,
    PE7_11_fifo0_local,
    fifo_PE6_11_res_config_out,
    fifo_PE7_11_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op7_transfer_wrapper 11 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed7_11,
    fifo1_feed7_12,
    PE7_11_fifo1_local,
    fifo_PE7_11_op0_config_out,
    fifo_PE7_11_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op7_transfer_wrapper 11 1"<<endl;
#endif
  U1_compute_wrapper(
    PE7_11_fifo0_local,
    PE7_11_fifo1_local,
    PE7_11_fifo2_local,
    fifo_PE7_11_op1_config_out,
    fifo_PE7_11_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 7 11"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE7_11_fifo2_local,
    fifo2_collect6_11,
    fifo2_collect7_11,
    7,
    11,
    fifo_PE7_11_compute_config_out,
    fifo_PE7_11_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed7_12,
    fifo0_feed8_12,
    PE7_12_fifo0_local,
    fifo_PE6_12_res_config_out,
    fifo_PE7_12_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op7_transfer_wrapper 12 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed7_12,
    fifo1_feed7_13,
    PE7_12_fifo1_local,
    fifo_PE7_12_op0_config_out,
    fifo_PE7_12_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op7_transfer_wrapper 12 1"<<endl;
#endif
  U1_compute_wrapper(
    PE7_12_fifo0_local,
    PE7_12_fifo1_local,
    PE7_12_fifo2_local,
    fifo_PE7_12_op1_config_out,
    fifo_PE7_12_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 7 12"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE7_12_fifo2_local,
    fifo2_collect6_12,
    fifo2_collect7_12,
    7,
    12,
    fifo_PE7_12_compute_config_out,
    fifo_PE7_12_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed7_13,
    fifo0_feed8_13,
    PE7_13_fifo0_local,
    fifo_PE6_13_res_config_out,
    fifo_PE7_13_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op7_transfer_wrapper 13 0"<<endl;
#endif
  U1_op1_transfer_last_wrapper(
    fifo1_feed7_13,
    PE7_13_fifo1_local,
    fifo_PE7_13_op0_config_out,
    fifo_PE7_13_op1_config_out
  );

  U1_compute_wrapper(
    PE7_13_fifo0_local,
    PE7_13_fifo1_local,
    PE7_13_fifo2_local,
    fifo_PE7_13_op1_config_out,
    fifo_PE7_13_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 7 13"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE7_13_fifo2_local,
    fifo2_collect6_13,
    fifo2_collect7_13,
    7,
    13,
    fifo_PE7_13_compute_config_out,
    fifo_PE7_13_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed8_0,
    fifo0_feed9_0,
    PE8_0_fifo0_local,
    fifo_PE7_0_res_config_out,
    fifo_PE8_0_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op8_transfer_wrapper 0 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed8_0,
    fifo1_feed8_1,
    PE8_0_fifo1_local,
    fifo_PE8_0_op0_config_out,
    fifo_PE8_0_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op8_transfer_wrapper 0 1"<<endl;
#endif
  U1_compute_wrapper(
    PE8_0_fifo0_local,
    PE8_0_fifo1_local,
    PE8_0_fifo2_local,
    fifo_PE8_0_op1_config_out,
    fifo_PE8_0_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 8 0"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE8_0_fifo2_local,
    fifo2_collect7_0,
    fifo2_collect8_0,
    8,
    0,
    fifo_PE8_0_compute_config_out,
    fifo_PE8_0_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed8_1,
    fifo0_feed9_1,
    PE8_1_fifo0_local,
    fifo_PE7_1_res_config_out,
    fifo_PE8_1_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op8_transfer_wrapper 1 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed8_1,
    fifo1_feed8_2,
    PE8_1_fifo1_local,
    fifo_PE8_1_op0_config_out,
    fifo_PE8_1_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op8_transfer_wrapper 1 1"<<endl;
#endif
  U1_compute_wrapper(
    PE8_1_fifo0_local,
    PE8_1_fifo1_local,
    PE8_1_fifo2_local,
    fifo_PE8_1_op1_config_out,
    fifo_PE8_1_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 8 1"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE8_1_fifo2_local,
    fifo2_collect7_1,
    fifo2_collect8_1,
    8,
    1,
    fifo_PE8_1_compute_config_out,
    fifo_PE8_1_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed8_2,
    fifo0_feed9_2,
    PE8_2_fifo0_local,
    fifo_PE7_2_res_config_out,
    fifo_PE8_2_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op8_transfer_wrapper 2 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed8_2,
    fifo1_feed8_3,
    PE8_2_fifo1_local,
    fifo_PE8_2_op0_config_out,
    fifo_PE8_2_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op8_transfer_wrapper 2 1"<<endl;
#endif
  U1_compute_wrapper(
    PE8_2_fifo0_local,
    PE8_2_fifo1_local,
    PE8_2_fifo2_local,
    fifo_PE8_2_op1_config_out,
    fifo_PE8_2_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 8 2"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE8_2_fifo2_local,
    fifo2_collect7_2,
    fifo2_collect8_2,
    8,
    2,
    fifo_PE8_2_compute_config_out,
    fifo_PE8_2_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed8_3,
    fifo0_feed9_3,
    PE8_3_fifo0_local,
    fifo_PE7_3_res_config_out,
    fifo_PE8_3_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op8_transfer_wrapper 3 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed8_3,
    fifo1_feed8_4,
    PE8_3_fifo1_local,
    fifo_PE8_3_op0_config_out,
    fifo_PE8_3_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op8_transfer_wrapper 3 1"<<endl;
#endif
  U1_compute_wrapper(
    PE8_3_fifo0_local,
    PE8_3_fifo1_local,
    PE8_3_fifo2_local,
    fifo_PE8_3_op1_config_out,
    fifo_PE8_3_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 8 3"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE8_3_fifo2_local,
    fifo2_collect7_3,
    fifo2_collect8_3,
    8,
    3,
    fifo_PE8_3_compute_config_out,
    fifo_PE8_3_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed8_4,
    fifo0_feed9_4,
    PE8_4_fifo0_local,
    fifo_PE7_4_res_config_out,
    fifo_PE8_4_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op8_transfer_wrapper 4 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed8_4,
    fifo1_feed8_5,
    PE8_4_fifo1_local,
    fifo_PE8_4_op0_config_out,
    fifo_PE8_4_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op8_transfer_wrapper 4 1"<<endl;
#endif
  U1_compute_wrapper(
    PE8_4_fifo0_local,
    PE8_4_fifo1_local,
    PE8_4_fifo2_local,
    fifo_PE8_4_op1_config_out,
    fifo_PE8_4_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 8 4"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE8_4_fifo2_local,
    fifo2_collect7_4,
    fifo2_collect8_4,
    8,
    4,
    fifo_PE8_4_compute_config_out,
    fifo_PE8_4_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed8_5,
    fifo0_feed9_5,
    PE8_5_fifo0_local,
    fifo_PE7_5_res_config_out,
    fifo_PE8_5_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op8_transfer_wrapper 5 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed8_5,
    fifo1_feed8_6,
    PE8_5_fifo1_local,
    fifo_PE8_5_op0_config_out,
    fifo_PE8_5_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op8_transfer_wrapper 5 1"<<endl;
#endif
  U1_compute_wrapper(
    PE8_5_fifo0_local,
    PE8_5_fifo1_local,
    PE8_5_fifo2_local,
    fifo_PE8_5_op1_config_out,
    fifo_PE8_5_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 8 5"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE8_5_fifo2_local,
    fifo2_collect7_5,
    fifo2_collect8_5,
    8,
    5,
    fifo_PE8_5_compute_config_out,
    fifo_PE8_5_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed8_6,
    fifo0_feed9_6,
    PE8_6_fifo0_local,
    fifo_PE7_6_res_config_out,
    fifo_PE8_6_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op8_transfer_wrapper 6 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed8_6,
    fifo1_feed8_7,
    PE8_6_fifo1_local,
    fifo_PE8_6_op0_config_out,
    fifo_PE8_6_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op8_transfer_wrapper 6 1"<<endl;
#endif
  U1_compute_wrapper(
    PE8_6_fifo0_local,
    PE8_6_fifo1_local,
    PE8_6_fifo2_local,
    fifo_PE8_6_op1_config_out,
    fifo_PE8_6_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 8 6"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE8_6_fifo2_local,
    fifo2_collect7_6,
    fifo2_collect8_6,
    8,
    6,
    fifo_PE8_6_compute_config_out,
    fifo_PE8_6_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed8_7,
    fifo0_feed9_7,
    PE8_7_fifo0_local,
    fifo_PE7_7_res_config_out,
    fifo_PE8_7_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op8_transfer_wrapper 7 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed8_7,
    fifo1_feed8_8,
    PE8_7_fifo1_local,
    fifo_PE8_7_op0_config_out,
    fifo_PE8_7_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op8_transfer_wrapper 7 1"<<endl;
#endif
  U1_compute_wrapper(
    PE8_7_fifo0_local,
    PE8_7_fifo1_local,
    PE8_7_fifo2_local,
    fifo_PE8_7_op1_config_out,
    fifo_PE8_7_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 8 7"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE8_7_fifo2_local,
    fifo2_collect7_7,
    fifo2_collect8_7,
    8,
    7,
    fifo_PE8_7_compute_config_out,
    fifo_PE8_7_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed8_8,
    fifo0_feed9_8,
    PE8_8_fifo0_local,
    fifo_PE7_8_res_config_out,
    fifo_PE8_8_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op8_transfer_wrapper 8 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed8_8,
    fifo1_feed8_9,
    PE8_8_fifo1_local,
    fifo_PE8_8_op0_config_out,
    fifo_PE8_8_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op8_transfer_wrapper 8 1"<<endl;
#endif
  U1_compute_wrapper(
    PE8_8_fifo0_local,
    PE8_8_fifo1_local,
    PE8_8_fifo2_local,
    fifo_PE8_8_op1_config_out,
    fifo_PE8_8_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 8 8"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE8_8_fifo2_local,
    fifo2_collect7_8,
    fifo2_collect8_8,
    8,
    8,
    fifo_PE8_8_compute_config_out,
    fifo_PE8_8_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed8_9,
    fifo0_feed9_9,
    PE8_9_fifo0_local,
    fifo_PE7_9_res_config_out,
    fifo_PE8_9_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op8_transfer_wrapper 9 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed8_9,
    fifo1_feed8_10,
    PE8_9_fifo1_local,
    fifo_PE8_9_op0_config_out,
    fifo_PE8_9_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op8_transfer_wrapper 9 1"<<endl;
#endif
  U1_compute_wrapper(
    PE8_9_fifo0_local,
    PE8_9_fifo1_local,
    PE8_9_fifo2_local,
    fifo_PE8_9_op1_config_out,
    fifo_PE8_9_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 8 9"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE8_9_fifo2_local,
    fifo2_collect7_9,
    fifo2_collect8_9,
    8,
    9,
    fifo_PE8_9_compute_config_out,
    fifo_PE8_9_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed8_10,
    fifo0_feed9_10,
    PE8_10_fifo0_local,
    fifo_PE7_10_res_config_out,
    fifo_PE8_10_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op8_transfer_wrapper 10 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed8_10,
    fifo1_feed8_11,
    PE8_10_fifo1_local,
    fifo_PE8_10_op0_config_out,
    fifo_PE8_10_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op8_transfer_wrapper 10 1"<<endl;
#endif
  U1_compute_wrapper(
    PE8_10_fifo0_local,
    PE8_10_fifo1_local,
    PE8_10_fifo2_local,
    fifo_PE8_10_op1_config_out,
    fifo_PE8_10_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 8 10"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE8_10_fifo2_local,
    fifo2_collect7_10,
    fifo2_collect8_10,
    8,
    10,
    fifo_PE8_10_compute_config_out,
    fifo_PE8_10_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed8_11,
    fifo0_feed9_11,
    PE8_11_fifo0_local,
    fifo_PE7_11_res_config_out,
    fifo_PE8_11_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op8_transfer_wrapper 11 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed8_11,
    fifo1_feed8_12,
    PE8_11_fifo1_local,
    fifo_PE8_11_op0_config_out,
    fifo_PE8_11_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op8_transfer_wrapper 11 1"<<endl;
#endif
  U1_compute_wrapper(
    PE8_11_fifo0_local,
    PE8_11_fifo1_local,
    PE8_11_fifo2_local,
    fifo_PE8_11_op1_config_out,
    fifo_PE8_11_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 8 11"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE8_11_fifo2_local,
    fifo2_collect7_11,
    fifo2_collect8_11,
    8,
    11,
    fifo_PE8_11_compute_config_out,
    fifo_PE8_11_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed8_12,
    fifo0_feed9_12,
    PE8_12_fifo0_local,
    fifo_PE7_12_res_config_out,
    fifo_PE8_12_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op8_transfer_wrapper 12 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed8_12,
    fifo1_feed8_13,
    PE8_12_fifo1_local,
    fifo_PE8_12_op0_config_out,
    fifo_PE8_12_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op8_transfer_wrapper 12 1"<<endl;
#endif
  U1_compute_wrapper(
    PE8_12_fifo0_local,
    PE8_12_fifo1_local,
    PE8_12_fifo2_local,
    fifo_PE8_12_op1_config_out,
    fifo_PE8_12_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 8 12"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE8_12_fifo2_local,
    fifo2_collect7_12,
    fifo2_collect8_12,
    8,
    12,
    fifo_PE8_12_compute_config_out,
    fifo_PE8_12_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed8_13,
    fifo0_feed9_13,
    PE8_13_fifo0_local,
    fifo_PE7_13_res_config_out,
    fifo_PE8_13_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op8_transfer_wrapper 13 0"<<endl;
#endif
  U1_op1_transfer_last_wrapper(
    fifo1_feed8_13,
    PE8_13_fifo1_local,
    fifo_PE8_13_op0_config_out,
    fifo_PE8_13_op1_config_out
  );

  U1_compute_wrapper(
    PE8_13_fifo0_local,
    PE8_13_fifo1_local,
    PE8_13_fifo2_local,
    fifo_PE8_13_op1_config_out,
    fifo_PE8_13_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 8 13"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE8_13_fifo2_local,
    fifo2_collect7_13,
    fifo2_collect8_13,
    8,
    13,
    fifo_PE8_13_compute_config_out,
    fifo_PE8_13_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed9_0,
    fifo0_feed10_0,
    PE9_0_fifo0_local,
    fifo_PE8_0_res_config_out,
    fifo_PE9_0_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op9_transfer_wrapper 0 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed9_0,
    fifo1_feed9_1,
    PE9_0_fifo1_local,
    fifo_PE9_0_op0_config_out,
    fifo_PE9_0_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op9_transfer_wrapper 0 1"<<endl;
#endif
  U1_compute_wrapper(
    PE9_0_fifo0_local,
    PE9_0_fifo1_local,
    PE9_0_fifo2_local,
    fifo_PE9_0_op1_config_out,
    fifo_PE9_0_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 9 0"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE9_0_fifo2_local,
    fifo2_collect8_0,
    fifo2_collect9_0,
    9,
    0,
    fifo_PE9_0_compute_config_out,
    fifo_PE9_0_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed9_1,
    fifo0_feed10_1,
    PE9_1_fifo0_local,
    fifo_PE8_1_res_config_out,
    fifo_PE9_1_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op9_transfer_wrapper 1 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed9_1,
    fifo1_feed9_2,
    PE9_1_fifo1_local,
    fifo_PE9_1_op0_config_out,
    fifo_PE9_1_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op9_transfer_wrapper 1 1"<<endl;
#endif
  U1_compute_wrapper(
    PE9_1_fifo0_local,
    PE9_1_fifo1_local,
    PE9_1_fifo2_local,
    fifo_PE9_1_op1_config_out,
    fifo_PE9_1_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 9 1"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE9_1_fifo2_local,
    fifo2_collect8_1,
    fifo2_collect9_1,
    9,
    1,
    fifo_PE9_1_compute_config_out,
    fifo_PE9_1_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed9_2,
    fifo0_feed10_2,
    PE9_2_fifo0_local,
    fifo_PE8_2_res_config_out,
    fifo_PE9_2_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op9_transfer_wrapper 2 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed9_2,
    fifo1_feed9_3,
    PE9_2_fifo1_local,
    fifo_PE9_2_op0_config_out,
    fifo_PE9_2_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op9_transfer_wrapper 2 1"<<endl;
#endif
  U1_compute_wrapper(
    PE9_2_fifo0_local,
    PE9_2_fifo1_local,
    PE9_2_fifo2_local,
    fifo_PE9_2_op1_config_out,
    fifo_PE9_2_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 9 2"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE9_2_fifo2_local,
    fifo2_collect8_2,
    fifo2_collect9_2,
    9,
    2,
    fifo_PE9_2_compute_config_out,
    fifo_PE9_2_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed9_3,
    fifo0_feed10_3,
    PE9_3_fifo0_local,
    fifo_PE8_3_res_config_out,
    fifo_PE9_3_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op9_transfer_wrapper 3 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed9_3,
    fifo1_feed9_4,
    PE9_3_fifo1_local,
    fifo_PE9_3_op0_config_out,
    fifo_PE9_3_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op9_transfer_wrapper 3 1"<<endl;
#endif
  U1_compute_wrapper(
    PE9_3_fifo0_local,
    PE9_3_fifo1_local,
    PE9_3_fifo2_local,
    fifo_PE9_3_op1_config_out,
    fifo_PE9_3_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 9 3"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE9_3_fifo2_local,
    fifo2_collect8_3,
    fifo2_collect9_3,
    9,
    3,
    fifo_PE9_3_compute_config_out,
    fifo_PE9_3_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed9_4,
    fifo0_feed10_4,
    PE9_4_fifo0_local,
    fifo_PE8_4_res_config_out,
    fifo_PE9_4_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op9_transfer_wrapper 4 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed9_4,
    fifo1_feed9_5,
    PE9_4_fifo1_local,
    fifo_PE9_4_op0_config_out,
    fifo_PE9_4_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op9_transfer_wrapper 4 1"<<endl;
#endif
  U1_compute_wrapper(
    PE9_4_fifo0_local,
    PE9_4_fifo1_local,
    PE9_4_fifo2_local,
    fifo_PE9_4_op1_config_out,
    fifo_PE9_4_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 9 4"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE9_4_fifo2_local,
    fifo2_collect8_4,
    fifo2_collect9_4,
    9,
    4,
    fifo_PE9_4_compute_config_out,
    fifo_PE9_4_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed9_5,
    fifo0_feed10_5,
    PE9_5_fifo0_local,
    fifo_PE8_5_res_config_out,
    fifo_PE9_5_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op9_transfer_wrapper 5 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed9_5,
    fifo1_feed9_6,
    PE9_5_fifo1_local,
    fifo_PE9_5_op0_config_out,
    fifo_PE9_5_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op9_transfer_wrapper 5 1"<<endl;
#endif
  U1_compute_wrapper(
    PE9_5_fifo0_local,
    PE9_5_fifo1_local,
    PE9_5_fifo2_local,
    fifo_PE9_5_op1_config_out,
    fifo_PE9_5_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 9 5"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE9_5_fifo2_local,
    fifo2_collect8_5,
    fifo2_collect9_5,
    9,
    5,
    fifo_PE9_5_compute_config_out,
    fifo_PE9_5_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed9_6,
    fifo0_feed10_6,
    PE9_6_fifo0_local,
    fifo_PE8_6_res_config_out,
    fifo_PE9_6_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op9_transfer_wrapper 6 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed9_6,
    fifo1_feed9_7,
    PE9_6_fifo1_local,
    fifo_PE9_6_op0_config_out,
    fifo_PE9_6_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op9_transfer_wrapper 6 1"<<endl;
#endif
  U1_compute_wrapper(
    PE9_6_fifo0_local,
    PE9_6_fifo1_local,
    PE9_6_fifo2_local,
    fifo_PE9_6_op1_config_out,
    fifo_PE9_6_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 9 6"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE9_6_fifo2_local,
    fifo2_collect8_6,
    fifo2_collect9_6,
    9,
    6,
    fifo_PE9_6_compute_config_out,
    fifo_PE9_6_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed9_7,
    fifo0_feed10_7,
    PE9_7_fifo0_local,
    fifo_PE8_7_res_config_out,
    fifo_PE9_7_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op9_transfer_wrapper 7 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed9_7,
    fifo1_feed9_8,
    PE9_7_fifo1_local,
    fifo_PE9_7_op0_config_out,
    fifo_PE9_7_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op9_transfer_wrapper 7 1"<<endl;
#endif
  U1_compute_wrapper(
    PE9_7_fifo0_local,
    PE9_7_fifo1_local,
    PE9_7_fifo2_local,
    fifo_PE9_7_op1_config_out,
    fifo_PE9_7_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 9 7"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE9_7_fifo2_local,
    fifo2_collect8_7,
    fifo2_collect9_7,
    9,
    7,
    fifo_PE9_7_compute_config_out,
    fifo_PE9_7_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed9_8,
    fifo0_feed10_8,
    PE9_8_fifo0_local,
    fifo_PE8_8_res_config_out,
    fifo_PE9_8_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op9_transfer_wrapper 8 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed9_8,
    fifo1_feed9_9,
    PE9_8_fifo1_local,
    fifo_PE9_8_op0_config_out,
    fifo_PE9_8_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op9_transfer_wrapper 8 1"<<endl;
#endif
  U1_compute_wrapper(
    PE9_8_fifo0_local,
    PE9_8_fifo1_local,
    PE9_8_fifo2_local,
    fifo_PE9_8_op1_config_out,
    fifo_PE9_8_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 9 8"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE9_8_fifo2_local,
    fifo2_collect8_8,
    fifo2_collect9_8,
    9,
    8,
    fifo_PE9_8_compute_config_out,
    fifo_PE9_8_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed9_9,
    fifo0_feed10_9,
    PE9_9_fifo0_local,
    fifo_PE8_9_res_config_out,
    fifo_PE9_9_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op9_transfer_wrapper 9 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed9_9,
    fifo1_feed9_10,
    PE9_9_fifo1_local,
    fifo_PE9_9_op0_config_out,
    fifo_PE9_9_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op9_transfer_wrapper 9 1"<<endl;
#endif
  U1_compute_wrapper(
    PE9_9_fifo0_local,
    PE9_9_fifo1_local,
    PE9_9_fifo2_local,
    fifo_PE9_9_op1_config_out,
    fifo_PE9_9_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 9 9"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE9_9_fifo2_local,
    fifo2_collect8_9,
    fifo2_collect9_9,
    9,
    9,
    fifo_PE9_9_compute_config_out,
    fifo_PE9_9_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed9_10,
    fifo0_feed10_10,
    PE9_10_fifo0_local,
    fifo_PE8_10_res_config_out,
    fifo_PE9_10_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op9_transfer_wrapper 10 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed9_10,
    fifo1_feed9_11,
    PE9_10_fifo1_local,
    fifo_PE9_10_op0_config_out,
    fifo_PE9_10_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op9_transfer_wrapper 10 1"<<endl;
#endif
  U1_compute_wrapper(
    PE9_10_fifo0_local,
    PE9_10_fifo1_local,
    PE9_10_fifo2_local,
    fifo_PE9_10_op1_config_out,
    fifo_PE9_10_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 9 10"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE9_10_fifo2_local,
    fifo2_collect8_10,
    fifo2_collect9_10,
    9,
    10,
    fifo_PE9_10_compute_config_out,
    fifo_PE9_10_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed9_11,
    fifo0_feed10_11,
    PE9_11_fifo0_local,
    fifo_PE8_11_res_config_out,
    fifo_PE9_11_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op9_transfer_wrapper 11 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed9_11,
    fifo1_feed9_12,
    PE9_11_fifo1_local,
    fifo_PE9_11_op0_config_out,
    fifo_PE9_11_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op9_transfer_wrapper 11 1"<<endl;
#endif
  U1_compute_wrapper(
    PE9_11_fifo0_local,
    PE9_11_fifo1_local,
    PE9_11_fifo2_local,
    fifo_PE9_11_op1_config_out,
    fifo_PE9_11_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 9 11"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE9_11_fifo2_local,
    fifo2_collect8_11,
    fifo2_collect9_11,
    9,
    11,
    fifo_PE9_11_compute_config_out,
    fifo_PE9_11_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed9_12,
    fifo0_feed10_12,
    PE9_12_fifo0_local,
    fifo_PE8_12_res_config_out,
    fifo_PE9_12_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op9_transfer_wrapper 12 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed9_12,
    fifo1_feed9_13,
    PE9_12_fifo1_local,
    fifo_PE9_12_op0_config_out,
    fifo_PE9_12_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op9_transfer_wrapper 12 1"<<endl;
#endif
  U1_compute_wrapper(
    PE9_12_fifo0_local,
    PE9_12_fifo1_local,
    PE9_12_fifo2_local,
    fifo_PE9_12_op1_config_out,
    fifo_PE9_12_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 9 12"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE9_12_fifo2_local,
    fifo2_collect8_12,
    fifo2_collect9_12,
    9,
    12,
    fifo_PE9_12_compute_config_out,
    fifo_PE9_12_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed9_13,
    fifo0_feed10_13,
    PE9_13_fifo0_local,
    fifo_PE8_13_res_config_out,
    fifo_PE9_13_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op9_transfer_wrapper 13 0"<<endl;
#endif
  U1_op1_transfer_last_wrapper(
    fifo1_feed9_13,
    PE9_13_fifo1_local,
    fifo_PE9_13_op0_config_out,
    fifo_PE9_13_op1_config_out
  );

  U1_compute_wrapper(
    PE9_13_fifo0_local,
    PE9_13_fifo1_local,
    PE9_13_fifo2_local,
    fifo_PE9_13_op1_config_out,
    fifo_PE9_13_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 9 13"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE9_13_fifo2_local,
    fifo2_collect8_13,
    fifo2_collect9_13,
    9,
    13,
    fifo_PE9_13_compute_config_out,
    fifo_PE9_13_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed10_0,
    fifo0_feed11_0,
    PE10_0_fifo0_local,
    fifo_PE9_0_res_config_out,
    fifo_PE10_0_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op10_transfer_wrapper 0 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed10_0,
    fifo1_feed10_1,
    PE10_0_fifo1_local,
    fifo_PE10_0_op0_config_out,
    fifo_PE10_0_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op10_transfer_wrapper 0 1"<<endl;
#endif
  U1_compute_wrapper(
    PE10_0_fifo0_local,
    PE10_0_fifo1_local,
    PE10_0_fifo2_local,
    fifo_PE10_0_op1_config_out,
    fifo_PE10_0_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 10 0"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE10_0_fifo2_local,
    fifo2_collect9_0,
    fifo2_collect10_0,
    10,
    0,
    fifo_PE10_0_compute_config_out,
    fifo_PE10_0_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed10_1,
    fifo0_feed11_1,
    PE10_1_fifo0_local,
    fifo_PE9_1_res_config_out,
    fifo_PE10_1_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op10_transfer_wrapper 1 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed10_1,
    fifo1_feed10_2,
    PE10_1_fifo1_local,
    fifo_PE10_1_op0_config_out,
    fifo_PE10_1_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op10_transfer_wrapper 1 1"<<endl;
#endif
  U1_compute_wrapper(
    PE10_1_fifo0_local,
    PE10_1_fifo1_local,
    PE10_1_fifo2_local,
    fifo_PE10_1_op1_config_out,
    fifo_PE10_1_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 10 1"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE10_1_fifo2_local,
    fifo2_collect9_1,
    fifo2_collect10_1,
    10,
    1,
    fifo_PE10_1_compute_config_out,
    fifo_PE10_1_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed10_2,
    fifo0_feed11_2,
    PE10_2_fifo0_local,
    fifo_PE9_2_res_config_out,
    fifo_PE10_2_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op10_transfer_wrapper 2 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed10_2,
    fifo1_feed10_3,
    PE10_2_fifo1_local,
    fifo_PE10_2_op0_config_out,
    fifo_PE10_2_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op10_transfer_wrapper 2 1"<<endl;
#endif
  U1_compute_wrapper(
    PE10_2_fifo0_local,
    PE10_2_fifo1_local,
    PE10_2_fifo2_local,
    fifo_PE10_2_op1_config_out,
    fifo_PE10_2_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 10 2"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE10_2_fifo2_local,
    fifo2_collect9_2,
    fifo2_collect10_2,
    10,
    2,
    fifo_PE10_2_compute_config_out,
    fifo_PE10_2_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed10_3,
    fifo0_feed11_3,
    PE10_3_fifo0_local,
    fifo_PE9_3_res_config_out,
    fifo_PE10_3_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op10_transfer_wrapper 3 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed10_3,
    fifo1_feed10_4,
    PE10_3_fifo1_local,
    fifo_PE10_3_op0_config_out,
    fifo_PE10_3_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op10_transfer_wrapper 3 1"<<endl;
#endif
  U1_compute_wrapper(
    PE10_3_fifo0_local,
    PE10_3_fifo1_local,
    PE10_3_fifo2_local,
    fifo_PE10_3_op1_config_out,
    fifo_PE10_3_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 10 3"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE10_3_fifo2_local,
    fifo2_collect9_3,
    fifo2_collect10_3,
    10,
    3,
    fifo_PE10_3_compute_config_out,
    fifo_PE10_3_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed10_4,
    fifo0_feed11_4,
    PE10_4_fifo0_local,
    fifo_PE9_4_res_config_out,
    fifo_PE10_4_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op10_transfer_wrapper 4 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed10_4,
    fifo1_feed10_5,
    PE10_4_fifo1_local,
    fifo_PE10_4_op0_config_out,
    fifo_PE10_4_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op10_transfer_wrapper 4 1"<<endl;
#endif
  U1_compute_wrapper(
    PE10_4_fifo0_local,
    PE10_4_fifo1_local,
    PE10_4_fifo2_local,
    fifo_PE10_4_op1_config_out,
    fifo_PE10_4_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 10 4"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE10_4_fifo2_local,
    fifo2_collect9_4,
    fifo2_collect10_4,
    10,
    4,
    fifo_PE10_4_compute_config_out,
    fifo_PE10_4_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed10_5,
    fifo0_feed11_5,
    PE10_5_fifo0_local,
    fifo_PE9_5_res_config_out,
    fifo_PE10_5_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op10_transfer_wrapper 5 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed10_5,
    fifo1_feed10_6,
    PE10_5_fifo1_local,
    fifo_PE10_5_op0_config_out,
    fifo_PE10_5_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op10_transfer_wrapper 5 1"<<endl;
#endif
  U1_compute_wrapper(
    PE10_5_fifo0_local,
    PE10_5_fifo1_local,
    PE10_5_fifo2_local,
    fifo_PE10_5_op1_config_out,
    fifo_PE10_5_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 10 5"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE10_5_fifo2_local,
    fifo2_collect9_5,
    fifo2_collect10_5,
    10,
    5,
    fifo_PE10_5_compute_config_out,
    fifo_PE10_5_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed10_6,
    fifo0_feed11_6,
    PE10_6_fifo0_local,
    fifo_PE9_6_res_config_out,
    fifo_PE10_6_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op10_transfer_wrapper 6 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed10_6,
    fifo1_feed10_7,
    PE10_6_fifo1_local,
    fifo_PE10_6_op0_config_out,
    fifo_PE10_6_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op10_transfer_wrapper 6 1"<<endl;
#endif
  U1_compute_wrapper(
    PE10_6_fifo0_local,
    PE10_6_fifo1_local,
    PE10_6_fifo2_local,
    fifo_PE10_6_op1_config_out,
    fifo_PE10_6_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 10 6"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE10_6_fifo2_local,
    fifo2_collect9_6,
    fifo2_collect10_6,
    10,
    6,
    fifo_PE10_6_compute_config_out,
    fifo_PE10_6_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed10_7,
    fifo0_feed11_7,
    PE10_7_fifo0_local,
    fifo_PE9_7_res_config_out,
    fifo_PE10_7_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op10_transfer_wrapper 7 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed10_7,
    fifo1_feed10_8,
    PE10_7_fifo1_local,
    fifo_PE10_7_op0_config_out,
    fifo_PE10_7_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op10_transfer_wrapper 7 1"<<endl;
#endif
  U1_compute_wrapper(
    PE10_7_fifo0_local,
    PE10_7_fifo1_local,
    PE10_7_fifo2_local,
    fifo_PE10_7_op1_config_out,
    fifo_PE10_7_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 10 7"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE10_7_fifo2_local,
    fifo2_collect9_7,
    fifo2_collect10_7,
    10,
    7,
    fifo_PE10_7_compute_config_out,
    fifo_PE10_7_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed10_8,
    fifo0_feed11_8,
    PE10_8_fifo0_local,
    fifo_PE9_8_res_config_out,
    fifo_PE10_8_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op10_transfer_wrapper 8 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed10_8,
    fifo1_feed10_9,
    PE10_8_fifo1_local,
    fifo_PE10_8_op0_config_out,
    fifo_PE10_8_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op10_transfer_wrapper 8 1"<<endl;
#endif
  U1_compute_wrapper(
    PE10_8_fifo0_local,
    PE10_8_fifo1_local,
    PE10_8_fifo2_local,
    fifo_PE10_8_op1_config_out,
    fifo_PE10_8_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 10 8"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE10_8_fifo2_local,
    fifo2_collect9_8,
    fifo2_collect10_8,
    10,
    8,
    fifo_PE10_8_compute_config_out,
    fifo_PE10_8_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed10_9,
    fifo0_feed11_9,
    PE10_9_fifo0_local,
    fifo_PE9_9_res_config_out,
    fifo_PE10_9_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op10_transfer_wrapper 9 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed10_9,
    fifo1_feed10_10,
    PE10_9_fifo1_local,
    fifo_PE10_9_op0_config_out,
    fifo_PE10_9_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op10_transfer_wrapper 9 1"<<endl;
#endif
  U1_compute_wrapper(
    PE10_9_fifo0_local,
    PE10_9_fifo1_local,
    PE10_9_fifo2_local,
    fifo_PE10_9_op1_config_out,
    fifo_PE10_9_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 10 9"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE10_9_fifo2_local,
    fifo2_collect9_9,
    fifo2_collect10_9,
    10,
    9,
    fifo_PE10_9_compute_config_out,
    fifo_PE10_9_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed10_10,
    fifo0_feed11_10,
    PE10_10_fifo0_local,
    fifo_PE9_10_res_config_out,
    fifo_PE10_10_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op10_transfer_wrapper 10 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed10_10,
    fifo1_feed10_11,
    PE10_10_fifo1_local,
    fifo_PE10_10_op0_config_out,
    fifo_PE10_10_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op10_transfer_wrapper 10 1"<<endl;
#endif
  U1_compute_wrapper(
    PE10_10_fifo0_local,
    PE10_10_fifo1_local,
    PE10_10_fifo2_local,
    fifo_PE10_10_op1_config_out,
    fifo_PE10_10_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 10 10"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE10_10_fifo2_local,
    fifo2_collect9_10,
    fifo2_collect10_10,
    10,
    10,
    fifo_PE10_10_compute_config_out,
    fifo_PE10_10_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed10_11,
    fifo0_feed11_11,
    PE10_11_fifo0_local,
    fifo_PE9_11_res_config_out,
    fifo_PE10_11_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op10_transfer_wrapper 11 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed10_11,
    fifo1_feed10_12,
    PE10_11_fifo1_local,
    fifo_PE10_11_op0_config_out,
    fifo_PE10_11_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op10_transfer_wrapper 11 1"<<endl;
#endif
  U1_compute_wrapper(
    PE10_11_fifo0_local,
    PE10_11_fifo1_local,
    PE10_11_fifo2_local,
    fifo_PE10_11_op1_config_out,
    fifo_PE10_11_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 10 11"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE10_11_fifo2_local,
    fifo2_collect9_11,
    fifo2_collect10_11,
    10,
    11,
    fifo_PE10_11_compute_config_out,
    fifo_PE10_11_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed10_12,
    fifo0_feed11_12,
    PE10_12_fifo0_local,
    fifo_PE9_12_res_config_out,
    fifo_PE10_12_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op10_transfer_wrapper 12 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed10_12,
    fifo1_feed10_13,
    PE10_12_fifo1_local,
    fifo_PE10_12_op0_config_out,
    fifo_PE10_12_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op10_transfer_wrapper 12 1"<<endl;
#endif
  U1_compute_wrapper(
    PE10_12_fifo0_local,
    PE10_12_fifo1_local,
    PE10_12_fifo2_local,
    fifo_PE10_12_op1_config_out,
    fifo_PE10_12_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 10 12"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE10_12_fifo2_local,
    fifo2_collect9_12,
    fifo2_collect10_12,
    10,
    12,
    fifo_PE10_12_compute_config_out,
    fifo_PE10_12_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed10_13,
    fifo0_feed11_13,
    PE10_13_fifo0_local,
    fifo_PE9_13_res_config_out,
    fifo_PE10_13_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op10_transfer_wrapper 13 0"<<endl;
#endif
  U1_op1_transfer_last_wrapper(
    fifo1_feed10_13,
    PE10_13_fifo1_local,
    fifo_PE10_13_op0_config_out,
    fifo_PE10_13_op1_config_out
  );

  U1_compute_wrapper(
    PE10_13_fifo0_local,
    PE10_13_fifo1_local,
    PE10_13_fifo2_local,
    fifo_PE10_13_op1_config_out,
    fifo_PE10_13_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 10 13"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE10_13_fifo2_local,
    fifo2_collect9_13,
    fifo2_collect10_13,
    10,
    13,
    fifo_PE10_13_compute_config_out,
    fifo_PE10_13_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed11_0,
    fifo0_feed12_0,
    PE11_0_fifo0_local,
    fifo_PE10_0_res_config_out,
    fifo_PE11_0_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op11_transfer_wrapper 0 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed11_0,
    fifo1_feed11_1,
    PE11_0_fifo1_local,
    fifo_PE11_0_op0_config_out,
    fifo_PE11_0_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op11_transfer_wrapper 0 1"<<endl;
#endif
  U1_compute_wrapper(
    PE11_0_fifo0_local,
    PE11_0_fifo1_local,
    PE11_0_fifo2_local,
    fifo_PE11_0_op1_config_out,
    fifo_PE11_0_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 11 0"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE11_0_fifo2_local,
    fifo2_collect10_0,
    fifo2_collect11_0,
    11,
    0,
    fifo_PE11_0_compute_config_out,
    fifo_PE11_0_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed11_1,
    fifo0_feed12_1,
    PE11_1_fifo0_local,
    fifo_PE10_1_res_config_out,
    fifo_PE11_1_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op11_transfer_wrapper 1 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed11_1,
    fifo1_feed11_2,
    PE11_1_fifo1_local,
    fifo_PE11_1_op0_config_out,
    fifo_PE11_1_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op11_transfer_wrapper 1 1"<<endl;
#endif
  U1_compute_wrapper(
    PE11_1_fifo0_local,
    PE11_1_fifo1_local,
    PE11_1_fifo2_local,
    fifo_PE11_1_op1_config_out,
    fifo_PE11_1_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 11 1"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE11_1_fifo2_local,
    fifo2_collect10_1,
    fifo2_collect11_1,
    11,
    1,
    fifo_PE11_1_compute_config_out,
    fifo_PE11_1_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed11_2,
    fifo0_feed12_2,
    PE11_2_fifo0_local,
    fifo_PE10_2_res_config_out,
    fifo_PE11_2_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op11_transfer_wrapper 2 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed11_2,
    fifo1_feed11_3,
    PE11_2_fifo1_local,
    fifo_PE11_2_op0_config_out,
    fifo_PE11_2_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op11_transfer_wrapper 2 1"<<endl;
#endif
  U1_compute_wrapper(
    PE11_2_fifo0_local,
    PE11_2_fifo1_local,
    PE11_2_fifo2_local,
    fifo_PE11_2_op1_config_out,
    fifo_PE11_2_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 11 2"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE11_2_fifo2_local,
    fifo2_collect10_2,
    fifo2_collect11_2,
    11,
    2,
    fifo_PE11_2_compute_config_out,
    fifo_PE11_2_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed11_3,
    fifo0_feed12_3,
    PE11_3_fifo0_local,
    fifo_PE10_3_res_config_out,
    fifo_PE11_3_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op11_transfer_wrapper 3 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed11_3,
    fifo1_feed11_4,
    PE11_3_fifo1_local,
    fifo_PE11_3_op0_config_out,
    fifo_PE11_3_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op11_transfer_wrapper 3 1"<<endl;
#endif
  U1_compute_wrapper(
    PE11_3_fifo0_local,
    PE11_3_fifo1_local,
    PE11_3_fifo2_local,
    fifo_PE11_3_op1_config_out,
    fifo_PE11_3_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 11 3"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE11_3_fifo2_local,
    fifo2_collect10_3,
    fifo2_collect11_3,
    11,
    3,
    fifo_PE11_3_compute_config_out,
    fifo_PE11_3_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed11_4,
    fifo0_feed12_4,
    PE11_4_fifo0_local,
    fifo_PE10_4_res_config_out,
    fifo_PE11_4_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op11_transfer_wrapper 4 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed11_4,
    fifo1_feed11_5,
    PE11_4_fifo1_local,
    fifo_PE11_4_op0_config_out,
    fifo_PE11_4_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op11_transfer_wrapper 4 1"<<endl;
#endif
  U1_compute_wrapper(
    PE11_4_fifo0_local,
    PE11_4_fifo1_local,
    PE11_4_fifo2_local,
    fifo_PE11_4_op1_config_out,
    fifo_PE11_4_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 11 4"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE11_4_fifo2_local,
    fifo2_collect10_4,
    fifo2_collect11_4,
    11,
    4,
    fifo_PE11_4_compute_config_out,
    fifo_PE11_4_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed11_5,
    fifo0_feed12_5,
    PE11_5_fifo0_local,
    fifo_PE10_5_res_config_out,
    fifo_PE11_5_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op11_transfer_wrapper 5 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed11_5,
    fifo1_feed11_6,
    PE11_5_fifo1_local,
    fifo_PE11_5_op0_config_out,
    fifo_PE11_5_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op11_transfer_wrapper 5 1"<<endl;
#endif
  U1_compute_wrapper(
    PE11_5_fifo0_local,
    PE11_5_fifo1_local,
    PE11_5_fifo2_local,
    fifo_PE11_5_op1_config_out,
    fifo_PE11_5_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 11 5"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE11_5_fifo2_local,
    fifo2_collect10_5,
    fifo2_collect11_5,
    11,
    5,
    fifo_PE11_5_compute_config_out,
    fifo_PE11_5_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed11_6,
    fifo0_feed12_6,
    PE11_6_fifo0_local,
    fifo_PE10_6_res_config_out,
    fifo_PE11_6_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op11_transfer_wrapper 6 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed11_6,
    fifo1_feed11_7,
    PE11_6_fifo1_local,
    fifo_PE11_6_op0_config_out,
    fifo_PE11_6_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op11_transfer_wrapper 6 1"<<endl;
#endif
  U1_compute_wrapper(
    PE11_6_fifo0_local,
    PE11_6_fifo1_local,
    PE11_6_fifo2_local,
    fifo_PE11_6_op1_config_out,
    fifo_PE11_6_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 11 6"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE11_6_fifo2_local,
    fifo2_collect10_6,
    fifo2_collect11_6,
    11,
    6,
    fifo_PE11_6_compute_config_out,
    fifo_PE11_6_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed11_7,
    fifo0_feed12_7,
    PE11_7_fifo0_local,
    fifo_PE10_7_res_config_out,
    fifo_PE11_7_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op11_transfer_wrapper 7 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed11_7,
    fifo1_feed11_8,
    PE11_7_fifo1_local,
    fifo_PE11_7_op0_config_out,
    fifo_PE11_7_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op11_transfer_wrapper 7 1"<<endl;
#endif
  U1_compute_wrapper(
    PE11_7_fifo0_local,
    PE11_7_fifo1_local,
    PE11_7_fifo2_local,
    fifo_PE11_7_op1_config_out,
    fifo_PE11_7_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 11 7"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE11_7_fifo2_local,
    fifo2_collect10_7,
    fifo2_collect11_7,
    11,
    7,
    fifo_PE11_7_compute_config_out,
    fifo_PE11_7_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed11_8,
    fifo0_feed12_8,
    PE11_8_fifo0_local,
    fifo_PE10_8_res_config_out,
    fifo_PE11_8_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op11_transfer_wrapper 8 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed11_8,
    fifo1_feed11_9,
    PE11_8_fifo1_local,
    fifo_PE11_8_op0_config_out,
    fifo_PE11_8_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op11_transfer_wrapper 8 1"<<endl;
#endif
  U1_compute_wrapper(
    PE11_8_fifo0_local,
    PE11_8_fifo1_local,
    PE11_8_fifo2_local,
    fifo_PE11_8_op1_config_out,
    fifo_PE11_8_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 11 8"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE11_8_fifo2_local,
    fifo2_collect10_8,
    fifo2_collect11_8,
    11,
    8,
    fifo_PE11_8_compute_config_out,
    fifo_PE11_8_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed11_9,
    fifo0_feed12_9,
    PE11_9_fifo0_local,
    fifo_PE10_9_res_config_out,
    fifo_PE11_9_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op11_transfer_wrapper 9 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed11_9,
    fifo1_feed11_10,
    PE11_9_fifo1_local,
    fifo_PE11_9_op0_config_out,
    fifo_PE11_9_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op11_transfer_wrapper 9 1"<<endl;
#endif
  U1_compute_wrapper(
    PE11_9_fifo0_local,
    PE11_9_fifo1_local,
    PE11_9_fifo2_local,
    fifo_PE11_9_op1_config_out,
    fifo_PE11_9_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 11 9"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE11_9_fifo2_local,
    fifo2_collect10_9,
    fifo2_collect11_9,
    11,
    9,
    fifo_PE11_9_compute_config_out,
    fifo_PE11_9_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed11_10,
    fifo0_feed12_10,
    PE11_10_fifo0_local,
    fifo_PE10_10_res_config_out,
    fifo_PE11_10_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op11_transfer_wrapper 10 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed11_10,
    fifo1_feed11_11,
    PE11_10_fifo1_local,
    fifo_PE11_10_op0_config_out,
    fifo_PE11_10_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op11_transfer_wrapper 10 1"<<endl;
#endif
  U1_compute_wrapper(
    PE11_10_fifo0_local,
    PE11_10_fifo1_local,
    PE11_10_fifo2_local,
    fifo_PE11_10_op1_config_out,
    fifo_PE11_10_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 11 10"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE11_10_fifo2_local,
    fifo2_collect10_10,
    fifo2_collect11_10,
    11,
    10,
    fifo_PE11_10_compute_config_out,
    fifo_PE11_10_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed11_11,
    fifo0_feed12_11,
    PE11_11_fifo0_local,
    fifo_PE10_11_res_config_out,
    fifo_PE11_11_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op11_transfer_wrapper 11 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed11_11,
    fifo1_feed11_12,
    PE11_11_fifo1_local,
    fifo_PE11_11_op0_config_out,
    fifo_PE11_11_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op11_transfer_wrapper 11 1"<<endl;
#endif
  U1_compute_wrapper(
    PE11_11_fifo0_local,
    PE11_11_fifo1_local,
    PE11_11_fifo2_local,
    fifo_PE11_11_op1_config_out,
    fifo_PE11_11_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 11 11"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE11_11_fifo2_local,
    fifo2_collect10_11,
    fifo2_collect11_11,
    11,
    11,
    fifo_PE11_11_compute_config_out,
    fifo_PE11_11_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed11_12,
    fifo0_feed12_12,
    PE11_12_fifo0_local,
    fifo_PE10_12_res_config_out,
    fifo_PE11_12_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op11_transfer_wrapper 12 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed11_12,
    fifo1_feed11_13,
    PE11_12_fifo1_local,
    fifo_PE11_12_op0_config_out,
    fifo_PE11_12_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op11_transfer_wrapper 12 1"<<endl;
#endif
  U1_compute_wrapper(
    PE11_12_fifo0_local,
    PE11_12_fifo1_local,
    PE11_12_fifo2_local,
    fifo_PE11_12_op1_config_out,
    fifo_PE11_12_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 11 12"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE11_12_fifo2_local,
    fifo2_collect10_12,
    fifo2_collect11_12,
    11,
    12,
    fifo_PE11_12_compute_config_out,
    fifo_PE11_12_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed11_13,
    fifo0_feed12_13,
    PE11_13_fifo0_local,
    fifo_PE10_13_res_config_out,
    fifo_PE11_13_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op11_transfer_wrapper 13 0"<<endl;
#endif
  U1_op1_transfer_last_wrapper(
    fifo1_feed11_13,
    PE11_13_fifo1_local,
    fifo_PE11_13_op0_config_out,
    fifo_PE11_13_op1_config_out
  );

  U1_compute_wrapper(
    PE11_13_fifo0_local,
    PE11_13_fifo1_local,
    PE11_13_fifo2_local,
    fifo_PE11_13_op1_config_out,
    fifo_PE11_13_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 11 13"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE11_13_fifo2_local,
    fifo2_collect10_13,
    fifo2_collect11_13,
    11,
    13,
    fifo_PE11_13_compute_config_out,
    fifo_PE11_13_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed12_0,
    fifo0_feed13_0,
    PE12_0_fifo0_local,
    fifo_PE11_0_res_config_out,
    fifo_PE12_0_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op12_transfer_wrapper 0 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed12_0,
    fifo1_feed12_1,
    PE12_0_fifo1_local,
    fifo_PE12_0_op0_config_out,
    fifo_PE12_0_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op12_transfer_wrapper 0 1"<<endl;
#endif
  U1_compute_wrapper(
    PE12_0_fifo0_local,
    PE12_0_fifo1_local,
    PE12_0_fifo2_local,
    fifo_PE12_0_op1_config_out,
    fifo_PE12_0_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 12 0"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE12_0_fifo2_local,
    fifo2_collect11_0,
    fifo2_collect12_0,
    12,
    0,
    fifo_PE12_0_compute_config_out,
    fifo_PE12_0_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed12_1,
    fifo0_feed13_1,
    PE12_1_fifo0_local,
    fifo_PE11_1_res_config_out,
    fifo_PE12_1_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op12_transfer_wrapper 1 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed12_1,
    fifo1_feed12_2,
    PE12_1_fifo1_local,
    fifo_PE12_1_op0_config_out,
    fifo_PE12_1_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op12_transfer_wrapper 1 1"<<endl;
#endif
  U1_compute_wrapper(
    PE12_1_fifo0_local,
    PE12_1_fifo1_local,
    PE12_1_fifo2_local,
    fifo_PE12_1_op1_config_out,
    fifo_PE12_1_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 12 1"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE12_1_fifo2_local,
    fifo2_collect11_1,
    fifo2_collect12_1,
    12,
    1,
    fifo_PE12_1_compute_config_out,
    fifo_PE12_1_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed12_2,
    fifo0_feed13_2,
    PE12_2_fifo0_local,
    fifo_PE11_2_res_config_out,
    fifo_PE12_2_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op12_transfer_wrapper 2 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed12_2,
    fifo1_feed12_3,
    PE12_2_fifo1_local,
    fifo_PE12_2_op0_config_out,
    fifo_PE12_2_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op12_transfer_wrapper 2 1"<<endl;
#endif
  U1_compute_wrapper(
    PE12_2_fifo0_local,
    PE12_2_fifo1_local,
    PE12_2_fifo2_local,
    fifo_PE12_2_op1_config_out,
    fifo_PE12_2_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 12 2"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE12_2_fifo2_local,
    fifo2_collect11_2,
    fifo2_collect12_2,
    12,
    2,
    fifo_PE12_2_compute_config_out,
    fifo_PE12_2_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed12_3,
    fifo0_feed13_3,
    PE12_3_fifo0_local,
    fifo_PE11_3_res_config_out,
    fifo_PE12_3_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op12_transfer_wrapper 3 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed12_3,
    fifo1_feed12_4,
    PE12_3_fifo1_local,
    fifo_PE12_3_op0_config_out,
    fifo_PE12_3_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op12_transfer_wrapper 3 1"<<endl;
#endif
  U1_compute_wrapper(
    PE12_3_fifo0_local,
    PE12_3_fifo1_local,
    PE12_3_fifo2_local,
    fifo_PE12_3_op1_config_out,
    fifo_PE12_3_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 12 3"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE12_3_fifo2_local,
    fifo2_collect11_3,
    fifo2_collect12_3,
    12,
    3,
    fifo_PE12_3_compute_config_out,
    fifo_PE12_3_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed12_4,
    fifo0_feed13_4,
    PE12_4_fifo0_local,
    fifo_PE11_4_res_config_out,
    fifo_PE12_4_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op12_transfer_wrapper 4 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed12_4,
    fifo1_feed12_5,
    PE12_4_fifo1_local,
    fifo_PE12_4_op0_config_out,
    fifo_PE12_4_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op12_transfer_wrapper 4 1"<<endl;
#endif
  U1_compute_wrapper(
    PE12_4_fifo0_local,
    PE12_4_fifo1_local,
    PE12_4_fifo2_local,
    fifo_PE12_4_op1_config_out,
    fifo_PE12_4_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 12 4"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE12_4_fifo2_local,
    fifo2_collect11_4,
    fifo2_collect12_4,
    12,
    4,
    fifo_PE12_4_compute_config_out,
    fifo_PE12_4_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed12_5,
    fifo0_feed13_5,
    PE12_5_fifo0_local,
    fifo_PE11_5_res_config_out,
    fifo_PE12_5_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op12_transfer_wrapper 5 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed12_5,
    fifo1_feed12_6,
    PE12_5_fifo1_local,
    fifo_PE12_5_op0_config_out,
    fifo_PE12_5_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op12_transfer_wrapper 5 1"<<endl;
#endif
  U1_compute_wrapper(
    PE12_5_fifo0_local,
    PE12_5_fifo1_local,
    PE12_5_fifo2_local,
    fifo_PE12_5_op1_config_out,
    fifo_PE12_5_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 12 5"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE12_5_fifo2_local,
    fifo2_collect11_5,
    fifo2_collect12_5,
    12,
    5,
    fifo_PE12_5_compute_config_out,
    fifo_PE12_5_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed12_6,
    fifo0_feed13_6,
    PE12_6_fifo0_local,
    fifo_PE11_6_res_config_out,
    fifo_PE12_6_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op12_transfer_wrapper 6 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed12_6,
    fifo1_feed12_7,
    PE12_6_fifo1_local,
    fifo_PE12_6_op0_config_out,
    fifo_PE12_6_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op12_transfer_wrapper 6 1"<<endl;
#endif
  U1_compute_wrapper(
    PE12_6_fifo0_local,
    PE12_6_fifo1_local,
    PE12_6_fifo2_local,
    fifo_PE12_6_op1_config_out,
    fifo_PE12_6_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 12 6"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE12_6_fifo2_local,
    fifo2_collect11_6,
    fifo2_collect12_6,
    12,
    6,
    fifo_PE12_6_compute_config_out,
    fifo_PE12_6_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed12_7,
    fifo0_feed13_7,
    PE12_7_fifo0_local,
    fifo_PE11_7_res_config_out,
    fifo_PE12_7_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op12_transfer_wrapper 7 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed12_7,
    fifo1_feed12_8,
    PE12_7_fifo1_local,
    fifo_PE12_7_op0_config_out,
    fifo_PE12_7_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op12_transfer_wrapper 7 1"<<endl;
#endif
  U1_compute_wrapper(
    PE12_7_fifo0_local,
    PE12_7_fifo1_local,
    PE12_7_fifo2_local,
    fifo_PE12_7_op1_config_out,
    fifo_PE12_7_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 12 7"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE12_7_fifo2_local,
    fifo2_collect11_7,
    fifo2_collect12_7,
    12,
    7,
    fifo_PE12_7_compute_config_out,
    fifo_PE12_7_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed12_8,
    fifo0_feed13_8,
    PE12_8_fifo0_local,
    fifo_PE11_8_res_config_out,
    fifo_PE12_8_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op12_transfer_wrapper 8 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed12_8,
    fifo1_feed12_9,
    PE12_8_fifo1_local,
    fifo_PE12_8_op0_config_out,
    fifo_PE12_8_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op12_transfer_wrapper 8 1"<<endl;
#endif
  U1_compute_wrapper(
    PE12_8_fifo0_local,
    PE12_8_fifo1_local,
    PE12_8_fifo2_local,
    fifo_PE12_8_op1_config_out,
    fifo_PE12_8_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 12 8"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE12_8_fifo2_local,
    fifo2_collect11_8,
    fifo2_collect12_8,
    12,
    8,
    fifo_PE12_8_compute_config_out,
    fifo_PE12_8_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed12_9,
    fifo0_feed13_9,
    PE12_9_fifo0_local,
    fifo_PE11_9_res_config_out,
    fifo_PE12_9_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op12_transfer_wrapper 9 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed12_9,
    fifo1_feed12_10,
    PE12_9_fifo1_local,
    fifo_PE12_9_op0_config_out,
    fifo_PE12_9_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op12_transfer_wrapper 9 1"<<endl;
#endif
  U1_compute_wrapper(
    PE12_9_fifo0_local,
    PE12_9_fifo1_local,
    PE12_9_fifo2_local,
    fifo_PE12_9_op1_config_out,
    fifo_PE12_9_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 12 9"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE12_9_fifo2_local,
    fifo2_collect11_9,
    fifo2_collect12_9,
    12,
    9,
    fifo_PE12_9_compute_config_out,
    fifo_PE12_9_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed12_10,
    fifo0_feed13_10,
    PE12_10_fifo0_local,
    fifo_PE11_10_res_config_out,
    fifo_PE12_10_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op12_transfer_wrapper 10 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed12_10,
    fifo1_feed12_11,
    PE12_10_fifo1_local,
    fifo_PE12_10_op0_config_out,
    fifo_PE12_10_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op12_transfer_wrapper 10 1"<<endl;
#endif
  U1_compute_wrapper(
    PE12_10_fifo0_local,
    PE12_10_fifo1_local,
    PE12_10_fifo2_local,
    fifo_PE12_10_op1_config_out,
    fifo_PE12_10_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 12 10"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE12_10_fifo2_local,
    fifo2_collect11_10,
    fifo2_collect12_10,
    12,
    10,
    fifo_PE12_10_compute_config_out,
    fifo_PE12_10_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed12_11,
    fifo0_feed13_11,
    PE12_11_fifo0_local,
    fifo_PE11_11_res_config_out,
    fifo_PE12_11_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op12_transfer_wrapper 11 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed12_11,
    fifo1_feed12_12,
    PE12_11_fifo1_local,
    fifo_PE12_11_op0_config_out,
    fifo_PE12_11_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op12_transfer_wrapper 11 1"<<endl;
#endif
  U1_compute_wrapper(
    PE12_11_fifo0_local,
    PE12_11_fifo1_local,
    PE12_11_fifo2_local,
    fifo_PE12_11_op1_config_out,
    fifo_PE12_11_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 12 11"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE12_11_fifo2_local,
    fifo2_collect11_11,
    fifo2_collect12_11,
    12,
    11,
    fifo_PE12_11_compute_config_out,
    fifo_PE12_11_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed12_12,
    fifo0_feed13_12,
    PE12_12_fifo0_local,
    fifo_PE11_12_res_config_out,
    fifo_PE12_12_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op12_transfer_wrapper 12 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed12_12,
    fifo1_feed12_13,
    PE12_12_fifo1_local,
    fifo_PE12_12_op0_config_out,
    fifo_PE12_12_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op12_transfer_wrapper 12 1"<<endl;
#endif
  U1_compute_wrapper(
    PE12_12_fifo0_local,
    PE12_12_fifo1_local,
    PE12_12_fifo2_local,
    fifo_PE12_12_op1_config_out,
    fifo_PE12_12_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 12 12"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE12_12_fifo2_local,
    fifo2_collect11_12,
    fifo2_collect12_12,
    12,
    12,
    fifo_PE12_12_compute_config_out,
    fifo_PE12_12_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed12_13,
    fifo0_feed13_13,
    PE12_13_fifo0_local,
    fifo_PE11_13_res_config_out,
    fifo_PE12_13_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op12_transfer_wrapper 13 0"<<endl;
#endif
  U1_op1_transfer_last_wrapper(
    fifo1_feed12_13,
    PE12_13_fifo1_local,
    fifo_PE12_13_op0_config_out,
    fifo_PE12_13_op1_config_out
  );

  U1_compute_wrapper(
    PE12_13_fifo0_local,
    PE12_13_fifo1_local,
    PE12_13_fifo2_local,
    fifo_PE12_13_op1_config_out,
    fifo_PE12_13_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 12 13"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE12_13_fifo2_local,
    fifo2_collect11_13,
    fifo2_collect12_13,
    12,
    13,
    fifo_PE12_13_compute_config_out,
    fifo_PE12_13_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed13_0,
    fifo0_feed14_0,
    PE13_0_fifo0_local,
    fifo_PE12_0_res_config_out,
    fifo_PE13_0_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op13_transfer_wrapper 0 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed13_0,
    fifo1_feed13_1,
    PE13_0_fifo1_local,
    fifo_PE13_0_op0_config_out,
    fifo_PE13_0_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op13_transfer_wrapper 0 1"<<endl;
#endif
  U1_compute_wrapper(
    PE13_0_fifo0_local,
    PE13_0_fifo1_local,
    PE13_0_fifo2_local,
    fifo_PE13_0_op1_config_out,
    fifo_PE13_0_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 13 0"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE13_0_fifo2_local,
    fifo2_collect12_0,
    fifo2_collect13_0,
    13,
    0,
    fifo_PE13_0_compute_config_out,
    fifo_PE13_0_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed13_1,
    fifo0_feed14_1,
    PE13_1_fifo0_local,
    fifo_PE12_1_res_config_out,
    fifo_PE13_1_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op13_transfer_wrapper 1 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed13_1,
    fifo1_feed13_2,
    PE13_1_fifo1_local,
    fifo_PE13_1_op0_config_out,
    fifo_PE13_1_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op13_transfer_wrapper 1 1"<<endl;
#endif
  U1_compute_wrapper(
    PE13_1_fifo0_local,
    PE13_1_fifo1_local,
    PE13_1_fifo2_local,
    fifo_PE13_1_op1_config_out,
    fifo_PE13_1_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 13 1"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE13_1_fifo2_local,
    fifo2_collect12_1,
    fifo2_collect13_1,
    13,
    1,
    fifo_PE13_1_compute_config_out,
    fifo_PE13_1_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed13_2,
    fifo0_feed14_2,
    PE13_2_fifo0_local,
    fifo_PE12_2_res_config_out,
    fifo_PE13_2_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op13_transfer_wrapper 2 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed13_2,
    fifo1_feed13_3,
    PE13_2_fifo1_local,
    fifo_PE13_2_op0_config_out,
    fifo_PE13_2_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op13_transfer_wrapper 2 1"<<endl;
#endif
  U1_compute_wrapper(
    PE13_2_fifo0_local,
    PE13_2_fifo1_local,
    PE13_2_fifo2_local,
    fifo_PE13_2_op1_config_out,
    fifo_PE13_2_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 13 2"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE13_2_fifo2_local,
    fifo2_collect12_2,
    fifo2_collect13_2,
    13,
    2,
    fifo_PE13_2_compute_config_out,
    fifo_PE13_2_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed13_3,
    fifo0_feed14_3,
    PE13_3_fifo0_local,
    fifo_PE12_3_res_config_out,
    fifo_PE13_3_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op13_transfer_wrapper 3 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed13_3,
    fifo1_feed13_4,
    PE13_3_fifo1_local,
    fifo_PE13_3_op0_config_out,
    fifo_PE13_3_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op13_transfer_wrapper 3 1"<<endl;
#endif
  U1_compute_wrapper(
    PE13_3_fifo0_local,
    PE13_3_fifo1_local,
    PE13_3_fifo2_local,
    fifo_PE13_3_op1_config_out,
    fifo_PE13_3_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 13 3"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE13_3_fifo2_local,
    fifo2_collect12_3,
    fifo2_collect13_3,
    13,
    3,
    fifo_PE13_3_compute_config_out,
    fifo_PE13_3_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed13_4,
    fifo0_feed14_4,
    PE13_4_fifo0_local,
    fifo_PE12_4_res_config_out,
    fifo_PE13_4_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op13_transfer_wrapper 4 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed13_4,
    fifo1_feed13_5,
    PE13_4_fifo1_local,
    fifo_PE13_4_op0_config_out,
    fifo_PE13_4_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op13_transfer_wrapper 4 1"<<endl;
#endif
  U1_compute_wrapper(
    PE13_4_fifo0_local,
    PE13_4_fifo1_local,
    PE13_4_fifo2_local,
    fifo_PE13_4_op1_config_out,
    fifo_PE13_4_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 13 4"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE13_4_fifo2_local,
    fifo2_collect12_4,
    fifo2_collect13_4,
    13,
    4,
    fifo_PE13_4_compute_config_out,
    fifo_PE13_4_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed13_5,
    fifo0_feed14_5,
    PE13_5_fifo0_local,
    fifo_PE12_5_res_config_out,
    fifo_PE13_5_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op13_transfer_wrapper 5 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed13_5,
    fifo1_feed13_6,
    PE13_5_fifo1_local,
    fifo_PE13_5_op0_config_out,
    fifo_PE13_5_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op13_transfer_wrapper 5 1"<<endl;
#endif
  U1_compute_wrapper(
    PE13_5_fifo0_local,
    PE13_5_fifo1_local,
    PE13_5_fifo2_local,
    fifo_PE13_5_op1_config_out,
    fifo_PE13_5_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 13 5"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE13_5_fifo2_local,
    fifo2_collect12_5,
    fifo2_collect13_5,
    13,
    5,
    fifo_PE13_5_compute_config_out,
    fifo_PE13_5_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed13_6,
    fifo0_feed14_6,
    PE13_6_fifo0_local,
    fifo_PE12_6_res_config_out,
    fifo_PE13_6_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op13_transfer_wrapper 6 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed13_6,
    fifo1_feed13_7,
    PE13_6_fifo1_local,
    fifo_PE13_6_op0_config_out,
    fifo_PE13_6_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op13_transfer_wrapper 6 1"<<endl;
#endif
  U1_compute_wrapper(
    PE13_6_fifo0_local,
    PE13_6_fifo1_local,
    PE13_6_fifo2_local,
    fifo_PE13_6_op1_config_out,
    fifo_PE13_6_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 13 6"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE13_6_fifo2_local,
    fifo2_collect12_6,
    fifo2_collect13_6,
    13,
    6,
    fifo_PE13_6_compute_config_out,
    fifo_PE13_6_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed13_7,
    fifo0_feed14_7,
    PE13_7_fifo0_local,
    fifo_PE12_7_res_config_out,
    fifo_PE13_7_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op13_transfer_wrapper 7 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed13_7,
    fifo1_feed13_8,
    PE13_7_fifo1_local,
    fifo_PE13_7_op0_config_out,
    fifo_PE13_7_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op13_transfer_wrapper 7 1"<<endl;
#endif
  U1_compute_wrapper(
    PE13_7_fifo0_local,
    PE13_7_fifo1_local,
    PE13_7_fifo2_local,
    fifo_PE13_7_op1_config_out,
    fifo_PE13_7_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 13 7"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE13_7_fifo2_local,
    fifo2_collect12_7,
    fifo2_collect13_7,
    13,
    7,
    fifo_PE13_7_compute_config_out,
    fifo_PE13_7_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed13_8,
    fifo0_feed14_8,
    PE13_8_fifo0_local,
    fifo_PE12_8_res_config_out,
    fifo_PE13_8_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op13_transfer_wrapper 8 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed13_8,
    fifo1_feed13_9,
    PE13_8_fifo1_local,
    fifo_PE13_8_op0_config_out,
    fifo_PE13_8_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op13_transfer_wrapper 8 1"<<endl;
#endif
  U1_compute_wrapper(
    PE13_8_fifo0_local,
    PE13_8_fifo1_local,
    PE13_8_fifo2_local,
    fifo_PE13_8_op1_config_out,
    fifo_PE13_8_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 13 8"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE13_8_fifo2_local,
    fifo2_collect12_8,
    fifo2_collect13_8,
    13,
    8,
    fifo_PE13_8_compute_config_out,
    fifo_PE13_8_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed13_9,
    fifo0_feed14_9,
    PE13_9_fifo0_local,
    fifo_PE12_9_res_config_out,
    fifo_PE13_9_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op13_transfer_wrapper 9 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed13_9,
    fifo1_feed13_10,
    PE13_9_fifo1_local,
    fifo_PE13_9_op0_config_out,
    fifo_PE13_9_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op13_transfer_wrapper 9 1"<<endl;
#endif
  U1_compute_wrapper(
    PE13_9_fifo0_local,
    PE13_9_fifo1_local,
    PE13_9_fifo2_local,
    fifo_PE13_9_op1_config_out,
    fifo_PE13_9_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 13 9"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE13_9_fifo2_local,
    fifo2_collect12_9,
    fifo2_collect13_9,
    13,
    9,
    fifo_PE13_9_compute_config_out,
    fifo_PE13_9_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed13_10,
    fifo0_feed14_10,
    PE13_10_fifo0_local,
    fifo_PE12_10_res_config_out,
    fifo_PE13_10_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op13_transfer_wrapper 10 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed13_10,
    fifo1_feed13_11,
    PE13_10_fifo1_local,
    fifo_PE13_10_op0_config_out,
    fifo_PE13_10_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op13_transfer_wrapper 10 1"<<endl;
#endif
  U1_compute_wrapper(
    PE13_10_fifo0_local,
    PE13_10_fifo1_local,
    PE13_10_fifo2_local,
    fifo_PE13_10_op1_config_out,
    fifo_PE13_10_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 13 10"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE13_10_fifo2_local,
    fifo2_collect12_10,
    fifo2_collect13_10,
    13,
    10,
    fifo_PE13_10_compute_config_out,
    fifo_PE13_10_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed13_11,
    fifo0_feed14_11,
    PE13_11_fifo0_local,
    fifo_PE12_11_res_config_out,
    fifo_PE13_11_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op13_transfer_wrapper 11 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed13_11,
    fifo1_feed13_12,
    PE13_11_fifo1_local,
    fifo_PE13_11_op0_config_out,
    fifo_PE13_11_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op13_transfer_wrapper 11 1"<<endl;
#endif
  U1_compute_wrapper(
    PE13_11_fifo0_local,
    PE13_11_fifo1_local,
    PE13_11_fifo2_local,
    fifo_PE13_11_op1_config_out,
    fifo_PE13_11_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 13 11"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE13_11_fifo2_local,
    fifo2_collect12_11,
    fifo2_collect13_11,
    13,
    11,
    fifo_PE13_11_compute_config_out,
    fifo_PE13_11_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed13_12,
    fifo0_feed14_12,
    PE13_12_fifo0_local,
    fifo_PE12_12_res_config_out,
    fifo_PE13_12_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op13_transfer_wrapper 12 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed13_12,
    fifo1_feed13_13,
    PE13_12_fifo1_local,
    fifo_PE13_12_op0_config_out,
    fifo_PE13_12_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op13_transfer_wrapper 12 1"<<endl;
#endif
  U1_compute_wrapper(
    PE13_12_fifo0_local,
    PE13_12_fifo1_local,
    PE13_12_fifo2_local,
    fifo_PE13_12_op1_config_out,
    fifo_PE13_12_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 13 12"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE13_12_fifo2_local,
    fifo2_collect12_12,
    fifo2_collect13_12,
    13,
    12,
    fifo_PE13_12_compute_config_out,
    fifo_PE13_12_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed13_13,
    fifo0_feed14_13,
    PE13_13_fifo0_local,
    fifo_PE12_13_res_config_out,
    fifo_PE13_13_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op13_transfer_wrapper 13 0"<<endl;
#endif
  U1_op1_transfer_last_wrapper(
    fifo1_feed13_13,
    PE13_13_fifo1_local,
    fifo_PE13_13_op0_config_out,
    fifo_PE13_13_op1_config_out
  );

  U1_compute_wrapper(
    PE13_13_fifo0_local,
    PE13_13_fifo1_local,
    PE13_13_fifo2_local,
    fifo_PE13_13_op1_config_out,
    fifo_PE13_13_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 13 13"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE13_13_fifo2_local,
    fifo2_collect12_13,
    fifo2_collect13_13,
    13,
    13,
    fifo_PE13_13_compute_config_out,
    fifo_PE13_13_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed14_0,
    fifo0_feed15_0,
    PE14_0_fifo0_local,
    fifo_PE13_0_res_config_out,
    fifo_PE14_0_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op14_transfer_wrapper 0 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed14_0,
    fifo1_feed14_1,
    PE14_0_fifo1_local,
    fifo_PE14_0_op0_config_out,
    fifo_PE14_0_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op14_transfer_wrapper 0 1"<<endl;
#endif
  U1_compute_wrapper(
    PE14_0_fifo0_local,
    PE14_0_fifo1_local,
    PE14_0_fifo2_local,
    fifo_PE14_0_op1_config_out,
    fifo_PE14_0_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 14 0"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE14_0_fifo2_local,
    fifo2_collect13_0,
    fifo2_collect14_0,
    14,
    0,
    fifo_PE14_0_compute_config_out,
    fifo_PE14_0_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed14_1,
    fifo0_feed15_1,
    PE14_1_fifo0_local,
    fifo_PE13_1_res_config_out,
    fifo_PE14_1_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op14_transfer_wrapper 1 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed14_1,
    fifo1_feed14_2,
    PE14_1_fifo1_local,
    fifo_PE14_1_op0_config_out,
    fifo_PE14_1_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op14_transfer_wrapper 1 1"<<endl;
#endif
  U1_compute_wrapper(
    PE14_1_fifo0_local,
    PE14_1_fifo1_local,
    PE14_1_fifo2_local,
    fifo_PE14_1_op1_config_out,
    fifo_PE14_1_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 14 1"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE14_1_fifo2_local,
    fifo2_collect13_1,
    fifo2_collect14_1,
    14,
    1,
    fifo_PE14_1_compute_config_out,
    fifo_PE14_1_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed14_2,
    fifo0_feed15_2,
    PE14_2_fifo0_local,
    fifo_PE13_2_res_config_out,
    fifo_PE14_2_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op14_transfer_wrapper 2 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed14_2,
    fifo1_feed14_3,
    PE14_2_fifo1_local,
    fifo_PE14_2_op0_config_out,
    fifo_PE14_2_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op14_transfer_wrapper 2 1"<<endl;
#endif
  U1_compute_wrapper(
    PE14_2_fifo0_local,
    PE14_2_fifo1_local,
    PE14_2_fifo2_local,
    fifo_PE14_2_op1_config_out,
    fifo_PE14_2_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 14 2"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE14_2_fifo2_local,
    fifo2_collect13_2,
    fifo2_collect14_2,
    14,
    2,
    fifo_PE14_2_compute_config_out,
    fifo_PE14_2_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed14_3,
    fifo0_feed15_3,
    PE14_3_fifo0_local,
    fifo_PE13_3_res_config_out,
    fifo_PE14_3_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op14_transfer_wrapper 3 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed14_3,
    fifo1_feed14_4,
    PE14_3_fifo1_local,
    fifo_PE14_3_op0_config_out,
    fifo_PE14_3_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op14_transfer_wrapper 3 1"<<endl;
#endif
  U1_compute_wrapper(
    PE14_3_fifo0_local,
    PE14_3_fifo1_local,
    PE14_3_fifo2_local,
    fifo_PE14_3_op1_config_out,
    fifo_PE14_3_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 14 3"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE14_3_fifo2_local,
    fifo2_collect13_3,
    fifo2_collect14_3,
    14,
    3,
    fifo_PE14_3_compute_config_out,
    fifo_PE14_3_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed14_4,
    fifo0_feed15_4,
    PE14_4_fifo0_local,
    fifo_PE13_4_res_config_out,
    fifo_PE14_4_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op14_transfer_wrapper 4 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed14_4,
    fifo1_feed14_5,
    PE14_4_fifo1_local,
    fifo_PE14_4_op0_config_out,
    fifo_PE14_4_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op14_transfer_wrapper 4 1"<<endl;
#endif
  U1_compute_wrapper(
    PE14_4_fifo0_local,
    PE14_4_fifo1_local,
    PE14_4_fifo2_local,
    fifo_PE14_4_op1_config_out,
    fifo_PE14_4_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 14 4"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE14_4_fifo2_local,
    fifo2_collect13_4,
    fifo2_collect14_4,
    14,
    4,
    fifo_PE14_4_compute_config_out,
    fifo_PE14_4_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed14_5,
    fifo0_feed15_5,
    PE14_5_fifo0_local,
    fifo_PE13_5_res_config_out,
    fifo_PE14_5_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op14_transfer_wrapper 5 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed14_5,
    fifo1_feed14_6,
    PE14_5_fifo1_local,
    fifo_PE14_5_op0_config_out,
    fifo_PE14_5_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op14_transfer_wrapper 5 1"<<endl;
#endif
  U1_compute_wrapper(
    PE14_5_fifo0_local,
    PE14_5_fifo1_local,
    PE14_5_fifo2_local,
    fifo_PE14_5_op1_config_out,
    fifo_PE14_5_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 14 5"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE14_5_fifo2_local,
    fifo2_collect13_5,
    fifo2_collect14_5,
    14,
    5,
    fifo_PE14_5_compute_config_out,
    fifo_PE14_5_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed14_6,
    fifo0_feed15_6,
    PE14_6_fifo0_local,
    fifo_PE13_6_res_config_out,
    fifo_PE14_6_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op14_transfer_wrapper 6 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed14_6,
    fifo1_feed14_7,
    PE14_6_fifo1_local,
    fifo_PE14_6_op0_config_out,
    fifo_PE14_6_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op14_transfer_wrapper 6 1"<<endl;
#endif
  U1_compute_wrapper(
    PE14_6_fifo0_local,
    PE14_6_fifo1_local,
    PE14_6_fifo2_local,
    fifo_PE14_6_op1_config_out,
    fifo_PE14_6_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 14 6"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE14_6_fifo2_local,
    fifo2_collect13_6,
    fifo2_collect14_6,
    14,
    6,
    fifo_PE14_6_compute_config_out,
    fifo_PE14_6_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed14_7,
    fifo0_feed15_7,
    PE14_7_fifo0_local,
    fifo_PE13_7_res_config_out,
    fifo_PE14_7_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op14_transfer_wrapper 7 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed14_7,
    fifo1_feed14_8,
    PE14_7_fifo1_local,
    fifo_PE14_7_op0_config_out,
    fifo_PE14_7_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op14_transfer_wrapper 7 1"<<endl;
#endif
  U1_compute_wrapper(
    PE14_7_fifo0_local,
    PE14_7_fifo1_local,
    PE14_7_fifo2_local,
    fifo_PE14_7_op1_config_out,
    fifo_PE14_7_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 14 7"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE14_7_fifo2_local,
    fifo2_collect13_7,
    fifo2_collect14_7,
    14,
    7,
    fifo_PE14_7_compute_config_out,
    fifo_PE14_7_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed14_8,
    fifo0_feed15_8,
    PE14_8_fifo0_local,
    fifo_PE13_8_res_config_out,
    fifo_PE14_8_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op14_transfer_wrapper 8 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed14_8,
    fifo1_feed14_9,
    PE14_8_fifo1_local,
    fifo_PE14_8_op0_config_out,
    fifo_PE14_8_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op14_transfer_wrapper 8 1"<<endl;
#endif
  U1_compute_wrapper(
    PE14_8_fifo0_local,
    PE14_8_fifo1_local,
    PE14_8_fifo2_local,
    fifo_PE14_8_op1_config_out,
    fifo_PE14_8_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 14 8"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE14_8_fifo2_local,
    fifo2_collect13_8,
    fifo2_collect14_8,
    14,
    8,
    fifo_PE14_8_compute_config_out,
    fifo_PE14_8_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed14_9,
    fifo0_feed15_9,
    PE14_9_fifo0_local,
    fifo_PE13_9_res_config_out,
    fifo_PE14_9_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op14_transfer_wrapper 9 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed14_9,
    fifo1_feed14_10,
    PE14_9_fifo1_local,
    fifo_PE14_9_op0_config_out,
    fifo_PE14_9_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op14_transfer_wrapper 9 1"<<endl;
#endif
  U1_compute_wrapper(
    PE14_9_fifo0_local,
    PE14_9_fifo1_local,
    PE14_9_fifo2_local,
    fifo_PE14_9_op1_config_out,
    fifo_PE14_9_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 14 9"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE14_9_fifo2_local,
    fifo2_collect13_9,
    fifo2_collect14_9,
    14,
    9,
    fifo_PE14_9_compute_config_out,
    fifo_PE14_9_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed14_10,
    fifo0_feed15_10,
    PE14_10_fifo0_local,
    fifo_PE13_10_res_config_out,
    fifo_PE14_10_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op14_transfer_wrapper 10 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed14_10,
    fifo1_feed14_11,
    PE14_10_fifo1_local,
    fifo_PE14_10_op0_config_out,
    fifo_PE14_10_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op14_transfer_wrapper 10 1"<<endl;
#endif
  U1_compute_wrapper(
    PE14_10_fifo0_local,
    PE14_10_fifo1_local,
    PE14_10_fifo2_local,
    fifo_PE14_10_op1_config_out,
    fifo_PE14_10_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 14 10"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE14_10_fifo2_local,
    fifo2_collect13_10,
    fifo2_collect14_10,
    14,
    10,
    fifo_PE14_10_compute_config_out,
    fifo_PE14_10_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed14_11,
    fifo0_feed15_11,
    PE14_11_fifo0_local,
    fifo_PE13_11_res_config_out,
    fifo_PE14_11_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op14_transfer_wrapper 11 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed14_11,
    fifo1_feed14_12,
    PE14_11_fifo1_local,
    fifo_PE14_11_op0_config_out,
    fifo_PE14_11_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op14_transfer_wrapper 11 1"<<endl;
#endif
  U1_compute_wrapper(
    PE14_11_fifo0_local,
    PE14_11_fifo1_local,
    PE14_11_fifo2_local,
    fifo_PE14_11_op1_config_out,
    fifo_PE14_11_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 14 11"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE14_11_fifo2_local,
    fifo2_collect13_11,
    fifo2_collect14_11,
    14,
    11,
    fifo_PE14_11_compute_config_out,
    fifo_PE14_11_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed14_12,
    fifo0_feed15_12,
    PE14_12_fifo0_local,
    fifo_PE13_12_res_config_out,
    fifo_PE14_12_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op14_transfer_wrapper 12 0"<<endl;
#endif
  U1_op1_transfer_wrapper(
    fifo1_feed14_12,
    fifo1_feed14_13,
    PE14_12_fifo1_local,
    fifo_PE14_12_op0_config_out,
    fifo_PE14_12_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op14_transfer_wrapper 12 1"<<endl;
#endif
  U1_compute_wrapper(
    PE14_12_fifo0_local,
    PE14_12_fifo1_local,
    PE14_12_fifo2_local,
    fifo_PE14_12_op1_config_out,
    fifo_PE14_12_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 14 12"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE14_12_fifo2_local,
    fifo2_collect13_12,
    fifo2_collect14_12,
    14,
    12,
    fifo_PE14_12_compute_config_out,
    fifo_PE14_12_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed14_13,
    fifo0_feed15_13,
    PE14_13_fifo0_local,
    fifo_PE13_13_res_config_out,
    fifo_PE14_13_op0_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op14_transfer_wrapper 13 0"<<endl;
#endif
  U1_op1_transfer_last_wrapper(
    fifo1_feed14_13,
    PE14_13_fifo1_local,
    fifo_PE14_13_op0_config_out,
    fifo_PE14_13_op1_config_out
  );

  U1_compute_wrapper(
    PE14_13_fifo0_local,
    PE14_13_fifo1_local,
    PE14_13_fifo2_local,
    fifo_PE14_13_op1_config_out,
    fifo_PE14_13_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 14 13"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE14_13_fifo2_local,
    fifo2_collect13_13,
    fifo2_collect14_13,
    14,
    13,
    fifo_PE14_13_compute_config_out,
    fifo_PE14_13_res_config_out
  );

  U1_op0_transfer_last_wrapper(
    fifo0_feed15_0,
    PE15_0_fifo0_local,
    fifo_PE14_0_res_config_out,
    fifo_PE15_0_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed15_0,
    fifo1_feed15_1,
    PE15_0_fifo1_local,
    fifo_PE15_0_op0_config_out,
    fifo_PE15_0_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op15_transfer_wrapper 0 1"<<endl;
#endif
  U1_compute_wrapper(
    PE15_0_fifo0_local,
    PE15_0_fifo1_local,
    PE15_0_fifo2_local,
    fifo_PE15_0_op1_config_out,
    fifo_PE15_0_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 15 0"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE15_0_fifo2_local,
    fifo2_collect14_0,
    fifo2_collect15_0,
    15,
    0,
    fifo_PE15_0_compute_config_out,
    fifo_PE15_0_res_config_out
  );

  U1_op0_transfer_last_wrapper(
    fifo0_feed15_1,
    PE15_1_fifo0_local,
    fifo_PE14_1_res_config_out,
    fifo_PE15_1_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed15_1,
    fifo1_feed15_2,
    PE15_1_fifo1_local,
    fifo_PE15_1_op0_config_out,
    fifo_PE15_1_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op15_transfer_wrapper 1 1"<<endl;
#endif
  U1_compute_wrapper(
    PE15_1_fifo0_local,
    PE15_1_fifo1_local,
    PE15_1_fifo2_local,
    fifo_PE15_1_op1_config_out,
    fifo_PE15_1_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 15 1"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE15_1_fifo2_local,
    fifo2_collect14_1,
    fifo2_collect15_1,
    15,
    1,
    fifo_PE15_1_compute_config_out,
    fifo_PE15_1_res_config_out
  );

  U1_op0_transfer_last_wrapper(
    fifo0_feed15_2,
    PE15_2_fifo0_local,
    fifo_PE14_2_res_config_out,
    fifo_PE15_2_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed15_2,
    fifo1_feed15_3,
    PE15_2_fifo1_local,
    fifo_PE15_2_op0_config_out,
    fifo_PE15_2_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op15_transfer_wrapper 2 1"<<endl;
#endif
  U1_compute_wrapper(
    PE15_2_fifo0_local,
    PE15_2_fifo1_local,
    PE15_2_fifo2_local,
    fifo_PE15_2_op1_config_out,
    fifo_PE15_2_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 15 2"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE15_2_fifo2_local,
    fifo2_collect14_2,
    fifo2_collect15_2,
    15,
    2,
    fifo_PE15_2_compute_config_out,
    fifo_PE15_2_res_config_out
  );

  U1_op0_transfer_last_wrapper(
    fifo0_feed15_3,
    PE15_3_fifo0_local,
    fifo_PE14_3_res_config_out,
    fifo_PE15_3_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed15_3,
    fifo1_feed15_4,
    PE15_3_fifo1_local,
    fifo_PE15_3_op0_config_out,
    fifo_PE15_3_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op15_transfer_wrapper 3 1"<<endl;
#endif
  U1_compute_wrapper(
    PE15_3_fifo0_local,
    PE15_3_fifo1_local,
    PE15_3_fifo2_local,
    fifo_PE15_3_op1_config_out,
    fifo_PE15_3_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 15 3"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE15_3_fifo2_local,
    fifo2_collect14_3,
    fifo2_collect15_3,
    15,
    3,
    fifo_PE15_3_compute_config_out,
    fifo_PE15_3_res_config_out
  );

  U1_op0_transfer_last_wrapper(
    fifo0_feed15_4,
    PE15_4_fifo0_local,
    fifo_PE14_4_res_config_out,
    fifo_PE15_4_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed15_4,
    fifo1_feed15_5,
    PE15_4_fifo1_local,
    fifo_PE15_4_op0_config_out,
    fifo_PE15_4_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op15_transfer_wrapper 4 1"<<endl;
#endif
  U1_compute_wrapper(
    PE15_4_fifo0_local,
    PE15_4_fifo1_local,
    PE15_4_fifo2_local,
    fifo_PE15_4_op1_config_out,
    fifo_PE15_4_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 15 4"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE15_4_fifo2_local,
    fifo2_collect14_4,
    fifo2_collect15_4,
    15,
    4,
    fifo_PE15_4_compute_config_out,
    fifo_PE15_4_res_config_out
  );

  U1_op0_transfer_last_wrapper(
    fifo0_feed15_5,
    PE15_5_fifo0_local,
    fifo_PE14_5_res_config_out,
    fifo_PE15_5_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed15_5,
    fifo1_feed15_6,
    PE15_5_fifo1_local,
    fifo_PE15_5_op0_config_out,
    fifo_PE15_5_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op15_transfer_wrapper 5 1"<<endl;
#endif
  U1_compute_wrapper(
    PE15_5_fifo0_local,
    PE15_5_fifo1_local,
    PE15_5_fifo2_local,
    fifo_PE15_5_op1_config_out,
    fifo_PE15_5_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 15 5"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE15_5_fifo2_local,
    fifo2_collect14_5,
    fifo2_collect15_5,
    15,
    5,
    fifo_PE15_5_compute_config_out,
    fifo_PE15_5_res_config_out
  );

  U1_op0_transfer_last_wrapper(
    fifo0_feed15_6,
    PE15_6_fifo0_local,
    fifo_PE14_6_res_config_out,
    fifo_PE15_6_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed15_6,
    fifo1_feed15_7,
    PE15_6_fifo1_local,
    fifo_PE15_6_op0_config_out,
    fifo_PE15_6_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op15_transfer_wrapper 6 1"<<endl;
#endif
  U1_compute_wrapper(
    PE15_6_fifo0_local,
    PE15_6_fifo1_local,
    PE15_6_fifo2_local,
    fifo_PE15_6_op1_config_out,
    fifo_PE15_6_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 15 6"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE15_6_fifo2_local,
    fifo2_collect14_6,
    fifo2_collect15_6,
    15,
    6,
    fifo_PE15_6_compute_config_out,
    fifo_PE15_6_res_config_out
  );

  U1_op0_transfer_last_wrapper(
    fifo0_feed15_7,
    PE15_7_fifo0_local,
    fifo_PE14_7_res_config_out,
    fifo_PE15_7_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed15_7,
    fifo1_feed15_8,
    PE15_7_fifo1_local,
    fifo_PE15_7_op0_config_out,
    fifo_PE15_7_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op15_transfer_wrapper 7 1"<<endl;
#endif
  U1_compute_wrapper(
    PE15_7_fifo0_local,
    PE15_7_fifo1_local,
    PE15_7_fifo2_local,
    fifo_PE15_7_op1_config_out,
    fifo_PE15_7_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 15 7"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE15_7_fifo2_local,
    fifo2_collect14_7,
    fifo2_collect15_7,
    15,
    7,
    fifo_PE15_7_compute_config_out,
    fifo_PE15_7_res_config_out
  );

  U1_op0_transfer_last_wrapper(
    fifo0_feed15_8,
    PE15_8_fifo0_local,
    fifo_PE14_8_res_config_out,
    fifo_PE15_8_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed15_8,
    fifo1_feed15_9,
    PE15_8_fifo1_local,
    fifo_PE15_8_op0_config_out,
    fifo_PE15_8_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op15_transfer_wrapper 8 1"<<endl;
#endif
  U1_compute_wrapper(
    PE15_8_fifo0_local,
    PE15_8_fifo1_local,
    PE15_8_fifo2_local,
    fifo_PE15_8_op1_config_out,
    fifo_PE15_8_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 15 8"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE15_8_fifo2_local,
    fifo2_collect14_8,
    fifo2_collect15_8,
    15,
    8,
    fifo_PE15_8_compute_config_out,
    fifo_PE15_8_res_config_out
  );

  U1_op0_transfer_last_wrapper(
    fifo0_feed15_9,
    PE15_9_fifo0_local,
    fifo_PE14_9_res_config_out,
    fifo_PE15_9_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed15_9,
    fifo1_feed15_10,
    PE15_9_fifo1_local,
    fifo_PE15_9_op0_config_out,
    fifo_PE15_9_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op15_transfer_wrapper 9 1"<<endl;
#endif
  U1_compute_wrapper(
    PE15_9_fifo0_local,
    PE15_9_fifo1_local,
    PE15_9_fifo2_local,
    fifo_PE15_9_op1_config_out,
    fifo_PE15_9_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 15 9"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE15_9_fifo2_local,
    fifo2_collect14_9,
    fifo2_collect15_9,
    15,
    9,
    fifo_PE15_9_compute_config_out,
    fifo_PE15_9_res_config_out
  );

  U1_op0_transfer_last_wrapper(
    fifo0_feed15_10,
    PE15_10_fifo0_local,
    fifo_PE14_10_res_config_out,
    fifo_PE15_10_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed15_10,
    fifo1_feed15_11,
    PE15_10_fifo1_local,
    fifo_PE15_10_op0_config_out,
    fifo_PE15_10_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op15_transfer_wrapper 10 1"<<endl;
#endif
  U1_compute_wrapper(
    PE15_10_fifo0_local,
    PE15_10_fifo1_local,
    PE15_10_fifo2_local,
    fifo_PE15_10_op1_config_out,
    fifo_PE15_10_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 15 10"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE15_10_fifo2_local,
    fifo2_collect14_10,
    fifo2_collect15_10,
    15,
    10,
    fifo_PE15_10_compute_config_out,
    fifo_PE15_10_res_config_out
  );

  U1_op0_transfer_last_wrapper(
    fifo0_feed15_11,
    PE15_11_fifo0_local,
    fifo_PE14_11_res_config_out,
    fifo_PE15_11_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed15_11,
    fifo1_feed15_12,
    PE15_11_fifo1_local,
    fifo_PE15_11_op0_config_out,
    fifo_PE15_11_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op15_transfer_wrapper 11 1"<<endl;
#endif
  U1_compute_wrapper(
    PE15_11_fifo0_local,
    PE15_11_fifo1_local,
    PE15_11_fifo2_local,
    fifo_PE15_11_op1_config_out,
    fifo_PE15_11_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 15 11"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE15_11_fifo2_local,
    fifo2_collect14_11,
    fifo2_collect15_11,
    15,
    11,
    fifo_PE15_11_compute_config_out,
    fifo_PE15_11_res_config_out
  );

  U1_op0_transfer_last_wrapper(
    fifo0_feed15_12,
    PE15_12_fifo0_local,
    fifo_PE14_12_res_config_out,
    fifo_PE15_12_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed15_12,
    fifo1_feed15_13,
    PE15_12_fifo1_local,
    fifo_PE15_12_op0_config_out,
    fifo_PE15_12_op1_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_op15_transfer_wrapper 12 1"<<endl;
#endif
  U1_compute_wrapper(
    PE15_12_fifo0_local,
    PE15_12_fifo1_local,
    PE15_12_fifo2_local,
    fifo_PE15_12_op1_config_out,
    fifo_PE15_12_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 15 12"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE15_12_fifo2_local,
    fifo2_collect14_12,
    fifo2_collect15_12,
    15,
    12,
    fifo_PE15_12_compute_config_out,
    fifo_PE15_12_res_config_out
  );

  U1_op0_transfer_last_wrapper(
    fifo0_feed15_13,
    PE15_13_fifo0_local,
    fifo_PE14_13_res_config_out,
    fifo_PE15_13_op0_config_out
  );

  U1_op1_transfer_last_wrapper(
    fifo1_feed15_13,
    PE15_13_fifo1_local,
    fifo_PE15_13_op0_config_out,
    fifo_PE15_13_op1_config_out
  );

  U1_compute_wrapper(
    PE15_13_fifo0_local,
    PE15_13_fifo1_local,
    PE15_13_fifo2_local,
    fifo_PE15_13_op1_config_out,
    fifo_PE15_13_compute_config_out
  );

#ifdef SA_DEBUG
	cout<<"Finished U1_compute_wrapper 15 13"<<endl;
#endif
  U1_res_transfer_wrapper(
    PE15_13_fifo2_local,
    fifo2_collect14_13,
    fifo2_collect15_13,
    15,
    13,
    fifo_PE15_13_compute_config_out,
    fifo_PE15_13_res_config_out
  );

  U1_DataCollect2EngineLast(
    fifo2_transfer0,
    fifo2_collect15_13,
    13,
    fifo_PE15_13_res_config_out,
    fifo_DataCollect2Engine13_config_out
  );

  U1_DataCollect2Engine0_wrapper(
    fifo2_transfer0,
    fifo2_transfer1,
    fifo2_collect15_12,
    12,
    fifo_PE15_12_res_config_out,
    fifo_DataCollect2Engine13_config_out,
    fifo_DataCollect2Engine12_config_out
  );

  U1_DataCollect2Engine0_wrapper(
    fifo2_transfer1,
    fifo2_transfer2,
    fifo2_collect15_11,
    11,
    fifo_PE15_11_res_config_out,
    fifo_DataCollect2Engine12_config_out,
    fifo_DataCollect2Engine11_config_out
  );

  U1_DataCollect2Engine0_wrapper(
    fifo2_transfer2,
    fifo2_transfer3,
    fifo2_collect15_10,
    10,
    fifo_PE15_10_res_config_out,
    fifo_DataCollect2Engine11_config_out,
    fifo_DataCollect2Engine10_config_out
  );

  U1_DataCollect2Engine0_wrapper(
    fifo2_transfer3,
    fifo2_transfer4,
    fifo2_collect15_9,
    9,
    fifo_PE15_9_res_config_out,
    fifo_DataCollect2Engine10_config_out,
    fifo_DataCollect2Engine9_config_out
  );

  U1_DataCollect2Engine0_wrapper(
    fifo2_transfer4,
    fifo2_transfer5,
    fifo2_collect15_8,
    8,
    fifo_PE15_8_res_config_out,
    fifo_DataCollect2Engine9_config_out,
    fifo_DataCollect2Engine8_config_out
  );

  U1_DataCollect2Engine0_wrapper(
    fifo2_transfer5,
    fifo2_transfer6,
    fifo2_collect15_7,
    7,
    fifo_PE15_7_res_config_out,
    fifo_DataCollect2Engine8_config_out,
    fifo_DataCollect2Engine7_config_out
  );

  U1_DataCollect2Engine0_wrapper(
    fifo2_transfer6,
    fifo2_transfer7,
    fifo2_collect15_6,
    6,
    fifo_PE15_6_res_config_out,
    fifo_DataCollect2Engine7_config_out,
    fifo_DataCollect2Engine6_config_out
  );

  U1_DataCollect2Engine0_wrapper(
    fifo2_transfer7,
    fifo2_transfer8,
    fifo2_collect15_5,
    5,
    fifo_PE15_5_res_config_out,
    fifo_DataCollect2Engine6_config_out,
    fifo_DataCollect2Engine5_config_out
  );

  U1_DataCollect2Engine0_wrapper(
    fifo2_transfer8,
    fifo2_transfer9,
    fifo2_collect15_4,
    4,
    fifo_PE15_4_res_config_out,
    fifo_DataCollect2Engine5_config_out,
    fifo_DataCollect2Engine4_config_out
  );

  U1_DataCollect2Engine0_wrapper(
    fifo2_transfer9,
    fifo2_transfer10,
    fifo2_collect15_3,
    3,
    fifo_PE15_3_res_config_out,
    fifo_DataCollect2Engine4_config_out,
    fifo_DataCollect2Engine3_config_out
  );

  U1_DataCollect2Engine0_wrapper(
    fifo2_transfer10,
    fifo2_transfer11,
    fifo2_collect15_2,
    2,
    fifo_PE15_2_res_config_out,
    fifo_DataCollect2Engine3_config_out,
    fifo_DataCollect2Engine2_config_out
  );

  U1_DataCollect2Engine0_wrapper(
    fifo2_transfer11,
    fifo2_transfer12,
    fifo2_collect15_1,
    1,
    fifo_PE15_1_res_config_out,
    fifo_DataCollect2Engine2_config_out,
    fifo_DataCollect2Engine1_config_out
  );

  U1_DataCollect2Engine0_wrapper(
    fifo2_transfer12,
    fifo2_transfer13,
    fifo2_collect15_0,
    0,
    fifo_PE15_0_res_config_out,
    fifo_DataCollect2Engine1_config_out,
    fifo_DataCollect2Engine0_config_out
  );

  U1_DataCollect2Head(
    fifo_cout,
    fifo2_transfer13,
    fifo_DataCollect2Engine0_config_out
  );

}
/*
 * Function name: cin_load_ddr_read
 * Function description: This function loads cin results from off-chip DRAM.
 *                       Two modes are enabled. If the whole feature maps of the layer could fit
 *                       in the on-chip buffer, they will be loaded as a whole. Otherwise, each time,
 *                       LAYER_IN_NUM_T * (LAYER_IN_W_T + FILTER_S - 1) of data are loaded.
 */
void cin_load_ddr_read(
		bus_t0     		*global_cin,
		bus_t0        *cin_burst_buf,
		uint          LAYER_IN_H_HW,
		uint          LAYER_IN_W_HW,
		uint          LAYER_IN_NUM_T,
		uint          LAYER_IN_H_T,
		uint          LAYER_IN_W_T,
		ap_uint<8>    FILTER_S_H,
    ap_uint<8>    FILTER_S_W,
    ap_uint<8>    FILTER_D_H,
    ap_uint<8>    FILTER_D_W,
    uint          STRIDE,
		uint          cin_offset,
		uint          in_num_iter,
		uint          in_h_iter,
		uint          in_w_iter,
		uint          num_tile,
		bool          change,
		bool          max_pool,
		bool          write
){
  // cout<<"cin_load_ddr_read"<<endl;
  // Read the data based on the data layout used.
  // If filter size is 1, the data layout is ceil(N / Tn) * ceil(H / Th) * ceil(W / Tw) * Th * Tw * Tn
  // o.w. ceil(N / Tn) * H * ceil(W / Tw) * Tw * Tn
  // The data in on-chip buffer will have the data layout of Th * Tw * Tn
  if (change){
    for (int hh = 0; hh < 1; hh++){
      uint local_cin_offset = 0;
      uint global_cin_offset = cin_offset + num_tile * (LAYER_IN_W_T) * (LAYER_IN_H_T) * LAYER_IN_NUM_T;
      #ifdef DEBUG_cin
              if(write)
                cout << global_cin_offset << endl;
      #endif
      memcpy((void*)&cin_burst_buf[local_cin_offset / BUS_PACK_FACTOR0], (void*)&global_cin[global_cin_offset / BUS_PACK_FACTOR0], sizeof(data_t0) * LAYER_IN_NUM_T * (LAYER_IN_W_T) * (LAYER_IN_H_T));
    }
  } else {
    for (int hh = 0; hh < LAYER_IN_H_T + FILTER_S_H - STRIDE; hh++){
      uint h = in_h_iter + hh;
      uint burst_len = 0;
      // case if the burst len is not divisible by BUS_PACK_FACTOR0
      if (((LAYER_IN_W_T + FILTER_D_W - STRIDE) * LAYER_IN_NUM_T) % BUS_PACK_FACTOR0 == 0){
        burst_len = (LAYER_IN_W_T + FILTER_D_W - STRIDE) * LAYER_IN_NUM_T;
      } else {
        burst_len = (LAYER_IN_W_T + FILTER_D_W - STRIDE) * LAYER_IN_NUM_T + BUS_PACK_FACTOR0 - ((LAYER_IN_W_T + FILTER_D_W - STRIDE) * LAYER_IN_NUM_T) % BUS_PACK_FACTOR0;
      }
      uint local_cin_offset = hh * burst_len;
      uint global_cin_offset = in_num_iter * LAYER_IN_H_HW * LAYER_IN_W_HW + h * LAYER_IN_W_HW * LAYER_IN_NUM_T + in_w_iter * LAYER_IN_NUM_T + cin_offset;
      #ifdef DEBUG_cin
            if(write)
              cout << global_cin_offset << endl;
      #endif
      memcpy((void*)&cin_burst_buf[local_cin_offset / BUS_PACK_FACTOR0], (void*)&global_cin[global_cin_offset / BUS_PACK_FACTOR0], sizeof(data_t0) * burst_len);
    }
  }
}

/*
 * Function name: cin_load_fifo_write
 * Function description: This function writes cin data to the downstream modules.
 */
void cin_load_fifo_write(
		bus_t0                            *cin_burst_buf,
		hls::stream<CinLoadData0Type>   &fifo_cin,
		uint                              LAYER_IN_NUM_T,
		uint                              LAYER_IN_H_T,
		uint                              LAYER_IN_W_T,
		ap_uint<8>                        FILTER_S_H,
    ap_uint<8>                        FILTER_S_W,
    ap_uint<8>                        FILTER_D_H,
    ap_uint<8>                        FILTER_D_W,
    uint                              STRIDE
){
  // cout<<"cin_load_fifo_write"<<endl;
	int ii = 0;
	int hh = 0;
	int ww = 0;
	bool done = 0;
	while(!done){
	#pragma HLS PIPELINE II=1
	// Data layout of the buffer: Th * Tw * Tn
    uint burst_len = 0;
    // case if the burst len is not divisible by BUS_PACK_FACTOR0
    if (((LAYER_IN_W_T + FILTER_D_W - STRIDE) * LAYER_IN_NUM_T) % BUS_PACK_FACTOR0 == 0){
      burst_len = (LAYER_IN_W_T + FILTER_D_W - STRIDE) * LAYER_IN_NUM_T;
    } else {
      burst_len = (LAYER_IN_W_T + FILTER_D_W - STRIDE) * LAYER_IN_NUM_T + BUS_PACK_FACTOR0 - ((LAYER_IN_W_T + FILTER_D_W - STRIDE) * LAYER_IN_NUM_T) % BUS_PACK_FACTOR0;
    }
		uint local_cin_idx = hh * burst_len + ww * LAYER_IN_NUM_T + ii * DEPTH_CONV_LANE;
		uint bus_cin_idx = local_cin_idx / BUS_PACK_FACTOR0;
		uint bus_cin_offset = local_cin_idx % BUS_PACK_FACTOR0;
		bus_t0 bus_cin_data = cin_burst_buf[bus_cin_idx];
		CinLoadData0Type fifo_cin_data;
	// DATA_SEL_FACTOR = BUS_PACK_FACTOR / SIMD_LANE
	// BUS_PACK_FACTOR is the number of elements packed in one to enable memory coalescing
	// Since each entry in FIFOs will be SIMD_LANE elements of the data, we should unpack based on SIMD_LANE
	#if DATA_SEL_FACTOR0 == 1
		fifo_cin_data = bus_cin_data;
	#elif DATA_SEL_FACTOR0 == 2 
		switch(bus_cin_offset / DEPTH_CONV_LANE){
		case 0:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 1 - 1, DATA_W0 * DEPTH_CONV_LANE * 0);
			break;
		case 1:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 2 - 1, DATA_W0 * DEPTH_CONV_LANE * 1);
			break;
		}
	#elif DATA_SEL_FACTOR0 == 4
		switch(bus_cin_offset / DEPTH_CONV_LANE){
		case 0:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 1 - 1, DATA_W0 * DEPTH_CONV_LANE * 0);
			break;
		case 1:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 2 - 1, DATA_W0 * DEPTH_CONV_LANE * 1);
			break;
		case 2:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 3 - 1, DATA_W0 * DEPTH_CONV_LANE * 2);
			break;
		case 3:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 4 - 1, DATA_W0 * DEPTH_CONV_LANE * 3);
			break;
		}
	#elif DATA_SEL_FACTOR0 == 8
		switch(bus_cin_offset / DEPTH_CONV_LANE){
		case 0:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 1 - 1, DATA_W0 * DEPTH_CONV_LANE * 0);
			break;
		case 1:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 2 - 1, DATA_W0 * DEPTH_CONV_LANE * 1);
			break;
		case 2:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 3 - 1, DATA_W0 * DEPTH_CONV_LANE * 2);
			break;
		case 3:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 4 - 1, DATA_W0 * DEPTH_CONV_LANE * 3);
			break;
		case 4:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 5 - 1, DATA_W0 * DEPTH_CONV_LANE * 4);
			break;
		case 5:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 6 - 1, DATA_W0 * DEPTH_CONV_LANE * 5);
			break;
		case 6:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 7 - 1, DATA_W0 * DEPTH_CONV_LANE * 6);
			break;
		case 7:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 8 - 1, DATA_W0 * DEPTH_CONV_LANE * 7);
			break;
		}
	#elif DATA_SEL_FACTOR0 == 16
		switch(bus_cin_offset / DEPTH_CONV_LANE){
		case 0:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 1 - 1, DATA_W0 * DEPTH_CONV_LANE * 0);
			break;
		case 1:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 2 - 1, DATA_W0 * DEPTH_CONV_LANE * 1);
			break;
		case 2:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 3 - 1, DATA_W0 * DEPTH_CONV_LANE * 2);
			break;
		case 3:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 4 - 1, DATA_W0 * DEPTH_CONV_LANE * 3);
			break;
		case 4:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 5 - 1, DATA_W0 * DEPTH_CONV_LANE * 4);
			break;
		case 5:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 6 - 1, DATA_W0 * DEPTH_CONV_LANE * 5);
			break;
		case 6:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 7 - 1, DATA_W0 * DEPTH_CONV_LANE * 6);
			break;
		case 7:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 8 - 1, DATA_W0 * DEPTH_CONV_LANE * 7);
			break;
		case 8:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 9 - 1, DATA_W0 * DEPTH_CONV_LANE * 8);
			break;
		case 9:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 10 - 1, DATA_W0 * DEPTH_CONV_LANE * 9);
			break;
		case 10:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 11 - 1, DATA_W0 * DEPTH_CONV_LANE * 10);
			break;
		case 11:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 12 - 1, DATA_W0 * DEPTH_CONV_LANE * 11);
			break;
		case 12:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 13 - 1, DATA_W0 * DEPTH_CONV_LANE * 12);
			break;
		case 13:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 14 - 1, DATA_W0 * DEPTH_CONV_LANE * 13);
			break;
		case 14:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 15 - 1, DATA_W0 * DEPTH_CONV_LANE * 14);
			break;
		case 15:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 16 - 1, DATA_W0 * DEPTH_CONV_LANE * 15);
			break;
		}
	#endif     

		fifo_cin.write(fifo_cin_data);
	#ifdef DEBUG_load_change
		if(FILTER_S == 1){
			cout << " cin ";
			for (int lane = 0; lane < RELU_LANE; lane++){
	#pragma HLS UNROLL
				ap_uint<DATA_W0> u32_beta = fifo_cin_data(DATA_W0 - 1, 0);
				data_t2 a = Reinterpret<data_t2>(u32_beta);
				fifo_cin_data = fifo_cin_data >> DATA_W0;
				cout << a << " ";
			}
			cout << endl;
		}
	#endif

			// Repeat until the whole tile is read
		ww++;
		if (ww == LAYER_IN_W_T + FILTER_S_W - STRIDE){	//change here
			ww = 0;
			hh++;
			if (hh == LAYER_IN_H_T + FILTER_S_H - STRIDE){	//change here
				hh = 0;
				ii++;
				if (ii == LAYER_IN_NUM_T / DEPTH_CONV_LANE){
					ii = 0;
					done = 1;
				}
			}
		}
	}
}

/*
 * Function name: cin_load
 * Function description: This function loads and distributes cin and instructions.
 */
void cin_load(
		bus_t0                         *global_cin,
		bus_t3                         config[CONFIG_PARAMS],
		hls::stream<CinLoadData0Type>  &fifo_cin,
		hls::stream<ConfigInst>        &fifo_config_out
){
	#pragma HLS INLINE off 

		// on-chip buffer for cin data
	bus_t0 cin_burst_buf_ping[CIN_BUFF / BUS_PACK_FACTOR0];
	bus_t0 cin_burst_buf_pong[CIN_BUFF / BUS_PACK_FACTOR0];

	#if cin_load_MEM == 0
		#pragma HLS bind_storage variable=cin_burst_buf_ping type=RAM_T2P impl=BRAM
		#pragma HLS bind_storage variable=cin_burst_buf_pong type=RAM_T2P impl=BRAM  
	#elif cin_load_MEM == 1
		#pragma HLS bind_storage variable=cin_burst_buf_ping type=RAM_T2P impl=URAM
		#pragma HLS bind_storage variable=cin_burst_buf_pong type=RAM_T2P impl=URAM 
	#endif



		// layer batch
	ap_uint<32> LAYER_BATCH = config[28];

		// tiling iterators
	uint in_num_iter = 0;
	uint out_num_iter = 0;
	uint in_h_iter = 0;
	uint in_w_iter = 0;
	uint layer_iter = 0;

	uint in_num_iter_prev = 0;
	uint out_num_iter_prev = 0;
	uint in_h_iter_prev = 0;
	uint in_w_iter_prev = 0;
	uint layer_iter_prev = 0;

		// parameters
		// inst0
	ap_uint<32> LAYER_IN_NUM_HW;
	ap_uint<32> LAYER_OUT_NUM_HW;
	ap_uint<32> LAYER_IN_H_HW;
	ap_uint<32> LAYER_IN_W_HW;
	ap_uint<32> LAYER_OUT_H_HW;
	ap_uint<32> LAYER_OUT_W_HW;
  // NPD: north padding
  // SPD: south padding
  // WPD: west padding
  // EPD: east padding
  ap_uint<16> LAYER_OUT_H_NPD;
  ap_uint<16> LAYER_OUT_H_SPD;
  ap_uint<16> LAYER_OUT_W_WPD;
  ap_uint<16> LAYER_OUT_W_EPD;
		// inst1
	ap_uint<32> LAYER_IN_NUM;
	ap_uint<32> LAYER_OUT_NUM;
	ap_uint<32> LAYER_IN_H;
	ap_uint<32> LAYER_IN_W;
	ap_uint<32> LAYER_OUT_H;
	ap_uint<32> LAYER_OUT_W;
		// inst2
	ap_uint<32> CIN_OFFSET;
	ap_uint<32> WEIGHT_OFFSET;
	ap_uint<32> BIAS_OFFSET;
	ap_uint<32> COUT_OFFSET;
	ap_uint<16> FILTER_S1;
	ap_uint<8> FILTER_S2_H;
  ap_uint<8> FILTER_S2_W;
	ap_uint<32> STRIDE;
		// inst3
	ap_uint<32> LAYER_EN;
	ap_uint<16> LAYER_IN_NUM_T;
	ap_uint<16> LAYER_OUT_NUM_T;
	ap_uint<32> LAYER_IN_H_T;
	ap_uint<32> LAYER_IN_W_T;
	ap_uint<32> PREV_CIN_OFFSET;
		// inst4
	ap_uint<32> LAYER_TASK_NUM1;
	ap_uint<32> LAYER_TASK_NUM2;
	ap_uint<32> LAYER_LOCAL_ACCUM_NUM;
	ap_uint<32> LAYER_LOCAL_REG_NUM;
	ap_uint<32> LAYER_ROW_IL_FACTOR;
	ap_uint<32> LAYER_COL_IL_FACTOR;
		//inst5
	ap_uint<16> LAYER_CONV_TYPE;
	ap_uint<8> FILTER_D0_H;
  ap_uint<8> FILTER_D0_W;
	ap_uint<8> FILTER_D1_H;
  ap_uint<8> FILTER_D1_W;
	ap_uint<16> LAYER_DILATION_RATE;
	ap_uint<16> LAYER_TCONV_STRIDE;
	ap_uint<16> K_NUM;
  ap_uint<32> KH;
  ap_uint<32> KW;
  ap_uint<16> POOL_NUM;
  ap_uint<16> POOL_NUM_HW;


	ap_uint<1>  CONV_1ST_EN;
	ap_uint<1>  LOAD_PREV_CIN;

	uint LAYER_IN_NUM_T_prev;
	uint LAYER_OUT_NUM_T_prev;
	uint LAYER_IN_H_T_prev;
	uint LAYER_IN_W_T_prev;
	ap_uint<8> FILTER_S_H_prev;
  ap_uint<8> FILTER_S_W_prev;
  ap_uint<8> FILTER_D_H_prev;
  ap_uint<8> FILTER_D_W_prev;
  uint STRIDE_prev;
	

	uint task_cnt = 0;
	bool layer_start = 1;
	bool layer_start_prev = 0;
	bool done = 0;
		// We assum that cin has been pre-padded with zeros
	uint prev = 0;
	uint init = 1;
	uint num_tile = 0;
	bool write_last_cin = 0;
	bool write_last_prev_cin = 0;
	bool start_prev = 0;
	bool done_prev = 0;
	bool change_layout = 0;
	uint inter_tile = 0;
	uint channel_iter = 0;
  int count_fifo = 0;
  int count_dram = 0;
  int count = 0;
	while(!done){
			// Read and extract the parameters/config from the instructions
			// Refer to util.h or the README of the repo to find how the instructions are made
			// inst0 : The hardware sizes of each dimension (the sizes after tiling is applied)
		LAYER_IN_NUM_HW  = config[0 + layer_iter * CONFIG_PARAMS];
		LAYER_OUT_NUM_HW = config[1 + layer_iter * CONFIG_PARAMS];
		LAYER_IN_H_HW    = config[2 + layer_iter * CONFIG_PARAMS];
		LAYER_IN_W_HW    = config[3 + layer_iter * CONFIG_PARAMS];
		// LAYER_OUT_H_HW   = config[4 + layer_iter * CONFIG_PARAMS];
		// LAYER_OUT_W_HW   = config[5 + layer_iter * CONFIG_PARAMS];
    LAYER_OUT_H_NPD = config[4 + layer_iter * CONFIG_PARAMS];
    LAYER_OUT_H_SPD = config[5 + layer_iter * CONFIG_PARAMS];
    LAYER_OUT_W_WPD = config[6 + layer_iter * CONFIG_PARAMS];
    LAYER_OUT_W_EPD = config[7 + layer_iter * CONFIG_PARAMS];

			// inst1 : The actual sizes of each dimension
		LAYER_IN_NUM  = config[8 + layer_iter * CONFIG_PARAMS];
		LAYER_OUT_NUM = config[9 + layer_iter * CONFIG_PARAMS];
		LAYER_IN_H    = config[10 + layer_iter * CONFIG_PARAMS];
		LAYER_IN_W    = config[11 + layer_iter * CONFIG_PARAMS];
		LAYER_OUT_H   = config[12 + layer_iter * CONFIG_PARAMS];
		LAYER_OUT_W   = config[13 + layer_iter * CONFIG_PARAMS];

			// inst2 : The DRAM locations for reading/writing the data of this layer + Filter and Stride sizes
		CIN_OFFSET    = config[14 + layer_iter * CONFIG_PARAMS];
		WEIGHT_OFFSET = config[15 + layer_iter * CONFIG_PARAMS];
		BIAS_OFFSET   = config[16 + layer_iter * CONFIG_PARAMS];
		COUT_OFFSET   = config[17 + layer_iter * CONFIG_PARAMS];
		FILTER_S1     = config[18 + layer_iter * CONFIG_PARAMS];
		FILTER_S2_H   = config[19 + layer_iter * CONFIG_PARAMS];
    FILTER_S2_W   = config[20 + layer_iter * CONFIG_PARAMS];

		STRIDE        = config[21 + layer_iter * CONFIG_PARAMS];

			// inst3 : The enable signlas of the modules + DRAM location of the input to the previous layer + Tile sizes
		LAYER_EN        = config[22 + layer_iter * CONFIG_PARAMS]; 	// contains the enable signals for the modules
		PREV_CIN_OFFSET = config[23 + layer_iter * CONFIG_PARAMS];
		LAYER_IN_NUM_T  = config[24 + layer_iter * CONFIG_PARAMS];
		LAYER_OUT_NUM_T = config[25 + layer_iter * CONFIG_PARAMS];
		LAYER_IN_H_T    = config[26 + layer_iter * CONFIG_PARAMS];
		LAYER_IN_W_T    = config[27 + layer_iter * CONFIG_PARAMS];

		CONV_1ST_EN    = LAYER_EN[0];
		ap_uint<1>  DEPTH_CONV_EN  = LAYER_EN[1];
		ap_uint<1>  CONV_EN        = LAYER_EN[2];
		ap_uint<1>  RELU_EN        = LAYER_EN[3];
		ap_uint<1>  RELU6_EN       = LAYER_EN[4];
		ap_uint<1>  POOL_EN        = LAYER_EN[5];
		ap_uint<1>  UP_SAMPLE_EN   = LAYER_EN[6];  	// reserved
		ap_uint<1>  BIAS_EN        = LAYER_EN[7];
		ap_uint<1>  INTER_LOAD_EN  = LAYER_EN[8];
		ap_uint<1>  INTER_WRITE_EN = LAYER_EN[9];
		ap_uint<1>  BATCH_NORM_EN  = LAYER_EN[10];
		ap_uint<1>  BATCH_NORM_EN_DEPTH  = LAYER_EN[12];


		LOAD_PREV_CIN  = LAYER_EN[11];

			// inst4 : The info needed to run the systolic array
		LAYER_TASK_NUM1       = config[29 + layer_iter * CONFIG_PARAMS];
		LAYER_TASK_NUM2       = config[30 + layer_iter * CONFIG_PARAMS];
		LAYER_LOCAL_ACCUM_NUM = config[31 + layer_iter * CONFIG_PARAMS];
		LAYER_LOCAL_REG_NUM   = config[32 + layer_iter * CONFIG_PARAMS];
		LAYER_ROW_IL_FACTOR   = config[33 + layer_iter * CONFIG_PARAMS];
		LAYER_COL_IL_FACTOR   = config[34 + layer_iter * CONFIG_PARAMS];
			// inst5 : DT CONV INSTS
		LAYER_CONV_TYPE         = config[35 + layer_iter * CONFIG_PARAMS];
		FILTER_D0_H							= config[36 + layer_iter * CONFIG_PARAMS];
    FILTER_D0_W							= config[37 + layer_iter * CONFIG_PARAMS];
    FILTER_D1_H							= config[38 + layer_iter * CONFIG_PARAMS];
    FILTER_D1_W							= config[39 + layer_iter * CONFIG_PARAMS];
		LAYER_DILATION_RATE			= config[40 + layer_iter * CONFIG_PARAMS];
		LAYER_TCONV_STRIDE  		= config[41 + layer_iter * CONFIG_PARAMS];
		K_NUM               		= config[42 + layer_iter * CONFIG_PARAMS];
    KH(31,24)        		= config[43 + layer_iter * CONFIG_PARAMS];
    KH(23,16)        		= config[44 + layer_iter * CONFIG_PARAMS];
    KH(15,8)         		= config[45 + layer_iter * CONFIG_PARAMS];
    KH(7,0)          		= config[46 + layer_iter * CONFIG_PARAMS];
    KW(31,24)        		= config[47 + layer_iter * CONFIG_PARAMS];
    KW(23,16)        		= config[48 + layer_iter * CONFIG_PARAMS];
    KW(15,8)         		= config[49 + layer_iter * CONFIG_PARAMS];
    KW(7,0)          		= config[50 + layer_iter * CONFIG_PARAMS];
    POOL_NUM          	= config[51 + layer_iter * CONFIG_PARAMS];
    POOL_NUM_HW         = config[52 + layer_iter * CONFIG_PARAMS];

  // #define DEBUG_config_cin
	#ifdef DEBUG_config_cin
  
		cout << LAYER_IN_NUM_HW << " " << LAYER_OUT_NUM_HW << " " << LAYER_IN_H_HW << " " << LAYER_IN_W_HW << " " 
    << LAYER_OUT_H_NPD << " " << LAYER_OUT_H_SPD << " " << LAYER_OUT_W_WPD << " " << LAYER_OUT_W_EPD << endl;
		cout << LAYER_IN_NUM << " " << LAYER_OUT_NUM << " " << LAYER_IN_H << " " << LAYER_IN_W << " " << LAYER_OUT_H << " " << LAYER_OUT_W << endl;
		cout << CIN_OFFSET << " " << WEIGHT_OFFSET << " " << BIAS_OFFSET << " " << COUT_OFFSET << " " << FILTER_S1 << " " << FILTER_S2_H << " " << FILTER_S2_W << " " << STRIDE << endl;
		cout << LAYER_EN << " " << PREV_CIN_OFFSET << " " << LAYER_IN_NUM_T << " " << LAYER_OUT_NUM_T << " " << LAYER_IN_H_T << " " << LAYER_IN_W_T << endl;
    cout << LAYER_TASK_NUM1 << " " << LAYER_TASK_NUM2 << " " << LAYER_LOCAL_ACCUM_NUM << " " << LAYER_LOCAL_REG_NUM << " " << LAYER_ROW_IL_FACTOR << " " << LAYER_COL_IL_FACTOR << endl;
    cout << LAYER_CONV_TYPE << " " << FILTER_D0_H << " " << FILTER_D0_W << " " << FILTER_D1_H << " " << FILTER_D1_W << " " << LAYER_DILATION_RATE << " " << LAYER_TCONV_STRIDE;
    cout << " " << K_NUM << " " << KH << " " << KW << " " << POOL_NUM << " " << POOL_NUM_HW << endl;
	#endif
  
			// Pack the parameters to pass them throught the config FIFOs
		ConfigInst inst0 = (LAYER_OUT_W_EPD, LAYER_OUT_W_WPD, LAYER_OUT_H_SPD, LAYER_OUT_H_NPD, LAYER_IN_W_HW, LAYER_IN_H_HW, LAYER_OUT_NUM_HW, LAYER_IN_NUM_HW);
		ConfigInst inst1 = (LAYER_OUT_W, LAYER_OUT_H, LAYER_IN_W, LAYER_IN_H, LAYER_OUT_NUM, LAYER_IN_NUM);
		ConfigInst inst2 = (STRIDE, FILTER_S2_W, FILTER_S2_H, FILTER_S1, COUT_OFFSET, BIAS_OFFSET, WEIGHT_OFFSET, CIN_OFFSET);
		ConfigInst inst3 = (LAYER_BATCH, LAYER_IN_W_T, LAYER_IN_H_T, LAYER_OUT_NUM_T, LAYER_IN_NUM_T, PREV_CIN_OFFSET, LAYER_EN);
		ConfigInst inst4 = (LAYER_COL_IL_FACTOR, LAYER_ROW_IL_FACTOR, LAYER_LOCAL_REG_NUM, LAYER_LOCAL_ACCUM_NUM, LAYER_TASK_NUM2, LAYER_TASK_NUM1);
		ConfigInst inst5 = (POOL_NUM_HW, POOL_NUM, KW, KH, K_NUM, LAYER_TCONV_STRIDE, LAYER_DILATION_RATE, FILTER_D1_W, FILTER_D1_H, FILTER_D0_W, FILTER_D0_H, LAYER_CONV_TYPE);

			// Pass the config/instructions
		if (layer_start){
			fifo_config_out.write(inst0);
			fifo_config_out.write(inst1);
			fifo_config_out.write(inst2);
			fifo_config_out.write(inst3);
			fifo_config_out.write(inst4);
			fifo_config_out.write(inst5);
			layer_start = 0;
		}

			// offsets
		uint cin_offset = CIN_OFFSET;
		uint prev_cin_offset = PREV_CIN_OFFSET;

		if (prev == 1) start_prev = 1;
    
		// set up some configuration signals
		ap_uint<8> FILTER_S_H = ((CONV_EN == 1)? (ap_uint<8>) ((LAYER_CONV_TYPE == 1)? (ap_uint<8>) unpack(KH, 0) : (ap_uint<8>) FILTER_S2_H) : (ap_uint<8>) 1);
    ap_uint<8> FILTER_S_W = ((CONV_EN == 1)? (ap_uint<8>) ((LAYER_CONV_TYPE == 1)? (ap_uint<8>) unpack(KW, 0) : (ap_uint<8>) FILTER_S2_W) : (ap_uint<8>) 1);
    ap_uint<8> FILTER_D_H = FILTER_D0_H;
    ap_uint<8> FILTER_D_W = FILTER_D0_W;

		bool separable_conv = (DEPTH_CONV_EN == 1) && (CONV_EN == 1);
		bool conv2d = (DEPTH_CONV_EN == 0) && (CONV_EN == 1);
		bool max_pool = (DEPTH_CONV_EN == 0) && (CONV_EN == 0);
		change_layout = (((LAYER_IN_W_HW == LAYER_IN_W) || (LAYER_IN_W_HW == LAYER_IN_W_T)) && ((LAYER_IN_H_HW == LAYER_IN_H) || (LAYER_IN_H_HW == LAYER_IN_H_T))); 	// if next filter = 1 : change the layout to num_tile, Th, Tw, Tn

			// If it has to read from DRAM and not the stored data in on-chip storage
		if (INTER_LOAD_EN == 0){
			if ((max_pool && out_num_iter == 0) || separable_conv || conv2d || (UP_SAMPLE_EN && out_num_iter == 0)){
				if (task_cnt == 0){
						// first load cin
					cin_load_ddr_read(global_cin, cin_burst_buf_ping, LAYER_IN_H_HW, LAYER_IN_W_HW, LAYER_IN_NUM_T, LAYER_IN_H_T, LAYER_IN_W_T, FILTER_S_H, FILTER_S_W, FILTER_D_H, FILTER_D_W, STRIDE, cin_offset, in_num_iter, in_h_iter, in_w_iter, num_tile, change_layout, max_pool, 0);
        } else {
						// Apply double buffering for reading the data and filling the FIFO
					if (task_cnt % 2 == 1){
						cin_load_ddr_read(global_cin, cin_burst_buf_pong, LAYER_IN_H_HW, LAYER_IN_W_HW, LAYER_IN_NUM_T, LAYER_IN_H_T, LAYER_IN_W_T, FILTER_S_H, FILTER_S_W, FILTER_D_H, FILTER_D_W, STRIDE, cin_offset, in_num_iter, in_h_iter, in_w_iter, num_tile, change_layout, max_pool, 0);
            cin_load_fifo_write(cin_burst_buf_ping, fifo_cin, LAYER_IN_NUM_T_prev, LAYER_IN_H_T_prev, LAYER_IN_W_T_prev, FILTER_S_H_prev, FILTER_S_W_prev, FILTER_D_H_prev, FILTER_D_W_prev, STRIDE_prev);
          } else {
						cin_load_ddr_read(global_cin, cin_burst_buf_ping, LAYER_IN_H_HW, LAYER_IN_W_HW, LAYER_IN_NUM_T, LAYER_IN_H_T, LAYER_IN_W_T, FILTER_S_H, FILTER_S_W, FILTER_D_H, FILTER_D_W, STRIDE, cin_offset, in_num_iter, in_h_iter, in_w_iter, num_tile, change_layout, max_pool, 0);
            cin_load_fifo_write(cin_burst_buf_pong, fifo_cin, LAYER_IN_NUM_T_prev, LAYER_IN_H_T_prev, LAYER_IN_W_T_prev, FILTER_S_H_prev, FILTER_S_W_prev, FILTER_D_H_prev, FILTER_D_W_prev, STRIDE_prev);
          }
				}

				task_cnt++;
				LAYER_IN_NUM_T_prev = LAYER_IN_NUM_T;
				LAYER_OUT_NUM_T_prev = LAYER_OUT_NUM_T;
				LAYER_IN_H_T_prev = LAYER_IN_H_T;
				LAYER_IN_W_T_prev = LAYER_IN_W_T;
				FILTER_S_H_prev = FILTER_S_H;
        FILTER_S_W_prev = FILTER_S_W;
        FILTER_D_H_prev = FILTER_D_H;
        FILTER_D_W_prev = FILTER_D_W;
        STRIDE_prev = STRIDE;
			}
		}

			// Continue until all the tiles are read
			// Since each layer produces LAYER_OUT_NUM feature maps, 
			// repeat reading the tiles LAYER_OUT_NUM times
		in_num_iter += LAYER_IN_NUM_T;
		if (in_num_iter < LAYER_IN_NUM){
			channel_iter += ((LAYER_IN_W / LAYER_IN_W_T) * (LAYER_IN_H / LAYER_IN_H_T));
		} else {
			channel_iter = 0;
			inter_tile++;
		}

		num_tile = conv2d==1? channel_iter + inter_tile : num_tile + 1;
		if (in_num_iter >= LAYER_IN_NUM){
			in_num_iter = 0;
			channel_iter = 0;
			in_h_iter += LAYER_IN_H_T;
			if (in_h_iter >= LAYER_IN_H){
				in_h_iter = 0;
				in_w_iter += LAYER_IN_W_T; 	
				if (in_w_iter >= LAYER_IN_W){
					in_w_iter = 0;
					out_num_iter += LAYER_OUT_NUM_T;
					num_tile = 0;
					inter_tile = 0;
					channel_iter = 0;
					if (out_num_iter >= LAYER_OUT_NUM){
						out_num_iter = 0;
						layer_iter += 1;
						prev = 0;
						layer_start = 1;
						if (layer_iter == LAYER_BATCH){
							layer_iter = 0;
							out_num_iter = 0;
							in_h_iter = 0;
							in_w_iter = 0;
							done = 1;
						}
					}
				}
			}
		}
	}


		// Fill the FIFOs with the data for the last tile
	if (task_cnt % 2 == 1){
		cin_load_fifo_write(cin_burst_buf_ping, fifo_cin, LAYER_IN_NUM_T_prev, LAYER_IN_H_T_prev, LAYER_IN_W_T_prev, FILTER_S_H_prev, FILTER_S_W_prev, FILTER_D_H_prev, FILTER_D_W_prev, STRIDE_prev);
    count_fifo++;
	} else {
		cin_load_fifo_write(cin_burst_buf_pong, fifo_cin, LAYER_IN_NUM_T_prev, LAYER_IN_H_T_prev, LAYER_IN_W_T_prev, FILTER_S_H_prev, FILTER_S_W_prev, FILTER_D_H_prev, FILTER_D_W_prev, STRIDE_prev);
    count_fifo++;
	}
}
/*
 * Function name: weight_load_conv_weight_write
 * Function description: this function writes conv weights to conv module.
 * It has the same functionality as weight_load_depth_conv_weight_write
 */
void weight_load_conv_weight_write(
		bus_t1 weight_burst_buf2[],
		hls::stream<WeightLoadData1Type> &fifo_conv_weight,
		ConfigInst inst0,
		ConfigInst inst1,
		ConfigInst inst3,
		ap_uint<8> FILTER_H,
    ap_uint<8> FILTER_W,
		uint in_num_iter,
		uint out_num_iter
){
		// inst0
	ap_uint<32> LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
	ap_uint<32> LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
	ap_uint<32> LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
	ap_uint<32> LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
	ap_uint<32> LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
	ap_uint<32> LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
		// inst1
	ap_uint<32> LAYER_IN_NUM     = inst1(32*0+31, 32*0);
	ap_uint<32> LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
	ap_uint<32> LAYER_IN_H       = inst1(32*2+31, 32*2);
	ap_uint<32> LAYER_IN_W       = inst1(32*3+31, 32*3);
	ap_uint<32> LAYER_OUT_H      = inst1(32*4+31, 32*4);
	ap_uint<32> LAYER_OUT_W      = inst1(32*5+31, 32*5);
		// 	// inst2
		// ap_uint<32> CIN_OFFSET       = inst2(32*0+31, 32*0);
		// ap_uint<32> WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
		// ap_uint<32> BIAS_OFFSET      = inst2(32*2+31, 32*2);
		// ap_uint<32> COUT_OFFSET      = inst2(32*3+31, 32*3);
		// ap_uint<16> FILTER_S1        = inst2(32*4+15, 32*4);
		// ap_uint<16> FILTER_S2        = inst2(32*4+31, 32*4+16);
		// ap_uint<32> STRIDE           = inst2(32*5+31, 32*5);
		// inst3
	ap_uint<32> LAYER_EN         = inst3(32*0+31, 32*0);
	ap_uint<32> PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
	ap_uint<16> LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
	ap_uint<16> LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
	ap_uint<32> LAYER_IN_H_T     = inst3(32*3+31, 32*3);
	ap_uint<32> LAYER_IN_W_T     = inst3(32*4+31, 32*4);

	ap_uint<1>  CONV_1ST_EN    = LAYER_EN[0];
	ap_uint<1>  DEPTH_CONV_EN  = LAYER_EN[1];
	ap_uint<1>  CONV_EN        = LAYER_EN[2];
	ap_uint<1>  RELU_EN        = LAYER_EN[3];
	ap_uint<1>  RELU6_EN       = LAYER_EN[4];
	ap_uint<1>  POOL_EN        = LAYER_EN[5];
	ap_uint<1>  UP_SAMPLE_EN   = LAYER_EN[6];  	// reserved
	

	if (CONV_EN == 1){
		int oo = 0;
		int p = 0;
		int q = 0;
		int ii = 0;
		bool done = 0;
		while(!done){
	#pragma HLS PIPELINE II=1

	#ifdef DEBUG_weight2
			cout << "in loading weights " << DATA_SEL_FACTOR1 << " " << ii << " " << q << " " << p << " " << oo <<" " << LAYER_OUT_NUM_T << endl;
	#endif          
			uint local_w_idx = oo * FILTER_H * FILTER_W * LAYER_IN_NUM_T + p * FILTER_W * LAYER_IN_NUM_T + q * LAYER_IN_NUM_T + ii * SIMD_LANE;
			uint bus_w_idx = local_w_idx / BUS_PACK_FACTOR1;
			uint bus_w_offset = local_w_idx % BUS_PACK_FACTOR1;
				// cout<<bus_w_idx<<endl;
			bus_t1 bus_w_data = weight_burst_buf2[bus_w_idx];
				// cout<<weight_burst_buf2[bus_w_idx]<<endl;
			WeightLoadData1Type fifo_w_data;
	#if DATA_SEL_FACTOR1 == 1
			fifo_w_data = bus_w_data;
	#elif DATA_SEL_FACTOR1 == 2
			switch(bus_w_offset / SIMD_LANE){
			case 0:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 1 - 1, DATA_W1 * SIMD_LANE * 0);
				break;
			case 1:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 2 - 1, DATA_W1 * SIMD_LANE * 1);
				break;
			}
	#elif DATA_SEL_FACTOR1 == 4
			switch(bus_w_offset / SIMD_LANE){
			case 0:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 1 - 1, DATA_W1 * SIMD_LANE * 0);
				break;
			case 1:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 2 - 1, DATA_W1 * SIMD_LANE * 1);
				break;
			case 2:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 3 - 1, DATA_W1 * SIMD_LANE * 2);
				break;
			case 3:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 4 - 1, DATA_W1 * SIMD_LANE * 3);
				break;
			}
	#elif DATA_SEL_FACTOR1 == 8
			switch(bus_w_offset / SIMD_LANE){
			case 0:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 1 - 1, DATA_W1 * SIMD_LANE * 0);
				break;
			case 1:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 2 - 1, DATA_W1 * SIMD_LANE * 1);
				break;
			case 2:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 3 - 1, DATA_W1 * SIMD_LANE * 2);
				break;
			case 3:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 4 - 1, DATA_W1 * SIMD_LANE * 3);
				break;
			case 4:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 5 - 1, DATA_W1 * SIMD_LANE * 4);
				break;
			case 5:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 6 - 1, DATA_W1 * SIMD_LANE * 5);
				break;
			case 6:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 7 - 1, DATA_W1 * SIMD_LANE * 6);
				break;
			case 7:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 8 - 1, DATA_W1 * SIMD_LANE * 7);
				break;
			}
	#elif DATA_SEL_FACTOR1 == 16
			switch(bus_w_offset / SIMD_LANE){
			case 0:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 1 - 1, DATA_W1 * SIMD_LANE * 0);
				break;
			case 1:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 2 - 1, DATA_W1 * SIMD_LANE * 1);
				break;
			case 2:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 3 - 1, DATA_W1 * SIMD_LANE * 2);
				break;
			case 3:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 4 - 1, DATA_W1 * SIMD_LANE * 3);
				break;
			case 4:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 5 - 1, DATA_W1 * SIMD_LANE * 4);
				break;
			case 5:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 6 - 1, DATA_W1 * SIMD_LANE * 5);
				break;
			case 6:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 7 - 1, DATA_W1 * SIMD_LANE * 6);
				break;
			case 7:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 8 - 1, DATA_W1 * SIMD_LANE * 7);
				break;
			case 8:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 9 - 1, DATA_W1 * SIMD_LANE * 8);
				break;
			case 9:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 10 - 1, DATA_W1 * SIMD_LANE * 9);
				break;
			case 10:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 11 - 1, DATA_W1 * SIMD_LANE * 10);
				break;
			case 11:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 12 - 1, DATA_W1 * SIMD_LANE * 11);
				break;
			case 12:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 13 - 1, DATA_W1 * SIMD_LANE * 12);
				break;
			case 13:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 14 - 1, DATA_W1 * SIMD_LANE * 13);
				break;
			case 14:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 15 - 1, DATA_W1 * SIMD_LANE * 14);
				break;
			case 15:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 16 - 1, DATA_W1 * SIMD_LANE * 15);
				break;
			}
	#endif          

			fifo_conv_weight.write(fifo_w_data);

			ii++;
			if (ii == LAYER_IN_NUM_T / SIMD_LANE){
				ii = 0;
				q++;
				if (q == FILTER_W){
					q = 0;
					p++;
					if (p == FILTER_H){
						p = 0;
						oo++;
						if (oo == LAYER_OUT_NUM_T){
							oo = 0;
							done = 1;
						}
					}
				}
			}
		}
	}
}

/**
 * Function name: weight_load
 * Function description: This function loads weights and distributes them to downstream modules.
 */
void weight_load(
		bus_t1                           *global_weight,
		hls::stream<ConfigInst>          &fifo_config_in,
		hls::stream<WeightLoadData1Type> &fifo_conv_weight,
		hls::stream<ConfigInst>          &fifo_config_out
){
	#pragma HLS INLINE off 
		// on-chip buffers
	bus_t1 weight_burst_buf2[WEIGHT_BUFF / BUS_PACK_FACTOR1];
	#if weight_load_MEM == 0
		#pragma HLS bind_storage variable=weight_burst_buf2 type=RAM_T2P impl=BRAM  
	#elif weight_load_MEM == 1
		#pragma HLS bind_storage variable=weight_burst_buf2 type=RAM_T2P impl=URAM  
	#endif

		// tiling iterators
	uint in_num_iter = 0;
	uint out_num_iter = 0;
	uint in_h_iter = 0;
	uint in_w_iter = 0;
	uint layer_iter = 0;

		// Read instructions
	ConfigInst inst0 = fifo_config_in.read();
	fifo_config_out.write(inst0);
	ConfigInst inst1 = fifo_config_in.read();
	fifo_config_out.write(inst1);
	ConfigInst inst2 = fifo_config_in.read();
	fifo_config_out.write(inst2);
	ConfigInst inst3 = fifo_config_in.read();
	fifo_config_out.write(inst3);
	ConfigInst inst4 = fifo_config_in.read();
	fifo_config_out.write(inst4);
  ConfigInst inst5 = fifo_config_in.read();
	fifo_config_out.write(inst5);

	ap_uint<32> LAYER_BATCH = inst3(32*5+31, 32*5);

  // fifo_config_out.write(inst0);
	// fifo_config_out.write(inst1);
	// fifo_config_out.write(inst2);
	// fifo_config_out.write(inst3);
	// fifo_config_out.write(inst4);
  // fifo_config_out.write(inst5);

	bool layer_start = 0;
	bool done = 0;
  int counter = 0;
		// We assum that cin has been pre-padded with zeros
	while(!done){
    
		if (layer_start){
			inst0 = fifo_config_in.read();
			fifo_config_out.write(inst0);
			inst1 = fifo_config_in.read();
			fifo_config_out.write(inst1);
			inst2 = fifo_config_in.read();
			fifo_config_out.write(inst2);
			inst3 = fifo_config_in.read();
			fifo_config_out.write(inst3);
			inst4 = fifo_config_in.read();
			fifo_config_out.write(inst4);
      inst5 = fifo_config_in.read();
			fifo_config_out.write(inst5);
			layer_start = 0;
		}

			// Refer to cin_load module to understand the meaning of the instructions
			// inst0
		ap_uint<32> LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
		ap_uint<32> LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
		ap_uint<32> LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
		ap_uint<32> LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
		ap_uint<32> LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
		ap_uint<32> LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
    // cout<<"LAYER_IN_NUM_HW: "<<LAYER_IN_NUM_HW<<endl;
    // cout<<"LAYER_OUT_NUM_HW: "<<LAYER_OUT_NUM_HW<<endl;
    // cout<<"LAYER_IN_H_HW: "<<LAYER_IN_H_HW<<endl;
    // cout<<"LAYER_IN_W_HW: "<<LAYER_IN_W_HW<<endl;
    // cout<<"LAYER_OUT_H_HW: "<<LAYER_OUT_H_HW<<endl;
    // cout<<"LAYER_OUT_W_HW: "<<LAYER_OUT_W_HW<<endl;
    // exit(0);
			// inst1
		ap_uint<32> LAYER_IN_NUM     = inst1(32*0+31, 32*0);
		ap_uint<32> LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
		ap_uint<32> LAYER_IN_H       = inst1(32*2+31, 32*2);
		ap_uint<32> LAYER_IN_W       = inst1(32*3+31, 32*3);
		ap_uint<32> LAYER_OUT_H      = inst1(32*4+31, 32*4);
		ap_uint<32> LAYER_OUT_W      = inst1(32*5+31, 32*5);
			// inst2
		ap_uint<32> CIN_OFFSET       = inst2(32*0+31, 32*0);
		ap_uint<32> WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
		ap_uint<32> BIAS_OFFSET      = inst2(32*2+31, 32*2);
		ap_uint<32> COUT_OFFSET      = inst2(32*3+31, 32*3);
		ap_uint<16> FILTER_S1        = inst2(32*4+15, 32*4);
		ap_uint<8>  FILTER_S2_H      = inst2(32*4+23, 32*4+16);
    ap_uint<8>  FILTER_S2_W      = inst2(32*4+31, 32*4+24);
		ap_uint<32> STRIDE           = inst2(32*5+31, 32*5);

			// inst3
		ap_uint<32> LAYER_EN         = inst3(32*0+31, 32*0);
		ap_uint<32> PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
		ap_uint<16> LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
		ap_uint<16> LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
		ap_uint<32> LAYER_IN_H_T     = inst3(32*3+31, 32*3);
		ap_uint<32> LAYER_IN_W_T     = inst3(32*4+31, 32*4);

		ap_uint<1>  CONV_1ST_EN    = LAYER_EN[0];
		ap_uint<1>  DEPTH_CONV_EN  = LAYER_EN[1];
		ap_uint<1>  CONV_EN        = LAYER_EN[2];
		ap_uint<1>  RELU_EN        = LAYER_EN[3];
		ap_uint<1>  RELU6_EN       = LAYER_EN[4];
		ap_uint<1>  POOL_EN        = LAYER_EN[5];
		ap_uint<1>  UP_SAMPLE_EN   = LAYER_EN[6];  	// reserved
    ap_uint<1>  BIAS_EN        = LAYER_EN[7];
		ap_uint<1>  BATCH_NORM_EN  = LAYER_EN[10];
    ap_uint<1>  BATCH_NORM_EN_DEPTH  = LAYER_EN[12];
    ap_uint<1>  BIAS_1_EN             = LAYER_EN[14];
    ap_uint<1>  BATCH_NORM_1_EN       = LAYER_EN[15];

    	//	//	///inst5	//	//	//	//	//	//	///
    ap_uint<16> LAYER_CONV_TYPE   = inst5(32*0+15, 32*0);
    ap_uint<8>  FILTER_D1_H       = inst5(32*1+7, 32*1);
    ap_uint<8>  FILTER_D1_W       = inst5(32*1+15, 32*1+8);
    // cout<<"FILTER_S2_H: "<<FILTER_S2_H<<" FILTER_S2_W: "<<FILTER_S2_W<<endl;
    // cout<<"FILTER_D1_H: "<<FILTER_D1_H<<" FILTER_D1_W: "<<FILTER_D1_W<<endl;
    // exit( 0 );
			// ap_uint<32> KH_KW 			    = inst5(32*3+31, 32*3);
    // ap_uint<32> KH              = inst5(32*5+31, 32*4+16);


	#ifdef DEBUG_config
		cout << LAYER_IN_NUM_HW << " " << LAYER_OUT_NUM_HW << " " << LAYER_IN_H_HW << " " << LAYER_IN_W_HW << " " << LAYER_OUT_H_HW << " " << LAYER_OUT_W_HW << endl;
		cout << LAYER_IN_NUM << " " << LAYER_OUT_NUM << " " << LAYER_IN_H << " " << LAYER_IN_W << " " << LAYER_OUT_H << " " << LAYER_OUT_W << endl;
		cout << CIN_OFFSET << " " << WEIGHT_OFFSET << " " << BIAS_OFFSET << " " << COUT_OFFSET << " " << FILTER_S1 << " " << FILTER_S2 << " " << STRIDE << endl;
		cout << LAYER_EN << " " << PREV_CIN_OFFSET << " " << LAYER_IN_NUM_T << " " << LAYER_OUT_NUM_T << " " << LAYER_IN_H_T << " " << LAYER_IN_W_T << endl;
	#endif
	// 	#define DEBUG_weight
			// Set up some configuration signals
		bool norm_conv_en = (CONV_EN == 1 && BATCH_NORM_EN == 1);
    ap_uint<8> FILTER_H = (LAYER_CONV_TYPE == 2)? FILTER_D1_H : FILTER_S2_H;
    ap_uint<8> FILTER_W = (LAYER_CONV_TYPE == 2)? FILTER_D1_W : FILTER_S2_W;
    // cout<<FILTER_D1<<" "<<FILTER_S2<<" "<<FILTER<<endl;
			// Set the offsets if batch normalization is used (final_result = gamma * computed_result + beta)
			// Depthwise separable convolution has two sublayers of computation,
			// one is the DW sublayer and the other is the normal 1x1 conv sublayer
			// Both of these layers may need normalization
			// In DRAM, for each layer, first the BETAs are stored and then the GAMMAs are stored


			// offsets
		uint weight_offset2 = 0;
      
		weight_offset2 = WEIGHT_OFFSET;

			// Load weights of the conv module
		if (CONV_EN == 1){
			uint global_weight_offset = weight_offset2 + out_num_iter * LAYER_IN_NUM_HW *  FILTER_H * FILTER_W + in_num_iter * LAYER_OUT_NUM_T * FILTER_H * FILTER_W; 	//	//this may need a fix for TCONV
      memcpy((void*)&weight_burst_buf2[0], (void*)&global_weight[global_weight_offset / BUS_PACK_FACTOR1], sizeof(data_t1) * LAYER_OUT_NUM_T * LAYER_IN_NUM_T *  FILTER_H * FILTER_W);
		}

			// Fill the FIFOs with the loaded data
			// weight_load_depth_conv_weight_write(weight_burst_buf1, fifo_depth_conv_weight, inst0, inst1, inst2, inst3, in_num_iter, out_num_iter);

	#ifdef DEBUG_weight
		cout << "loaded weights" << endl;
	#endif

    weight_load_conv_weight_write(weight_burst_buf2, fifo_conv_weight, inst0, inst1, inst3,  FILTER_H, FILTER_W, in_num_iter, out_num_iter);

    counter++;
    
    
	#ifdef DEBUG_weight
		cout << "loaded weights" << endl;
	#endif

			// weight_load_depth_norm_write(beta_depth_burst_buf, fifo_beta_depth, inst0, inst1, inst2, inst3, in_num_iter, out_num_iter);
			// weight_load_depth_norm_write(gamma_depth_burst_buf, fifo_gamma_depth, inst0, inst1, inst2, inst3, in_num_iter, out_num_iter);
	#ifdef DEBUG_weight
		cout << in_num_iter << " in num iter " << endl;
	#endif
			// Repeat until all the tiles are read
			// Then, have to repeat reading to calculate all LAYER_OUT_NUM output feature maps
		in_num_iter += LAYER_IN_NUM_T;
		if (in_num_iter >= LAYER_IN_NUM){
			in_num_iter = 0;
			in_h_iter += LAYER_IN_H_T;
			if (in_h_iter >= LAYER_IN_H){
				in_h_iter = 0;
				in_w_iter += LAYER_IN_W_T;
				if (in_w_iter >= LAYER_IN_W){
					in_w_iter = 0;
					out_num_iter += LAYER_OUT_NUM_T;
					if (out_num_iter >= LAYER_OUT_NUM){
						out_num_iter = 0;
						layer_iter += 1;
						layer_start = 1;
						if (layer_iter == LAYER_BATCH){
							layer_iter = 0;
							done = 1;
						}
					}
				}
			}
		}
	}
}
/*
 * Function name: weight_load_bias_write
 * Function description: This function writes bias to relu module.
 */
void weight_load_bias_write(
		bus_t2 bias_burst_buf[],
		hls::stream<WeightLoadData2Type> &fifo_bias,
		ConfigInst inst0,
		ConfigInst inst1,
		ConfigInst inst2,
		ConfigInst inst3,
		uint in_num_iter,
		uint out_num_iter,
    bool relu_before_conv_flag
){
		// inst0
	ap_uint<32> LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
	ap_uint<32> LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
	ap_uint<32> LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
	ap_uint<32> LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
	ap_uint<32> LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
	ap_uint<32> LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
		// inst1
	ap_uint<32> LAYER_IN_NUM     = inst1(32*0+31, 32*0);
	ap_uint<32> LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
	ap_uint<32> LAYER_IN_H       = inst1(32*2+31, 32*2);
	ap_uint<32> LAYER_IN_W       = inst1(32*3+31, 32*3);
	ap_uint<32> LAYER_OUT_H      = inst1(32*4+31, 32*4);
	ap_uint<32> LAYER_OUT_W      = inst1(32*5+31, 32*5);
		// inst2
	ap_uint<32> CIN_OFFSET       = inst2(32*0+31, 32*0);
	ap_uint<32> WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
	ap_uint<32> BIAS_OFFSET      = inst2(32*2+31, 32*2);
	ap_uint<32> COUT_OFFSET      = inst2(32*3+31, 32*3);
	ap_uint<16> FILTER_S1        = inst2(32*4+15, 32*4);
	ap_uint<16> FILTER_S2        = inst2(32*4+31, 32*4+16);
	ap_uint<32> STRIDE           = inst2(32*5+31, 32*5);
		// inst3
	ap_uint<32> LAYER_EN         = inst3(32*0+31, 32*0);
	ap_uint<32> PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
	ap_uint<16> LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
	ap_uint<16> LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
	ap_uint<32> LAYER_IN_H_T     = inst3(32*3+31, 32*3);
	ap_uint<32> LAYER_IN_W_T     = inst3(32*4+31, 32*4);

	ap_uint<1>  CONV_1ST_EN    = LAYER_EN[0];
	ap_uint<1>  DEPTH_CONV_EN  = LAYER_EN[1];
	ap_uint<1>  CONV_EN        = LAYER_EN[2];
	ap_uint<1>  RELU_EN        = LAYER_EN[3];
	ap_uint<1>  RELU6_EN       = LAYER_EN[4];
	ap_uint<1>  POOL_EN        = LAYER_EN[5];
	ap_uint<1>  UP_SAMPLE_EN   = LAYER_EN[6];  	// reserved

  ap_uint<32> out_iter = relu_before_conv_flag? LAYER_IN_NUM_T : LAYER_OUT_NUM_T;
	if (CONV_EN == 1){
		// if (in_num_iter + LAYER_IN_NUM_T >= LAYER_IN_NUM || relu_before_conv_flag){
    	// if (in_num_iter + LAYER_IN_NUM_T <= LAYER_IN_NUM){
			bias_write_loop: for (int oo = 0; oo < out_iter / SIMD_LANE; oo++){
	#pragma HLS PIPELINE II=1
				uint local_b_idx = oo * SIMD_LANE;
				uint bus_b_idx = local_b_idx / BUS_PACK_FACTOR2;
				uint bus_b_offset = local_b_idx % BUS_PACK_FACTOR2;
				bus_t2 bus_b_data = bias_burst_buf[bus_b_idx];
				WeightLoadData2Type fifo_b_data;
				
	// DATA_SEL_FACTOR = BUS_PACK_FACTOR / SIMD_LANE
	// BUS_PACK_FACTOR is the number of elements packed in one to enable memory coalescing
	// Since each entry in FIFOs will be SIMD_LANE elements of the data, we should unpack based on SIMD_LANE
	#if DATA_SEL_FACTOR2 == 1
				fifo_b_data = bus_b_data;
	#elif DATA_SEL_FACTOR2 == 2
				switch(bus_b_offset / SIMD_LANE){
				case 0:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 1 - 1, DATA_W2 * SIMD_LANE * 0);
					break;
				case 1:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 2 - 1, DATA_W2 * SIMD_LANE * 1);
					break;
				}
	#elif DATA_SEL_FACTOR2 == 4
				switch(bus_b_offset / SIMD_LANE){
				case 0:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 1 - 1, DATA_W2 * SIMD_LANE * 0);
					break;
				case 1:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 2 - 1, DATA_W2 * SIMD_LANE * 1);
					break;
				case 2:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 3 - 1, DATA_W2 * SIMD_LANE * 2);
					break;
				case 3:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 4 - 1, DATA_W2 * SIMD_LANE * 3);
					break;
				}
	#elif DATA_SEL_FACTOR2 == 8
				switch(bus_b_offset / SIMD_LANE){
				case 0:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 1 - 1, DATA_W2 * SIMD_LANE * 0);
					break;
				case 1:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 2 - 1, DATA_W2 * SIMD_LANE * 1);
					break;
				case 2:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 3 - 1, DATA_W2 * SIMD_LANE * 2);
					break;
				case 3:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 4 - 1, DATA_W2 * SIMD_LANE * 3);
					break;
				case 4:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 5 - 1, DATA_W2 * SIMD_LANE * 4);
					break;
				case 5:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 6 - 1, DATA_W2 * SIMD_LANE * 5);
					break;
				case 6:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 7 - 1, DATA_W2 * SIMD_LANE * 6);
					break;
				case 7:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 8 - 1, DATA_W2 * SIMD_LANE * 7);
					break;
				}
	#elif DATA_SEL_FACTOR2 == 16
				switch(bus_b_offset / SIMD_LANE){
				case 0:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 1 - 1, DATA_W2 * SIMD_LANE * 0);
					break;
				case 1:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 2 - 1, DATA_W2 * SIMD_LANE * 1);
					break;
				case 2:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 3 - 1, DATA_W2 * SIMD_LANE * 2);
					break;
				case 3:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 4 - 1, DATA_W2 * SIMD_LANE * 3);
					break;
				case 4:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 5 - 1, DATA_W2 * SIMD_LANE * 4);
					break;
				case 5:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 6 - 1, DATA_W2 * SIMD_LANE * 5);
					break;
				case 6:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 7 - 1, DATA_W2 * SIMD_LANE * 6);
					break;
				case 7:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 8 - 1, DATA_W2 * SIMD_LANE * 7);
					break;
				case 8:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 9 - 1, DATA_W2 * SIMD_LANE * 8);
					break;
				case 9:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 10 - 1, DATA_W2 * SIMD_LANE * 9);
					break;
				case 10:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 11 - 1, DATA_W2 * SIMD_LANE * 10);
					break;
				case 11:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 12 - 1, DATA_W2 * SIMD_LANE * 11);
					break;
				case 12:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 13 - 1, DATA_W2 * SIMD_LANE * 12);
					break;
				case 13:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 14 - 1, DATA_W2 * SIMD_LANE * 13);
					break;
				case 14:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 15 - 1, DATA_W2 * SIMD_LANE * 14);
					break;
				case 15:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 16 - 1, DATA_W2 * SIMD_LANE * 15);
					break;
				}
	#endif       
				fifo_bias.write(fifo_b_data);
			}
		// }
	}
}

void bias_load(
		bus_t2                           *global_bias,
		hls::stream<ConfigInst>          &fifo_config_in,
		// hls::stream<ConvData0Type>       &fifo_gamma_conv_in,
		// hls::stream<ConvData0Type>       &fifo_beta_conv_in,
    hls::stream<ConvData0Type>       &fifo_gamma_conv_out,
    hls::stream<ConvData0Type>       &fifo_beta_conv_out,
		hls::stream<ConfigInst>          &fifo_config_out
){
	#pragma HLS INLINE off 
		// on-chip buffers
	//  bus_t2 beta_conv_burst_buf_in[IN_NUM_T / BUS_PACK_FACTOR2];
	//  bus_t2 gamma_conv_burst_buf_in[IN_NUM_T / BUS_PACK_FACTOR2];
   bus_t2 beta_conv_burst_buf_out[MAX_OUT_NUM_T / BUS_PACK_FACTOR2];
	 bus_t2 gamma_conv_burst_buf_out[MAX_OUT_NUM_T / BUS_PACK_FACTOR2];

	#if bias_load_MEM == 0
		#pragma HLS bind_storage variable=beta_conv_burst_buf_out type=RAM_T2P impl=BRAM
		#pragma HLS bind_storage variable=gamma_conv_burst_buf_out type=RAM_T2P impl=BRAM
	#elif bias_load_MEM == 1
		#pragma HLS bind_storage variable=beta_conv_burst_buf_out type=RAM_T2P impl=URAM
		#pragma HLS bind_storage variable=gamma_conv_burst_buf_out type=RAM_T2P impl=URAM
	#endif

		// tiling iterators
	uint in_num_iter = 0;
	uint out_num_iter = 0;
	uint in_h_iter = 0;
	uint in_w_iter = 0;
	uint layer_iter = 0;

		// Read instructions
	ConfigInst inst0 = fifo_config_in.read();
	fifo_config_out.write(inst0);
	ConfigInst inst1 = fifo_config_in.read();
	fifo_config_out.write(inst1);
	ConfigInst inst2 = fifo_config_in.read();
	fifo_config_out.write(inst2);
	ConfigInst inst3 = fifo_config_in.read();
	fifo_config_out.write(inst3);
	ConfigInst inst4 = fifo_config_in.read();
	fifo_config_out.write(inst4);
  ConfigInst inst5 = fifo_config_in.read();
	fifo_config_out.write(inst5);

	ap_uint<32> LAYER_BATCH = inst3(32*5+31, 32*5);

  	// fifo_config_out.write(inst0);
		// fifo_config_out.write(inst1);
		// fifo_config_out.write(inst2);
		// fifo_config_out.write(inst3);
		// fifo_config_out.write(inst4);
  	// fifo_config_out.write(inst5);

	bool layer_start = 0;
	bool done = 0;
  int count = 0;
		// We assum that cin has been pre-padded with zeros
	while(!done){
		if (layer_start){
			inst0 = fifo_config_in.read();
			fifo_config_out.write(inst0);
			inst1 = fifo_config_in.read();
			fifo_config_out.write(inst1);
			inst2 = fifo_config_in.read();
			fifo_config_out.write(inst2);
			inst3 = fifo_config_in.read();
			fifo_config_out.write(inst3);
			inst4 = fifo_config_in.read();
			fifo_config_out.write(inst4);
      inst5 = fifo_config_in.read();
			fifo_config_out.write(inst5);
			layer_start = 0;
		}

			// Refer to cin_load module to understand the meaning of the instructions
			// inst0
		ap_uint<32> LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
		ap_uint<32> LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
		ap_uint<32> LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
		ap_uint<32> LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
		ap_uint<32> LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
		ap_uint<32> LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
			// inst1
		ap_uint<32> LAYER_IN_NUM     = inst1(32*0+31, 32*0);
		ap_uint<32> LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
		ap_uint<32> LAYER_IN_H       = inst1(32*2+31, 32*2);
		ap_uint<32> LAYER_IN_W       = inst1(32*3+31, 32*3);
		ap_uint<32> LAYER_OUT_H      = inst1(32*4+31, 32*4);
		ap_uint<32> LAYER_OUT_W      = inst1(32*5+31, 32*5);
			// inst2
		ap_uint<32> CIN_OFFSET       = inst2(32*0+31, 32*0);
		ap_uint<32> WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
		ap_uint<32> BIAS_OFFSET      = inst2(32*2+31, 32*2);
		ap_uint<32> COUT_OFFSET      = inst2(32*3+31, 32*3);
		ap_uint<16> FILTER_S1        = inst2(32*4+15, 32*4);
		ap_uint<16> FILTER_S2        = inst2(32*4+31, 32*4+16);
		ap_uint<32> STRIDE           = inst2(32*5+31, 32*5);
			// inst3
		ap_uint<32> LAYER_EN         = inst3(32*0+31, 32*0);
		ap_uint<32> PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
		ap_uint<16> LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
		ap_uint<16> LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
		ap_uint<32> LAYER_IN_H_T     = inst3(32*3+31, 32*3);
		ap_uint<32> LAYER_IN_W_T     = inst3(32*4+31, 32*4);

		ap_uint<1>  CONV_1ST_EN           = LAYER_EN[0];
		ap_uint<1>  DEPTH_CONV_EN         = LAYER_EN[1];
		ap_uint<1>  CONV_EN               = LAYER_EN[2];
		ap_uint<1>  RELU_EN               = LAYER_EN[3];
		ap_uint<1>  RELU6_EN              = LAYER_EN[4];
		ap_uint<1>  POOL_EN               = LAYER_EN[5];
		ap_uint<1>  UP_SAMPLE_EN          = LAYER_EN[6];  	// reserved
    ap_uint<1>  BIAS_EN               = LAYER_EN[7];
		ap_uint<1>  BATCH_NORM_EN         = LAYER_EN[10];
    ap_uint<1>  BATCH_NORM_EN_DEPTH   = LAYER_EN[12];
    ap_uint<1>  RELU_1_EN             = LAYER_EN[13];
    ap_uint<1>  BIAS_1_EN             = LAYER_EN[14];
    ap_uint<1>  BATCH_NORM_1_EN       = LAYER_EN[15];

    	//	//	///inst5	//	//	//	//	//	//	///
		ap_uint<16> LAYER_CONV_TYPE = inst5(32*0+15, 32*0);


	#ifdef DEBUG_config
		cout << LAYER_IN_NUM_HW << " " << LAYER_OUT_NUM_HW << " " << LAYER_IN_H_HW << " " << LAYER_IN_W_HW << " " << LAYER_OUT_H_HW << " " << LAYER_OUT_W_HW << endl;
		cout << LAYER_IN_NUM << " " << LAYER_OUT_NUM << " " << LAYER_IN_H << " " << LAYER_IN_W << " " << LAYER_OUT_H << " " << LAYER_OUT_W << endl;
		cout << CIN_OFFSET << " " << WEIGHT_OFFSET << " " << BIAS_OFFSET << " " << COUT_OFFSET << " " << FILTER_S1 << " " << FILTER_S2 << " " << STRIDE << endl;
		cout << LAYER_EN << " " << PREV_CIN_OFFSET << " " << LAYER_IN_NUM_T << " " << LAYER_OUT_NUM_T << " " << LAYER_IN_H_T << " " << LAYER_IN_W_T << endl;
	#endif
	// 	#define DEBUG_weight
			// Set up some configuration signals
    	//	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#in bias load	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#
		// bool bias_en_1 = (CONV_EN == 1 && BIAS_1_EN == 1);
		// bool norm_conv_en_1 = (CONV_EN == 1 && BATCH_NORM_1_EN == 1);
		// uint beta_conv_offset_1 = 0;
		// uint gamma_conv_offset_1 = 0;
		// uint bias_offset_1 = BIAS_OFFSET;
    // if (norm_conv_en_1) {
		// 	beta_conv_offset_1 = bias_offset_1;
    //   if(LAYER_IN_NUM_HW<BUS_PACK_FACTOR2)
		// 	  gamma_conv_offset_1 = beta_conv_offset_1 + BUS_PACK_FACTOR2;
    //   else
    //     gamma_conv_offset_1 = beta_conv_offset_1 + LAYER_IN_NUM_HW;	//tweak
		// }
    
    	//	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#out bias load	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#
    bool bias_en = (CONV_EN == 1 && BIAS_EN == 1);
    // cout<<"bias_en: "<<bias_en<<endl;
		bool norm_conv_en = (CONV_EN == 1 && BATCH_NORM_EN == 1);  
    uint beta_conv_offset = 0;
		uint gamma_conv_offset = 0;
    uint bias_offset = BIAS_OFFSET;
    // if(LAYER_IN_NUM_HW<BUS_PACK_FACTOR2){
    //   if(BATCH_NORM_1_EN)
    //     bias_offset = BIAS_OFFSET + 2*BUS_PACK_FACTOR2;
    //   else if(BIAS_1_EN)
    //     bias_offset = BUS_PACK_FACTOR2;
    //   else
    //     bias_offset =  BIAS_OFFSET;
    // }else{
    //   if(BATCH_NORM_1_EN)
    //     bias_offset = BIAS_OFFSET + 2*LAYER_IN_NUM_HW;
    //   else if(BIAS_1_EN)
    //     bias_offset = LAYER_IN_NUM_HW;
    //   else
    //     bias_offset =  BIAS_OFFSET;
    // }

    	// cout<<beta_conv_offset<<" "<<gamma_conv_offset<<endl;

    	//	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#in bias load	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#
			// Load bias (when batch normalization is not used: final_result = computed_result + bias)
			// Set GAMMAs to zero
		// if (bias_en_1){
		// 		// Only write out in the last iteration
		// 		// if (in_num_iter + LAYER_IN_NUM_T >= LAYER_IN_NUM){
		// 		uint global_bias_offset_1 = bias_offset_1 + out_num_iter;
    //     for (int i = 0; i < OUT_NUM_T / BUS_PACK_FACTOR2; i++){
    //     	#pragma HLS pipeline
		// 		  gamma_conv_burst_buf_in[i] = 0;
    //     }
		// 		memcpy((void*)beta_conv_burst_buf_in, (void*)&global_bias[global_bias_offset_1 / BUS_PACK_FACTOR2], sizeof(data_t2) * LAYER_IN_NUM_T);
		// 		// }
		// } else{

    //   		// Load batch normalization info for conv
    //   	if (norm_conv_en_1){
    //   			// if (in_num_iter + LAYER_IN_NUM_T >= LAYER_IN_NUM){	//those may need to change
    //   			uint global_beta_offset_1 = beta_conv_offset_1 + in_num_iter;
    //   	#ifdef DEBUG_weight
    //   			cout << global_beta_offset_1 << " beta " << beta_conv_offset_1 << " " <<BUS_PACK_FACTOR2<<endl;
    //   	#endif
    //   			memcpy((void*)beta_conv_burst_buf_in, (void*)&global_bias[global_beta_offset_1 / BUS_PACK_FACTOR2], sizeof(data_t2) * LAYER_IN_NUM_T);
    //   			// }

    //   			// if (in_num_iter + LAYER_IN_NUM_T >= LAYER_IN_NUM){	//those may need to change
    //   			uint global_gamma_offset_1 = gamma_conv_offset_1 + in_num_iter;
    //   	#ifdef DEBUG_weight
    //   			cout << global_gamma_offset_1 << " gamma " << gamma_conv_offset_1 << " " <<BUS_PACK_FACTOR2<<endl;

    //   	#endif
    //   			memcpy((void*)gamma_conv_burst_buf_in, (void*)&global_bias[global_gamma_offset_1 / BUS_PACK_FACTOR2], sizeof(data_t2) * LAYER_IN_NUM_T);
    //   			// }
    //   	}
    // }
    	//	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#out bias load	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#
    if (bias_en){
				// Only write out in the last iteration
			// if (in_num_iter + LAYER_IN_NUM_T >= LAYER_IN_NUM){
				uint global_bias_offset = bias_offset + out_num_iter;
        for (int i = 0; i < MAX_OUT_NUM_T / BUS_PACK_FACTOR2; i++){
        	#pragma HLS pipeline
				  gamma_conv_burst_buf_out[i] = 0;
        }
				memcpy((void*)beta_conv_burst_buf_out, (void*)&global_bias[global_bias_offset / BUS_PACK_FACTOR2], sizeof(data_t2) * LAYER_OUT_NUM_T);
			// }
		} //else{

    //   		// Load batch normalization info for conv
    //   	if (norm_conv_en){
    //   		if (in_num_iter + LAYER_IN_NUM_T >= LAYER_IN_NUM){
    //   			uint global_bias_offset = beta_conv_offset + out_num_iter;
    //   	#ifdef DEBUG_weight
    //   			cout << global_bias_offset << " beta " << beta_conv_offset << endl;
    //   	#endif
    //   			memcpy((void*)beta_conv_burst_buf_out, (void*)&global_bias[global_bias_offset / BUS_PACK_FACTOR2], sizeof(data_t2) * LAYER_OUT_NUM_T);
    //   		}
      
    //   		if (in_num_iter + LAYER_IN_NUM_T >= LAYER_IN_NUM){
    //   			uint global_bias_offset = gamma_conv_offset + out_num_iter;
    //   	#ifdef DEBUG_weight
    //   			cout << global_bias_offset << " gamma " << gamma_conv_offset << endl;
    //   	#endif
    //   			memcpy((void*)gamma_conv_burst_buf_out, (void*)&global_bias[global_bias_offset / BUS_PACK_FACTOR2], sizeof(data_t2) * LAYER_OUT_NUM_T);
    //   		}
    //   	}
    // }
    	// exit(0);
	#ifdef DEBUG_weight
		cout << "loaded beta and gamma" << endl;
	#endif

		// Load BETAs and GAMMAs to their FIFOs
		// If there doesn't exist a batch normalization and it's a normal bias,
		// beta = bias, gamma = 0
    	//	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#in bias load	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#
    // if (bias_en_1) {
		//   weight_load_bias_write(beta_conv_burst_buf_in, fifo_beta_conv_in, inst0, inst1, inst2, inst3, in_num_iter, out_num_iter,1);
    //   weight_load_bias_write(gamma_conv_burst_buf_in, fifo_gamma_conv_in, inst0, inst1, inst2, inst3, in_num_iter, out_num_iter,1);
    // }
		// else if(norm_conv_en_1){
		// 	weight_load_bias_write(beta_conv_burst_buf_in, fifo_beta_conv_in, inst0, inst1, inst2, inst3, in_num_iter, out_num_iter,1);
		// 	weight_load_bias_write(gamma_conv_burst_buf_in, fifo_gamma_conv_in, inst0, inst1, inst2, inst3, in_num_iter, out_num_iter,1);
		// }

    	//	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#out bias load	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#	#
    if (bias_en) {
		  weight_load_bias_write(beta_conv_burst_buf_out, fifo_beta_conv_out, inst0, inst1, inst2, inst3, in_num_iter, out_num_iter, 0);
      weight_load_bias_write(gamma_conv_burst_buf_out, fifo_gamma_conv_out, inst0, inst1, inst2, inst3, in_num_iter, out_num_iter, 0);
    }
		// else if(norm_conv_en){
		// 	weight_load_bias_write(beta_conv_burst_buf_out, fifo_beta_conv_out, inst0, inst1, inst2, inst3, in_num_iter, out_num_iter, 0);
		// 	weight_load_bias_write(gamma_conv_burst_buf_out, fifo_gamma_conv_out, inst0, inst1, inst2, inst3, in_num_iter, out_num_iter, 0);
		// }

	#ifdef DEBUG_weight
		cout << in_num_iter << " in num iter " << endl;
	#endif
			// Repeat until all the tiles are read
			// Then, have to repeat reading to calculate all LAYER_OUT_NUM output feature maps
		// in_num_iter += LAYER_IN_NUM_T;
		// if (in_num_iter >= LAYER_IN_NUM){
		// 	in_num_iter = 0;
			in_h_iter += LAYER_IN_H_T;
			if (in_h_iter >= LAYER_IN_H){
				in_h_iter = 0;
				in_w_iter += LAYER_IN_W_T;
				if (in_w_iter >= LAYER_IN_W){
					in_w_iter = 0;
					out_num_iter += LAYER_OUT_NUM_T;
					if (out_num_iter >= LAYER_OUT_NUM){
						out_num_iter = 0;
						layer_iter += 1;
						layer_start = 1;
						if (layer_iter == LAYER_BATCH){
							layer_iter = 0;
							done = 1;
						}
					}
				}
			}
		// }
	}
}/**
 * Function name: conv
 * Function description: This function performs normal convoluation for any given filter size
 *                       Currently, it is configured to work with the Systolic array
 *                       Note that the code for Systolic array is not in this file, to see how to add it refer to the README
 *                       If you want to work with a simple compute engine for conv, uncomment the "kernel" module in this file
 */
void SA(
		hls::stream<WeightLoadData1Type> &fifo_weight,
    hls::stream<DepthConvData0Type>  &fifo_cin,
		hls::stream<ConfigInst>          &fifo_config_in,
		hls::stream<ConvData0Type>       &fifo_cout,
		hls::stream<ConfigInst>          &fifo_config_out
){
	#pragma HLS INLINE off 
	uint in_num_iter = 0;
	uint out_num_iter = 0;
	uint in_h_iter = 0;
	uint in_w_iter = 0;
	uint layer_iter = 0;

		// Dummpy first read
		// The previous module (currently relu6) should write the instructions twice
	ConfigInst inst0 = fifo_config_in.read();
	ConfigInst inst1 = fifo_config_in.read();
	ConfigInst inst2 = fifo_config_in.read();
	ConfigInst inst3 = fifo_config_in.read();
	ConfigInst inst4 = fifo_config_in.read();
	ConfigInst inst5 = fifo_config_in.read();

	ap_uint<32> LAYER_BATCH = inst3(32*5+31, 32*5);
		// Refer to cin_load module to understand the meaning of the instructions
		// inst0
	ap_uint<32> LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
	ap_uint<32> LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
	ap_uint<32> LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
	ap_uint<32> LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
	ap_uint<32> LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
	ap_uint<32> LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
		// inst1
	ap_uint<32> LAYER_IN_NUM     = inst1(32*0+31, 32*0);
	ap_uint<32> LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
	ap_uint<32> LAYER_IN_H       = inst1(32*2+31, 32*2);
	ap_uint<32> LAYER_IN_W       = inst1(32*3+31, 32*3);
	ap_uint<32> LAYER_OUT_H      = inst1(32*4+31, 32*4);
	ap_uint<32> LAYER_OUT_W      = inst1(32*5+31, 32*5);
		// inst2
	ap_uint<32> CIN_OFFSET       = inst2(32*0+31, 32*0);
	ap_uint<32> WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
	ap_uint<32> BIAS_OFFSET      = inst2(32*2+31, 32*2);
	ap_uint<32> COUT_OFFSET      = inst2(32*3+31, 32*3);
	ap_uint<16> FILTER_S1        = inst2(32*4+15, 32*4);
	ap_uint<16> FILTER_S2        = inst2(32*4+31, 32*4+16);
	ap_uint<32> STRIDE           = inst2(32*5+31, 32*5);
		// inst3
	ap_uint<32> LAYER_EN         = inst3(32*0+31, 32*0);
	ap_uint<32> PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
	ap_uint<16> LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
	ap_uint<16> LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
	ap_uint<32> LAYER_IN_H_T     = inst3(32*3+31, 32*3);
	ap_uint<32> LAYER_IN_W_T     = inst3(32*4+31, 32*4);

	ap_uint<1>  CONV_1ST_EN    = LAYER_EN[0];
	ap_uint<1>  DEPTH_CONV_EN  = LAYER_EN[1];
	ap_uint<1>  CONV_EN        = LAYER_EN[2];
	ap_uint<1>  RELU_EN        = LAYER_EN[3];
	ap_uint<1>  RELU6_EN       = LAYER_EN[4];
	ap_uint<1>  POOL_EN        = LAYER_EN[5];
	ap_uint<1>  UP_SAMPLE_EN   = LAYER_EN[6];  	// reserved
	ap_uint<1>  BIAS_EN        = LAYER_EN[7];
	ap_uint<1>  BATCH_NORM_EN  = LAYER_EN[10];

	uint FILTER_S = (CONV_EN == 1)? (uint)FILTER_S2: 1;
	bool separable_conv = (DEPTH_CONV_EN == 1) && (CONV_EN == 1);
	bool conv2d = (DEPTH_CONV_EN == 0) && (CONV_EN == 1);
	bool max_pool = (DEPTH_CONV_EN == 0) && (CONV_EN == 0);

	bool test = (CONV_EN == 0);
	switch(CONV_EN){
	case 0:
			// bypass
		for (int layer_iter = 0; layer_iter < LAYER_BATCH; layer_iter++){
				// Read instructions
	#ifdef DEBUG_config_conv
			cout << LAYER_IN_NUM_HW << " " << LAYER_OUT_NUM_HW << " " << LAYER_IN_H_HW << " " << LAYER_IN_W_HW << " " << LAYER_OUT_H_HW << " " << LAYER_OUT_W_HW << endl;
			cout << LAYER_IN_NUM << " " << LAYER_OUT_NUM << " " << LAYER_IN_H << " " << LAYER_IN_W << " " << LAYER_OUT_H << " " << LAYER_OUT_W << endl;
			cout << CIN_OFFSET << " " << WEIGHT_OFFSET << " " << BIAS_OFFSET << " " << COUT_OFFSET << " " << FILTER_S1 << " " << FILTER_S2 << " " << STRIDE << endl;
			cout << LAYER_EN << " " << PREV_CIN_OFFSET << " " << LAYER_IN_NUM_T << " " << LAYER_OUT_NUM_T << " " << LAYER_IN_H_T << " " << LAYER_IN_W_T << endl;
	#endif
			inst0 = fifo_config_in.read();
			fifo_config_out.write(inst0);
			inst1 = fifo_config_in.read();
			fifo_config_out.write(inst1);
			inst2 = fifo_config_in.read();
			fifo_config_out.write(inst2);
			inst3 = fifo_config_in.read();
			fifo_config_out.write(inst3);
			inst4 = fifo_config_in.read();
			fifo_config_out.write(inst4);
			inst5 = fifo_config_in.read();
			fifo_config_out.write(inst5);
				// Refer to cin_load module to understand the meaning of the instructions
				// inst0
			LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
			LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
			LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
			LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
			LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
			LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
				// inst1
			LAYER_IN_NUM     = inst1(32*0+31, 32*0);
			LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
			LAYER_IN_H       = inst1(32*2+31, 32*2);
			LAYER_IN_W       = inst1(32*3+31, 32*3);
			LAYER_OUT_H      = inst1(32*4+31, 32*4);
			LAYER_OUT_W      = inst1(32*5+31, 32*5);
				// inst2
			CIN_OFFSET       = inst2(32*0+31, 32*0);
			WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
			BIAS_OFFSET      = inst2(32*2+31, 32*2);
			COUT_OFFSET      = inst2(32*3+31, 32*3);
			FILTER_S1        = inst2(32*4+15, 32*4);
			FILTER_S2        = inst2(32*4+31, 32*4+16);
			STRIDE           = inst2(32*5+31, 32*5);
				// inst3
			LAYER_EN         = inst3(32*0+31, 32*0);
			PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
			LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
			LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
			LAYER_IN_H_T     = inst3(32*3+31, 32*3);
			LAYER_IN_W_T     = inst3(32*4+31, 32*4);

			CONV_1ST_EN      = LAYER_EN[0];
			DEPTH_CONV_EN    = LAYER_EN[1];
			CONV_EN          = LAYER_EN[2];
			RELU_EN          = LAYER_EN[3];
			RELU6_EN         = LAYER_EN[4];
			POOL_EN          = LAYER_EN[5];
			UP_SAMPLE_EN     = LAYER_EN[6]; 	// reserved

				// Set up some configuration signals
			FILTER_S = (CONV_EN == 1)? (uint)FILTER_S2: 1;
			separable_conv = (DEPTH_CONV_EN == 1) && (CONV_EN == 1);
			conv2d = (DEPTH_CONV_EN == 0) && (CONV_EN == 1);
			max_pool = (DEPTH_CONV_EN == 0) && (CONV_EN == 0);

			int in_h_iter = 0;
			int in_w_iter = 0;
			int out_num_iter = 0;
			int in_num_iter = 0;
			bool done1 = 0;
			while(!done1){
				if ((max_pool && out_num_iter == 0) || (UP_SAMPLE_EN && out_num_iter == 0)){
					int o = 0;
					int h = 0;
					int w = 0;
					bool done2 = 0;
					while(!done2){
	#pragma HLS PIPELINE II=1
						DepthConvData0Type tmp = fifo_cin.read();
						fifo_cout.write(tmp);
						
							// Repeat until the whole tile is read
						w++;
						if (w == LAYER_IN_W_T + FILTER_S - 1){
							w = 0;
							h++;
							if (h == LAYER_IN_H_T + FILTER_S - 1){
								h = 0;
								o++;
								if (o == LAYER_IN_NUM_T / CONV_LANE){
									o = 0;
									done2 = 1;
								}
							}
						}
					}
				}
	#ifdef DEBUG_config_conv
				cout << in_num_iter << " " << out_num_iter << " " << in_w_iter << " " << in_h_iter << endl;
	#endif
					// Repeat until all the tiles are read
					// Must repeat the computation until LAYER_OUT_NUM output feature maps are generated
				in_num_iter += LAYER_IN_NUM_T;
				if (in_num_iter >= LAYER_IN_NUM){
					in_num_iter = 0;
					out_num_iter += LAYER_OUT_NUM_T;
					if (out_num_iter >= LAYER_OUT_NUM){
						out_num_iter = 0;
						in_w_iter += LAYER_IN_W_T;
						if (in_w_iter >= LAYER_IN_W){
							in_w_iter = 0;
							in_h_iter += LAYER_IN_H_T;
							if (in_h_iter >= LAYER_IN_H){
								in_h_iter = 0;
								done1 = 1;
							}
						}
					}
				}

			}
		}
		break;
		// compute
	case 1:
	#ifdef DEBUG_kernel
		cout << "before kernel" << endl;
	#endif
			// int count = 0;
			// while(!fifo_cin.empty()){
			// 	DepthConvData0Type item = fifo_cin.read();
			// 				// float num[8];
			// 				// 	// printf("output: ");
			// 				// for(int i=0; i<8; i++){
			// 				// 	num[i] = Reinterpret<float>((ap_uint<32>)item.data((i+1)*32-1, 32*i));
			// 				// 	printf("%10f\t", num[i]);
			// 				// }
			// 				// printf("\n");
			// 	count++;
			// }
			// cout<<"cins: "<<count<<endl;
			// count = 0;
			// while(!fifo_weight.empty()){
			// 	DepthConvData0Type item = fifo_weight.read();
			// 				// float num[8];
			// 				// 	// printf("output: ");
			// 				// for(int i=0; i<8; i++){
			// 				// 	num[i] = Reinterpret<float>((ap_uint<32>)item.data((i+1)*32-1, 32*i));
			// 				// 	printf("%10f\t", num[i]);
			// 				// }
			// 				// printf("\n");
			// 	count++;
			// }
			// cout<<"weights: "<<count<<endl;
			// return;
			// Calls systolic array
			// Refer to README to see how to add the systolic array
			// You can replace it with your own implementations
			// If you want to check with a simple implementation, uncomment the "kernel" module in this file
    
		kernel(fifo_cin, fifo_weight, fifo_cout, fifo_config_in, fifo_config_out);
	#ifdef DEBUG_kernel
		
	#endif
		break;
	}
}void act_and_bn(
		hls::stream<ConvData0Type>        &fifo_gamma_conv,
		hls::stream<ConvData0Type>        &fifo_beta_conv,
		hls::stream<ConvData0Type>        &fifo_cin,
		hls::stream<ConfigInst>           &fifo_config_in,
		hls::stream<ReluData0Type>        &fifo_cout,
		hls::stream<ConfigInst>           &fifo_config_out
){
	#pragma HLS INLINE off
		// tiling iterators
	uint in_num_iter = 0;
	uint out_num_iter = 0;
	uint in_h_iter = 0;
	uint in_w_iter = 0;
	uint layer_iter = 0;

		// Read instructions
	ConfigInst inst0 = fifo_config_in.read();
	fifo_config_out.write(inst0);
	ConfigInst inst1 = fifo_config_in.read();
	fifo_config_out.write(inst1);
	ConfigInst inst2 = fifo_config_in.read();
	fifo_config_out.write(inst2);
	ConfigInst inst3 = fifo_config_in.read();
	fifo_config_out.write(inst3);
	ConfigInst inst4 = fifo_config_in.read();
	fifo_config_out.write(inst4);
  ConfigInst inst5 = fifo_config_in.read();
	fifo_config_out.write(inst5);

  	// fifo_config_out.write(inst0);
		// fifo_config_out.write(inst1);
		// fifo_config_out.write(inst2);
		// fifo_config_out.write(inst3);
		// fifo_config_out.write(inst4);
  	// fifo_config_out.write(inst5);

	ap_uint<32> LAYER_BATCH = inst3(32*5+31, 32*5);
	bool layer_start = 0;
	bool done = 0;
	while(!done){

		if (layer_start){
			inst0 = fifo_config_in.read();
			fifo_config_out.write(inst0);
			inst1 = fifo_config_in.read();
			fifo_config_out.write(inst1);
			inst2 = fifo_config_in.read();
			fifo_config_out.write(inst2);
			inst3 = fifo_config_in.read();
			fifo_config_out.write(inst3);
			inst4 = fifo_config_in.read();
			fifo_config_out.write(inst4);
      inst5 = fifo_config_in.read();
			fifo_config_out.write(inst5);

			layer_start = 0;
		}

			// Refer to cin_load module to understand the meaning of the instructions
			// inst0
		ap_uint<32> LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
		ap_uint<32> LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
		ap_uint<32> LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
		ap_uint<32> LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
		ap_uint<32> LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
		ap_uint<32> LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
			// inst1
		ap_uint<32> LAYER_IN_NUM     = inst1(32*0+31, 32*0);
		ap_uint<32> LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
		ap_uint<32> LAYER_IN_H       = inst1(32*2+31, 32*2);
		ap_uint<32> LAYER_IN_W       = inst1(32*3+31, 32*3);
		ap_uint<32> LAYER_OUT_H      = inst1(32*4+31, 32*4);
		ap_uint<32> LAYER_OUT_W      = inst1(32*5+31, 32*5);
			// inst2
		ap_uint<32> CIN_OFFSET       = inst2(32*0+31, 32*0);
		ap_uint<32> WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
		ap_uint<32> BIAS_OFFSET      = inst2(32*2+31, 32*2);
		ap_uint<32> COUT_OFFSET      = inst2(32*3+31, 32*3);
		ap_uint<16> FILTER_S1        = inst2(32*4+15, 32*4);
		ap_uint<16> FILTER_S2        = inst2(32*4+31, 32*4+16);
		ap_uint<32> STRIDE           = inst2(32*5+31, 32*5);
			// inst3
		ap_uint<32> LAYER_EN         = inst3(32*0+31, 32*0);
		ap_uint<32> PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
		ap_uint<16> LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
		ap_uint<16> LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
		ap_uint<32> LAYER_IN_H_T     = inst3(32*3+31, 32*3);
		ap_uint<32> LAYER_IN_W_T     = inst3(32*4+31, 32*4);

    ap_uint<16> LAYER_CONV_TYPE 		= inst5(32*0+15, 32*0);
    ap_uint<16> LAYER_TCONV_STRIDE 	= inst5(32*2+15, 32*2);

		ap_uint<1>  CONV_1ST_EN    = LAYER_EN[0];
		ap_uint<1>  DEPTH_CONV_EN  = LAYER_EN[1];
		ap_uint<1>  CONV_EN        = LAYER_EN[2];
		ap_uint<1>  RELU_EN        = LAYER_EN[3];
		ap_uint<1>  RELU6_EN       = LAYER_EN[4];
		ap_uint<1>  POOL_EN        = LAYER_EN[5];
		ap_uint<1>  UP_SAMPLE_EN   = LAYER_EN[6];  	// reserved
		ap_uint<1>  BIAS_EN        = LAYER_EN[7];
		ap_uint<1>  BATCH_NORM_EN  = LAYER_EN[10];
		ap_uint<1>  LOAD_PREV_CIN  = LAYER_EN[11];
    ap_uint<1>  BATCH_NORM_EN_DEPTH  = LAYER_EN[12];

		data_t2 beta_buf[MAX_OUT_NUM_T / RELU_LANE][RELU_LANE];
		data_t2 gamma_buf[MAX_OUT_NUM_T / RELU_LANE][RELU_LANE]; 
	#pragma HLS ARRAY_PARTITION variable=beta_buf dim=2 complete 
	#pragma HLS ARRAY_PARTITION variable=gamma_buf dim=2 complete 
		data_t0 cin_buf[RELU_LANE];
		ap_uint<DATA_W0> cout_buf[RELU_LANE];
	#pragma HLS ARRAY_PARTITION variable=cin_buf complete
	#pragma HLS ARRAY_PARTITION variable=cout_buf complete

			// Set up some configuration signals
		uint FILTER_S = 1;
		bool separable_conv = (DEPTH_CONV_EN == 1) && (CONV_EN == 1);
		bool conv2d = (DEPTH_CONV_EN == 0) && (CONV_EN == 1);
		bool max_pool = (DEPTH_CONV_EN == 0) && (CONV_EN == 0);
		uint stride = (max_pool == 1)? 1 : (uint)STRIDE;
		bool en = RELU_EN || BIAS_EN || RELU6_EN || BATCH_NORM_EN;
    bool norm_conv_en = (CONV_EN == 1 && BATCH_NORM_EN == 1);
    bool bias_en = (CONV_EN == 1 && BIAS_EN == 1);
    uint upsample_factor = (UP_SAMPLE_EN == 1)? 2 : 1;

    #ifdef DEBUG
      uint relu_cout_cnt = 0;
      ofstream relu_data;
      relu_data.open("relu_patch.dat", ios::app);
    #endif
		switch(en){
		case 0:{
				// bypass this module
			// if (((max_pool || UP_SAMPLE_EN) && out_num_iter == 0) || (!max_pool && (in_num_iter + LAYER_IN_NUM_T >= LAYER_IN_NUM))){
				int o = 0;
				int h = 0;
				int w = 0;
				bool done1 = 0;

				int w_bound = (LAYER_IN_W_T / stride + FILTER_S - 1)*LAYER_TCONV_STRIDE*upsample_factor;
				int h_bound = (LAYER_IN_H_T / stride + FILTER_S - 1)*LAYER_TCONV_STRIDE*upsample_factor;
				while(!done1){
	#pragma HLS PIPELINE II=1
					ConvData0Type tmp = fifo_cin.read();
					fifo_cout.write(tmp);

						// If after conv module neither exists bias nor batch normalization layer, there is no data to read from these FIFOs
					if (norm_conv_en == 1){
					  ConvData0Type beta_conv = fifo_beta_conv.read();
					  ConvData0Type gamma_conv = fifo_gamma_conv.read();
          }
						// Repeat until the whole tile is read
					w++;
					if (w == w_bound){
						w = 0;
						h++;
						if (h == h_bound){
							h = 0;
							o++;
							if (o == LAYER_OUT_NUM_T / RELU_LANE){
								o = 0;
								done1 = 1;
							}
						}
					}
				}
			}
			break;
			// compute
		case 1:
		{
			// if (in_num_iter + LAYER_IN_NUM_T >= LAYER_IN_NUM){
        // cout<<"RELU_EN: "<<RELU_EN<<endl;
					// Read beta and gamma for the batch normalization
					// If there doesn't exist a batch normalization and it's a normal bias,
					// beta = bias, gamma = 0
				for (int o = 0; o < LAYER_OUT_NUM_T / RELU_LANE; o++){
	#pragma HLS PIPELINE II=1
					ConvData0Type beta = fifo_beta_conv.read();
					ConvData0Type gamma = fifo_gamma_conv.read();
					for (int lane = 0; lane < RELU_LANE; lane++){
	#pragma HLS UNROLL
						ap_uint<DATA_W0> u32_beta = beta(DATA_W0 - 1, 0);
						beta_buf[o][lane] = Reinterpret<data_t2>(u32_beta);
						beta = beta >> DATA_W0;
					}

					for (int lane = 0; lane < RELU_LANE; lane++){
	#pragma HLS UNROLL
						ap_uint<DATA_W0> u32_gamma = gamma(DATA_W0 - 1, 0);
						gamma_buf[o][lane] = Reinterpret<data_t2>(u32_gamma);
						gamma = gamma >> DATA_W0;
					}
				}

				int o = 0;
				int h = 0;
				int w = 0;
				bool done2 = 0;

				int w_bound = (LAYER_IN_W_T / STRIDE)*LAYER_TCONV_STRIDE;
				int h_bound = (LAYER_IN_H_T / STRIDE)*LAYER_TCONV_STRIDE;

				while(!done2){
	#pragma HLS PIPELINE II=1
					ConvData0Type cin_tmp = fifo_cin.read();
						// Unpack data according to SIMD_LANE
					for (int lane = 0; lane < RELU_LANE; lane++){
	#pragma HLS UNROLL
						ap_uint<DATA_W0> u32_tmp = cin_tmp(DATA_W0 - 1, 0);
						cin_buf[lane] = Reinterpret<data_t0>(u32_tmp);
						cin_tmp = cin_tmp >> DATA_W0;
					}
						// Apply beta and gamma + ReLU(6)
					for (int lane = 0; lane < RELU_LANE; lane++){
	#pragma HLS UNROLL    
						data_t0 cin_data = cin_buf[lane];
						data_t0 tmp = cin_data;
            // if (BATCH_NORM_EN){
            //   tmp = tmp * (data_t0) 0.9995003746640602;
            // }
            if (RELU_EN){
              // cout<<tmp<<" + "<<beta_buf[o][lane]<<" = "<<tmp + beta_buf[o][lane]<<endl;
              tmp = tmp + beta_buf[o][lane];
              tmp = max(tmp, (data_t0) 0);
            }
						// if (bias_en || BATCH_NORM_EN)
						// 	tmp = cin_data + beta_buf[o][lane];
						// 	//else if(BATCH_NORM_EN)
						// 	//	tmp = gamma_buf[o][lane]*tmp + beta_buf[o][lane];
						// if (RELU6_EN && !BATCH_NORM_EN_DEPTH)
						// 	tmp = min(max(0, tmp), 6);
						// else if (RELU_EN && LAYER_CONV_TYPE!=1)
						// 	tmp = max(tmp*0.001, tmp);
						cout_buf[lane] = Reinterpret<ap_uint<DATA_W0> >(tmp);
	#ifdef DEBUG_relu
						if(out_num_iter == 0 && in_h_iter == 0){
							cout << cin_data << " " << tmp << endl;
						}
	#endif
	#ifdef DEBUG_conv_relu
						if(DEPTH_CONV_EN && lane == 0)
							cout << "in: " << cin_buf[lane] << " gamma: " << gamma_buf[o][lane] << " beta: " << beta_buf[o][lane] << " norm: " << gamma_buf[o][lane]*cin_buf[lane] + beta_buf[o][lane] << " tmp: " << tmp << endl;

	#endif
					}
						// write out
						// Pack according to SIMD_LANE
					ReluData0Type wide_tmp = (
	#if RELU_LANE == 32
							cout_buf[31], cout_buf[30], cout_buf[29], cout_buf[28], cout_buf[27], cout_buf[26], cout_buf[25], cout_buf[24],
							cout_buf[23], cout_buf[22], cout_buf[21], cout_buf[20], cout_buf[19], cout_buf[18], cout_buf[17], cout_buf[16],
							cout_buf[15], cout_buf[14], cout_buf[13], cout_buf[12], cout_buf[11], cout_buf[10], cout_buf[9], cout_buf[8],
							cout_buf[7], cout_buf[6], cout_buf[5], cout_buf[4], cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
	#elif RELU_LANE == 16
							cout_buf[15], cout_buf[14], cout_buf[13], cout_buf[12],
							cout_buf[11], cout_buf[10], cout_buf[9], cout_buf[8],
							cout_buf[7], cout_buf[6], cout_buf[5], cout_buf[4],
							cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
	#elif RELU_LANE == 8
																			cout_buf[7], cout_buf[6], cout_buf[5], cout_buf[4],
																			cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
	#elif RELU_LANE == 4
																															cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
	#elif RELU_LANE == 2              
																																											cout_buf[1], cout_buf[0]
	#elif RELU_LANE == 1
																																																  cout_buf[0]
	#endif                
					);
					fifo_cout.write(wide_tmp);

						// Repeat until the whole tile is read
					w++;
					if (w == w_bound){
						w = 0;
						h++;
						if (h == h_bound){
							h = 0;
							o++;
							if (o == LAYER_OUT_NUM_T / RELU_LANE){
								o = 0;
								done2 = 1;
							}
						}
					}
				}
			}
			break;
		// }
		}
			// Repeat until all the tiles are read
			// Must repeat the computation until LAYER_OUT_NUM output feature maps are generated
		// in_num_iter += LAYER_IN_NUM_T;
		// if (in_num_iter >= LAYER_IN_NUM){
		// 	in_num_iter = 0;
			in_h_iter += LAYER_IN_H_T;
			if (in_h_iter >= LAYER_IN_H){
				in_h_iter = 0;
				in_w_iter += LAYER_IN_W_T;
				if (in_w_iter >= LAYER_IN_W){
					in_w_iter = 0;
					out_num_iter += LAYER_OUT_NUM_T;
					if (out_num_iter >= LAYER_OUT_NUM){
						out_num_iter = 0;
						layer_iter += 1;
						layer_start = 1;
						if (layer_iter == LAYER_BATCH){
							layer_iter = 0;
							done = 1;
						}
					}
				}
			}
		// }
	}
}/**
 * Function name: pool
 * Function description: This functions performs max-pooling operation.
 */
void pool(
		hls::stream<ReluData0Type>  &fifo_cin,
		hls::stream<ConfigInst>     &fifo_config_in,
		hls::stream<PoolData0Type>  &fifo_cout,
		hls::stream<ConfigInst>     &fifo_config_out
){
  uint num_iter = 0;
	uint in_h_iter = 0;
	uint in_w_iter = 0;
	uint layer_iter = 0;

		// Read instructions
	ConfigInst inst0 = fifo_config_in.read();
	fifo_config_out.write(inst0);
	ConfigInst inst1 = fifo_config_in.read();
	fifo_config_out.write(inst1);
	ConfigInst inst2 = fifo_config_in.read();
	fifo_config_out.write(inst2);
	ConfigInst inst3 = fifo_config_in.read();
	fifo_config_out.write(inst3);
	ConfigInst inst4 = fifo_config_in.read();
	fifo_config_out.write(inst4);
  ConfigInst inst5 = fifo_config_in.read();
	fifo_config_out.write(inst5);

	ap_uint<32> LAYER_BATCH = inst3(32*5+31, 32*5);

	bool layer_start = 0;
	bool done = 0;
	while(!done){

		if (layer_start){
			inst0 = fifo_config_in.read();
			fifo_config_out.write(inst0);
			inst1 = fifo_config_in.read();
			fifo_config_out.write(inst1);
			inst2 = fifo_config_in.read();
			fifo_config_out.write(inst2);
			inst3 = fifo_config_in.read();
			fifo_config_out.write(inst3);
			inst4 = fifo_config_in.read();
			fifo_config_out.write(inst4);
      inst5 = fifo_config_in.read();
	    fifo_config_out.write(inst5);

			layer_start = 0;
		}
		
			// Refer to cin_load module to understand the meaning of the instructions
			// inst0
		ap_uint<32> LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
		ap_uint<32> LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
		ap_uint<32> LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
		ap_uint<32> LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
		ap_uint<32> LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
		ap_uint<32> LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
			// inst1
		ap_uint<32> LAYER_IN_NUM     = inst1(32*0+31, 32*0);
		ap_uint<32> LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
		ap_uint<32> LAYER_IN_H       = inst1(32*2+31, 32*2);
		ap_uint<32> LAYER_IN_W       = inst1(32*3+31, 32*3);
		ap_uint<32> LAYER_OUT_H      = inst1(32*4+31, 32*4);
		ap_uint<32> LAYER_OUT_W      = inst1(32*5+31, 32*5);
			// inst2
		ap_uint<32> CIN_OFFSET       = inst2(32*0+31, 32*0);
		ap_uint<32> WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
		ap_uint<32> BIAS_OFFSET      = inst2(32*2+31, 32*2);
		ap_uint<32> COUT_OFFSET      = inst2(32*3+31, 32*3);
		ap_uint<16> FILTER_S1        = inst2(32*4+15, 32*4);
		ap_uint<16> FILTER_S2        = inst2(32*4+31, 32*4+16);
		ap_uint<32> STRIDE           = inst2(32*5+31, 32*5);
			// inst3
		ap_uint<32> LAYER_EN         = inst3(32*0+31, 32*0);
		ap_uint<32> PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
		ap_uint<16> LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
		ap_uint<16> LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
		ap_uint<32> LAYER_IN_H_T     = inst3(32*3+31, 32*3);
		ap_uint<32> LAYER_IN_W_T     = inst3(32*4+31, 32*4);

    ap_uint<32> LAYER_TCONV_STRIDE 	= inst5(32*2+15, 32*2);
    ap_uint<16> POOL_NUM 					  = inst5(32*5+16, 32*5);
    ap_uint<16> POOL_NUM_HW 				= inst5(32*5+31, 32*5+16);

		ap_uint<1>  CONV_1ST_EN    = LAYER_EN[0];
		ap_uint<1>  DEPTH_CONV_EN  = LAYER_EN[1];
		ap_uint<1>  CONV_EN        = LAYER_EN[2];
		ap_uint<1>  RELU_EN        = LAYER_EN[3];
		ap_uint<1>  RELU6_EN       = LAYER_EN[4];
		ap_uint<1>  POOL_EN        = LAYER_EN[5];
		ap_uint<1>  UP_SAMPLE_EN   = LAYER_EN[6];  	// reserved
		ap_uint<1>  BIAS_EN        = LAYER_EN[7];
		ap_uint<1>  LOAD_PREV_CIN  = LAYER_EN[11];
		ap_uint<1>  ADD_EN          = LAYER_EN[17];
    LAYER_IN_W = ADD_EN && POOL_EN? (ap_uint<32>) (LAYER_IN_W<<1) :  (ap_uint<32>) LAYER_IN_W;
    LAYER_IN_H = ADD_EN && POOL_EN? (ap_uint<32>) (LAYER_IN_H<<1) :  (ap_uint<32>) LAYER_IN_H;
    LAYER_IN_W_T = ADD_EN && POOL_EN? (ap_uint<32>) (LAYER_IN_W_T<<1) :  (ap_uint<32>) LAYER_IN_W_T;
    LAYER_IN_H_T = ADD_EN && POOL_EN? (ap_uint<32>) (LAYER_IN_H_T<<1) :  (ap_uint<32>) LAYER_IN_H_T;
    ap_uint<32> LAYER_NUM_T = LAYER_OUT_NUM_T;
    STRIDE = POOL_EN? (ap_uint<32>) 2 :  (ap_uint<32>) 1;
			// Set up some configuration signals
		bool en = POOL_EN;
		bool separable_conv = (DEPTH_CONV_EN == 1) && (CONV_EN == 1);
		bool conv2d = (DEPTH_CONV_EN == 0) && (CONV_EN == 1);
		bool max_pool = (DEPTH_CONV_EN == 0) && (CONV_EN == 0);
    // if(LOAD_PREV_CIN == 1){
		switch(en){
			// bypass this module
		case 0:{
			// if ((UP_SAMPLE_EN && out_num_iter == 0) || (!UP_SAMPLE_EN && in_num_iter + LAYER_IN_NUM_T >= LAYER_IN_NUM)){
				int o = 0;
				int h = 0;
				int w = 0;
				bool done1 = 0;

				int w_bound = (LAYER_IN_W_T / STRIDE)*LAYER_TCONV_STRIDE;
				int h_bound = (LAYER_IN_H_T / STRIDE)*LAYER_TCONV_STRIDE;

				while(!done1){
	#pragma HLS PIPELINE II=1
          // if(!fifo_cin.empty()){
            PoolData0Type tmp = fifo_cin.read();
            fifo_cout.write(tmp);
          // }
					
						// Repeat until the whole tile is read
					w++;
					if (w == w_bound){
						w = 0;
						h++;
						if (h == h_bound){
							h = 0;
							o++;
							if (o == LAYER_NUM_T / POOL_LANE){
								o = 0;
								done1 = 1;
							}
						}
					}
				}
			}
			break;
			// compute
		case 1:
			{
				int o = 0;
				int h = 0;
				int w = 0;
				bool done1 = 0;

				int w_bound = LAYER_IN_W_T;
				int h_bound = LAYER_IN_H_T;
        PoolData0Type line_buf_w_curr[MAX_IN_W_T];
        PoolData0Type line_buf_w_next[MAX_IN_W_T];

        data_t0 pixel_1 = 0;
        data_t0 pixel_2 = 0;
        data_t0 pixel_3 = 0;
        data_t0 pixel_4 = 0;
        PoolData0Type max_buff;

        PoolData0Type line_buf_h;
				pool2 : while(!done1){
          #pragma HLS PIPELINE II=1
          if(h==0){
            line_buf_w_curr[w] = fifo_cin.read();
          }else{
            PoolData0Type tmp = fifo_cin.read();
            line_buf_w_next[w] = tmp;
            if(w%STRIDE == 0){
              line_buf_h = tmp;
            }
            if(h%STRIDE == 0){
              line_buf_w_curr[w] = line_buf_w_next[w];
            }
            if(w%STRIDE == 1 && h%STRIDE == 1){
              pool3 : for(int i=0; i<POOL_LANE; i++){
                #pragma HLS UNROLL
                // pixel 1
                pixel_1 = Reinterpret<data_t0>((ap_uint<DATA_W0>) line_buf_w_curr[w-1]((i+1)*DATA_W0-1, i*DATA_W0));
                // pixel 2
                pixel_2 = Reinterpret<data_t0>((ap_uint<DATA_W0>) line_buf_w_curr[w]((i+1)*DATA_W0-1, i*DATA_W0));
                // pixel 3
                pixel_3 = Reinterpret<data_t0>((ap_uint<DATA_W0>) line_buf_h((i+1)*DATA_W0-1, i*DATA_W0));
                // pixel 4
                pixel_4 = Reinterpret<data_t0>((ap_uint<DATA_W0>) tmp((i+1)*DATA_W0-1, i*DATA_W0));
                // max
                data_t0 val_1 = max(pixel_1, pixel_2);
                data_t0 val_2 = max(pixel_3, pixel_4);
                data_t0 val_3 = max(val_1, val_2);
                max_buff((i+1)*DATA_W0-1, i*DATA_W0) = Reinterpret<ap_uint<DATA_W0> >(val_3);
              }
              fifo_cout.write(max_buff);
            }
          }
          // Repeat until the whole tile is read
					w++;
					if (w == w_bound){
						w = 0;
						h++;
						if (h == h_bound){
							h = 0;
							o++;
							if (o == LAYER_NUM_T / POOL_LANE){
								o = 0;
								done1 = 1;
							}
						}
					}
				}
			}
			break;
		}
		// }
		
			// Repeat until all the tiles are read
			// Must repeat the computation until LAYER_OUT_NUM output feature maps are generated
		// in_num_iter += LAYER_IN_NUM_T;
		// if (in_num_iter >= POOL_NUM_HW){
		// 	in_num_iter = 0;
      // not sure if out or in iters to be used
    in_h_iter += LAYER_IN_H_T;
    if (in_h_iter >= LAYER_IN_H){
      in_h_iter = 0;
      in_w_iter += LAYER_IN_W_T;
      if (in_w_iter >= LAYER_IN_W){
        in_w_iter = 0;
        num_iter += LAYER_NUM_T;
        if (num_iter >= LAYER_OUT_NUM_HW){
          num_iter = 0;
          layer_iter += 1;
          layer_start = 1;
          if (layer_iter == LAYER_BATCH){
            layer_iter = 0;
            done = 1;
          }
        }
      }
    }
	}
}
/**
 * Function name: cout_write_fifo_read
 * Function description: This function reads cout data.
 */
void cout_write_fifo_read(
		bus_t0 *cout_burst_buf,
		hls::stream<PoolData0Type>  &fifo_cout,
		bool en,
		bool up_sample,
		uint LAYER_IN_NUM,
		uint LAYER_OUT_H,
		uint LAYER_OUT_W,
		uint LAYER_IN_NUM_T,
		uint LAYER_OUT_NUM_T,
		uint LAYER_IN_H_T,
		uint LAYER_IN_W_T,
		uint in_h_iter,
		uint in_w_iter,
    ap_uint<16> TCONV_STRIDE
){
  // cout<<"cout_write_fifo_read"<<endl;
	PoolData0Type cout_buf[DATA_SEL_FACTOR0];
	#pragma HLS ARRAY_PARTITION variable=cout_buf complete

	#ifdef DEBUG
	ofstream cout_debug;
	cout_debug.open("hw_cout_write_patch.dat", ios::app);
	#endif        

	uint write = 0;
		// Set up the writing mode
	if (en == 0 && up_sample == 0) write = 0; 	// normal writing
	else if (en == 1 && up_sample == 0) write = 1; 	// writing after pooling
	else if (up_sample == 1) write = 2; 	// writing after upsampling
		// Should store the data as Th * Tw * Tn
		// write = 2;
  int count = 0;
	switch(write){
	case 0:
	{
		int o = 0;
		int h = 0;
		int w = 0;
		bool done = 0;
		while(!done){
	#pragma HLS PIPELINE II=1       
	#pragma HLS dependence variable=cout_burst_buf type=inter false
			uint local_cout_idx = h * LAYER_IN_W_T * LAYER_OUT_NUM_T + w * LAYER_OUT_NUM_T + o * POOL_LANE;
			bus_t0 wide_tmp = cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0];
			for (int lane = 0; lane < DATA_SEL_FACTOR0; lane++){
	#pragma HLS UNROLL
				cout_buf[lane] = wide_tmp(DATA_W0 * POOL_LANE - 1, 0);
				wide_tmp = wide_tmp >> DATA_W0 * POOL_LANE;
			}
			PoolData0Type tmp = fifo_cout.read();
			if (in_h_iter + h < LAYER_OUT_H && in_w_iter + w < LAYER_OUT_W)
				cout_buf[(local_cout_idx % BUS_PACK_FACTOR0) / POOL_LANE] = tmp;
			else
				cout_buf[(local_cout_idx % BUS_PACK_FACTOR0) / POOL_LANE] = tmp;

			bus_t0 wide_pack = (
	#if DATA_SEL_FACTOR0 == 1
					cout_buf[0]
	#elif DATA_SEL_FACTOR0 == 2
					cout_buf[1], cout_buf[0]
	#elif DATA_SEL_FACTOR0 == 4
					cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
	#elif DATA_SEL_FACTOR0 == 8
					cout_buf[7], cout_buf[6], cout_buf[5], cout_buf[4],
					cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
	#elif DATA_SEL_FACTOR0 == 16
				    cout_buf[15], cout_buf[14], cout_buf[13], cout_buf[12],
				    cout_buf[11], cout_buf[10], cout_buf[9], cout_buf[8],
				    cout_buf[7], cout_buf[6], cout_buf[5], cout_buf[4],
				    cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
	#endif                  
			);
			cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0] = wide_pack;
      	//  print<512>(cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0]);

				// Repeat until the whole tile is read
			w++;
			if (w == LAYER_IN_W_T){
				w = 0;
				h++;
				if (h == LAYER_IN_H_T){
					h = 0;
					o++;
					if (o == LAYER_OUT_NUM_T / POOL_LANE){
						o = 0;
						done = 1;
					}
				}
			}
		}
			//        }
		break;
	}
	case 1:
	{
		int o = 0;
		int h = 0;
		int w = 0;
		bool done = 0;
		while(!done){
	#pragma HLS PIPELINE II=1
				#pragma HLS dependence variable=cout_burst_buf type=inter false
			uint local_cout_idx = h * (LAYER_IN_W_T / 2) * LAYER_OUT_NUM_T + w * LAYER_OUT_NUM_T + o * POOL_LANE;
			bus_t0 wide_tmp = cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0];
			for (int lane = 0; lane < DATA_SEL_FACTOR0; lane++){
	#pragma HLS UNROLL
				cout_buf[lane] = wide_tmp(DATA_W0 * POOL_LANE - 1, 0);
				wide_tmp = wide_tmp >> DATA_W0 * POOL_LANE;
        	// cout<<"lane1: "<<lane<<endl;
			}
			PoolData0Type tmp = fifo_cout.read();
      	// cout<<"lane2: "<<(local_cout_idx % BUS_PACK_FACTOR0) / POOL_LANE<<endl;
      	// cout<<h<<" "<<w<<" "<<o<<" "<<in_h_iter<<" "<<in_w_iter<<" "<<LAYER_OUT_H<<" "<<LAYER_OUT_W<<endl;
			if (in_h_iter / 2 + h < LAYER_OUT_H && in_w_iter / 2 + w < LAYER_OUT_W){
				cout_buf[(local_cout_idx % BUS_PACK_FACTOR0) / POOL_LANE] = tmp;
        	// print<256>(tmp);
      }
			else{
				cout_buf[(local_cout_idx % BUS_PACK_FACTOR0) / POOL_LANE] = 0;
      }
      	// print<256>(cout_buf[0]);
      	// print<256>(cout_buf[1]);
      	// cout<<(local_cout_idx % BUS_PACK_FACTOR0) / POOL_LANE<<endl;
      	// print<256>(cout_buf[(local_cout_idx % BUS_PACK_FACTOR0) / POOL_LANE] );
			bus_t0 wide_pack = (
	#if DATA_SEL_FACTOR0 == 1
					cout_buf[0]
	#elif DATA_SEL_FACTOR0 == 2
					cout_buf[1], cout_buf[0]
	#elif DATA_SEL_FACTOR0 == 4
					cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
	#elif DATA_SEL_FACTOR0 == 8
					cout_buf[7], cout_buf[6], cout_buf[5], cout_buf[4],
					cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
	#elif DATA_SEL_FACTOR0 == 16
					cout_buf[15], cout_buf[14], cout_buf[13], cout_buf[12],
					cout_buf[11], cout_buf[10], cout_buf[9], cout_buf[8],
					cout_buf[7], cout_buf[6], cout_buf[5], cout_buf[4],
					cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
	#endif                  
			);
			cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0] = wide_pack;
      	// cout<<cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0]<<endl;
      	// print<512>(cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0]);

				// Repeat until the whole tile is read
			w++;
			if (w == LAYER_IN_W_T / 2){
				w = 0;
				h++;
				if (h == LAYER_IN_H_T / 2){
					h = 0;
					o++;
					if (o == LAYER_OUT_NUM_T / POOL_LANE){
						o = 0;
						done = 1;
					}
				}
			}
		}
    	// exit(0);
	}
	break;
	case 2:
	{
		int o = 0;
		int h = 0;
		int w = 0;
		bool done = 0;
		while(!done){
	#pragma HLS PIPELINE II=1
				#pragma HLS dependence variable=cout_burst_buf type=inter false
			uint local_cout_idx = h * (LAYER_IN_W_T * TCONV_STRIDE) * LAYER_OUT_NUM_T + w * LAYER_OUT_NUM_T + o * POOL_LANE;
			bus_t0 wide_tmp = cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0];
			for (int lane = 0; lane < DATA_SEL_FACTOR0; lane++){
	#pragma HLS UNROLL
				cout_buf[lane] = wide_tmp(DATA_W0 * POOL_LANE - 1, 0);
				wide_tmp = wide_tmp >> DATA_W0 * POOL_LANE;
			}
			PoolData0Type tmp = fifo_cout.read();

			if (in_h_iter * TCONV_STRIDE + h < LAYER_OUT_H && in_w_iter * TCONV_STRIDE + w < LAYER_OUT_W)
				cout_buf[(local_cout_idx % BUS_PACK_FACTOR0) / POOL_LANE] = tmp;
			else
				cout_buf[(local_cout_idx % BUS_PACK_FACTOR0) / POOL_LANE] = 0;
			bus_t0 wide_pack = (
	#if DATA_SEL_FACTOR0 == 1
					cout_buf[0]
	#elif DATA_SEL_FACTOR0 == 2
					cout_buf[1], cout_buf[0]
	#elif DATA_SEL_FACTOR0 == 4
					cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
	#elif DATA_SEL_FACTOR0 == 8
					cout_buf[7], cout_buf[6], cout_buf[5], cout_buf[4],
					cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
	#elif DATA_SEL_FACTOR0 == 16
					cout_buf[15], cout_buf[14], cout_buf[13], cout_buf[12],
					cout_buf[11], cout_buf[10], cout_buf[9], cout_buf[8],
					cout_buf[7], cout_buf[6], cout_buf[5], cout_buf[4],
					cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
	#endif                  
			);
			cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0] = wide_pack;
	#ifdef DEBUG_up_fifo
			cout << "after merge: " << local_cout_idx / BUS_PACK_FACTOR0 << " " ;
			for (int lane = 0; lane < CONV_LANE*2; lane++){
				ap_uint<DATA_W0> u32_tmp = wide_pack(DATA_W0 - 1, 0);
				cout << "lane: " << lane<< " " << Reinterpret<data_t0>(u32_tmp) << " ";
				wide_pack = wide_pack >> DATA_W0;
			}
			cout << endl;
	#endif
				// Repeat until the whole tile is read
			w++;
			if (w == LAYER_IN_W_T * TCONV_STRIDE){
				w = 0;
				h++;
				if (h == LAYER_IN_H_T * TCONV_STRIDE){
					h = 0;
					o++;
					if (o == LAYER_OUT_NUM_T / POOL_LANE){
						o = 0;
						done = 1;
					}
				}
			}
		}
	}
	break;
	}
  	// exit(0);
}

/**
 * Function name: cout_write_ddr_write
 * Function description: This function writes out cout results to off-chip DRAM.
 */
void cout_write_ddr_write(
		bus_t0 *cout_burst_buf,
		bus_t0 *global_cout,
		bool en,
		bool up_sample,
		uint num_iter,
		uint in_h_iter,
		uint in_w_iter,
		uint LAYER_IN_NUM,
		uint LAYER_OUT_NUM,
		uint LAYER_IN_NUM_T,
		uint LAYER_OUT_NUM_T,
		uint LAYER_IN_H_T,
		uint LAYER_IN_W_T,
		uint LAYER_OUT_H_HW,
		uint LAYER_OUT_W_HW,
		uint num_tile,
		uint ind_w_t,
		uint ind_w,
		uint cout_offset,
		bool change_layout,
		bool run,
    ap_uint<16> TCONV_STRIDE
){
  // cout<<"cout_write_ddr_write"<<endl;
		// Set up the writing mode
	uint write = 0;
	if (up_sample == 1) write = 2;// writing after upsampling
	else if (en == 0) write = 0; 	// normal writing
	else if (en == 1) write = 1; 	// writing after pooling
		// The default data layout is ceil(N / Tn) * H * ceil(W / Tw) * Tw * Tn
		// If filter size is 1, the data layout should change to ceil(N / Tn) * ceil(H / Th) * ceil(W / Tw) * Th * Tw * Tn
  if (change_layout) write += 3; 
  // cout<<"write: "<<write<<endl;
  	// write = 2;
	if (run){
		switch(write){
		case 0:
		{
				// write out
			for (int hh  = 0; hh < LAYER_IN_H_T; hh++){
				uint h = in_h_iter + hh;
				uint global_cout_idx = num_iter / LAYER_OUT_NUM_T * LAYER_OUT_H_HW * LAYER_OUT_W_HW * LAYER_OUT_NUM_T + h * LAYER_OUT_W_HW * LAYER_OUT_NUM_T + in_w_iter * LAYER_OUT_NUM_T + cout_offset;
				uint local_cout_idx = hh * LAYER_IN_W_T * LAYER_OUT_NUM_T;
				for(int i=0; i<LAYER_IN_W_T * LAYER_OUT_NUM_T/BUS_PACK_FACTOR0; i++){
          #pragma HLS PIPELINE II=1
          global_cout[global_cout_idx/BUS_PACK_FACTOR0 + i] = cout_burst_buf[local_cout_idx/BUS_PACK_FACTOR0 + i];
        }
				// memcpy((void*)&global_cout[global_cout_idx / BUS_PACK_FACTOR0], (void*)&cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0], sizeof(data_t0) * LAYER_IN_W_T * LAYER_OUT_NUM_T);
      }
		}
		break;
		case 1:
		{
			for (int hh = 0; hh < LAYER_IN_H_T / 2; hh++){
				uint h = in_h_iter / 2 + hh;
				uint global_cout_idx = num_iter / LAYER_OUT_NUM_T * LAYER_OUT_H_HW * LAYER_OUT_W_HW * LAYER_OUT_NUM_T + h * LAYER_OUT_W_HW * LAYER_OUT_NUM_T + in_w_iter / 2 * LAYER_OUT_NUM_T + cout_offset;
				uint local_cout_idx = hh * LAYER_IN_W_T / 2 * LAYER_OUT_NUM_T;
				for(int i=0; i<(LAYER_IN_W_T / 2 * LAYER_OUT_NUM_T)/BUS_PACK_FACTOR0; i++){
          #pragma HLS PIPELINE II=1
          global_cout[global_cout_idx/BUS_PACK_FACTOR0 + i] = cout_burst_buf[local_cout_idx/BUS_PACK_FACTOR0 + i];
        }
        // memcpy((void*)&global_cout[global_cout_idx / BUS_PACK_FACTOR0], (void*)&cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0], sizeof(data_t0) * LAYER_IN_W_T / 2 * LAYER_OUT_NUM_T);
			}
		}
		break;
		case 2:
		{
			for (int hh = 0; hh < LAYER_IN_H_T * TCONV_STRIDE; hh++){
				uint h = in_h_iter * TCONV_STRIDE + hh;
				uint global_cout_idx;
				global_cout_idx = num_iter / LAYER_OUT_NUM_T * LAYER_OUT_H_HW * LAYER_OUT_W_HW * LAYER_OUT_NUM_T + h * LAYER_OUT_W_HW * LAYER_OUT_NUM_T + in_w_iter * TCONV_STRIDE * LAYER_OUT_NUM_T + cout_offset;
				uint local_cout_idx = hh * LAYER_IN_W_T * TCONV_STRIDE * LAYER_OUT_NUM_T;
        for(int i=0; i<(LAYER_IN_W_T * TCONV_STRIDE * LAYER_OUT_NUM_T)/BUS_PACK_FACTOR0; i++){
          #pragma HLS PIPELINE II=1
          global_cout[global_cout_idx/BUS_PACK_FACTOR0 + i] = cout_burst_buf[local_cout_idx/BUS_PACK_FACTOR0 + i];
        }
        // memcpy((void*)&global_cout[global_cout_idx / BUS_PACK_FACTOR0], (void*)&cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0], sizeof(data_t0) * LAYER_IN_W_T * TCONV_STRIDE * LAYER_OUT_NUM_T);
			}
		}
		break;
    case 3:
		{
			// write out
			for (int hh  = 0; hh < 1; hh++){
				uint global_cout_idx = cout_offset + num_tile * LAYER_OUT_NUM_T * LAYER_IN_W_T * LAYER_IN_H_T;
				uint local_cout_idx = hh * LAYER_IN_W_T * LAYER_OUT_NUM_T;
        for(int i=0; i<(LAYER_IN_W_T * LAYER_OUT_NUM_T * LAYER_IN_H_T)/BUS_PACK_FACTOR0; i++){
          #pragma HLS PIPELINE II=1
          global_cout[global_cout_idx/BUS_PACK_FACTOR0 + i] = cout_burst_buf[local_cout_idx/BUS_PACK_FACTOR0 + i];
        }
        // memcpy((void*)&global_cout[global_cout_idx / BUS_PACK_FACTOR0], (void*)&cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0], sizeof(data_t0) * LAYER_IN_W_T * LAYER_OUT_NUM_T * LAYER_IN_H_T);
			}
		}
		break;
		case 4:
		{
			for (int hh = 0; hh < 1; hh++){
				uint global_cout_idx = cout_offset + num_tile * LAYER_OUT_NUM_T * LAYER_IN_W_T/2 * LAYER_IN_H_T/2;
				uint local_cout_idx = hh * LAYER_IN_W_T/2 * LAYER_OUT_NUM_T;
				// cout<<"global:"<<global_cout_idx<<" h: "<<hh<<" in_h_iter: "<<in_h_iter<<" local: "<<local_cout_idx<<endl;
        for(int i=0; i<(LAYER_IN_W_T/2 * LAYER_OUT_NUM_T * LAYER_IN_H_T/2)/BUS_PACK_FACTOR0; i++){
          #pragma HLS PIPELINE II=1
          global_cout[global_cout_idx/BUS_PACK_FACTOR0 + i] = cout_burst_buf[local_cout_idx/BUS_PACK_FACTOR0 + i];
        }
        // memcpy((void*)&global_cout[global_cout_idx / BUS_PACK_FACTOR0], (void*)&cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0], sizeof(data_t0) * LAYER_IN_W_T/2 * LAYER_OUT_NUM_T * LAYER_IN_H_T/2);
			}
		}
		break;
		case 5:
		{
			for (int hh = 0; hh < 1; hh++){
				uint global_cout_idx = cout_offset + num_tile * LAYER_OUT_NUM_T * LAYER_IN_W_T * LAYER_IN_H_T * 4;
				uint local_cout_idx = hh * LAYER_IN_W_T * 2 * LAYER_OUT_NUM_T;
        for(int i=0; i<(LAYER_IN_W_T * 2 * LAYER_OUT_NUM_T * LAYER_IN_H_T * 2)/BUS_PACK_FACTOR0; i++){
          #pragma HLS PIPELINE II=1
          global_cout[global_cout_idx/BUS_PACK_FACTOR0 + i] = cout_burst_buf[local_cout_idx/BUS_PACK_FACTOR0 + i];
        }
        // memcpy((void*)&global_cout[global_cout_idx / BUS_PACK_FACTOR0], (void*)&cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0], sizeof(data_t0) * LAYER_IN_W_T * 2 * LAYER_OUT_NUM_T * LAYER_IN_H_T * 2);
			}
		}
		break;
		}
	}
  	// exit(0);
}

/**
 * Function name: cout_write
 * Function description: This function collects and writes out cout results.
 */
void cout_write(
		hls::stream<PoolData0Type>  &fifo_cout,
		hls::stream<ConfigInst>     &fifo_config_in,
		bus_t0                      *global_cout
){

	bus_t0 cout_burst_buf_ping[COUT_BUFF / BUS_PACK_FACTOR0];
	bus_t0 cout_burst_buf_pong[COUT_BUFF / BUS_PACK_FACTOR0];

	#if cout_write_MEM == 0
		#pragma HLS bind_storage variable=cout_burst_buf_ping type=RAM_T2P impl=BRAM
		#pragma HLS bind_storage variable=cout_burst_buf_pong type=RAM_T2P impl=BRAM 
	#elif cout_write_MEM == 1
		#pragma HLS bind_storage variable=cout_burst_buf_ping type=RAM_T2P impl=URAM
		#pragma HLS bind_storage variable=cout_burst_buf_pong type=RAM_T2P impl=URAM  
	#endif

		// iterators
	uint num_iter = 0;
	uint in_h_iter = 0;
	uint in_w_iter = 0;
	uint layer_iter = 0;

	uint cout_offset = 0;

	uint num_iter_prev = 0;
	uint in_h_iter_prev = 0;
	uint in_w_iter_prev = 0;

		// parameters
		// inst0
	ap_uint<32> LAYER_IN_NUM_HW;
	ap_uint<32> LAYER_OUT_NUM_HW;
	ap_uint<32> LAYER_IN_H_HW;
	ap_uint<32> LAYER_IN_W_HW;
	ap_uint<32> LAYER_OUT_H_HW;
	ap_uint<32> LAYER_OUT_W_HW;
  ap_uint<16> LAYER_OUT_H_NP;
  ap_uint<16> LAYER_OUT_H_SP;
  ap_uint<16> LAYER_OUT_W_EP;
  ap_uint<16> LAYER_OUT_W_WP;
		// inst1
	ap_uint<32> LAYER_IN_NUM;
	ap_uint<32> LAYER_OUT_NUM;
	ap_uint<32> LAYER_IN_H;
	ap_uint<32> LAYER_IN_W;
	ap_uint<32> LAYER_OUT_H;
	ap_uint<32> LAYER_OUT_W;
		// inst2
	ap_uint<32> CIN_OFFSET;
	ap_uint<32> WEIGHT_OFFSET;
	ap_uint<32> BIAS_OFFSET;
	ap_uint<32> COUT_OFFSET;
	ap_uint<16> FILTER_S1;
	ap_uint<16> FILTER_S2;
	ap_uint<32> STRIDE;
		// inst3
	ap_uint<32> LAYER_EN;
	ap_uint<32> PREV_CIN_OFFSET;
	ap_uint<16> LAYER_IN_NUM_T;
	ap_uint<16> LAYER_OUT_NUM_T;
	ap_uint<32> LAYER_IN_H_T;
	ap_uint<32> LAYER_IN_W_T;
	ap_uint<1>  CONV_1ST_EN;
	ap_uint<1>  DEPTH_CONV_EN;
	ap_uint<1>  CONV_EN;
	ap_uint<1>  RELU_EN;
	ap_uint<1>  RELU6_EN;
	ap_uint<1>  POOL_EN;
	ap_uint<1>  UP_SAMPLE_EN;
	ap_uint<1>  BIAS_EN;
	ap_uint<1>  INTER_LOAD_EN;
	ap_uint<1>  INTER_WRITE_EN;
  ap_uint<1>  ADD_EN;

	ap_uint<16> LAYER_CONV_TYPE;	
  ap_uint<16> LAYER_TCONV_STRIDE;


		// Read instructions
	ConfigInst inst0 = fifo_config_in.read();
	ConfigInst inst1 = fifo_config_in.read();
	ConfigInst inst2 = fifo_config_in.read();
	ConfigInst inst3 = fifo_config_in.read();
	ConfigInst inst4 = fifo_config_in.read();
	ConfigInst inst5 = fifo_config_in.read();

	ap_uint<32> LAYER_BATCH = inst3(32*5+31, 32*5);

	bool en_prev;
	bool max_pool_prev;
	bool up_sample_prev;
  bool t_conv_prev;
	bool change_layout;
	uint LAYER_IN_NUM_prev;
	uint LAYER_OUT_NUM_prev;
	uint LAYER_IN_NUM_T_prev;
	uint LAYER_OUT_NUM_T_prev;
	uint LAYER_IN_H_T_prev;
	uint LAYER_IN_W_T_prev;
	uint LAYER_OUT_H_HW_prev;
	uint LAYER_OUT_W_HW_prev;
	uint cout_offset_prev;

	bool write_done = 0;
	uint task_cnt = 0;
	uint iter_h = 1;
	uint num_tile = 0;
  uint channel_iter = 0;
	uint inter_tile = 0;
	uint ind_w = 0;
	uint ind_w_t = 0;
	uint num_tile_prev = 0;
	uint ind_w_t_prev = 0;
	uint ind_w_prev = 0;
	bool layer_start = 0;
	bool done = 0;
	bool change_layout_prev = 0;
  int count = 0;
		// We assum that cin has been pre-padded with zeros
	while(!done){
    	// cout<<count++<<endl;
		if (layer_start){
			inst0 = fifo_config_in.read();
			inst1 = fifo_config_in.read();
			inst2 = fifo_config_in.read();
			inst3 = fifo_config_in.read();
			inst4 = fifo_config_in.read();
			inst5 = fifo_config_in.read();
			layer_start = 0;
		}

			// Refer to cin_load module to understand the meaning of the instructions
			// inst0
		LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
		LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
		LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
		LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
    LAYER_OUT_H_NP   = inst0(32*4+15, 32*4);
    LAYER_OUT_H_SP   = inst0(32*4+31, 32*4+16);
    LAYER_OUT_W_EP   = inst0(32*5+15, 32*5);
    LAYER_OUT_W_WP   = inst0(32*5+31, 32*5+16);
    // cout<<"LAYER_OUT_H_NP: "<<LAYER_OUT_H_NP<<endl;
    // cout<<"LAYER_OUT_H_SP: "<<LAYER_OUT_H_SP<<endl;
    // cout<<"LAYER_OUT_W_EP: "<<LAYER_OUT_W_EP<<endl;
    // cout<<"LAYER_OUT_W_WP: "<<LAYER_OUT_W_WP<<endl;
		// LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
		// LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
			// inst1
		LAYER_IN_NUM     = inst1(32*0+31, 32*0);
		LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
		LAYER_IN_H       = inst1(32*2+31, 32*2);
		LAYER_IN_W       = inst1(32*3+31, 32*3);
		LAYER_OUT_H      = inst1(32*4+31, 32*4);
		LAYER_OUT_W      = inst1(32*5+31, 32*5);
    LAYER_OUT_H_HW   = LAYER_OUT_H + LAYER_OUT_H_NP + LAYER_OUT_H_SP;
		LAYER_OUT_W_HW   = LAYER_OUT_W + LAYER_OUT_W_EP + LAYER_OUT_W_WP;
    // cout<<"LAYER_OUT_H_HW: "<<LAYER_OUT_H_HW<<endl;
    // cout<<"LAYER_OUT_W_HW: "<<LAYER_OUT_W_HW<<endl;
    // exit(0);
			// inst2
		CIN_OFFSET       = inst2(32*0+31, 32*0);
		WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
		BIAS_OFFSET      = inst2(32*2+31, 32*2);
		COUT_OFFSET      = inst2(32*3+31, 32*3);
		FILTER_S1        = inst2(32*4+15, 32*4);
		FILTER_S2        = inst2(32*4+31, 32*4+16);
		STRIDE           = inst2(32*5+31, 32*5);
			// inst3
		LAYER_EN         = inst3(32*0+31, 32*0);
		PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
		LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
		LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
		LAYER_IN_H_T     = inst3(32*3+31, 32*3);
		LAYER_IN_W_T     = inst3(32*4+31, 32*4);

			//	//	///inst5	//	//	//	//	//	//	///
		LAYER_CONV_TYPE = inst5(32*0+15, 32*0);
    LAYER_TCONV_STRIDE 	= inst5(32*2+15, 32*2);

		CONV_1ST_EN    = LAYER_EN[0];
		DEPTH_CONV_EN  = LAYER_EN[1];
		CONV_EN        = LAYER_EN[2];
		RELU_EN        = LAYER_EN[3];
		RELU6_EN       = LAYER_EN[4];
		POOL_EN        = LAYER_EN[5];
		UP_SAMPLE_EN   = LAYER_EN[6];  	// reserved
		BIAS_EN        = LAYER_EN[7];
		INTER_LOAD_EN  = LAYER_EN[8];
		INTER_WRITE_EN = LAYER_EN[9];
    ADD_EN         = LAYER_EN[17];



		// Set up some configuration signals
		cout_offset = COUT_OFFSET;
		bool en = (POOL_EN && !ADD_EN) || (POOL_EN == 0 && STRIDE == 2);
		bool separable_conv = (DEPTH_CONV_EN == 1) && (CONV_EN == 1);
		bool conv2d = (DEPTH_CONV_EN == 0) && (CONV_EN == 1);
		bool max_pool = (DEPTH_CONV_EN == 0) && (CONV_EN == 0);
		bool up_sample = UP_SAMPLE_EN;
    LAYER_TCONV_STRIDE = UP_SAMPLE_EN || (LAYER_CONV_TYPE==1)? 2 : 1;
    bool t_conv = (LAYER_CONV_TYPE == 1)? 1 : 0;
    // cout<<LAYER_OUT_H_HW<<" "<<LAYER_OUT_H<<endl;
    // cout<<LAYER_OUT_W_HW<<" "<<LAYER_OUT_W<<endl;
    
		change_layout = (((LAYER_OUT_W_HW == LAYER_OUT_W) || (LAYER_OUT_W_HW == LAYER_IN_W_T)) && ((LAYER_OUT_H_HW == LAYER_OUT_H) || (LAYER_OUT_H_HW == LAYER_IN_H_T))); 	// if next filter = 1 : change the layout to num_tile, h_t, w_t, in_t
    // cout<<"change_layout: "<<change_layout<<" t_conv: "<<t_conv<<" t_conv_prev: "<<t_conv_prev<<" LAYER_CONV_TYPE: "<<LAYER_CONV_TYPE<<endl;
			// If it is supposed to store the result in DRAM
		if (INTER_WRITE_EN == 0){
			if (task_cnt == 0){
					// First, read the data of the first tile from FIFO
				cout_write_fifo_read(
						cout_burst_buf_ping, fifo_cout, en, (up_sample || t_conv),
						LAYER_IN_NUM, LAYER_OUT_H, LAYER_OUT_W,
						LAYER_IN_NUM_T, LAYER_OUT_NUM_T,
						LAYER_IN_H_T, LAYER_IN_W_T,
						in_h_iter, in_w_iter,
            LAYER_TCONV_STRIDE
				);
			} else {
					// Apply double buffering for reading the data from FIFO and writing to DRAM
				if (task_cnt % 2 == 1){
					cout_write_fifo_read(
							cout_burst_buf_pong, fifo_cout, en, (up_sample || t_conv),
							LAYER_IN_NUM, LAYER_OUT_H, LAYER_OUT_W,
							LAYER_IN_NUM_T, LAYER_OUT_NUM_T,
							LAYER_IN_H_T, LAYER_IN_W_T,
							in_h_iter, in_w_iter,
              LAYER_TCONV_STRIDE
					);
					cout_write_ddr_write(
							cout_burst_buf_ping, global_cout,
							en_prev, (up_sample_prev || t_conv_prev),
							num_iter_prev, in_h_iter_prev, in_w_iter_prev,
							LAYER_IN_NUM_prev, LAYER_OUT_NUM_prev,
							LAYER_IN_NUM_T_prev, LAYER_OUT_NUM_T_prev,
							LAYER_IN_H_T_prev, LAYER_IN_W_T_prev,
							LAYER_OUT_H_HW_prev, LAYER_OUT_W_HW_prev,
							num_tile_prev,
							ind_w_t_prev,
							ind_w_prev,
							cout_offset_prev,
							change_layout_prev,
							!write_done,
              LAYER_TCONV_STRIDE
					);
				} else {
					cout_write_fifo_read(
							cout_burst_buf_ping, fifo_cout, en, (up_sample || t_conv),
							LAYER_IN_NUM, LAYER_OUT_H, LAYER_OUT_W,
							LAYER_IN_NUM_T, LAYER_OUT_NUM_T,
							LAYER_IN_H_T, LAYER_IN_W_T,
							in_h_iter, in_w_iter,
              LAYER_TCONV_STRIDE
					);

					cout_write_ddr_write(
							cout_burst_buf_pong, global_cout,
							en_prev, (up_sample_prev || t_conv_prev),
							num_iter_prev, in_h_iter_prev, in_w_iter_prev,
							LAYER_IN_NUM_prev, LAYER_OUT_NUM_prev,
							LAYER_IN_NUM_T_prev, LAYER_OUT_NUM_T_prev,
							LAYER_IN_H_T_prev, LAYER_IN_W_T_prev,
							LAYER_OUT_H_HW_prev, LAYER_OUT_W_HW_prev,
							num_tile_prev,
							ind_w_t_prev,
							ind_w_prev,
							cout_offset_prev,
							change_layout_prev,
							!write_done,
              LAYER_TCONV_STRIDE
					);
				}
			}

			if (task_cnt > 0){
				write_done = 1;
			}
			
				// need to know the config of the current tile in the next iteration since we are using double buffering
			task_cnt++;
			num_iter_prev = num_iter;
			in_h_iter_prev = in_h_iter;
			in_w_iter_prev = in_w_iter;
			en_prev = en;
			up_sample_prev = up_sample;
      t_conv_prev = t_conv;
			max_pool_prev = max_pool;
			LAYER_IN_NUM_prev = LAYER_IN_NUM;
			LAYER_OUT_NUM_prev = LAYER_OUT_NUM;
			LAYER_IN_NUM_T_prev = LAYER_IN_NUM_T;
			LAYER_OUT_NUM_T_prev = LAYER_OUT_NUM_T;
			LAYER_IN_H_T_prev = LAYER_IN_H_T;
			LAYER_IN_W_T_prev = LAYER_IN_W_T;
			LAYER_OUT_H_HW_prev = LAYER_OUT_H_HW;
			LAYER_OUT_W_HW_prev = LAYER_OUT_W_HW;
			cout_offset_prev = cout_offset;
			num_tile_prev = num_tile;
			ind_w_t_prev = ind_w_t;
			ind_w_prev = ind_w;
			change_layout_prev = change_layout;
			write_done = 0;

		}
    	// cout<<num_tile<<endl;
			// Repeat until all the tiles are stored
		// if (max_pool || up_sample){
    // cout<<num_tile<<endl;
    // num_iter += LAYER_OUT_NUM_T;
    // if (num_iter < LAYER_OUT_NUM){
    //   channel_iter += ((LAYER_IN_W / LAYER_IN_W_T) * (LAYER_IN_H / LAYER_IN_H_T));
    // } else {
    //   channel_iter = 0;
    //   inter_tile++;
    // }
    // num_tile = channel_iter + inter_tile;
    // cout<<num_tile<<" "<<channel_iter<<" "<<inter_tile<<endl;
    num_tile++;
    in_h_iter += LAYER_IN_H_T;
    if (in_h_iter >= LAYER_IN_H){
      in_h_iter = 0;
      in_w_iter += LAYER_IN_W_T;
      if (in_w_iter >= LAYER_IN_W){
        in_w_iter = 0;
        num_iter += LAYER_OUT_NUM_T;
        if (num_iter >= LAYER_OUT_NUM){
          num_iter = 0;
          num_tile = 0;
          layer_start = 1;
          layer_iter += 1;
          if (layer_iter == LAYER_BATCH){
            layer_iter = 0;
            done = 1;
          }
        }
      }
    }
    // }
		// } else if (STRIDE == 2){
		// 	num_tile += 1;
		// 	if (num_tile == (LAYER_IN_H / LAYER_IN_H_T)){
		// 		num_tile = 0;
		// 		ind_w_t += 1;
		// 		if (LAYER_IN_W_T / 2 == LAYER_OUT_W_HW) ind_w_t += 1;
		// 		if (ind_w_t == 2){
		// 			ind_w_t = 0;
		// 			ind_w += (LAYER_IN_H / LAYER_IN_H_T);
		// 		}
		// 	}
		// 	in_h_iter += LAYER_IN_H_T;
		// 	if (in_h_iter >= LAYER_IN_H){
		// 		in_h_iter = 0;
		// 		in_w_iter += LAYER_IN_W_T;
		// 		if (in_w_iter >= LAYER_IN_W){
		// 			in_w_iter = 0;
		// 			num_iter += LAYER_OUT_NUM_T;
		// 			if (num_iter >= LAYER_OUT_NUM){
		// 				num_iter = 0;
		// 				layer_iter += 1;
		// 				layer_start = 1;
		// 				if (layer_iter == LAYER_BATCH){
		// 					layer_iter = 0;
		// 					done = 1;
		// 				}
		// 			}
		// 		}
		// 	}
		// } else {
		// 		//num_tile = task_cnt - 1;
		// 	num_tile = task_cnt;
		// 	in_h_iter += LAYER_IN_H_T;
		// 	if (in_h_iter >= LAYER_IN_H){
		// 		in_h_iter = 0;
		// 		in_w_iter += LAYER_IN_W_T;
		// 		if (in_w_iter >= LAYER_IN_W){
		// 			in_w_iter = 0;
		// 			num_iter += LAYER_OUT_NUM_T;
		// 			if (num_iter >= LAYER_OUT_NUM){
		// 				num_iter = 0;
		// 				layer_iter += 1;
		// 				layer_start = 1;
		// 				if (layer_iter == LAYER_BATCH){
		// 					layer_iter = 0;
		// 					done = 1;
		// 				}
		// 			}
		// 		}
		// 	}

		// }

	}

		// Store the last tile
	if (INTER_WRITE_EN == 0){
		if (task_cnt % 2 == 1){
			cout_write_ddr_write(
					cout_burst_buf_ping, global_cout,
					en_prev, (up_sample_prev || t_conv_prev),
					num_iter_prev, in_h_iter_prev, in_w_iter_prev,
					LAYER_IN_NUM_prev, LAYER_OUT_NUM_prev,
					LAYER_IN_NUM_T_prev, LAYER_OUT_NUM_T_prev,
					LAYER_IN_H_T_prev, LAYER_IN_W_T_prev,
					LAYER_OUT_H_HW_prev, LAYER_OUT_W_HW_prev,
					num_tile_prev,
					ind_w_t_prev,
					ind_w_prev,
					cout_offset_prev,
					change_layout_prev,
					!write_done,
          LAYER_TCONV_STRIDE
			);
		} else {
			cout_write_ddr_write(
					cout_burst_buf_pong, global_cout,
					en_prev, (up_sample_prev || t_conv_prev),
					num_iter_prev, in_h_iter_prev, in_w_iter_prev,
					LAYER_IN_NUM_prev, LAYER_OUT_NUM_prev,
					LAYER_IN_NUM_T_prev, LAYER_OUT_NUM_T_prev,
					LAYER_IN_H_T_prev, LAYER_IN_W_T_prev,
					LAYER_OUT_H_HW_prev, LAYER_OUT_W_HW_prev,
					num_tile_prev,
					ind_w_t_prev,
					ind_w_prev,
					cout_offset_prev,
					change_layout_prev,
					!write_done,
          LAYER_TCONV_STRIDE
			);
		}
	}
}
/**
You can add any new module that you want here.
You just need to follow the coding structure of the other modules.
You can uncomment the commented modules if your application needs them. All the modules listed in this file (commneted or uncommented) has a working implementation.
For convolution, you can either choose to use a naive implementation (which is slow), or add the systolic array kernel.
**/
void engine(
    bus_t0 *global_cin,
    bus_t0 *global_prev_cin,
    bus_t1 *global_weight,
    bus_t2 *global_bias,
    bus_t0 *global_cout,
    bus_t3 config[CONFIG_PARAMS],
    uint layer_id
){
#pragma HLS DATAFLOW
  //data fifos
  hls::stream<CinLoadData0Type> cin_load_to_SA_0("cin_load_to_SA_0");
  #pragma HLS STREAM variable=cin_load_to_SA_0 depth=128
  hls::stream<CinLoadData0Type> weight_load_to_SA_0("weight_load_to_SA_0");
  #pragma HLS STREAM variable=weight_load_to_SA_0 depth=128
  hls::stream<CinLoadData0Type> bias_load_to_act_and_bn_0("bias_load_to_act_and_bn_0");
  #pragma HLS STREAM variable=bias_load_to_act_and_bn_0 depth=128
  hls::stream<CinLoadData0Type> bias_load_to_act_and_bn_1("bias_load_to_act_and_bn_1");
  #pragma HLS STREAM variable=bias_load_to_act_and_bn_1 depth=128
  hls::stream<CinLoadData0Type> SA_to_act_and_bn_0("SA_to_act_and_bn_0");
  #pragma HLS STREAM variable=SA_to_act_and_bn_0 depth=128
  hls::stream<CinLoadData0Type> act_and_bn_to_pool_0("act_and_bn_to_pool_0");
  #pragma HLS STREAM variable=act_and_bn_to_pool_0 depth=128
  hls::stream<CinLoadData0Type> pool_to_cout_write_0("pool_to_cout_write_0");
  #pragma HLS STREAM variable=pool_to_cout_write_0 depth=128
  //instruction fifos
  hls::stream<ConfigInst> config_cin_load_to_weight_load("config_cin_load_to_weight_load");
  #pragma HLS STREAM variable=config_cin_load_to_weight_load depth=16
  hls::stream<ConfigInst> config_weight_load_to_bias_load("config_weight_load_to_bias_load");
  #pragma HLS STREAM variable=config_weight_load_to_bias_load depth=16
  hls::stream<ConfigInst> config_bias_load_to_SA("config_bias_load_to_SA");
  #pragma HLS STREAM variable=config_bias_load_to_SA depth=16
  hls::stream<ConfigInst> config_SA_to_act_and_bn("config_SA_to_act_and_bn");
  #pragma HLS STREAM variable=config_SA_to_act_and_bn depth=16
  hls::stream<ConfigInst> config_act_and_bn_to_pool("config_act_and_bn_to_pool");
  #pragma HLS STREAM variable=config_act_and_bn_to_pool depth=16
  hls::stream<ConfigInst> config_pool_to_cout_write("config_pool_to_cout_write");
  #pragma HLS STREAM variable=config_pool_to_cout_write depth=16
  layer_id += 1;
  cin_load(
  		global_cin, 
  		config,
  		cin_load_to_SA_0, 
  		config_cin_load_to_weight_load
  );
  #ifdef DEBUG_engine
  	cout << "passed cin_load" << endl;
  #endif
  #ifdef DEBUG_cin_load
  if(layer_id==TARGET_INST){
  	string prj_path = string(getenv("PRJ_PATH"));
  	string layer_id_str = to_string(layer_id);
  	string file_path = prj_path + "/data/test/cin_load_0_"+layer_id_str+".dat";
  	int count = 0;
  	float sum = 0;
  	FILE *f;
  	f = fopen(file_path.c_str(), "w");
  	while(!cin_load_to_SA_0.empty()){
  		ReluData0Type item = cin_load_to_SA_0.read();
  		data_t2 num[8];
  		for(int i=0; i<SIMD_LANE; i++){
  			num[i] = Reinterpret<data_t2>((ap_uint<32>)item((i+1)*32-1, 32*i));
  			fprintf(f, "%10f	", num[i]);
  			count++;
  			sum += num[i];
  		}
  		fprintf(f, "\n");
  	}
  		fprintf(f, "sum: %f\n", sum);
  		fprintf(f, "count: %d\n", count);
  	cout<<"sum: "<<sum<<endl;
  	cout<<"count: "<<count<<endl;
  	fclose(f);
  	exit(0);
  }
  #endif
  weight_load(
  		global_weight, 
  		config_cin_load_to_weight_load,
  		weight_load_to_SA_0, 
  		config_weight_load_to_bias_load
  );
  #ifdef DEBUG_engine
  	cout << "passed weight_load" << endl;
  #endif
  #ifdef DEBUG_weight_load
  if(layer_id==TARGET_INST){
  	string prj_path = string(getenv("PRJ_PATH"));
  	string layer_id_str = to_string(layer_id);
  	string file_path = prj_path + "/data/test/weight_load_0_"+layer_id_str+".dat";
  	int count = 0;
  	float sum = 0;
  	FILE *f;
  	f = fopen(file_path.c_str(), "w");
  	while(!weight_load_to_SA_0.empty()){
  		ReluData0Type item = weight_load_to_SA_0.read();
  		data_t2 num[8];
  		for(int i=0; i<SIMD_LANE; i++){
  			num[i] = Reinterpret<data_t2>((ap_uint<32>)item((i+1)*32-1, 32*i));
  			fprintf(f, "%10f	", num[i]);
  			count++;
  			sum += num[i];
  		}
  		fprintf(f, "\n");
  	}
  		fprintf(f, "sum: %f\n", sum);
  		fprintf(f, "count: %d\n", count);
  	cout<<"sum: "<<sum<<endl;
  	cout<<"count: "<<count<<endl;
  	fclose(f);
  	exit(0);
  }
  #endif
  bias_load(
  		global_bias, 
  		config_weight_load_to_bias_load,
  		bias_load_to_act_and_bn_0, 
  		bias_load_to_act_and_bn_1, 
  		config_bias_load_to_SA
  );
  #ifdef DEBUG_engine
  	cout << "passed bias_load" << endl;
  #endif
  #ifdef DEBUG_bias_load
  if(layer_id==TARGET_INST){
  	string prj_path = string(getenv("PRJ_PATH"));
  	string layer_id_str = to_string(layer_id);
  	string file_path = prj_path + "/data/test/bias_load_0_"+layer_id_str+".dat";
  	int count = 0;
  	float sum = 0;
  	FILE *f;
  	f = fopen(file_path.c_str(), "w");
  	while(!bias_load_to_act_and_bn_0.empty()){
  		ReluData0Type item = bias_load_to_act_and_bn_0.read();
  		data_t2 num[8];
  		for(int i=0; i<SIMD_LANE; i++){
  			num[i] = Reinterpret<data_t2>((ap_uint<32>)item((i+1)*32-1, 32*i));
  			fprintf(f, "%10f	", num[i]);
  			count++;
  			sum += num[i];
  		}
  		fprintf(f, "\n");
  	}
  		fprintf(f, "sum: %f\n", sum);
  		fprintf(f, "count: %d\n", count);
  	cout<<"sum: "<<sum<<endl;
  	cout<<"count: "<<count<<endl;
  	file_path = prj_path + "/data/test/bias_load_1_"+layer_id_str+".dat";
  	count = 0;
  	sum = 0;
  	f = fopen(file_path.c_str(), "w");
  	while(!bias_load_to_act_and_bn_1.empty()){
  		ReluData0Type item = bias_load_to_act_and_bn_1.read();
  		data_t2 num[8];
  		for(int i=0; i<SIMD_LANE; i++){
  			num[i] = Reinterpret<data_t2>((ap_uint<32>)item((i+1)*32-1, 32*i));
  			fprintf(f, "%10f	", num[i]);
  			count++;
  			sum += num[i];
  		}
  		fprintf(f, "\n");
  	}
  		fprintf(f, "sum: %f\n", sum);
  		fprintf(f, "count: %d\n", count);
  	cout<<"sum: "<<sum<<endl;
  	cout<<"count: "<<count<<endl;
  	fclose(f);
  	exit(0);
  }
  #endif
  SA(
  		cin_load_to_SA_0, 
  		weight_load_to_SA_0, 
  		config_bias_load_to_SA,
  		SA_to_act_and_bn_0, 
  		config_SA_to_act_and_bn
  );
  #ifdef DEBUG_engine
  	cout << "passed SA" << endl;
  #endif
  #ifdef DEBUG_SA
  if(layer_id==TARGET_INST){
  	string prj_path = string(getenv("PRJ_PATH"));
  	string layer_id_str = to_string(layer_id);
  	string file_path = prj_path + "/data/test/SA_0_"+layer_id_str+".dat";
  	int count = 0;
  	float sum = 0;
  	FILE *f;
  	f = fopen(file_path.c_str(), "w");
  	while(!SA_to_act_and_bn_0.empty()){
  		ReluData0Type item = SA_to_act_and_bn_0.read();
  		data_t2 num[8];
  		for(int i=0; i<SIMD_LANE; i++){
  			num[i] = Reinterpret<data_t2>((ap_uint<32>)item((i+1)*32-1, 32*i));
  			fprintf(f, "%10f	", num[i]);
  			count++;
  			sum += num[i];
  		}
  		fprintf(f, "\n");
  	}
  		fprintf(f, "sum: %f\n", sum);
  		fprintf(f, "count: %d\n", count);
  	cout<<"sum: "<<sum<<endl;
  	cout<<"count: "<<count<<endl;
  	fclose(f);
  	exit(0);
  }
  #endif
  act_and_bn(
  		bias_load_to_act_and_bn_0, 
  		bias_load_to_act_and_bn_1, 
  		SA_to_act_and_bn_0, 
  		config_SA_to_act_and_bn,
  		act_and_bn_to_pool_0, 
  		config_act_and_bn_to_pool
  );
  #ifdef DEBUG_engine
  	cout << "passed act_and_bn" << endl;
  #endif
  #ifdef DEBUG_act_and_bn
  if(layer_id==TARGET_INST){
  	string prj_path = string(getenv("PRJ_PATH"));
  	string layer_id_str = to_string(layer_id);
  	string file_path = prj_path + "/data/test/act_and_bn_0_"+layer_id_str+".dat";
  	int count = 0;
  	float sum = 0;
  	FILE *f;
  	f = fopen(file_path.c_str(), "w");
  	while(!act_and_bn_to_pool_0.empty()){
  		ReluData0Type item = act_and_bn_to_pool_0.read();
  		data_t2 num[8];
  		for(int i=0; i<SIMD_LANE; i++){
  			num[i] = Reinterpret<data_t2>((ap_uint<32>)item((i+1)*32-1, 32*i));
  			fprintf(f, "%10f	", num[i]);
  			count++;
  			sum += num[i];
  		}
  		fprintf(f, "\n");
  	}
  		fprintf(f, "sum: %f\n", sum);
  		fprintf(f, "count: %d\n", count);
  	cout<<"sum: "<<sum<<endl;
  	cout<<"count: "<<count<<endl;
  	fclose(f);
  	exit(0);
  }
  #endif
  pool(
  		act_and_bn_to_pool_0, 
  		config_act_and_bn_to_pool,
  		pool_to_cout_write_0, 
  		config_pool_to_cout_write
  );
  #ifdef DEBUG_engine
  	cout << "passed pool" << endl;
  #endif
  #ifdef DEBUG_pool
  if(layer_id==TARGET_INST){
  	string prj_path = string(getenv("PRJ_PATH"));
  	string layer_id_str = to_string(layer_id);
  	string file_path = prj_path + "/data/test/pool_0_"+layer_id_str+".dat";
  	int count = 0;
  	float sum = 0;
  	FILE *f;
  	f = fopen(file_path.c_str(), "w");
  	while(!pool_to_cout_write_0.empty()){
  		ReluData0Type item = pool_to_cout_write_0.read();
  		data_t2 num[8];
  		for(int i=0; i<SIMD_LANE; i++){
  			num[i] = Reinterpret<data_t2>((ap_uint<32>)item((i+1)*32-1, 32*i));
  			fprintf(f, "%10f	", num[i]);
  			count++;
  			sum += num[i];
  		}
  		fprintf(f, "\n");
  	}
  		fprintf(f, "sum: %f\n", sum);
  		fprintf(f, "count: %d\n", count);
  	cout<<"sum: "<<sum<<endl;
  	cout<<"count: "<<count<<endl;
  	fclose(f);
  	exit(0);
  }
  #endif
  cout_write(
  		pool_to_cout_write_0, 
  		config_pool_to_cout_write,
  		global_cout 
  );
  #ifdef DEBUG_engine
  	cout << "passed cout_write" << endl;
  #endif
  #ifdef DEBUG_cout_write
  if(layer_id==TARGET_INST){
  	string prj_path = string(getenv("PRJ_PATH"));
  	string layer_id_str = to_string(layer_id);
  	fclose(f);
  	exit(0);
  }
  #endif
}
extern "C" {
	void top_kernel(
			bus_t0 *global_cin,
			bus_t0 *global_prev_cin,
			bus_t0 *global_cout,
			bus_t1 *global_weight,
			bus_t2 *global_bias,
			bus_t3 *layer_config,
			uint start_layer,
			uint end_layer
	){
	#pragma HLS INTERFACE m_axi port=global_cin offset=slave bundle=gmem1 depth=0
	#pragma HLS INTERFACE m_axi port=global_prev_cin offset=slave bundle=gmem3 depth=0
	#pragma HLS INTERFACE m_axi port=global_cout offset=slave bundle=gmem1 depth=826274
	#pragma HLS INTERFACE m_axi port=global_weight offset=slave bundle=gmem2 depth=34234
	#pragma HLS INTERFACE m_axi port=global_bias offset=slave bundle=gmem4 depth=1026
	#pragma HLS INTERFACE m_axi port=layer_config offset=slave bundle=gcontrol depth=2815

	#pragma HLS INTERFACE s_axilite port=global_cin bundle=control
	#pragma HLS INTERFACE s_axilite port=global_prev_cin bundle=control
	#pragma HLS INTERFACE s_axilite port=global_weight bundle=control
	#pragma HLS INTERFACE s_axilite port=global_bias bundle=control
	#pragma HLS INTERFACE s_axilite port=global_cout bundle=control
	#pragma HLS INTERFACE s_axilite port=layer_config bundle=control
	#pragma HLS INTERFACE s_axilite port=return bundle=control
	#define DEBUG_layer
			// Copy the first instruction
		unsigned int init_inst[5]; 	// [LAYERS]
		memcpy((void*)init_inst, (void*)(&layer_config[0]), sizeof(unsigned int) * 5);
		int layers = init_inst[0];

		int layer_num = layers;
		bus_t3 config[CONFIG_PARAMS * MAX_LAYER_BATCH];
		int cur_layer_batch = 1;
		int nxt_layer_batch = 1;
		int layer_id = start_layer;
		while(layer_id < end_layer){
			cur_layer_batch = nxt_layer_batch;

			memcpy((void*)config, (void*)(&layer_config[5 + CONFIG_PARAMS * layer_id]), sizeof(unsigned int) * CONFIG_PARAMS * cur_layer_batch);
			nxt_layer_batch = config[CONFIG_PARAMS * (cur_layer_batch - 1) + 29 - 1];
			config[29 - 1] = cur_layer_batch;
				// call engine module for each of the layers
			engine(global_cin, global_prev_cin, global_weight, global_bias, global_cout, config, layer_id);
			#ifdef DEBUG_layer
				cout << "Passed " << layer_id + 1 << endl;
			#endif
				//layer_id += cur_layer_batch;
			layer_id += 1;
		}
	}
}
